(undo-tree-save-format-version . 1)
"70108ffdbd60384b661c0126455d6f3433e60e2f"
[nil nil nil nil (26219 10317 447986 968000) 0 nil]
([nil nil ((9 . 11) (1 . 9) (#("#" 0 1 (fontified t)) . -1) (undo-tree-id0 . -1) 2 (1 . 2) (t 26219 10317 444675 933000)) nil (26219 10327 49258 886000) 0 nil])
([nil nil ((14 . 16) (13 . 15) (12 . 14) (11 . 12)) nil (26219 10327 49195 497000) 0 nil])
([nil nil ((18 . 19)) nil (26219 10327 49184 737000) 0 nil])
([nil nil ((24 . 25) (23 . 24) (#("-" 0 1 (fontified t)) . -23) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 24 (16 . 24) (14 . 16) (#(" " 0 1 (fontified nil)) . -14) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#(" " 0 1 (fontified t)) . 15) (t 26219 10327 57805 824000)) nil (26219 10331 907495 630000) 0 nil])
([nil nil ((1 . 4) (t 26219 10331 940566 153000)) nil (26219 10509 52304 816000) 0 nil])
([nil nil ((18 . 29) (#("rclcpp.hpp>" 0 11 (fontified nil c-in-sws t)) . -18) (undo-tree-id79 . -11) (18 . 29) (11 . 18) (#("rheader>" 0 1 (fontified nil c-in-sws t) 1 7 (c-in-sws t face font-lock-string-face fontified nil) 7 8 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 11) (undo-tree-id80 . -7) (undo-tree-id81 . -8) (undo-tree-id82 . 7) (undo-tree-id83 . -8) (11 . 12) (#("rclcpp/" 0 7 (fontified nil c-in-sws t)) . -11) (11 . 18) (#("rclc" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t)) . -11) (undo-tree-id84 . -3) (undo-tree-id85 . -4) (undo-tree-id86 . -4) 15 (11 . 15) (apply yas--snippet-revive 2 18 #s(yas--snippet nil (#s(yas--field 0 11 17 nil nil nil nil nil)) nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 11 17 nil nil nil nil nil)) nil 0 nil nil nil nil)) (2 . 18) (#("include <${0:header}>" 0 21 (fontified nil c-in-sws t)) . 2) (undo-tree-id87 . -21) (2 . 23) (#("i" 0 1 (fontified nil c-in-sws t)) . 2) (undo-tree-id88 . -1) (2 . 3) (#("include <header>" 0 16 (fontified nil c-in-sws t)) . -2) (undo-tree-id89 . -16) (2 . 18) (#("inc" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -2) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) 5 (2 . 5) (1 . 2)) nil (26219 10509 52289 941000) 0 nil])
([nil nil ((56 . 60) (55 . 56) (30 . 55) (#("rclcpp::memory_strategies" 0 1 (fontified nil c-is-sws t) 1 25 (fontified nil)) . -30) (30 . 55) (t 26219 10509 62488 28000)) nil (26219 10513 657309 642000) 0 nil])
([nil nil ((#("rclcpp::memory_strategies
" 0 1 (face font-lock-constant-face fontified t c-is-sws t) 1 6 (face font-lock-constant-face fontified t) 6 25 (fontified t) 25 26 (fontified t)) . 30) (undo-tree-id93 . -25) (undo-tree-id94 . -25) (undo-tree-id95 . -25) (undo-tree-id96 . -25) (undo-tree-id97 . -25) (undo-tree-id98 . -25) (undo-tree-id99 . -25) (undo-tree-id100 . -25) (undo-tree-id101 . -25) (undo-tree-id102 . -25) (undo-tree-id103 . -25) (undo-tree-id104 . -25) (undo-tree-id105 . -25) (undo-tree-id106 . -25) (undo-tree-id107 . -25) (undo-tree-id108 . -25) (undo-tree-id109 . -25) (undo-tree-id110 . -25) (undo-tree-id111 . -25) (undo-tree-id112 . -25) (undo-tree-id113 . -25) (undo-tree-id114 . -25) (undo-tree-id115 . -25) (undo-tree-id116 . -25) (undo-tree-id117 . -25) (undo-tree-id118 . -25) (undo-tree-id119 . -25) (undo-tree-id120 . -25) (undo-tree-id121 . 1) (undo-tree-id122 . -26) (undo-tree-id123 . -26) (undo-tree-id124 . -26) (undo-tree-id125 . -26) (undo-tree-id126 . -26) (undo-tree-id127 . -26) (undo-tree-id128 . -26) (undo-tree-id129 . -26) (undo-tree-id130 . -26) (undo-tree-id131 . -26) (undo-tree-id132 . -26) (undo-tree-id133 . -26) (undo-tree-id134 . -26) (undo-tree-id135 . -26) (undo-tree-id136 . -26) (undo-tree-id137 . -26) (undo-tree-id138 . -26) (undo-tree-id139 . -26) (undo-tree-id140 . -26) (undo-tree-id141 . -26) (undo-tree-id142 . -26) (undo-tree-id143 . -26) (undo-tree-id144 . -26) (undo-tree-id145 . -26) (undo-tree-id146 . -26) (undo-tree-id147 . -26) (undo-tree-id148 . -26) (undo-tree-id149 . -26) (undo-tree-id150 . -26) (undo-tree-id151 . -26) (undo-tree-id152 . -26) (undo-tree-id153 . -26) (undo-tree-id154 . -26) (undo-tree-id155 . -26) (undo-tree-id156 . -26) (undo-tree-id157 . -26) (undo-tree-id158 . -26) (undo-tree-id159 . -26) (undo-tree-id160 . -26) (undo-tree-id161 . -26) (undo-tree-id162 . -26) (undo-tree-id163 . -26) (undo-tree-id164 . -26) (undo-tree-id165 . -26) (undo-tree-id166 . -26) (undo-tree-id167 . -26) (undo-tree-id168 . -26) (undo-tree-id169 . -26) (undo-tree-id170 . -26) (undo-tree-id171 . -26) (undo-tree-id172 . -26) (undo-tree-id173 . -26) (undo-tree-id174 . -26) (undo-tree-id175 . -26)) nil (26219 10513 657292 560000) 0 nil])
([nil nil ((31 . 34) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 31) (undo-tree-id2132 . 4) (30 . 31) (t 26219 10513 666683 460000)) nil (26219 10760 209212 820000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-constant-face fontified t)) . -41) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -42) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -43) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -44) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -45) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -46) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -47) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -48) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -49) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -51) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -52) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -53) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -54) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (#("t" 0 1 (face font-lock-constant-face fontified nil)) . -55) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#("i" 0 1 (face font-lock-constant-face fontified nil)) . -56) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -57) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -58) (undo-tree-id2131 . -1) 59 (41 . 59) (40 . 41) (31 . 40)) nil (26219 10760 209024 157000) 0 nil])
([nil nil ((nil rear-nonsticky nil 58 . 59) (nil fontified nil 41 . 59) (41 . 59) 40) nil (26219 10760 205673 110000) 0 nil])
([nil nil ((62 . 64) (61 . 63) (60 . 62) (59 . 60)) nil (26219 10760 205669 263000) 0 nil])
([nil nil ((67 . 68) (66 . 68) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -66) (66 . 67)) nil (26219 10760 205665 605000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 66) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1)) nil (26219 10760 205660 716000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 66) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1)) nil (26219 10760 205625 24000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-warning-face fontified t)) . 66) (undo-tree-id176 . 1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1)) nil (26219 10760 205560 931000) 0 nil])
([nil nil ((66 . 67)) nil (26219 10760 205524 101000) 0 nil])
([nil nil ((127 . 131) (126 . 130) (125 . 127) (124 . 125) (1 . 28) (93 . 97) (#("N" 0 1 (fontified nil)) . 93) (93 . 94) (#("Node" 0 4 (fontified nil)) . -93) (93 . 97) (#("N" 0 1 (face font-lock-type-face fontified t)) . -93) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) 94 (93 . 94) (91 . 93) (85 . 91) (#("rcl" 0 3 (fontified nil)) . 85) (85 . 88) (#("rclcpp" 0 6 (fontified nil)) . -85) (85 . 91) (#("rcl" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . -85) (undo-tree-id2169 . -3) (undo-tree-id2170 . -3) 88 (85 . 88) (#("N" 0 1 (face font-lock-type-face fontified t)) . -85) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -86) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) 88 (84 . 88) (78 . 84) (#("pub" 0 3 (fontified nil)) . 78) (78 . 81) (#("public" 0 6 (fontified nil)) . -78) (78 . 84) (#("pub" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . -78) (undo-tree-id2177 . -3) (undo-tree-id2178 . -3) 81 (77 . 81) (76 . 77) (#(" " 0 1 (fontified t)) . -76) (undo-tree-id2179 . -1) 77 (70 . 77) (#("N" 0 1 (face font-lock-type-face fontified t)) . -70) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -71) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -72) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) 73 (64 . 73) (62 . 64) (#(" " 0 1 (fontified nil)) . -62) (undo-tree-id2186 . -1) (#(" " 0 1 (fontified t)) . 63) (t 26219 10760 249619 418000)) nil (26219 10833 322414 729000) 0 nil])
([nil nil ((127 . 129) (#("    " 0 4 (fontified t)) . 127) (undo-tree-id2162 . -4) 138 (apply yas--snippet-revive 131 138 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (131 . 138) (#("public:" 0 7 (fontified nil)) . 131) (131 . 138) (#("pu" 0 2 (fontified nil)) . 131) (131 . 133) (#("public:" 0 7 (fontified nil)) . -131) (131 . 138) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -131) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) 133 (131 . 133) (127 . 131) (#("   " 0 3 (fontified nil)) . -127) (undo-tree-id2165 . -3) (#(" " 0 1 (fontified t)) . 130)) nil (26219 10833 322360 603000) 0 nil])
([nil nil ((204 . 212) (#(" " 0 1 (fontified t)) . -204) (undo-tree-id2152 . -1) 205 (202 . 205) (28 . 63) (156 . 167) (#("N" 0 1 (fontified nil)) . 156) (156 . 157) (#("NodeOptions" 0 11 (fontified nil)) . -156) (156 . 167) (#("N" 0 1 (fontified t)) . -156) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) 157 (156 . 157) (154 . 156) (148 . 154) (#("rcl" 0 3 (fontified nil)) . 148) (148 . 151) (#("rclcpp" 0 6 (fontified nil)) . -148) (148 . 154) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -148) (undo-tree-id2156 . -3) (undo-tree-id2157 . -3) 151 (148 . 151) (147 . 149) (141 . 147) (#("P" 0 1 (fontified nil)) . 141) (141 . 142) (#("PraPub" 0 6 (fontified nil)) . -141) (141 . 147) (#("P" 0 1 (fontified t)) . -141) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) 142 (141 . 142) (#("N" 0 1 (fontified t)) . -141) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) 142 (141 . 142) (136 . 141)) nil (26219 10833 322340 498000) 0 nil])
([nil nil ((204 . 205)) nil (26219 10833 322308 788000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 212)) nil (26219 10833 322306 590000) 0 nil])
([nil nil ((242 . 243) (nil syntax-table nil 243 . 244) (nil syntax-table (1) 229 . 230) (229 . 230) (apply yas--snippet-revive 216 242 #s(yas--snippet nil (#s(yas--field 0 229 241 nil nil nil nil nil)) nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 229 241 nil nil nil nil nil)) nil 2 nil nil nil nil)) (216 . 242) (#("rclcpp::Node(${0:const Node &})" 0 31 (fontified nil)) . 216) (216 . 247) (#("rcl" 0 3 (fontified nil)) . 216) (216 . 219) (#("rclcpp::Node(const Node &)" 0 26 (fontified nil)) . -216) (216 . 242) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -216) (undo-tree-id2147 . -3) (undo-tree-id2148 . -3) 219 (216 . 219) (#("N" 0 1 (fontified t)) . -216) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) 217 (215 . 217) (214 . 215) (213 . 214) (#(" " 0 1 (fontified t)) . -213) (undo-tree-id2151 . -1) 214 (213 . 214)) nil (26219 10833 322300 36000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . 230) (undo-tree-id2145 . 6) (undo-tree-id2146 . -5)) nil (26219 10833 322280 237000) 0 nil])
([nil nil ((#("Node " 0 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 230) (undo-tree-id2143 . 5) (undo-tree-id2144 . -4)) nil (26219 10833 322273 762000) 0 nil])
([nil nil ((#("&" 0 1 (face font-lock-string-face fontified t)) . 230) (undo-tree-id2141 . 1) (undo-tree-id2142 . -1)) nil (26219 10833 322267 153000) 0 nil])
([nil nil ((230 . 237) (#("N" 0 1 (face font-lock-string-face fontified t)) . -230) (undo-tree-id2139 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -231) (undo-tree-id2140 . -1) 232 (230 . 232)) nil (26219 10833 322260 240000) 0 nil])
([nil nil ((240 . 247) (#("op" 0 2 (fontified nil)) . 240) (240 . 242) (#("options" 0 7 (fontified nil)) . -240) (240 . 247) (#("opti" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -240) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) 244 (242 . 244) (#("e" 0 1 (fontified t)) . -242) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) 243 (239 . 243) (238 . 239) (#("m" 0 1 (fontified t)) . -238) (undo-tree-id2138 . -1) 239 (238 . 239)) nil (26219 10833 322247 939000) 0 nil])
([nil nil ((251 . 257) (250 . 256) (249 . 251) (248 . 249)) nil (26219 10833 322214 196000) 0 nil])
([nil nil ((263 . 264)) nil (26219 10833 322202 997000) 0 nil])
([nil nil ((268 . 269) (t 26219 10833 363485 311000)) nil (26219 10839 266283 335000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -263) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) 264 (t 26219 10839 279821 33000)) nil (26219 10850 82563 792000) 0 nil])
([nil nil ((251 . 257) (#("    " 0 4 (fontified nil)) . -251) (undo-tree-id2413 . -4) (undo-tree-id2414 . -3) (undo-tree-id2415 . -3) (undo-tree-id2416 . -3) (undo-tree-id2417 . -3) (undo-tree-id2418 . -3) (undo-tree-id2419 . -3) (undo-tree-id2420 . -3) (undo-tree-id2421 . -4) (undo-tree-id2422 . -4) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (#("  " 0 2 (fontified t)) . 255)) nil (26219 10850 82539 648000) 0 nil])
([nil nil ((265 . 267) (#("    " 0 4 (fontified t)) . 265) (undo-tree-id2270 . -4) (undo-tree-id2271 . -4) (undo-tree-id2272 . -4) (undo-tree-id2273 . -4) (undo-tree-id2274 . -4) (undo-tree-id2275 . -4) (undo-tree-id2276 . -4) (undo-tree-id2277 . -4) (undo-tree-id2278 . -4) (undo-tree-id2279 . -4) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (undo-tree-id2282 . -4) (undo-tree-id2283 . -4) (undo-tree-id2284 . -4) (undo-tree-id2285 . -4) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (undo-tree-id2291 . -4) (undo-tree-id2292 . -4) (undo-tree-id2293 . -4) (undo-tree-id2294 . -4) (undo-tree-id2295 . -4) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) (undo-tree-id2298 . -4) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) (undo-tree-id2304 . -4) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) (undo-tree-id2307 . -4) (undo-tree-id2308 . -4) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4) (undo-tree-id2311 . -4) (undo-tree-id2312 . -4) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) 277 (apply yas--snippet-revive 269 277 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (269 . 277) (#("private:" 0 8 (fontified nil)) . 269) (269 . 277) (#("pri" 0 3 (fontified nil)) . 269) (269 . 272) (#("private:" 0 8 (fontified nil)) . -269) (269 . 277) (#("pri" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -269) (undo-tree-id2341 . -3) (undo-tree-id2342 . -3) (undo-tree-id2343 . -3) (undo-tree-id2344 . -3) (undo-tree-id2345 . -3) (undo-tree-id2346 . -3) (undo-tree-id2347 . -3) (undo-tree-id2348 . -3) (undo-tree-id2349 . -3) (undo-tree-id2350 . -3) (undo-tree-id2351 . -3) (undo-tree-id2352 . -3) (undo-tree-id2353 . -3) (undo-tree-id2354 . -3) (undo-tree-id2355 . -3) (undo-tree-id2356 . -3) (undo-tree-id2357 . -3) (undo-tree-id2358 . -3) (undo-tree-id2359 . -3) (undo-tree-id2360 . -3) (undo-tree-id2361 . -3) (undo-tree-id2362 . -3) (undo-tree-id2363 . -3) (undo-tree-id2364 . -3) (undo-tree-id2365 . -3) (undo-tree-id2366 . -3) (undo-tree-id2367 . -3) (undo-tree-id2368 . -3) (undo-tree-id2369 . -3) (undo-tree-id2370 . -3) (undo-tree-id2371 . -3) (undo-tree-id2372 . -3) (undo-tree-id2373 . -3) (undo-tree-id2374 . -3) (undo-tree-id2375 . -3) (undo-tree-id2376 . -3) (undo-tree-id2377 . -3) (undo-tree-id2378 . -3) (undo-tree-id2379 . -3) (undo-tree-id2380 . -3) (undo-tree-id2381 . -3) (undo-tree-id2382 . -3) (undo-tree-id2383 . -3) (undo-tree-id2384 . -3) (undo-tree-id2385 . -3) (undo-tree-id2386 . -3) (undo-tree-id2387 . -3) (undo-tree-id2388 . -3) (undo-tree-id2389 . -3) (undo-tree-id2390 . -3) (undo-tree-id2391 . -3) (undo-tree-id2392 . -3) (undo-tree-id2393 . -3) (undo-tree-id2394 . -3) (undo-tree-id2395 . -3) (undo-tree-id2396 . -3) (undo-tree-id2397 . -3) (undo-tree-id2398 . -3) (undo-tree-id2399 . -3) (undo-tree-id2400 . -3) (undo-tree-id2401 . -3) (undo-tree-id2402 . -3) (undo-tree-id2403 . -3) (undo-tree-id2404 . -3) (undo-tree-id2405 . -3) (undo-tree-id2406 . -3) (undo-tree-id2407 . -3) (undo-tree-id2408 . -3) (undo-tree-id2409 . -3) (undo-tree-id2410 . -3) (undo-tree-id2411 . -3) 272 (269 . 272) (265 . 269) (#("    " 0 4 (fontified nil)) . 264) (undo-tree-id2412 . -4) (263 . 269)) nil (26219 10850 82465 720000) 0 nil])
([nil nil ((253 . 259) (#("      " 0 6 (fontified nil)) . 252) (undo-tree-id2187 . -6) (undo-tree-id2188 . -6) (undo-tree-id2189 . -6) (undo-tree-id2190 . -6) (undo-tree-id2191 . -6) (undo-tree-id2192 . -6) (undo-tree-id2193 . -6) (undo-tree-id2194 . -6) (undo-tree-id2195 . -6) (undo-tree-id2196 . -6) (undo-tree-id2197 . -6) (undo-tree-id2198 . -6) (undo-tree-id2199 . -6) (undo-tree-id2200 . -6) (undo-tree-id2201 . -6) (undo-tree-id2202 . -6) (undo-tree-id2203 . -6) (undo-tree-id2204 . -6) (undo-tree-id2205 . -6) (undo-tree-id2206 . -6) (undo-tree-id2207 . -6) (undo-tree-id2208 . -6) (undo-tree-id2209 . -6) (undo-tree-id2210 . -6) (undo-tree-id2211 . -6) (undo-tree-id2212 . -6) (undo-tree-id2213 . -6) (undo-tree-id2214 . -6) (undo-tree-id2215 . -6) (undo-tree-id2216 . -6) (undo-tree-id2217 . -6) (undo-tree-id2218 . -6) (undo-tree-id2219 . -6) (undo-tree-id2220 . -6) (undo-tree-id2221 . -6) (undo-tree-id2222 . -6) (undo-tree-id2223 . -6) (undo-tree-id2224 . -6) (252 . 259) (#("      " 0 6 (fontified nil)) . 251) (undo-tree-id2225 . -6) (undo-tree-id2226 . -6) (undo-tree-id2227 . -6) (undo-tree-id2228 . -6) (undo-tree-id2229 . -6) (undo-tree-id2230 . -6) (undo-tree-id2231 . -6) (undo-tree-id2232 . -6) (undo-tree-id2233 . -6) (undo-tree-id2234 . -6) (undo-tree-id2235 . -6) (undo-tree-id2236 . -6) (undo-tree-id2237 . -6) (undo-tree-id2238 . -6) (undo-tree-id2239 . -6) (undo-tree-id2240 . -6) (undo-tree-id2241 . -6) (undo-tree-id2242 . -6) (undo-tree-id2243 . -6) (undo-tree-id2244 . -6) (undo-tree-id2245 . -6) (undo-tree-id2246 . -6) (undo-tree-id2247 . -6) (undo-tree-id2248 . -6) (undo-tree-id2249 . -6) (undo-tree-id2250 . -6) (undo-tree-id2251 . -6) (257 . 258) (251 . 257) (#("     " 0 5 (fontified nil)) . -251) (undo-tree-id2252 . -5) (undo-tree-id2253 . -5) (undo-tree-id2254 . -5) (undo-tree-id2255 . -5) (undo-tree-id2256 . -5) (undo-tree-id2257 . -5) (undo-tree-id2258 . -5) (undo-tree-id2259 . -5) (undo-tree-id2260 . -5) (undo-tree-id2261 . -5) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (#(" " 0 1 (fontified t)) . 256)) nil (26219 10850 81945 482000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -258) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (#("c" 0 1 (fontified t)) . -259) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) 260 (258 . 260) (#("r" 0 1 (fontified t)) . -258) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (#("c" 0 1 (fontified t)) . -259) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (#("l" 0 1 (fontified t)) . -260) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (#("c" 0 1 (fontified t)) . -261) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (#("p" 0 1 (fontified t)) . -262) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (#("p" 0 1 (fontified t)) . -263) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) 264 (258 . 264) (252 . 258) (t 26219 10850 124394 129000)) nil (26219 10899 627523 355000) 0 nil])
([nil nil ((339 . 344) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 339) (338 . 339) (63 . 95) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 338 338 nil nil nil t nil)) nil 4 nil #s(yas--field 1 338 338 nil nil nil t nil) nil nil)) (296 . 324) (#("Publisher<${1:typename MessageT}>" 0 33 (fontified nil)) . 296) (296 . 329) (#("P" 0 1 (fontified nil)) . 296) (296 . 297) (#("Publisher<typename MessageT, typename AllocatorT>" 0 9 (fontified nil) 9 10 (fontified nil category c-<-as-paren-syntax) 10 27 (fontified nil) 27 28 (fontified nil c-type c-<>-arg-sep) 28 48 (fontified nil) 48 49 (fontified nil category c->-as-paren-syntax)) . -296) (296 . 345) (#("Pub" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -296) (undo-tree-id2883 . -3) (undo-tree-id2884 . -3) (undo-tree-id2885 . -3) 299 (296 . 299) (284 . 288) (#("  " 0 2 (fontified nil)) . 284) (293 . 294) (284 . 286) (#("    " 0 4 (fontified nil)) . 284) (294 . 295) (288 . 294) (#("p" 0 1 (fontified t)) . -288) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (#("u" 0 1 (fontified t)) . -289) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) 290 (288 . 290) (283 . 288)) nil (26219 10899 627484 146000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 338) (undo-tree-id2882 . -2)) nil (26219 10899 627465 524000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 338) (undo-tree-id2881 . -1)) nil (26219 10899 627462 359000) 0 nil])
([nil nil ((#("ms" 0 1 (fontified t) 1 2 (fontified t)) . 338) (undo-tree-id2880 . -1)) nil (26219 10899 627457 997000) 0 nil])
([nil nil ((apply yas--snippet-revive 328 339 #s(yas--snippet nil (#s(yas--field 1 338 338 nil nil nil t nil)) nil 4 nil #s(yas--field 1 338 338 nil nil nil t nil) nil nil))) nil (26219 10899 627454 638000) 0 nil])
([nil nil ((147 . 158) (#("s" 0 1 (fontified nil c-in-sws t)) . 147) (147 . 148) (#("string.hpp>" 0 11 (fontified nil c-in-sws t)) . -147) (147 . 158) (#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -147) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) 148 (147 . 148) (#("S" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -147) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) 148 (147 . 148) (143 . 147) (#("m" 0 1 (fontified nil c-in-sws t)) . 143) (143 . 144) (#("msg/" 0 4 (fontified nil c-in-sws t)) . -143) (143 . 147) (#("ms" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -143) (undo-tree-id2600 . -1) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -2) (undo-tree-id2670 . -2) (undo-tree-id2671 . -2) (undo-tree-id2672 . -2) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2) (undo-tree-id2677 . -2) (undo-tree-id2678 . -2) (undo-tree-id2679 . -2) (undo-tree-id2680 . -2) (undo-tree-id2681 . -2) (undo-tree-id2682 . -2) (undo-tree-id2683 . -2) (undo-tree-id2684 . -2) (undo-tree-id2685 . -2) (undo-tree-id2686 . -2) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -2) (undo-tree-id2690 . -2) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) (undo-tree-id2693 . -2) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) 145 (143 . 145) (134 . 143) (#("stheader>" 0 2 (fontified nil c-in-sws t) 2 8 (c-in-sws t face font-lock-string-face fontified nil) 8 9 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 134) (undo-tree-id2704 . -8) (undo-tree-id2705 . 7) (134 . 136) (#("std_msgs/" 0 9 (fontified nil c-in-sws t)) . -134) (134 . 143) (#("std" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -134) (undo-tree-id2706 . -3) (undo-tree-id2707 . -3) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -2) (undo-tree-id2718 . -2) (undo-tree-id2719 . -2) (undo-tree-id2720 . -2) (undo-tree-id2721 . -2) (undo-tree-id2722 . -2) (undo-tree-id2723 . -2) (undo-tree-id2724 . -2) (undo-tree-id2725 . -2) (undo-tree-id2726 . -2) (undo-tree-id2727 . -2) (undo-tree-id2728 . -2) (undo-tree-id2729 . -2) (undo-tree-id2730 . -2) (undo-tree-id2731 . -2) (undo-tree-id2732 . -2) (undo-tree-id2733 . -2) (undo-tree-id2734 . -2) (undo-tree-id2735 . -2) (undo-tree-id2736 . -2) (undo-tree-id2737 . -2) (undo-tree-id2738 . -2) (undo-tree-id2739 . -2) (undo-tree-id2740 . -2) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (undo-tree-id2743 . -2) (undo-tree-id2744 . -2) (undo-tree-id2745 . -2) (undo-tree-id2746 . -2) (undo-tree-id2747 . -2) (undo-tree-id2748 . -2) (undo-tree-id2749 . -2) (undo-tree-id2750 . -2) (undo-tree-id2751 . -2) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (undo-tree-id2756 . -2) (undo-tree-id2757 . -2) (undo-tree-id2758 . -2) (undo-tree-id2759 . -2) (undo-tree-id2760 . -2) (undo-tree-id2761 . -2) (undo-tree-id2762 . -2) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) (undo-tree-id2767 . -2) (undo-tree-id2768 . -2) (undo-tree-id2769 . -2) (undo-tree-id2770 . -2) (undo-tree-id2771 . -2) (undo-tree-id2772 . -2) (undo-tree-id2773 . -2) (undo-tree-id2774 . -2) (undo-tree-id2775 . -2) (undo-tree-id2776 . -2) (undo-tree-id2777 . -2) (undo-tree-id2778 . -2) (undo-tree-id2779 . -2) (undo-tree-id2780 . -2) (undo-tree-id2781 . -2) (undo-tree-id2782 . -2) (undo-tree-id2783 . -2) (undo-tree-id2784 . -2) (undo-tree-id2785 . -2) (undo-tree-id2786 . -2) (undo-tree-id2787 . -2) (undo-tree-id2788 . -2) (undo-tree-id2789 . -2) (undo-tree-id2790 . -2) (undo-tree-id2791 . -3) (undo-tree-id2792 . -3) (undo-tree-id2793 . -3) (undo-tree-id2794 . -3) (undo-tree-id2795 . -3) (undo-tree-id2796 . -3) (undo-tree-id2797 . -3) (undo-tree-id2798 . -3) (undo-tree-id2799 . -3) (undo-tree-id2800 . -3) (undo-tree-id2801 . -3) (undo-tree-id2802 . -3) (undo-tree-id2803 . -3) (undo-tree-id2804 . -3) (undo-tree-id2805 . -3) (undo-tree-id2806 . -3) (undo-tree-id2807 . -3) (undo-tree-id2808 . -3) (undo-tree-id2809 . -3) (undo-tree-id2810 . -3) (undo-tree-id2811 . -3) (undo-tree-id2812 . -3) (undo-tree-id2813 . -3) (undo-tree-id2814 . -3) (undo-tree-id2815 . -3) (undo-tree-id2816 . -3) (undo-tree-id2817 . -3) (undo-tree-id2818 . -3) (undo-tree-id2819 . -3) (undo-tree-id2820 . -3) (undo-tree-id2821 . -3) (undo-tree-id2822 . -3) (undo-tree-id2823 . -3) (undo-tree-id2824 . -3) (undo-tree-id2825 . -3) (undo-tree-id2826 . -3) (undo-tree-id2827 . -3) (undo-tree-id2828 . -3) (undo-tree-id2829 . -3) (undo-tree-id2830 . -3) (undo-tree-id2831 . -3) (undo-tree-id2832 . -3) (undo-tree-id2833 . -3) (undo-tree-id2834 . -3) (undo-tree-id2835 . -3) (undo-tree-id2836 . -3) (undo-tree-id2837 . -3) (undo-tree-id2838 . -3) (undo-tree-id2839 . -3) (undo-tree-id2840 . -3) (undo-tree-id2841 . -3) (undo-tree-id2842 . -3) (undo-tree-id2843 . -3) (undo-tree-id2844 . -3) (undo-tree-id2845 . -3) (undo-tree-id2846 . -3) (undo-tree-id2847 . -3) (undo-tree-id2848 . -3) (undo-tree-id2849 . -3) (undo-tree-id2850 . -3) (undo-tree-id2851 . -3) (undo-tree-id2852 . -3) (undo-tree-id2853 . -3) (undo-tree-id2854 . -3) (undo-tree-id2855 . -3) (undo-tree-id2856 . -3) (undo-tree-id2857 . -3) (undo-tree-id2858 . -3) (undo-tree-id2859 . -3) (undo-tree-id2860 . -3) (undo-tree-id2861 . -3) (undo-tree-id2862 . -3) (undo-tree-id2863 . -3) (undo-tree-id2864 . -3) (undo-tree-id2865 . -3) (undo-tree-id2866 . -3) (undo-tree-id2867 . -3) (undo-tree-id2868 . -3) (undo-tree-id2869 . -3) (undo-tree-id2870 . -3) 137 (134 . 137) (apply yas--snippet-revive 125 141 #s(yas--snippet nil (#s(yas--field 0 134 140 nil nil nil nil nil)) nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 134 140 nil nil nil nil nil)) nil 5 nil nil nil nil)) (125 . 141) (#("include <${0:header}>" 0 21 (c-in-sws t fontified nil)) . 125) (undo-tree-id2871 . -21) (125 . 146) (#("i" 0 1 (fontified nil c-in-sws t)) . 125) (undo-tree-id2872 . -1) (125 . 126) (#("include <header>" 0 8 (c-in-sws t fontified nil) 8 9 (c-in-sws t fontified nil category c-<-as-paren-syntax) 9 15 (c-in-sws t fontified nil) 15 16 (c-in-sws t fontified nil category c->-as-paren-syntax)) . -125) (undo-tree-id2873 . -16) (125 . 141) (#("ic" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -125) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) 127 (#("n" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -127) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) 128 (125 . 128) (124 . 125)) nil (26219 10899 627410 111000) 0 nil])
([nil nil ((158 . 159)) nil (26219 10899 626480 222000) 0 nil])
([nil nil ((124 . 174) (388 . 394) (#("String" 0 6 (fontified nil)) . -388) (388 . 394) (386 . 388) (383 . 386) (#("msg" 0 3 (fontified nil)) . -383) (383 . 386) (381 . 383) (#("/" 0 1 (fontified t)) . -381) (undo-tree-id3141 . -1) 382 (381 . 382) (nil fontified nil 373 . 381) (nil face (rainbow-delimiters-depth-3-face) 373 . 381) (373 . 381) (#("std_msgs" 0 8 (fontified nil)) . 373) (nil fontified nil 373 . 381) (nil face (rainbow-delimiters-depth-3-face) 373 . 381) (373 . 381) (#("std_msgs" 0 8 (fontified t)) . -373) (undo-tree-id3142 . -8) (undo-tree-id3143 . -8) 381 (nil fontified nil 373 . 381) (nil face (rainbow-delimiters-depth-3-face) 373 . 381) (373 . 381) (#("std" 0 3 (fontified nil)) . 373) (nil fontified nil 373 . 376) (nil face (rainbow-delimiters-depth-3-face) 373 . 376) (373 . 376) (#("std_msgs" 0 8 (fontified nil)) . -373) (nil fontified nil 373 . 381) (nil face (rainbow-delimiters-depth-3-face) 373 . 381) (373 . 381) (#("std_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -373) (undo-tree-id3144 . -3) (undo-tree-id3145 . -4) (undo-tree-id3146 . -4) 377 (373 . 377) (#("s" 0 1 (fontified t)) . -373) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (#("t" 0 1 (fontified t)) . -374) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) 375 (373 . 375) (t 26219 10899 642423 184000)) nil (26219 10959 720909 655000) 0 nil])
([nil nil ((466 . 467) (453 . 466) (#("p" 0 1 (fontified t)) . -453) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (#("t" 0 1 (fontified t)) . -454) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) 455 (447 . 455) (445 . 447) (#(" " 0 1 (fontified t)) . -445) (undo-tree-id3140 . -1) 446 (445 . 446)) nil (26219 10959 720866 336000) 0 nil])
([nil nil ((534 . 535) (528 . 534) (519 . 528) (#("SharedPtr" 0 9 (fontified nil)) . -519) (519 . 528) (#("S" 0 1 (fontified t)) . -519) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) 520 (#("A" 0 1 (fontified t)) . -520) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) 521 (519 . 521) (517 . 519) (124 . 152) (480 . 489) (#("T" 0 1 (fontified nil)) . 480) (480 . 481) (#("TimerBase" 0 9 (fontified nil)) . -480) (480 . 489) (#("Ti" 0 1 (fontified t) 1 2 (fontified t)) . -480) (undo-tree-id3015 . -2) (undo-tree-id3016 . -2) 482 (480 . 482) (468 . 472) (#("  " 0 2 (fontified nil)) . 468) (477 . 478) (468 . 470) (#("    " 0 4 (fontified nil)) . 468) (undo-tree-id3017 . -4) (undo-tree-id3018 . -4) (478 . 479) (472 . 478) (#("rclc" 0 4 (fontified nil)) . 472) (472 . 476) (#("rclcpp" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -472) (undo-tree-id3019 . -6) (undo-tree-id3020 . -6) (undo-tree-id3021 . -6) 478 (472 . 478) (467 . 472)) nil (26219 10959 720396 893000) 0 nil])
([nil nil ((486 . 489) (485 . 487) (1 . 19) (455 . 467) (#("m" 0 1 (fontified nil)) . 455) (455 . 456) (#("microseconds" 0 12 (fontified nil)) . -455) (455 . 467) (#("mi" 0 1 (fontified t) 1 2 (fontified t)) . -455) (undo-tree-id3167 . -2) (undo-tree-id3168 . -2) 457 (455 . 457) (453 . 455) (447 . 453) (#("ch" 0 2 (fontified nil)) . 447) (447 . 449) (#("chrono" 0 6 (fontified nil)) . -447) (447 . 453) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -447) (undo-tree-id3169 . -2) (undo-tree-id3170 . -2) (undo-tree-id3171 . -2) 449 (447 . 449) (445 . 447) (442 . 445) (apply yas--snippet-revive 424 443 #s(yas--snippet nil nil #s(yas--exit 442 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 442 nil) 6 nil nil nil nil)) (424 . 443) (#("create_wall_timer($0)" 0 21 (fontified nil)) . 424) (424 . 445) (#("create_wall_timer(std::chrono::duration<DurationRepT, DurationT> period, CallbackT callback, rclcpp::CallbackGroup::SharedPtr group)" 0 39 (fontified nil) 39 40 (fontified nil category c-<-as-paren-syntax) 40 52 (fontified nil) 52 53 (fontified nil c-type c-<>-arg-sep) 53 63 (fontified nil) 63 64 (fontified nil category c->-as-paren-syntax) 64 132 (fontified nil)) . -424) (424 . 556) (#("cre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -424) (undo-tree-id3172 . -3) (undo-tree-id3173 . -3) 427 (424 . 427) (423 . 424) (415 . 423) (410 . 415) (#("ti" 0 2 (fontified nil)) . 410) (410 . 412) (#("timer" 0 5 (fontified nil)) . -410) (410 . 415) (#("ti" 0 1 (fontified t) 1 2 (fontified t)) . -410) (undo-tree-id3174 . -2) (undo-tree-id3175 . -2) 412 (410 . 412) (#("t" 0 1 (fontified t)) . -410) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (#("i" 0 1 (fontified t)) . -411) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (#("m" 0 1 (fontified t)) . -412) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (#("e" 0 1 (fontified t)) . -413) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (#("r" 0 1 (fontified t)) . -414) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (#("-" 0 1 (fontified t)) . -415) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (#(">" 0 1 (fontified t)) . -416) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) 417 (416 . 417) (415 . 416) (410 . 415) (#("tim" 0 3 (fontified nil)) . 410) (410 . 413) (#("timer" 0 5 (fontified nil)) . -410) (410 . 415) (#("tim" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -410) (undo-tree-id3190 . -3) (undo-tree-id3191 . -3) 413 (410 . 413) (#("p" 0 1 (fontified t)) . -410) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (#("u" 0 1 (fontified t)) . -411) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) 412 (410 . 412) (404 . 410) (#("     " 0 5 (fontified nil)) . -404) (undo-tree-id3196 . -5) (#(" " 0 1 (fontified t)) . 409) (t 26219 10959 763931 362000)) nil (26219 11043 388884 15000) 0 nil])
([nil nil ((490 . 501)) nil (26219 11043 388812 938000) 0 nil])
([nil nil ((491 . 502) (490 . 491)) nil (26219 11043 388810 790000) 0 nil])
([nil nil ((514 . 515)) nil (26219 11043 388808 505000) 0 nil])
([nil nil ((492 . 502) (#("				     " 0 9 (fontified nil)) . -492) (undo-tree-id3166 . -9) (#(" " 0 1 (fontified t)) . 501)) nil (26219 11043 388805 628000) 0 nil])
([nil nil ((534 . 535) (apply yas--snippet-revive 529 535 #s(yas--snippet nil nil #s(yas--exit 534 nil) 7 nil nil nil nil)) (19 . 41) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 534 nil) 7 nil nil nil nil)) (507 . 513) (#("bind($0)" 0 8 (fontified nil)) . 507) (507 . 515) (#("b" 0 1 (fontified nil)) . 507) (507 . 508) (#("bind(…)" 0 7 (fontified nil)) . -507) (507 . 514) (#("bind" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -507) (undo-tree-id3157 . -4) (undo-tree-id3158 . -4) (undo-tree-id3159 . -4) 511 (507 . 511) (505 . 507) (502 . 505) (492 . 502) (#("				    " 0 8 (fontified nil)) . -492) (undo-tree-id3160 . -8) (undo-tree-id3161 . -8) (undo-tree-id3162 . -8) (undo-tree-id3163 . -8) (undo-tree-id3164 . -8) (#("  " 0 2 (fontified t)) . 500) (undo-tree-id3165 . 1)) nil (26219 11043 388795 650000) 0 nil])
([nil nil ((551 . 556) (550 . 551) (547 . 550) (#("," 0 1 (fontified t)) . -547) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) 548 (547 . 548) (543 . 547) (541 . 543) (535 . 541) (#("P" 0 1 (fontified nil)) . 535) (535 . 536) (#("PraPub" 0 6 (fontified nil)) . -535) (535 . 541) (#("P" 0 1 (fontified t)) . -535) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) 536 (535 . 536)) nil (26219 11053 335396 524000) 0 nil])
([nil nil ((#("				      " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 558) (undo-tree-id3312 . -9) (undo-tree-id3313 . -10) (undo-tree-id3314 . -10) (undo-tree-id3315 . -10) (undo-tree-id3316 . -10) (undo-tree-id3317 . -10) (undo-tree-id3318 . -10) (undo-tree-id3319 . -10) (undo-tree-id3320 . -10) (undo-tree-id3321 . -10) (undo-tree-id3322 . -10) (undo-tree-id3323 . -10) (undo-tree-id3324 . -10) (undo-tree-id3325 . -10) (undo-tree-id3326 . -10) (undo-tree-id3327 . -10) (undo-tree-id3328 . -10) (undo-tree-id3329 . -10) (undo-tree-id3330 . -10) (undo-tree-id3331 . -10) (undo-tree-id3332 . -10) (undo-tree-id3333 . -10) (undo-tree-id3334 . -10) (undo-tree-id3335 . -10) (undo-tree-id3336 . -10) (undo-tree-id3337 . -10) (undo-tree-id3338 . -10) (undo-tree-id3339 . -10) (undo-tree-id3340 . -10) (undo-tree-id3341 . -10) (undo-tree-id3342 . -10) (undo-tree-id3343 . -10) (undo-tree-id3344 . -10) (undo-tree-id3345 . -10) (undo-tree-id3346 . -10) (undo-tree-id3347 . -10) (undo-tree-id3348 . -10) (undo-tree-id3349 . -10) (undo-tree-id3350 . -10) (undo-tree-id3351 . -10) (undo-tree-id3352 . -10) (undo-tree-id3353 . -10) (undo-tree-id3354 . -10) (undo-tree-id3355 . -10) (undo-tree-id3356 . -10) (undo-tree-id3357 . -10) (undo-tree-id3358 . -10) (undo-tree-id3359 . -10) (undo-tree-id3360 . -10) (undo-tree-id3361 . -10) (undo-tree-id3362 . -10) (undo-tree-id3363 . -10) (undo-tree-id3364 . -10) (undo-tree-id3365 . -10) (undo-tree-id3366 . -10) (undo-tree-id3367 . -10) (undo-tree-id3368 . -10) (undo-tree-id3369 . -10) (undo-tree-id3370 . -10) (undo-tree-id3371 . -10) (undo-tree-id3372 . -10) (undo-tree-id3373 . -10) (undo-tree-id3374 . -10) (undo-tree-id3375 . -10) (undo-tree-id3376 . -10) (undo-tree-id3377 . -10) (t 26219 11043 436966 619000)) nil (26219 11058 488577 229000) 0 nil] [nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -556) (undo-tree-id3197 . 1) (undo-tree-id3198 . 1) (undo-tree-id3199 . -1) (#("
" 0 1 (fontified t)) . -557) (undo-tree-id3200 . 1) (undo-tree-id3201 . -1) (#(" " 0 1 (fontified t)) . -558) (undo-tree-id3202 . -1) (#(" " 0 1 (fontified t)) . -559) (undo-tree-id3203 . -1) (#(" " 0 1 (fontified t)) . -560) (undo-tree-id3204 . -1) (#(" " 0 1 (fontified t)) . -561) (undo-tree-id3205 . -1) (#(" " 0 1 (fontified t)) . -562) (undo-tree-id3206 . -1) (#(" " 0 1 (fontified t)) . -563) (undo-tree-id3207 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id3208 . -1) (#(" " 0 1 (fontified nil)) . -565) (undo-tree-id3209 . -1) (#("	" 0 1 (fontified nil)) . 566) (undo-tree-id3210 . -1) (558 . 566) 559 (#(" " 0 1 (fontified t)) . -559) (undo-tree-id3211 . -1) (#(" " 0 1 (fontified t)) . -560) (undo-tree-id3212 . -1) (#(" " 0 1 (fontified t)) . -561) (undo-tree-id3213 . -1) (#(" " 0 1 (fontified t)) . -562) (undo-tree-id3214 . -1) (#(" " 0 1 (fontified t)) . -563) (undo-tree-id3215 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id3216 . -1) (#(" " 0 1 (fontified t)) . -565) (undo-tree-id3217 . -1) (#(" " 0 1 (fontified nil)) . -566) (undo-tree-id3218 . -1) (#("	" 0 1 (fontified nil)) . 567) (undo-tree-id3219 . -1) (559 . 567) 560 (#(" " 0 1 (fontified t)) . -560) (undo-tree-id3220 . -1) 561 (#(" " 0 1 (fontified t)) . -561) (undo-tree-id3221 . -1) (#(" " 0 1 (fontified t)) . -562) (undo-tree-id3222 . -1) (#(" " 0 1 (fontified t)) . -563) (undo-tree-id3223 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id3224 . -1) (#(" " 0 1 (fontified nil)) . -565) (undo-tree-id3225 . -1) (#(" " 0 1 (fontified nil)) . -566) (undo-tree-id3226 . -1) (#(" " 0 1 (fontified nil)) . -567) (undo-tree-id3227 . -1) (#("	" 0 1 (fontified nil)) . 568) (undo-tree-id3228 . -1) (560 . 568) 561 (#(" " 0 1 (fontified t)) . -561) (undo-tree-id3229 . -1) (#(" " 0 1 (fontified t)) . -562) (undo-tree-id3230 . -1) (#(" " 0 1 (fontified t)) . -563) (undo-tree-id3231 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id3232 . -1) (#(" " 0 1 (fontified t)) . -565) (undo-tree-id3233 . -1) (#(" " 0 1 (fontified t)) . -566) (undo-tree-id3234 . -1) (#(" " 0 1 (fontified t)) . -567) (undo-tree-id3235 . -1) (#(" " 0 1 (fontified nil)) . -568) (undo-tree-id3236 . -1) (#("	" 0 1 (fontified nil)) . 569) (undo-tree-id3237 . -1) (561 . 569) 562 (#(" " 0 1 (fontified t)) . -562) (undo-tree-id3238 . -1) (#(" " 0 1 (fontified t)) . -563) (undo-tree-id3239 . -1) (#(" " 0 1 (fontified t)) . -564) (undo-tree-id3240 . -1) (#(" " 0 1 (fontified t)) . -565) (undo-tree-id3241 . -1) (#(" " 0 1 (fontified t)) . -566) (undo-tree-id3242 . -1) (#(" " 0 1 (fontified t)) . -567) (undo-tree-id3243 . -1) 568 (t 26219 11043 436966 619000)) ((562 . 568) (#("        " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 561) (561 . 570) (#("        " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 560) (560 . 569) (#("        " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 559) (559 . 568) (#("        " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 558) (556 . 567)) (26219 11053 241974 949000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -557) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . 1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) 558) nil (26219 11058 488477 702000) 0 nil])
nil
([nil nil ((594 . 596) (582 . 594) (577 . 582) (t 26219 11058 529067 349000)) nil (26219 11074 769564 377000) 0 nil])
([nil nil ((597 . 599) (596 . 597)) nil (26219 11074 769552 282000) 0 nil])
([nil nil ((517 . 518) (apply yas--snippet-revive 461 517 #s(yas--snippet nil (#s(yas--field 1 478 499 nil nil nil t #s(yas--field 2 501 512 nil nil nil t #s(yas--field 3 514 516 nil nil nil t nil))) #s(yas--field 2 501 512 nil nil nil t #s(yas--field 3 514 516 nil nil nil t nil)) #s(yas--field 3 514 516 nil nil nil t nil)) nil 8 nil #s(yas--field 3 514 516 nil nil nil t nil) nil nil)) (515 . 516) (#("const rclcpp::QoS &qos" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 22 (face font-lock-variable-name-face fontified nil)) . 515) (undo-tree-id3378 . -22) (undo-tree-id3379 . -5) (514 . 515) (502 . 511) (#("t" 0 1 (face font-lock-string-face fontified t)) . -502) (undo-tree-id3380 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -503) (undo-tree-id3381 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -504) (undo-tree-id3382 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -505) (undo-tree-id3383 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -506) (undo-tree-id3384 . -1) 507 (503 . 507) (#("i" 0 1 (face font-lock-string-face fontified t)) . -503) (undo-tree-id3385 . -1) 504 (502 . 504) (502 . 503) (nil syntax-table nil 527 . 528) (nil syntax-table (1) 501 . 502) (501 . 502) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -501) (undo-tree-id3386 . -1) (nil syntax-table nil 527 . 528) (nil syntax-table (1) 501 . 502) (#("const std::string &topic_name" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil) 11 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified nil) 17 19 (fontified nil) 19 29 (face font-lock-variable-name-face fontified nil)) . 502) (undo-tree-id3387 . -29) (nil syntax-table nil 556 . 557) (nil syntax-table (1) 501 . 502) (501 . 502) (493 . 499) (#("String" 0 6 (fontified nil)) . -493) (undo-tree-id3388 . -6) (493 . 499) (491 . 493) (488 . 491) (#("ms" 0 2 (fontified nil)) . 488) (undo-tree-id3389 . -2) (488 . 490) (#("msg" 0 3 (fontified nil)) . -488) (undo-tree-id3390 . -3) (488 . 491) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -488) (undo-tree-id3391 . -2) (undo-tree-id3392 . -2) (undo-tree-id3393 . -2) 490 (488 . 490) (486 . 488) (nil fontified nil 478 . 486) (nil face (rainbow-delimiters-depth-4-face) 478 . 486) (478 . 486) (#("std" 0 3 (fontified nil)) . 478) (undo-tree-id3394 . -3) (nil fontified nil 478 . 481) (nil face (rainbow-delimiters-depth-4-face) 478 . 481) (478 . 481) (#("std_msgs" 0 8 (fontified nil)) . -478) (undo-tree-id3395 . -8) (nil fontified nil 478 . 486) (nil face (rainbow-delimiters-depth-4-face) 478 . 486) (478 . 486) (#("std_m" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -478) (undo-tree-id3396 . -3) (undo-tree-id3397 . -5) (undo-tree-id3398 . -5) (undo-tree-id3399 . -5) 483 (479 . 483) (#("typename MessageT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 479) (undo-tree-id3400 . -17) (478 . 479) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 478 499 nil nil nil t #s(yas--field 2 501 512 nil nil nil t #s(yas--field 3 514 516 nil nil nil t nil))) #s(yas--field 2 501 512 nil nil nil t #s(yas--field 3 514 516 nil nil nil t nil)) #s(yas--field 3 514 516 nil nil nil t nil)) nil 8 nil #s(yas--field 3 514 516 nil nil nil t nil) nil nil)) (461 . 551) (#("create_publisher<${1:typename MessageT}>(${2:const std::string &topic_name}, ${3:const rclcpp::QoS &qos})" 0 105 (fontified nil)) . 461) (461 . 566) (#("create_publisher<typename MessageT>(const std::string &topic_name, const rclcpp::QoS &qos, const PublisherOptionsWithAllocator<AllocatorT> &options = PublisherOptionsWithAllocator<AllocatorT>())" 0 16 (fontified nil) 16 17 (fontified nil category c-<-as-paren-syntax) 17 34 (fontified nil) 34 35 (fontified nil category c->-as-paren-syntax) 35 126 (fontified nil) 126 127 (fontified nil category c-<-as-paren-syntax) 127 137 (fontified nil) 137 138 (fontified nil category c->-as-paren-syntax) 138 179 (fontified nil) 179 180 (fontified nil category c-<-as-paren-syntax) 180 190 (fontified nil) 190 191 (fontified nil category c->-as-paren-syntax) 191 194 (fontified nil)) . -461) (461 . 655) (#("crea" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -461) (undo-tree-id3401 . -4) (undo-tree-id3402 . -4) 465 (461 . 465) (460 . 461) (452 . 460) (#("-" 0 1 (fontified t)) . -452) (undo-tree-id3403 . -1) 453 (452 . 453) (443 . 452) (#("pu" 0 2 (fontified nil)) . 443) (443 . 445) (#("publisher" 0 9 (fontified nil)) . -443) (443 . 452) (#("pub" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -443) (undo-tree-id3404 . -3) (undo-tree-id3405 . -3) 446 (443 . 446) (437 . 443) (#("     " 0 5 (fontified nil)) . -437) (undo-tree-id3406 . -5) (#(" " 0 1 (fontified t)) . 442) (t 26219 11074 813154 516000)) nil (26219 11111 787064 627000) 0 nil])
([nil nil ((438 . 444) (#("      " 0 6 (fontified nil)) . 437) (undo-tree-id3415 . -6) (437 . 444) (#("      " 0 6 (fontified nil)) . 436) (undo-tree-id3416 . -6) (442 . 443) (436 . 442) (t 26219 11111 805282 904000)) nil (26219 11165 460149 259000) 0 nil])
([nil nil ((464 . 465) (462 . 464) (460 . 462) (454 . 460) (#("rcl" 0 3 (fontified nil)) . 454) (454 . 457) (#("rclcpp" 0 6 (fontified nil)) . -454) (454 . 460) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -454) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) 457 (443 . 457) (437 . 443)) nil (26219 11165 460137 8000) 0 nil])
([nil nil ((#("      auto qos = rclcpp::QOS
" 0 6 (fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 23 (face font-lock-constant-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t)) . 437) (undo-tree-id3407 . 1) (undo-tree-id3408 . -28) (undo-tree-id3409 . -10) (undo-tree-id3410 . -28) (undo-tree-id3411 . -27) (undo-tree-id3412 . 1) 464) nil (26219 11165 460121 126000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -682) (undo-tree-id3563 . -6) (undo-tree-id3564 . -6) (undo-tree-id3565 . -6) (undo-tree-id3566 . -6) (undo-tree-id3567 . -6) (undo-tree-id3568 . -6) (undo-tree-id3569 . -6) (undo-tree-id3570 . -6) 688 (682 . 688) (#("      " 0 6 (fontified nil)) . 681) (undo-tree-id3571 . -6) (681 . 688) (680 . 686) (t 26219 11165 481338 340000)) nil (26219 11188 811664 175000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -687) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (#("w" 0 1 (fontified t)) . -688) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (#("
" 0 1 (fontified t)) . -689) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (#(" " 0 1 (fontified t)) . -690) (undo-tree-id3554 . -1) (#(" " 0 1 (fontified t)) . -691) (undo-tree-id3555 . -1) (#(" " 0 1 (fontified t)) . -692) (undo-tree-id3556 . -1) (#(" " 0 1 (fontified t)) . -693) (undo-tree-id3557 . -1) (#(" " 0 1 (fontified t)) . -694) (undo-tree-id3558 . -1) (#(" " 0 1 (fontified t)) . -695) (undo-tree-id3559 . -1) (#(" " 0 1 (fontified t)) . -696) (undo-tree-id3560 . -1) (#(" " 0 1 (fontified nil)) . -697) (undo-tree-id3561 . -1) (#("	" 0 1 (fontified nil)) . 698) (undo-tree-id3562 . -1) (690 . 698) 691 (689 . 691) (688 . 689) (687 . 688) (681 . 687)) nil (26219 11188 811627 264000) 0 nil])
([nil nil ((687 . 702) (681 . 687) (#("     " 0 5 (fontified nil)) . -681) (undo-tree-id4010 . -5) (undo-tree-id4011 . -5) (undo-tree-id4012 . -5) (undo-tree-id4013 . -5) (undo-tree-id4014 . -5) (undo-tree-id4015 . -5) (undo-tree-id4016 . -5) (undo-tree-id4017 . -5) (undo-tree-id4018 . -5) (undo-tree-id4019 . -5) (undo-tree-id4020 . -5) (undo-tree-id4021 . -5) (undo-tree-id4022 . -5) (undo-tree-id4023 . -5) (undo-tree-id4024 . -5) (undo-tree-id4025 . -5) (undo-tree-id4026 . -5) (undo-tree-id4027 . -5) (undo-tree-id4028 . -5) (undo-tree-id4029 . -5) (undo-tree-id4030 . -5) (undo-tree-id4031 . -5) (undo-tree-id4032 . -5) (undo-tree-id4033 . -5) (undo-tree-id4034 . -5) (undo-tree-id4035 . -5) (undo-tree-id4036 . -5) (undo-tree-id4037 . -5) (undo-tree-id4038 . -5) (undo-tree-id4039 . -5) (undo-tree-id4040 . -5) (undo-tree-id4041 . -5) (undo-tree-id4042 . -5) (undo-tree-id4043 . -5) (undo-tree-id4044 . -5) (undo-tree-id4045 . -5) (undo-tree-id4046 . -5) (undo-tree-id4047 . -5) (undo-tree-id4048 . -5) (undo-tree-id4049 . -5) (undo-tree-id4050 . -5) (undo-tree-id4051 . -5) (undo-tree-id4052 . -5) (undo-tree-id4053 . -5) (undo-tree-id4054 . -5) (undo-tree-id4055 . -5) (undo-tree-id4056 . -5) (undo-tree-id4057 . -5) (undo-tree-id4058 . -5) (undo-tree-id4059 . -5) (undo-tree-id4060 . -5) (undo-tree-id4061 . -5) (undo-tree-id4062 . -5) (undo-tree-id4063 . -5) (undo-tree-id4064 . -5) (undo-tree-id4065 . -5) (undo-tree-id4066 . -5) (undo-tree-id4067 . -5) (undo-tree-id4068 . -5) (undo-tree-id4069 . -5) (undo-tree-id4070 . -5) (undo-tree-id4071 . -5) (undo-tree-id4072 . -5) (undo-tree-id4073 . -5) (undo-tree-id4074 . -5) (undo-tree-id4075 . -5) (undo-tree-id4076 . -5) (undo-tree-id4077 . -5) (undo-tree-id4078 . -5) (undo-tree-id4079 . -5) (undo-tree-id4080 . -5) (undo-tree-id4081 . -5) (undo-tree-id4082 . -5) (undo-tree-id4083 . -5) (undo-tree-id4084 . -5) (undo-tree-id4085 . -5) (undo-tree-id4086 . -5) (undo-tree-id4087 . -5) (undo-tree-id4088 . -5) (undo-tree-id4089 . -5) (undo-tree-id4090 . -5) (undo-tree-id4091 . -5) (undo-tree-id4092 . -5) (undo-tree-id4093 . -5) (undo-tree-id4094 . -5) (undo-tree-id4095 . -5) (undo-tree-id4096 . -5) (undo-tree-id4097 . -5) (undo-tree-id4098 . -5) (undo-tree-id4099 . -5) (undo-tree-id4100 . -5) (undo-tree-id4101 . -5) (undo-tree-id4102 . -5) (undo-tree-id4103 . -5) (undo-tree-id4104 . -5) (undo-tree-id4105 . -5) (undo-tree-id4106 . -5) (undo-tree-id4107 . -5) (undo-tree-id4108 . -5) (undo-tree-id4109 . -5) (undo-tree-id4110 . -5) (undo-tree-id4111 . -5) (undo-tree-id4112 . -5) (undo-tree-id4113 . -5) (undo-tree-id4114 . -5) (undo-tree-id4115 . -5) (undo-tree-id4116 . -5) (undo-tree-id4117 . -5) (undo-tree-id4118 . -5) (undo-tree-id4119 . -5) (undo-tree-id4120 . -5) (undo-tree-id4121 . -5) (undo-tree-id4122 . -5) (undo-tree-id4123 . -5) (undo-tree-id4124 . -5) (undo-tree-id4125 . -5) (undo-tree-id4126 . -5) (undo-tree-id4127 . -5) (undo-tree-id4128 . -5) (undo-tree-id4129 . -5) (undo-tree-id4130 . -5) (undo-tree-id4131 . -5) (undo-tree-id4132 . -5) (undo-tree-id4133 . -5) (undo-tree-id4134 . -5) (undo-tree-id4135 . -5) (undo-tree-id4136 . -5) (undo-tree-id4137 . -5) (undo-tree-id4138 . -5) (undo-tree-id4139 . -5) (undo-tree-id4140 . -5) (undo-tree-id4141 . -5) (undo-tree-id4142 . -5) (undo-tree-id4143 . -5) (undo-tree-id4144 . -5) (undo-tree-id4145 . -5) (undo-tree-id4146 . -5) (undo-tree-id4147 . -5) (undo-tree-id4148 . -5) (undo-tree-id4149 . -5) (undo-tree-id4150 . -5) (undo-tree-id4151 . -5) (undo-tree-id4152 . -5) (undo-tree-id4153 . -5) (#(" " 0 1 (fontified t)) . 686) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (t 26219 11188 818295 563000)) nil (26219 11214 373836 879000) 0 nil])
([nil nil ((#("      auto message = 
" 0 6 (fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 681) (undo-tree-id3658 . 1) (undo-tree-id3659 . -21) (undo-tree-id3660 . -10) (undo-tree-id3661 . -10) (undo-tree-id3662 . -20) (undo-tree-id3663 . 1) (undo-tree-id3664 . -13) (undo-tree-id3665 . -13) (undo-tree-id3666 . -13) (undo-tree-id3667 . -13) (undo-tree-id3668 . -13) (undo-tree-id3669 . -13) (undo-tree-id3670 . -13) (undo-tree-id3671 . -13) (undo-tree-id3672 . -13) (undo-tree-id3673 . -13) (undo-tree-id3674 . -13) (undo-tree-id3675 . -13) (undo-tree-id3676 . -13) (undo-tree-id3677 . -13) (undo-tree-id3678 . -13) (undo-tree-id3679 . -13) (undo-tree-id3680 . -13) (undo-tree-id3681 . -13) (undo-tree-id3682 . -13) (undo-tree-id3683 . -13) (undo-tree-id3684 . -13) (undo-tree-id3685 . -13) (undo-tree-id3686 . -13) (undo-tree-id3687 . -13) (undo-tree-id3688 . -13) (undo-tree-id3689 . -13) (undo-tree-id3690 . -14) (undo-tree-id3691 . -14) (undo-tree-id3692 . -14) (undo-tree-id3693 . -14) (undo-tree-id3694 . -14) (undo-tree-id3695 . -14) (undo-tree-id3696 . -14) (undo-tree-id3697 . -14) (undo-tree-id3698 . -14) (undo-tree-id3699 . -14) (undo-tree-id3700 . -14) (undo-tree-id3701 . -14) (undo-tree-id3702 . -14) (undo-tree-id3703 . -14) (undo-tree-id3704 . -14) (undo-tree-id3705 . -14) (undo-tree-id3706 . -14) (undo-tree-id3707 . -14) (undo-tree-id3708 . -14) (undo-tree-id3709 . -14) (undo-tree-id3710 . -14) (undo-tree-id3711 . -14) (undo-tree-id3712 . -14) (undo-tree-id3713 . -14) (undo-tree-id3714 . -14) (undo-tree-id3715 . -14) (undo-tree-id3716 . -15) (undo-tree-id3717 . -15) (undo-tree-id3718 . -15) (undo-tree-id3719 . -15) (undo-tree-id3720 . -15) (undo-tree-id3721 . -15) (undo-tree-id3722 . -15) (undo-tree-id3723 . -15) (undo-tree-id3724 . -15) (undo-tree-id3725 . -15) (undo-tree-id3726 . -15) (undo-tree-id3727 . -15) (undo-tree-id3728 . -15) (undo-tree-id3729 . -15) (undo-tree-id3730 . -15) (undo-tree-id3731 . -15) (undo-tree-id3732 . -15) (undo-tree-id3733 . -15) (undo-tree-id3734 . -15) (undo-tree-id3735 . -15) (undo-tree-id3736 . -15) (undo-tree-id3737 . -15) (undo-tree-id3738 . -15) (undo-tree-id3739 . -15) (undo-tree-id3740 . -15) (undo-tree-id3741 . -15) (undo-tree-id3742 . -15) (undo-tree-id3743 . -15) (undo-tree-id3744 . -15) (undo-tree-id3745 . -15) (undo-tree-id3746 . -15) (undo-tree-id3747 . -15) (undo-tree-id3748 . -15) (undo-tree-id3749 . -15) (undo-tree-id3750 . -15) (undo-tree-id3751 . -15) (undo-tree-id3752 . -15) (undo-tree-id3753 . -15) (undo-tree-id3754 . -15) (undo-tree-id3755 . -15) (undo-tree-id3756 . -15) (undo-tree-id3757 . -15) (undo-tree-id3758 . -15) (undo-tree-id3759 . -15) (undo-tree-id3760 . -16) (undo-tree-id3761 . -16) (undo-tree-id3762 . -16) (undo-tree-id3763 . -16) (undo-tree-id3764 . -16) (undo-tree-id3765 . -16) (undo-tree-id3766 . -16) (undo-tree-id3767 . -16) (undo-tree-id3768 . -16) (undo-tree-id3769 . -16) (undo-tree-id3770 . -16) (undo-tree-id3771 . -16) (undo-tree-id3772 . -16) (undo-tree-id3773 . -16) (undo-tree-id3774 . -16) (undo-tree-id3775 . -16) (undo-tree-id3776 . -16) (undo-tree-id3777 . -17) (undo-tree-id3778 . -17) (undo-tree-id3779 . -17) (undo-tree-id3780 . -17) (undo-tree-id3781 . -17) (undo-tree-id3782 . -17) (undo-tree-id3783 . -17) (undo-tree-id3784 . -17) (undo-tree-id3785 . -17) (undo-tree-id3786 . -17) (undo-tree-id3787 . -17) (undo-tree-id3788 . -17) (undo-tree-id3789 . -17) (undo-tree-id3790 . -17) (undo-tree-id3791 . -17) (undo-tree-id3792 . -17) (undo-tree-id3793 . -17) (undo-tree-id3794 . -17) (undo-tree-id3795 . -17) (undo-tree-id3796 . -17) (undo-tree-id3797 . -17) (undo-tree-id3798 . -17) (undo-tree-id3799 . -17) (undo-tree-id3800 . -17) (undo-tree-id3801 . -17) (undo-tree-id3802 . -17) (undo-tree-id3803 . -17) (undo-tree-id3804 . -17) (undo-tree-id3805 . -17) (undo-tree-id3806 . -17) (undo-tree-id3807 . -17) (undo-tree-id3808 . -17) (undo-tree-id3809 . -17) (undo-tree-id3810 . -17) (undo-tree-id3811 . -17) (undo-tree-id3812 . -18) (undo-tree-id3813 . -18) (undo-tree-id3814 . -18) (undo-tree-id3815 . -18) (undo-tree-id3816 . -18) (undo-tree-id3817 . -18) (undo-tree-id3818 . -18) (undo-tree-id3819 . -18) (undo-tree-id3820 . -18) (undo-tree-id3821 . -18) (undo-tree-id3822 . -18) (undo-tree-id3823 . -18) (undo-tree-id3824 . -18) (undo-tree-id3825 . -18) (undo-tree-id3826 . -18) (undo-tree-id3827 . -18) (undo-tree-id3828 . -18) (undo-tree-id3829 . -18) (undo-tree-id3830 . -18) (undo-tree-id3831 . -18) (undo-tree-id3832 . -18) (undo-tree-id3833 . -18) (undo-tree-id3834 . -18) (undo-tree-id3835 . -18) (undo-tree-id3836 . -18) (undo-tree-id3837 . -18) (undo-tree-id3838 . -18) (undo-tree-id3839 . -18) (undo-tree-id3840 . -18) (undo-tree-id3841 . -18) (undo-tree-id3842 . -18) (undo-tree-id3843 . -18) (undo-tree-id3844 . -18) (undo-tree-id3845 . -18) (undo-tree-id3846 . -18) (undo-tree-id3847 . -19) (undo-tree-id3848 . -19) (undo-tree-id3849 . -19) (undo-tree-id3850 . -19) (undo-tree-id3851 . -19) (undo-tree-id3852 . -19) (undo-tree-id3853 . -19) (undo-tree-id3854 . -19) (undo-tree-id3855 . -19) (undo-tree-id3856 . -19) (undo-tree-id3857 . -19) (undo-tree-id3858 . -19) (undo-tree-id3859 . -19) (undo-tree-id3860 . -19) (undo-tree-id3861 . -19) (undo-tree-id3862 . -19) (undo-tree-id3863 . -19) (undo-tree-id3864 . -19) (undo-tree-id3865 . -19) (undo-tree-id3866 . -19) (undo-tree-id3867 . -19) (undo-tree-id3868 . -19) (undo-tree-id3869 . -19) (undo-tree-id3870 . -19) (undo-tree-id3871 . -19) (undo-tree-id3872 . -19) (undo-tree-id3873 . -19) (undo-tree-id3874 . -19) (undo-tree-id3875 . -19) (undo-tree-id3876 . -19) (undo-tree-id3877 . -19) (undo-tree-id3878 . -19) (undo-tree-id3879 . -19) (undo-tree-id3880 . -19) (undo-tree-id3881 . -19) (undo-tree-id3882 . -19) (undo-tree-id3883 . -19) (undo-tree-id3884 . -19) (undo-tree-id3885 . -19) (undo-tree-id3886 . -19) (undo-tree-id3887 . -19) (undo-tree-id3888 . -19) (undo-tree-id3889 . -19) (undo-tree-id3890 . -19) (undo-tree-id3891 . -20) (undo-tree-id3892 . -20) (undo-tree-id3893 . -20) (undo-tree-id3894 . -20) (undo-tree-id3895 . -20) (undo-tree-id3896 . -20) (undo-tree-id3897 . -20) (undo-tree-id3898 . -20) (undo-tree-id3899 . -20) (undo-tree-id3900 . -20) (undo-tree-id3901 . -20) (undo-tree-id3902 . -20) (undo-tree-id3903 . -20) (undo-tree-id3904 . -20) (undo-tree-id3905 . -20) (undo-tree-id3906 . -20) (undo-tree-id3907 . -20) (undo-tree-id3908 . -20) (undo-tree-id3909 . -20) (undo-tree-id3910 . -20) (undo-tree-id3911 . -20) (undo-tree-id3912 . -20) (undo-tree-id3913 . -20) (undo-tree-id3914 . -20) (undo-tree-id3915 . -20) (undo-tree-id3916 . -20) (undo-tree-id3917 . -21) (undo-tree-id3918 . -21) (undo-tree-id3919 . -21) (undo-tree-id3920 . -21) (undo-tree-id3921 . -21) (undo-tree-id3922 . -21) (undo-tree-id3923 . -21) (undo-tree-id3924 . -21) (undo-tree-id3925 . -21) (undo-tree-id3926 . -21) (undo-tree-id3927 . -21) (undo-tree-id3928 . -21) (undo-tree-id3929 . -21) (undo-tree-id3930 . -21) (undo-tree-id3931 . -21) (undo-tree-id3932 . -21) (undo-tree-id3933 . -21) (undo-tree-id3934 . -21) (undo-tree-id3935 . -21) (undo-tree-id3936 . -21) (undo-tree-id3937 . -21) (undo-tree-id3938 . -21) (undo-tree-id3939 . -21) (undo-tree-id3940 . -21) (undo-tree-id3941 . -21) (undo-tree-id3942 . -21) (undo-tree-id3943 . -21) (undo-tree-id3944 . -21) (undo-tree-id3945 . -21) (undo-tree-id3946 . -21) (undo-tree-id3947 . -21) (undo-tree-id3948 . -21) (undo-tree-id3949 . -21) (undo-tree-id3950 . -21) (undo-tree-id3951 . -21) (undo-tree-id3952 . -21) (undo-tree-id3953 . -21) (undo-tree-id3954 . -21) (undo-tree-id3955 . -21) (undo-tree-id3956 . -21) (undo-tree-id3957 . -21) (undo-tree-id3958 . -21) (undo-tree-id3959 . -21) (undo-tree-id3960 . -21) (undo-tree-id3961 . -21) (undo-tree-id3962 . -6) (undo-tree-id3963 . -22) (undo-tree-id3964 . -21) (undo-tree-id3965 . -21) (undo-tree-id3966 . -21) (undo-tree-id3967 . -21) (undo-tree-id3968 . -21) (undo-tree-id3969 . -21) (undo-tree-id3970 . -21) (undo-tree-id3971 . -21) (undo-tree-id3972 . -21) (undo-tree-id3973 . -21) (undo-tree-id3974 . -21) (undo-tree-id3975 . -21) (undo-tree-id3976 . -21) (undo-tree-id3977 . -21) (undo-tree-id3978 . -21) (undo-tree-id3979 . -21) (undo-tree-id3980 . -21) (undo-tree-id3981 . -21) (undo-tree-id3982 . -21) (undo-tree-id3983 . -21) (undo-tree-id3984 . -21) (undo-tree-id3985 . -21) (undo-tree-id3986 . -21) (undo-tree-id3987 . -21) (undo-tree-id3988 . -21) (undo-tree-id3989 . -21) (undo-tree-id3990 . -20) (undo-tree-id3991 . -20) (undo-tree-id3992 . -20) (undo-tree-id3993 . -20) (undo-tree-id3994 . -20) (undo-tree-id3995 . -20) (undo-tree-id3996 . -20) (undo-tree-id3997 . -20) (undo-tree-id3998 . -20) (undo-tree-id3999 . -20) (undo-tree-id4000 . -20) (undo-tree-id4001 . -20) (undo-tree-id4002 . -20) (undo-tree-id4003 . -20) (undo-tree-id4004 . -20) (undo-tree-id4005 . -20) (undo-tree-id4006 . -20) (undo-tree-id4007 . -20) (undo-tree-id4008 . -20) (undo-tree-id4009 . -22) 701) nil (26219 11214 373454 526000) 0 nil])
([nil nil ((apply yas--snippet-revive 717 726 #s(yas--snippet nil nil #s(yas--exit 725 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 725 nil) 9 nil nil nil nil)) (717 . 726) (#("String_($0)" 0 11 (fontified nil)) . 717) (717 . 728) (#("String_(…)" 0 10 (fontified nil)) . -717) (717 . 727) (#("S" 0 1 (fontified t)) . -717) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) 718 (717 . 718) (715 . 717) (712 . 715) (#("msg" 0 3 (fontified nil)) . -712) (712 . 715) (#("s" 0 1 (fontified t)) . -712) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) 713 (712 . 713) (710 . 712) (702 . 710) (#("std" 0 3 (fontified nil)) . 702) (702 . 705) (#("std_msgs" 0 8 (fontified nil)) . -702) (702 . 710) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -702) (undo-tree-id3655 . -3) (undo-tree-id3656 . -3) (undo-tree-id3657 . -3) 705 (700 . 705) (687 . 700) (681 . 687)) nil (26219 11214 372790 919000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 722) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1)) nil (26219 11214 372716 387000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 722) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1)) nil (26219 11214 372692 279000) 0 nil])
([nil nil ((722 . 723)) nil (26219 11214 372609 217000) 0 nil])
([nil nil ((725 . 726)) nil (26219 11214 372599 341000) 0 nil])
([nil nil ((749 . 760) (749 . 750) (nil syntax-table nil 749 . 750) (nil syntax-table (1) 748 . 749) (748 . 749) (#("\"" 0 1 (fontified nil)) . -748) (nil syntax-table nil 749 . 750) (nil syntax-table (1) 748 . 749) (748 . 749) (#("s" 0 1 (fontified t)) . -748) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (#("t" 0 1 (fontified t)) . -749) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (#("d" 0 1 (fontified t)) . -750) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) 751 (#(":" 0 1 (fontified t)) . -751) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (#(":" 0 1 (fontified t)) . -752) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (#("S" 0 1 (fontified t)) . -753) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (#("t" 0 1 (fontified t)) . -754) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) 755 (753 . 755) (751 . 753) (750 . 751) (#("e" 0 1 (fontified t)) . -750) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) 751 (748 . 751) (#("S" 0 1 (fontified t)) . -748) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (#("t" 0 1 (fontified t)) . -749) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (#("r" 0 1 (fontified t)) . -750) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (#("i" 0 1 (fontified t)) . -751) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (#("n" 0 1 (fontified t)) . -752) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) 753 (748 . 753) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -748) (undo-tree-id4280 . -1) (nil syntax-table nil 749 . 750) (nil syntax-table (1) 748 . 749) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 749) (749 . 750) (nil syntax-table nil 749 . 750) (nil syntax-table (1) 748 . 749) (748 . 749) (#("\"" 0 1 (fontified nil)) . -748) (nil syntax-table nil 749 . 750) (nil syntax-table (1) 748 . 749) (745 . 749) (741 . 745) (#("data" 0 4 (fontified nil)) . -741) (741 . 745) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -741) (undo-tree-id4281 . -2) (undo-tree-id4282 . -2) 743 (740 . 743) (733 . 740) (#("mes" 0 3 (fontified nil)) . 733) (733 . 736) (#("message" 0 7 (fontified nil)) . -733) (733 . 740) (#("mes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -733) (undo-tree-id4283 . -3) (undo-tree-id4284 . -3) 736 (733 . 736) (726 . 733) (t 26219 11214 392065 903000)) nil (26219 11269 491265 372000) 0 nil])
([nil nil ((761 . 762)) nil (26219 11269 491189 740000) 0 nil])
([nil nil ((846 . 847) (apply yas--snippet-revive 799 846 #s(yas--snippet nil (#s(yas--field 1 811 845 nil nil nil t nil)) nil 10 nil #s(yas--field 1 811 845 nil nil nil t nil) nil nil)) (839 . 844) (835 . 839) (#("f" 0 1 (face font-lock-string-face fontified t)) . -835) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) 836 (832 . 836) (832 . 833) (nil syntax-table nil 833 . 834) (nil syntax-table (1) 831 . 832) (831 . 832) (#("\"" 0 1 (fontified nil)) . -831) (undo-tree-id4235 . -1) (nil syntax-table nil 833 . 834) (nil syntax-table (1) 831 . 832) (830 . 832) (829 . 830) (apply yas--snippet-revive 817 829 #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 1 811 845 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 1 811 845 nil nil nil t nil) nil)) (817 . 829) (#("get_logger()" 0 12 (fontified nil)) . 817) (undo-tree-id4236 . -12) (817 . 829) (#("get_logger() const" 0 18 (fontified nil)) . -817) (undo-tree-id4237 . -18) (817 . 835) (#("get_logg" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -817) (undo-tree-id4238 . -5) (undo-tree-id4239 . -8) (undo-tree-id4240 . -8) (undo-tree-id4241 . -8) 825 (820 . 825) (817 . 820) (816 . 817) (812 . 816) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 812) (undo-tree-id4242 . -11) (811 . 812) (41 . 71) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 811 845 nil nil nil t nil)) nil 10 nil #s(yas--field 1 811 845 nil nil nil t nil) nil nil)) (769 . 793) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 769) (769 . 798) (#("RCLC" 0 4 (fontified nil)) . 769) (769 . 773) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -769) (769 . 793) (#("RCLCPP_IN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -769) (undo-tree-id4243 . -9) (undo-tree-id4244 . -9) 778 (772 . 778) (#("C" 0 1 (fontified t)) . -772) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) 773 (769 . 773) (762 . 769)) nil (26219 11269 491174 417000) 0 nil])
([nil nil ((873 . 880) (#("me" 0 2 (fontified nil)) . 873) (873 . 875) (#("message" 0 7 (fontified nil)) . -873) (873 . 880) (#("messag" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -873) (undo-tree-id4285 . -6) (undo-tree-id4286 . -6) (undo-tree-id4287 . -5) (undo-tree-id4288 . -5) (undo-tree-id4289 . -5) (undo-tree-id4290 . -5) (undo-tree-id4291 . -5) (undo-tree-id4292 . -5) (undo-tree-id4293 . -5) (undo-tree-id4294 . -5) (undo-tree-id4295 . -5) (undo-tree-id4296 . -5) (undo-tree-id4297 . -5) (undo-tree-id4298 . -5) (undo-tree-id4299 . -5) (undo-tree-id4300 . -6) (undo-tree-id4301 . -6) (undo-tree-id4302 . -6) (undo-tree-id4303 . -6) (undo-tree-id4304 . -6) (undo-tree-id4305 . -6) (undo-tree-id4306 . -6) (undo-tree-id4307 . -6) (undo-tree-id4308 . -6) (undo-tree-id4309 . -6) (undo-tree-id4310 . -6) (undo-tree-id4311 . -6) (undo-tree-id4312 . -6) (undo-tree-id4313 . -6) (undo-tree-id4314 . -6) (undo-tree-id4315 . -6) (undo-tree-id4316 . -6) (undo-tree-id4317 . -6) (undo-tree-id4318 . -6) (undo-tree-id4319 . -6) (undo-tree-id4320 . -6) (undo-tree-id4321 . -6) (undo-tree-id4322 . -6) (undo-tree-id4323 . -6) (undo-tree-id4324 . -6) (undo-tree-id4325 . -6) (undo-tree-id4326 . -6) (undo-tree-id4327 . -6) (undo-tree-id4328 . -6) (undo-tree-id4329 . -6) (undo-tree-id4330 . -6) (undo-tree-id4331 . -6) (undo-tree-id4332 . -6) (undo-tree-id4333 . -6) (undo-tree-id4334 . -6) (undo-tree-id4335 . -6) (undo-tree-id4336 . -6) (undo-tree-id4337 . -6) (undo-tree-id4338 . -6) (undo-tree-id4339 . -6) (undo-tree-id4340 . -6) (undo-tree-id4341 . -6) (undo-tree-id4342 . -6) (undo-tree-id4343 . -6) 879 (873 . 879) (872 . 874) (865 . 872) (864 . 865) (863 . 864) (854 . 863) (#("pu" 0 2 (fontified nil)) . 854) (854 . 856) (#("publisher" 0 9 (fontified nil)) . -854) (854 . 863) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -854) (undo-tree-id4344 . -2) (undo-tree-id4345 . -2) 856 (854 . 856) (847 . 854) (t 26219 11269 515362 979000)) nil (26219 11296 235653 394000) 0 nil])
([nil nil ((881 . 882)) nil (26219 11296 235508 678000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -889) (undo-tree-id4346 . -4) (undo-tree-id4347 . -4) (undo-tree-id4348 . -4) (undo-tree-id4349 . -4) (undo-tree-id4350 . -4) (undo-tree-id4351 . -4) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) (undo-tree-id4354 . -4) (undo-tree-id4355 . -4) (undo-tree-id4356 . -4) (undo-tree-id4357 . -4) (undo-tree-id4358 . -4) (undo-tree-id4359 . -4) (undo-tree-id4360 . -4) (undo-tree-id4361 . -4) (undo-tree-id4362 . -4) (undo-tree-id4363 . -4) (undo-tree-id4364 . -4) (undo-tree-id4365 . -4) (undo-tree-id4366 . -4) (undo-tree-id4367 . -4) (undo-tree-id4368 . -4) (undo-tree-id4369 . -4) (undo-tree-id4370 . -4) (undo-tree-id4371 . -4) (undo-tree-id4372 . -4) (undo-tree-id4373 . -4) (undo-tree-id4374 . -4) (undo-tree-id4375 . -4) (undo-tree-id4376 . -4) (undo-tree-id4377 . -4) (undo-tree-id4378 . -4) (undo-tree-id4379 . -4) (undo-tree-id4380 . -4) (undo-tree-id4381 . -4) (undo-tree-id4382 . -4) (undo-tree-id4383 . -4) (undo-tree-id4384 . -4) 893 (888 . 893) (t 26219 11296 280741 669000)) nil (26219 11301 476398 460000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -690) (undo-tree-id4385 . -4) (undo-tree-id4386 . -4) (undo-tree-id4387 . -4) (undo-tree-id4388 . -4) (undo-tree-id4389 . -4) (undo-tree-id4390 . -4) (undo-tree-id4391 . -4) (undo-tree-id4392 . -4) (undo-tree-id4393 . -4) (undo-tree-id4394 . -4) (undo-tree-id4395 . -4) (undo-tree-id4396 . -4) (undo-tree-id4397 . -4) (undo-tree-id4398 . -4) (undo-tree-id4399 . -4) (undo-tree-id4400 . -4) (undo-tree-id4401 . -4) (undo-tree-id4402 . -4) (undo-tree-id4403 . -4) (undo-tree-id4404 . -4) (undo-tree-id4405 . -4) (undo-tree-id4406 . -4) (undo-tree-id4407 . -4) (undo-tree-id4408 . -4) (undo-tree-id4409 . -4) (undo-tree-id4410 . -4) (undo-tree-id4411 . -4) (undo-tree-id4412 . -4) (undo-tree-id4413 . -4) (undo-tree-id4414 . -4) (undo-tree-id4415 . -4) (undo-tree-id4416 . -4) (undo-tree-id4417 . -4) (undo-tree-id4418 . -4) (undo-tree-id4419 . -4) (undo-tree-id4420 . -4) (undo-tree-id4421 . -4) (undo-tree-id4422 . -4) 694 (689 . 694) (t 26219 11301 512996 54000)) nil (26219 11304 843808 617000) 0 nil])
([nil nil ((#("  return 0;
" 0 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 1023) (undo-tree-id4684 . -11) (undo-tree-id4685 . -10) (undo-tree-id4686 . -12) (undo-tree-id4687 . -12) (undo-tree-id4688 . -12) (undo-tree-id4689 . -12) (undo-tree-id4690 . -12) (undo-tree-id4691 . -12) (undo-tree-id4692 . -12) (undo-tree-id4693 . -12) (undo-tree-id4694 . -12) (t 26219 11304 861156 373000)) nil (26219 11317 210251 697000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1024) (undo-tree-id4617 . -2) (undo-tree-id4618 . -2) (undo-tree-id4619 . -2) (undo-tree-id4620 . -2) (undo-tree-id4621 . -2) (undo-tree-id4622 . -2) (undo-tree-id4623 . -2) (undo-tree-id4624 . -2) (undo-tree-id4625 . -2) (undo-tree-id4626 . -2) (undo-tree-id4627 . -2) (undo-tree-id4628 . -2) (undo-tree-id4629 . -2) (undo-tree-id4630 . -2) (undo-tree-id4631 . -2) (undo-tree-id4632 . -2) (undo-tree-id4633 . -2) (undo-tree-id4634 . -2) (undo-tree-id4635 . -2) (undo-tree-id4636 . -2) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2) (undo-tree-id4641 . -2) (undo-tree-id4642 . -2) (undo-tree-id4643 . -2) (undo-tree-id4644 . -2) (undo-tree-id4645 . -2) 1026 (1024 . 1026) (#("  " 0 2 (fontified nil)) . 1023) (undo-tree-id4646 . -2) (undo-tree-id4647 . -2) (undo-tree-id4648 . -2) (undo-tree-id4649 . -2) (undo-tree-id4650 . -2) (undo-tree-id4651 . -2) (undo-tree-id4652 . -2) (undo-tree-id4653 . -2) (undo-tree-id4654 . -2) (undo-tree-id4655 . -2) (undo-tree-id4656 . -2) (undo-tree-id4657 . -2) (undo-tree-id4658 . -2) (undo-tree-id4659 . -2) (undo-tree-id4660 . -2) (undo-tree-id4661 . -2) (undo-tree-id4662 . -2) (undo-tree-id4663 . -2) (undo-tree-id4664 . -2) (undo-tree-id4665 . -2) (undo-tree-id4666 . -2) (undo-tree-id4667 . -2) (undo-tree-id4668 . -2) (undo-tree-id4669 . -2) (undo-tree-id4670 . -2) (undo-tree-id4671 . -2) (undo-tree-id4672 . -2) (undo-tree-id4673 . -2) (undo-tree-id4674 . -2) (undo-tree-id4675 . -2) (undo-tree-id4676 . -2) (undo-tree-id4677 . -2) (undo-tree-id4678 . -2) (undo-tree-id4679 . -2) (undo-tree-id4680 . -2) (undo-tree-id4681 . -2) (undo-tree-id4682 . -2) (undo-tree-id4683 . -2) (1022 . 1026)) nil (26219 11317 210220 974000) 0 nil])
([nil nil ((1025 . 1027) (1023 . 1025)) nil (26219 11317 213343 31000) 0 nil])
([nil nil ((#("  rc
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1023) (undo-tree-id4700 . 1) (undo-tree-id4701 . -4) (undo-tree-id4702 . -4) (undo-tree-id4703 . -3) (undo-tree-id4704 . -5) (undo-tree-id4705 . -5) (undo-tree-id4706 . -5) (undo-tree-id4707 . -5) (undo-tree-id4708 . -5) (undo-tree-id4709 . -5) (undo-tree-id4710 . -5) (undo-tree-id4711 . -5) (undo-tree-id4712 . -5) (undo-tree-id4713 . -5) (undo-tree-id4714 . -5) (undo-tree-id4715 . -5) (undo-tree-id4716 . -5) (undo-tree-id4717 . -5) (undo-tree-id4718 . -5) (undo-tree-id4719 . -5) (undo-tree-id4720 . -5) (undo-tree-id4721 . -5) (undo-tree-id4722 . -5) (undo-tree-id4723 . -5) (undo-tree-id4724 . -5) (undo-tree-id4725 . -5) (undo-tree-id4726 . -5) (undo-tree-id4727 . -5) (undo-tree-id4728 . -5) (undo-tree-id4729 . -5) (undo-tree-id4730 . -5) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -3) (undo-tree-id4735 . -3) (undo-tree-id4736 . -3) (undo-tree-id4737 . -3) (undo-tree-id4738 . -3) (undo-tree-id4739 . -3) (undo-tree-id4740 . -4) (undo-tree-id4741 . -4) (undo-tree-id4742 . -4) (undo-tree-id4743 . -4) (undo-tree-id4744 . -4) (undo-tree-id4745 . -4) (undo-tree-id4746 . -4) (undo-tree-id4747 . -4) (undo-tree-id4748 . -4) (undo-tree-id4749 . -4) (undo-tree-id4750 . -4) (undo-tree-id4751 . -4) (undo-tree-id4752 . -4) (undo-tree-id4753 . -4) (undo-tree-id4754 . -4) (undo-tree-id4755 . -4) (undo-tree-id4756 . -4) (undo-tree-id4757 . -4) (undo-tree-id4758 . -4) (undo-tree-id4759 . -4) (undo-tree-id4760 . -4) (undo-tree-id4761 . -4) (undo-tree-id4762 . -4) (undo-tree-id4763 . -4) (undo-tree-id4764 . -4) (undo-tree-id4765 . -4) (undo-tree-id4766 . -4) (undo-tree-id4767 . -4) (undo-tree-id4768 . -4) (undo-tree-id4769 . -4) (undo-tree-id4770 . -4) (undo-tree-id4771 . -4) (undo-tree-id4772 . -4) (undo-tree-id4773 . -4) (undo-tree-id4774 . -4) (undo-tree-id4775 . 1) (undo-tree-id4776 . -4) (undo-tree-id4777 . -4) (undo-tree-id4778 . -4) (undo-tree-id4779 . -4) (undo-tree-id4780 . -4) (undo-tree-id4781 . -4) (undo-tree-id4782 . -4) (undo-tree-id4783 . -4) (undo-tree-id4784 . -4) (undo-tree-id4785 . -4) (undo-tree-id4786 . -4) (undo-tree-id4787 . -4) (undo-tree-id4788 . -4) (undo-tree-id4789 . -4) (undo-tree-id4790 . -4) (undo-tree-id4791 . -4) (undo-tree-id4792 . -4) (undo-tree-id4793 . -4) (undo-tree-id4794 . -4) (undo-tree-id4795 . -4) (undo-tree-id4796 . -4) (undo-tree-id4797 . -4) (undo-tree-id4798 . -4) (undo-tree-id4799 . -4) (undo-tree-id4800 . -4) (undo-tree-id4801 . -4) (undo-tree-id4802 . -4) (undo-tree-id4803 . -4) (undo-tree-id4804 . -4) (undo-tree-id4805 . -4) (undo-tree-id4806 . -4) (undo-tree-id4807 . -4) (undo-tree-id4808 . -4) (undo-tree-id4809 . -4) (undo-tree-id4810 . -4) (undo-tree-id4811 . -4) (undo-tree-id4812 . -4) (undo-tree-id4813 . -4) (undo-tree-id4814 . -4) (undo-tree-id4815 . -4) (undo-tree-id4816 . -4) (undo-tree-id4817 . -4) (undo-tree-id4818 . -4) (undo-tree-id4819 . -4) (undo-tree-id4820 . -4) (undo-tree-id4821 . -4) (undo-tree-id4822 . -4) (undo-tree-id4823 . -4) (undo-tree-id4824 . -3) (undo-tree-id4825 . -3) (undo-tree-id4826 . -3) (undo-tree-id4827 . -3) (undo-tree-id4828 . -3) (undo-tree-id4829 . -3) (undo-tree-id4830 . -3) (undo-tree-id4831 . -3) (undo-tree-id4832 . -3) (undo-tree-id4833 . -3) (undo-tree-id4834 . -3) (undo-tree-id4835 . -3) (undo-tree-id4836 . -3) (undo-tree-id4837 . -3) (undo-tree-id4838 . -3) (undo-tree-id4839 . -3) (undo-tree-id4840 . -3) (undo-tree-id4841 . -3) (undo-tree-id4842 . -3) (undo-tree-id4843 . -3) (undo-tree-id4844 . -3) (undo-tree-id4845 . -3) (undo-tree-id4846 . -3) (undo-tree-id4847 . -3) (undo-tree-id4848 . -3) (undo-tree-id4849 . -3) (undo-tree-id4850 . -3) (undo-tree-id4851 . -3) (undo-tree-id4852 . -3) (undo-tree-id4853 . -3) (undo-tree-id4854 . -3) (undo-tree-id4855 . -3) (undo-tree-id4856 . -3) (undo-tree-id4857 . -3) (undo-tree-id4858 . -3) (undo-tree-id4859 . -3) (undo-tree-id4860 . -3) (undo-tree-id4861 . -3) (undo-tree-id4862 . -3) (undo-tree-id4863 . -3) (undo-tree-id4864 . -3) (undo-tree-id4865 . -3) (undo-tree-id4866 . -3) (undo-tree-id4867 . -3) (undo-tree-id4868 . -3) (undo-tree-id4869 . -3) (undo-tree-id4870 . -3) (undo-tree-id4871 . -3) (undo-tree-id4872 . -3) (undo-tree-id4873 . -3) (undo-tree-id4874 . -3) (undo-tree-id4875 . -3) (undo-tree-id4876 . -3) (undo-tree-id4877 . -3) (undo-tree-id4878 . -2) (undo-tree-id4879 . -4) (undo-tree-id4880 . -2) (undo-tree-id4881 . -3) (undo-tree-id4882 . -3) (undo-tree-id4883 . -3) (undo-tree-id4884 . -3) (undo-tree-id4885 . -3) (undo-tree-id4886 . -3) (undo-tree-id4887 . -3) (undo-tree-id4888 . -3) (undo-tree-id4889 . -3) (undo-tree-id4890 . -3) (undo-tree-id4891 . -3) (undo-tree-id4892 . -3) (undo-tree-id4893 . -3) (undo-tree-id4894 . -3) (undo-tree-id4895 . -3) (undo-tree-id4896 . -3) (undo-tree-id4897 . -3) (undo-tree-id4898 . -5) 1026) nil (26219 11329 350569 861000) 0 nil] [nil nil ((#("int main() {
  rc
" 0 1 (face font-lock-type-face fontified t c-is-sws t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t) 4 5 (face font-lock-function-name-face fontified t) 5 6 (face font-lock-function-name-face fontified t) 6 7 (face font-lock-function-name-face fontified t) 7 8 (face font-lock-function-name-face fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (fontified t) 13 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 1010) (undo-tree-id4423 . 1) (undo-tree-id4424 . -17) (undo-tree-id4425 . -17) (undo-tree-id4426 . -16) (undo-tree-id4427 . -13) (undo-tree-id4428 . -13) (undo-tree-id4429 . -13) (undo-tree-id4430 . -13) (undo-tree-id4431 . -13) (undo-tree-id4432 . -13) (undo-tree-id4433 . -13) (undo-tree-id4434 . -13) (undo-tree-id4435 . -13) (undo-tree-id4436 . -13) (undo-tree-id4437 . -13) (undo-tree-id4438 . -13) (undo-tree-id4439 . -13) (undo-tree-id4440 . -13) (undo-tree-id4441 . -13) (undo-tree-id4442 . -13) (undo-tree-id4443 . -13) (undo-tree-id4444 . -13) (undo-tree-id4445 . -13) (undo-tree-id4446 . -13) (undo-tree-id4447 . -13) (undo-tree-id4448 . -13) (undo-tree-id4449 . -13) (undo-tree-id4450 . -13) (undo-tree-id4451 . -13) (undo-tree-id4452 . -13) (undo-tree-id4453 . -13) (undo-tree-id4454 . -13) (undo-tree-id4455 . -13) (undo-tree-id4456 . -13) (undo-tree-id4457 . -13) (undo-tree-id4458 . -13) (undo-tree-id4459 . -13) (undo-tree-id4460 . -13) (undo-tree-id4461 . -13) (undo-tree-id4462 . -13) (undo-tree-id4463 . -18) (undo-tree-id4464 . -18) (undo-tree-id4465 . -18) (undo-tree-id4466 . -18) (undo-tree-id4467 . -18) (undo-tree-id4468 . -18) (undo-tree-id4469 . -18) (undo-tree-id4470 . -18) (undo-tree-id4471 . -18) (undo-tree-id4472 . -18) (undo-tree-id4473 . -18) (undo-tree-id4474 . -18) (undo-tree-id4475 . -18) (undo-tree-id4476 . -18) (undo-tree-id4477 . -18) (undo-tree-id4478 . -18) (undo-tree-id4479 . -18) (undo-tree-id4480 . -18) (undo-tree-id4481 . -18) (undo-tree-id4482 . -18) (undo-tree-id4483 . -18) (undo-tree-id4484 . -18) (undo-tree-id4485 . -18) (undo-tree-id4486 . -18) (undo-tree-id4487 . -18) (undo-tree-id4488 . -18) (undo-tree-id4489 . -18) (undo-tree-id4490 . -16) (undo-tree-id4491 . -16) (undo-tree-id4492 . -16) (undo-tree-id4493 . -16) (undo-tree-id4494 . -16) (undo-tree-id4495 . -16) (undo-tree-id4496 . -16) (undo-tree-id4497 . -16) (undo-tree-id4498 . -16) (undo-tree-id4499 . -17) (undo-tree-id4500 . -17) (undo-tree-id4501 . -17) (undo-tree-id4502 . -17) (undo-tree-id4503 . -17) (undo-tree-id4504 . -17) (undo-tree-id4505 . -17) (undo-tree-id4506 . -17) (undo-tree-id4507 . -17) (undo-tree-id4508 . -17) (undo-tree-id4509 . -17) (undo-tree-id4510 . -17) (undo-tree-id4511 . -17) (undo-tree-id4512 . -17) (undo-tree-id4513 . -17) (undo-tree-id4514 . -17) (undo-tree-id4515 . -17) (undo-tree-id4516 . -17) (undo-tree-id4517 . -17) (undo-tree-id4518 . -17) (undo-tree-id4519 . -17) (undo-tree-id4520 . -17) (undo-tree-id4521 . -17) (undo-tree-id4522 . -17) (undo-tree-id4523 . -17) (undo-tree-id4524 . -17) (undo-tree-id4525 . -17) (undo-tree-id4526 . -17) (undo-tree-id4527 . -17) (undo-tree-id4528 . -17) (undo-tree-id4529 . -17) (undo-tree-id4530 . -17) (undo-tree-id4531 . -17) (undo-tree-id4532 . -17) (undo-tree-id4533 . -17) (undo-tree-id4534 . 1) (undo-tree-id4535 . -17) (undo-tree-id4536 . -17) (undo-tree-id4537 . -17) (undo-tree-id4538 . -17) (undo-tree-id4539 . -17) (undo-tree-id4540 . -17) (undo-tree-id4541 . -17) (undo-tree-id4542 . -17) (undo-tree-id4543 . -17) (undo-tree-id4544 . -17) (undo-tree-id4545 . -17) (undo-tree-id4546 . -17) (undo-tree-id4547 . -17) (undo-tree-id4548 . -17) (undo-tree-id4549 . -17) (undo-tree-id4550 . -17) (undo-tree-id4551 . -17) (undo-tree-id4552 . -17) (undo-tree-id4553 . -17) (undo-tree-id4554 . -17) (undo-tree-id4555 . -17) (undo-tree-id4556 . -17) (undo-tree-id4557 . -17) (undo-tree-id4558 . -17) (undo-tree-id4559 . -17) (undo-tree-id4560 . -17) (undo-tree-id4561 . -17) (undo-tree-id4562 . -17) (undo-tree-id4563 . -17) (undo-tree-id4564 . -17) (undo-tree-id4565 . -17) (undo-tree-id4566 . -17) (undo-tree-id4567 . -17) (undo-tree-id4568 . -17) (undo-tree-id4569 . -17) (undo-tree-id4570 . -17) (undo-tree-id4571 . -17) (undo-tree-id4572 . -17) (undo-tree-id4573 . -17) (undo-tree-id4574 . -17) (undo-tree-id4575 . -17) (undo-tree-id4576 . -17) (undo-tree-id4577 . -17) (undo-tree-id4578 . -17) (undo-tree-id4579 . -17) (undo-tree-id4580 . -17) (undo-tree-id4581 . -17) (undo-tree-id4582 . -17) (undo-tree-id4583 . -13) (undo-tree-id4584 . -16) (undo-tree-id4585 . -16) (undo-tree-id4586 . -16) (undo-tree-id4587 . -16) (undo-tree-id4588 . -16) (undo-tree-id4589 . -16) (undo-tree-id4590 . -16) (undo-tree-id4591 . -16) (undo-tree-id4592 . -16) (undo-tree-id4593 . -15) (undo-tree-id4594 . -17) (undo-tree-id4595 . -12) (undo-tree-id4596 . -12) (undo-tree-id4597 . -16) (undo-tree-id4598 . -16) (undo-tree-id4599 . -16) (undo-tree-id4600 . -16) (undo-tree-id4601 . -16) (undo-tree-id4602 . -16) (undo-tree-id4603 . -16) (undo-tree-id4604 . -16) (undo-tree-id4605 . -16) (undo-tree-id4606 . -16) (undo-tree-id4607 . -16) (undo-tree-id4608 . -16) (undo-tree-id4609 . -16) (undo-tree-id4610 . -16) (undo-tree-id4611 . -16) (undo-tree-id4612 . -16) (undo-tree-id4613 . -16) (undo-tree-id4614 . -16) (undo-tree-id4615 . -16) (undo-tree-id4616 . -18) 1026) ((1010 . 1028)) (26219 11317 209720 909000) 0 nil])
([nil nil ((1035 . 1040) (1033 . 1035) (1032 . 1033) (#("t" 0 1 (fontified t)) . -1032) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (#(" " 0 1 (fontified t)) . -1033) (undo-tree-id4697 . -1) 1034 (1032 . 1034) (1029 . 1032) (#("i" 0 1 (fontified t)) . -1029) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) 1030 (1028 . 1030) (1027 . 1028) (1019 . 1027)) nil (26219 11329 349814 4000) 0 nil])
nil
([nil nil ((1102 . 1103) (apply yas--snippet-revive 1086 1102 #s(yas--snippet nil (#s(yas--field 1 1091 1095 nil nil nil t #s(yas--field 2 1097 1101 nil nil nil t nil)) #s(yas--field 2 1097 1101 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1097 1101 nil nil nil t nil) nil nil)) (1097 . 1101) (#("ar" 0 2 (fontified nil)) . 1097) (undo-tree-id4899 . -2) (1097 . 1099) (#("argv" 0 4 (fontified nil)) . -1097) (undo-tree-id4900 . -4) (1097 . 1101) (#("ar" 0 1 (fontified t) 1 2 (fontified t)) . -1097) (undo-tree-id4901 . -2) (undo-tree-id4902 . -2) (undo-tree-id4903 . -2) (undo-tree-id4904 . -2) 1099 (1098 . 1099) (#("const char *const *argv" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-type-face fontified nil) 10 12 (fontified nil) 12 17 (face font-lock-keyword-face fontified nil) 17 19 (fontified nil) 19 23 (face font-lock-variable-name-face fontified nil)) . 1098) (undo-tree-id4905 . -23) (1097 . 1098) (1091 . 1095) (#("ar" 0 2 (fontified nil)) . 1091) (undo-tree-id4906 . -2) (1091 . 1093) (#("argc" 0 4 (fontified nil)) . -1091) (undo-tree-id4907 . -4) (1091 . 1095) (#("ar" 0 1 (fontified t) 1 2 (fontified t)) . -1091) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) (undo-tree-id4910 . -2) 1093 (1092 . 1093) (#("int argc" 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-variable-name-face fontified nil)) . 1092) (undo-tree-id4911 . -8) (1091 . 1092) (222 . 254) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1091 1095 nil nil nil t #s(yas--field 2 1097 1101 nil nil nil t nil)) #s(yas--field 2 1097 1101 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1097 1101 nil nil nil t nil) nil nil)) (1054 . 1093) (#("init(${1:int argc}, ${2:const char *const *argv})" 0 49 (fontified nil)) . 1054) (1054 . 1103) (#("i" 0 1 (fontified nil)) . 1054) (1054 . 1055) (#("init(int argc, const char *const *argv, const InitOptions &init_options = InitOptions(), SignalHandlerOptions signal_handler_options = SignalHandlerOptions::All)" 0 161 (fontified nil)) . -1054) (1054 . 1215) (#("in" 0 1 (fontified t) 1 2 (fontified t)) . -1054) (undo-tree-id4912 . -1) (undo-tree-id4913 . -2) (undo-tree-id4914 . -2) 1056 (1054 . 1056) (1044 . 1046) (#(" " 0 1 (fontified nil)) . 1044) (1052 . 1053) (1044 . 1045) (#("  " 0 2 (fontified nil)) . 1044) (1052 . 1053) (#("_" 0 1 (fontified t)) . -1052) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) 1053 (1046 . 1053) (1044 . 1046) (t 26219 11329 398274 675000)) nil (26219 11340 352975 514000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1105) (undo-tree-id5186 . -2) (undo-tree-id5187 . -2) (undo-tree-id5188 . -2) (undo-tree-id5189 . -2) (undo-tree-id5190 . -2) (undo-tree-id5191 . -2) (undo-tree-id5192 . -2) (undo-tree-id5193 . -2) (undo-tree-id5194 . -2) (undo-tree-id5195 . -2) (undo-tree-id5196 . -2) (undo-tree-id5197 . -2) (undo-tree-id5198 . -2) (undo-tree-id5199 . -2) (undo-tree-id5200 . -2) (undo-tree-id5201 . -2) (undo-tree-id5202 . -2) (undo-tree-id5203 . -2) (undo-tree-id5204 . -2) (undo-tree-id5205 . -2) (undo-tree-id5206 . -2) (undo-tree-id5207 . -2) (undo-tree-id5208 . -2) (undo-tree-id5209 . -2) (undo-tree-id5210 . -2) (undo-tree-id5211 . -2) (undo-tree-id5212 . -2) (undo-tree-id5213 . -2) (undo-tree-id5214 . -2) (undo-tree-id5215 . -2) (undo-tree-id5216 . -2) (undo-tree-id5217 . -2) (undo-tree-id5218 . -2) (undo-tree-id5219 . -2) (undo-tree-id5220 . -2) (undo-tree-id5221 . -2) (undo-tree-id5222 . -2) (undo-tree-id5223 . -2) (undo-tree-id5224 . -2) (undo-tree-id5225 . -2) (undo-tree-id5226 . -2) (undo-tree-id5227 . -2) (undo-tree-id5228 . -2) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -2) (undo-tree-id5232 . -2) (undo-tree-id5233 . -2) (undo-tree-id5234 . -2) (undo-tree-id5235 . -2) (undo-tree-id5236 . -2) (undo-tree-id5237 . -2) (undo-tree-id5238 . -2) (undo-tree-id5239 . -2) (undo-tree-id5240 . -2) (undo-tree-id5241 . -2) (undo-tree-id5242 . -2) (undo-tree-id5243 . -2) (undo-tree-id5244 . -2) (undo-tree-id5245 . -2) (undo-tree-id5246 . -2) (undo-tree-id5247 . -2) (undo-tree-id5248 . -2) (undo-tree-id5249 . -2) (undo-tree-id5250 . -2) 1107 (1105 . 1107) (#("  " 0 2 (fontified nil)) . 1104) (undo-tree-id5251 . -2) (undo-tree-id5252 . -2) (undo-tree-id5253 . -2) (undo-tree-id5254 . -2) (undo-tree-id5255 . -2) (undo-tree-id5256 . -2) (undo-tree-id5257 . -2) (undo-tree-id5258 . -2) (undo-tree-id5259 . -2) (undo-tree-id5260 . -2) (undo-tree-id5261 . -2) (undo-tree-id5262 . -2) (undo-tree-id5263 . -2) (undo-tree-id5264 . -2) (undo-tree-id5265 . -2) (undo-tree-id5266 . -2) (undo-tree-id5267 . -2) (undo-tree-id5268 . -2) (undo-tree-id5269 . -2) (undo-tree-id5270 . -2) (undo-tree-id5271 . -2) (undo-tree-id5272 . -2) (undo-tree-id5273 . -2) (undo-tree-id5274 . -2) (undo-tree-id5275 . -2) (undo-tree-id5276 . -2) (undo-tree-id5277 . -2) (undo-tree-id5278 . -2) (undo-tree-id5279 . -2) (1103 . 1107) (t 26219 11340 402745 507000)) nil (26219 11405 119927 421000) 0 nil])
([nil nil ((1127 . 1133) (#("=" 0 1 (fontified t)) . -1127) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (#(" " 0 1 (fontified t)) . -1128) (undo-tree-id5178 . -1) 1129 (1126 . 1129) (1115 . 1126) (#("N" 0 1 (fontified nil)) . 1115) (1115 . 1116) (#("NodeOptions" 0 11 (fontified nil)) . -1115) (1115 . 1126) (#("N" 0 1 (fontified t)) . -1115) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) 1116 (1115 . 1116) (1105 . 1107) (#(" " 0 1 (fontified nil)) . 1105) (1113 . 1114) (1105 . 1106) (#("  " 0 2 (fontified nil)) . 1105) (undo-tree-id5182 . -2) (1113 . 1114) (1107 . 1113) (#("rcl" 0 3 (fontified nil)) . 1107) (1107 . 1110) (#("rclcpp" 0 6 (fontified nil)) . -1107) (1107 . 1113) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1107) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) 1110 (1107 . 1110) (1105 . 1107) (#("  " 0 2 (fontified nil)) . 1104) (undo-tree-id5185 . -2) (1106 . 1107) (1104 . 1106)) nil (26219 11405 119757 35000) 0 nil])
([nil nil ((#("def " 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . 1127) (undo-tree-id5174 . -3) (undo-tree-id5175 . -4)) nil (26219 11405 119729 74000) 0 nil])
([nil nil ((1127 . 1135)) nil (26219 11405 119724 378000) 0 nil])
([nil nil ((1156 . 1158) (1145 . 1156) (#("N" 0 1 (fontified nil)) . 1145) (1145 . 1146) (#("NodeOptions" 0 11 (fontified nil)) . -1145) (1145 . 1156) (#("N" 0 1 (fontified t)) . -1145) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) 1146 (1145 . 1146) (1143 . 1145) (1137 . 1143) (#("rcl" 0 3 (fontified nil)) . 1137) (1137 . 1140) (#("rclcpp" 0 6 (fontified nil)) . -1137) (1137 . 1143) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1137) (undo-tree-id5171 . -3) (undo-tree-id5172 . -3) (undo-tree-id5173 . -3) 1140 (1138 . 1140) (1137 . 1138)) nil (26219 11405 119713 340000) 0 nil])
([nil nil ((1158 . 1159)) nil (26219 11405 119441 384000) 0 nil])
([nil nil ((apply yas--snippet-revive 1231 1279 #s(yas--snippet nil (#s(yas--field 1 1243 1269 nil nil nil t #s(yas--field 2 1271 1278 nil nil nil t nil)) #s(yas--field 2 1271 1278 nil nil nil t nil)) nil 14 nil #s(yas--field 2 1271 1278 nil nil nil t nil) nil nil)) (1271 . 1278) (#("op" 0 2 (fontified nil)) . 1271) (undo-tree-id4917 . -2) (1271 . 1273) (#("options" 0 7 (fontified nil)) . -1271) (undo-tree-id4918 . -7) (1271 . 1278) (#("op" 0 1 (fontified t) 1 2 (fontified t)) . -1271) (undo-tree-id4919 . -2) (undo-tree-id4920 . -2) (undo-tree-id4921 . -2) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -2) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4930 . -2) (undo-tree-id4931 . -2) (undo-tree-id4932 . -2) (undo-tree-id4933 . -2) (undo-tree-id4934 . -2) (undo-tree-id4935 . -2) (undo-tree-id4936 . -2) (undo-tree-id4937 . -2) (undo-tree-id4938 . -2) (undo-tree-id4939 . -2) (undo-tree-id4940 . -2) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) (undo-tree-id4943 . -2) (undo-tree-id4944 . -2) (undo-tree-id4945 . -2) (undo-tree-id4946 . -2) (undo-tree-id4947 . -2) (undo-tree-id4948 . -2) (undo-tree-id4949 . -2) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) (undo-tree-id4952 . -2) (undo-tree-id4953 . -2) (undo-tree-id4954 . -2) (undo-tree-id4955 . -2) (undo-tree-id4956 . -2) (undo-tree-id4957 . -2) (undo-tree-id4958 . -2) (undo-tree-id4959 . -2) (undo-tree-id4960 . -2) (undo-tree-id4961 . -2) (undo-tree-id4962 . -2) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -2) (undo-tree-id4967 . -2) (undo-tree-id4968 . -2) (undo-tree-id4969 . -2) (undo-tree-id4970 . -2) (undo-tree-id4971 . -2) (undo-tree-id4972 . -2) (undo-tree-id4973 . -2) (undo-tree-id4974 . -2) (undo-tree-id4975 . -2) (undo-tree-id4976 . -2) (undo-tree-id4977 . -2) (undo-tree-id4978 . -2) (undo-tree-id4979 . -2) (undo-tree-id4980 . -2) (undo-tree-id4981 . -2) (undo-tree-id4982 . -2) (undo-tree-id4983 . -2) (undo-tree-id4984 . -2) (undo-tree-id4985 . -2) (undo-tree-id4986 . -2) (undo-tree-id4987 . -2) (undo-tree-id4988 . -2) (undo-tree-id4989 . -2) (undo-tree-id4990 . -2) (undo-tree-id4991 . -2) (undo-tree-id4992 . -2) (undo-tree-id4993 . -2) (undo-tree-id4994 . -2) (undo-tree-id4995 . -2) (undo-tree-id4996 . -2) (undo-tree-id4997 . -2) (undo-tree-id4998 . -2) (undo-tree-id4999 . -2) (undo-tree-id5000 . -2) (undo-tree-id5001 . -2) (undo-tree-id5002 . -2) (undo-tree-id5003 . -2) (undo-tree-id5004 . -2) (undo-tree-id5005 . -2) (undo-tree-id5006 . -2) (undo-tree-id5007 . -2) (undo-tree-id5008 . -2) (undo-tree-id5009 . -2) (undo-tree-id5010 . -2) (undo-tree-id5011 . -2) (undo-tree-id5012 . -2) (undo-tree-id5013 . -2) (undo-tree-id5014 . -2) (undo-tree-id5015 . -2) (undo-tree-id5016 . -2) (undo-tree-id5017 . -2) (undo-tree-id5018 . -2) (undo-tree-id5019 . -2) (undo-tree-id5020 . -2) (undo-tree-id5021 . -2) (undo-tree-id5022 . -2) (undo-tree-id5023 . -2) (undo-tree-id5024 . -2) (undo-tree-id5025 . -2) (undo-tree-id5026 . -2) (undo-tree-id5027 . -2) (undo-tree-id5028 . -2) (undo-tree-id5029 . -2) (undo-tree-id5030 . -2) (undo-tree-id5031 . -2) (undo-tree-id5032 . -2) (undo-tree-id5033 . -2) (undo-tree-id5034 . -2) (undo-tree-id5035 . -2) (undo-tree-id5036 . -2) (undo-tree-id5037 . -2) (undo-tree-id5038 . -2) (undo-tree-id5039 . -2) (undo-tree-id5040 . -2) (undo-tree-id5041 . -2) (undo-tree-id5042 . -2) (undo-tree-id5043 . -2) (undo-tree-id5044 . -2) (undo-tree-id5045 . -2) (undo-tree-id5046 . -2) (undo-tree-id5047 . -2) (undo-tree-id5048 . -2) (undo-tree-id5049 . -2) (undo-tree-id5050 . -2) (undo-tree-id5051 . -2) (undo-tree-id5052 . -2) (undo-tree-id5053 . -2) (undo-tree-id5054 . -2) (undo-tree-id5055 . -2) (undo-tree-id5056 . -2) (undo-tree-id5057 . -2) (undo-tree-id5058 . -2) (undo-tree-id5059 . -2) (undo-tree-id5060 . -2) (undo-tree-id5061 . -2) (undo-tree-id5062 . -2) (undo-tree-id5063 . -2) (undo-tree-id5064 . -2) (undo-tree-id5065 . -2) (undo-tree-id5066 . -2) (undo-tree-id5067 . -2) (undo-tree-id5068 . -2) (undo-tree-id5069 . -2) (undo-tree-id5070 . -2) (undo-tree-id5071 . -2) (undo-tree-id5072 . -2) (undo-tree-id5073 . -2) (undo-tree-id5074 . -2) 1273 (1271 . 1273) (#("\\" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1271) (undo-tree-id5075 . -1) 1272 (#("Args &&args..." 0 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified nil) 4 7 (fontified nil) 7 11 (face font-lock-variable-name-face fontified nil) 11 14 (fontified nil)) . 1272) (undo-tree-id5076 . -14) (1271 . 1272) (1263 . 1269) (#("PraPub" 0 6 (fontified nil)) . -1263) (undo-tree-id5077 . -6) (1263 . 1269) (1261 . 1263) (#("\"" 0 1 (face font-lock-warning-face fontified t)) . -1261) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (nil syntax-table nil 1280 . 1281) (nil syntax-table (1) 1261 . 1262) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1262) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) 1263 (#("\"" 0 1 (fontified nil)) . -1262) (nil syntax-table nil 1282 . 1283) (nil syntax-table (1) 1263 . 1264) (1262 . 1263) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1262) (nil syntax-table nil 1282 . 1283) (nil syntax-table (1) 1263 . 1264) (1262 . 1263) (1262 . 1263) (nil syntax-table nil 1280 . 1281) (nil syntax-table (1) 1261 . 1262) (1261 . 1262) (#("\"" 0 1 (fontified nil)) . -1261) (undo-tree-id5082 . -1) (nil syntax-table nil 1280 . 1281) (nil syntax-table (1) 1261 . 1262) (1261 . 1262) (nil fontified nil 1243 . 1261) (nil face (rainbow-delimiters-depth-3-face) 1243 . 1261) (1243 . 1261) (#("co" 0 2 (fontified nil)) . 1243) (undo-tree-id5083 . -2) (nil fontified nil 1243 . 1245) (nil face (rainbow-delimiters-depth-3-face) 1243 . 1245) (1243 . 1245) (#("component_practice" 0 18 (fontified nil)) . -1243) (undo-tree-id5084 . -18) (nil fontified nil 1243 . 1261) (nil face (rainbow-delimiters-depth-3-face) 1243 . 1261) (1243 . 1261) (#("com" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1243) (undo-tree-id5085 . -3) (undo-tree-id5086 . -3) (undo-tree-id5087 . -3) 1246 (1244 . 1246) (#("typename Tp" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-type-face fontified nil)) . 1244) (undo-tree-id5088 . -11) (1243 . 1244) (41 . 59) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1243 1269 nil nil nil t #s(yas--field 2 1271 1278 nil nil nil t nil)) #s(yas--field 2 1271 1278 nil nil nil t nil)) nil 14 nil #s(yas--field 2 1271 1278 nil nil nil t nil) nil nil)) (1213 . 1253) (#("make_shared<${1:typename Tp}>(${2:Args &&args...})" 0 50 (fontified nil)) . 1213) (1213 . 1263) (#("m" 0 1 (fontified nil)) . 1213) (1213 . 1214) (#("make_shared<typename Tp>(Args &&args...)" 0 11 (fontified nil) 11 12 (fontified nil category c-<-as-paren-syntax) 12 23 (fontified nil) 23 24 (fontified nil category c->-as-paren-syntax) 24 40 (fontified nil)) . -1213) (1213 . 1253) (#("ma" 0 1 (fontified t) 1 2 (fontified t)) . -1213) (undo-tree-id5089 . -2) (undo-tree-id5090 . -2) 1215 (1213 . 1215) (1211 . 1213) (1208 . 1211) (apply yas--snippet-revive 1203 1209 #s(yas--snippet nil nil #s(yas--exit 1208 nil) 13 nil nil nil nil)) (41 . 73) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1208 nil) 13 nil nil nil nil)) (1171 . 1177) (#("spin($0)" 0 8 (fontified nil)) . 1171) (1171 . 1179) (#("s" 0 1 (fontified nil)) . 1171) (1171 . 1172) (#("spin(…)" 0 7 (fontified nil)) . -1171) (1171 . 1178) (#("spi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1171) (undo-tree-id5091 . -3) (undo-tree-id5092 . -3) 1174 (1172 . 1174) (1171 . 1172) (1161 . 1163) (#(" " 0 1 (fontified nil)) . 1161) (1169 . 1170) (1161 . 1162) (#("  " 0 2 (fontified nil)) . 1161) (undo-tree-id5093 . -2) (1169 . 1170) (1163 . 1169) (#("rcl" 0 3 (fontified nil)) . 1163) (1163 . 1166) (#("rclcpp" 0 6 (fontified nil)) . -1163) (1163 . 1169) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1163) (undo-tree-id5094 . -3) (undo-tree-id5095 . -3) 1166 (1163 . 1166) (1161 . 1163) (#("  " 0 2 (fontified nil)) . 1160) (undo-tree-id5096 . -2) (1159 . 1163)) nil (26219 11405 119401 711000) 0 nil])
([nil nil ((1280 . 1281)) nil (26219 11405 118736 809000) 0 nil])
([nil nil ((1303 . 1304) (1302 . 1303) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1302) (1302 . 1303) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1302) (undo-tree-id5309 . -1) 1303 (apply yas--snippet-revive 1293 1303 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (1293 . 1303) (#("shutdown()" 0 10 (fontified nil)) . 1293) (1293 . 1303) (#("sh" 0 2 (fontified nil)) . 1293) (1293 . 1295) (#("shutdown(rclcpp::Context::SharedPtr context = nullptr, const std::string &reason = \"user called rclcpp::shutdown()\")" 0 116 (fontified nil)) . -1293) (1293 . 1409) (#("sh" 0 1 (fontified t) 1 2 (fontified t)) . -1293) (undo-tree-id5310 . -2) (undo-tree-id5311 . -2) (undo-tree-id5312 . -2) 1295 (1293 . 1295) (1283 . 1285) (#(" " 0 1 (fontified nil)) . 1283) (1291 . 1292) (1283 . 1284) (#("  " 0 2 (fontified nil)) . 1283) (undo-tree-id5313 . -2) (1291 . 1292) (1285 . 1291) (#("rcl" 0 3 (fontified nil)) . 1285) (1285 . 1288) (#("rclcpp" 0 6 (fontified nil)) . -1285) (1285 . 1291) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1285) (undo-tree-id5314 . -3) (undo-tree-id5315 . -3) 1288 (1285 . 1288) (1283 . 1285) (#("  " 0 2 (fontified nil)) . 1282) (undo-tree-id5316 . -2) (1281 . 1285) (t 26219 11405 141176 953000)) nil (26219 11425 40816 431000) 0 nil])
([nil nil ((1316 . 1317) (1311 . 1316) (1308 . 1311) (1306 . 1308) (#("  " 0 2 (fontified nil)) . 1305) (undo-tree-id5280 . -2) (undo-tree-id5281 . -2) (undo-tree-id5282 . -2) (undo-tree-id5283 . -2) (undo-tree-id5284 . -2) (undo-tree-id5285 . -2) (undo-tree-id5286 . -2) (undo-tree-id5287 . -2) (undo-tree-id5288 . -2) (undo-tree-id5289 . -2) (undo-tree-id5290 . -2) (undo-tree-id5291 . -2) (undo-tree-id5292 . -2) (undo-tree-id5293 . -2) (undo-tree-id5294 . -2) (undo-tree-id5295 . -2) (undo-tree-id5296 . -2) (undo-tree-id5297 . -2) (undo-tree-id5298 . -2) (undo-tree-id5299 . -2) (undo-tree-id5300 . -2) (undo-tree-id5301 . -2) (undo-tree-id5302 . -2) (undo-tree-id5303 . -2) (undo-tree-id5304 . -2) (undo-tree-id5305 . -2) (undo-tree-id5306 . -2) (undo-tree-id5307 . -2) (undo-tree-id5308 . -2) (1304 . 1308)) nil (26219 11425 40781 283000) 0 nil])
([nil nil ((#("microseconds" 0 12 (fontified t)) . 689) (undo-tree-id5360 . -11) (undo-tree-id5361 . -12) (t 26219 11425 89823 228000)) nil (26219 11469 855287 406000) 0 nil])
([nil nil ((689 . 701) (#("mi" 0 2 (fontified nil)) . 689) (689 . 691) (#("milliseconds" 0 12 (fontified nil)) . -689) (689 . 701) (#("mill" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -689) (undo-tree-id5317 . -3) (undo-tree-id5318 . -4) (undo-tree-id5319 . -4) (undo-tree-id5320 . -4) (undo-tree-id5321 . -4) (undo-tree-id5322 . -4) (undo-tree-id5323 . -4) (undo-tree-id5324 . -4) (undo-tree-id5325 . -4) (undo-tree-id5326 . -4) (undo-tree-id5327 . -4) (undo-tree-id5328 . -4) (undo-tree-id5329 . -4) (undo-tree-id5330 . -4) (undo-tree-id5331 . -4) (undo-tree-id5332 . -4) (undo-tree-id5333 . -4) (undo-tree-id5334 . -4) (undo-tree-id5335 . -4) (undo-tree-id5336 . -4) (undo-tree-id5337 . -4) (undo-tree-id5338 . -4) (undo-tree-id5339 . -4) (undo-tree-id5340 . -4) (undo-tree-id5341 . -4) (undo-tree-id5342 . -4) (undo-tree-id5343 . -4) (undo-tree-id5344 . -4) (undo-tree-id5345 . -4) (undo-tree-id5346 . -4) (undo-tree-id5347 . -4) (undo-tree-id5348 . -4) (undo-tree-id5349 . -4) (undo-tree-id5350 . -4) (undo-tree-id5351 . -4) (undo-tree-id5352 . -4) (undo-tree-id5353 . -4) (undo-tree-id5354 . -4) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -4) (undo-tree-id5359 . -4) 693 (692 . 693) (690 . 692) (689 . 690)) nil (26219 11469 855270 266000) 0 nil])
([nil nil ((apply -21 1092 1342 undo--wrap-and-run-primitive-undo 1092 1342 ((1337 . 1340) (1321 . 1324) (1295 . 1298) (1220 . 1223) (1161 . 1164) (1129 . 1132) (1092 . 1095))) (t 26219 11469 879125 191000)) nil (26219 11541 403047 907000) 0 nil])
([nil nil ((1342 . 1344)) nil (26219 11541 403045 261000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1197 . 1198) (nil fontified nil 1143 . 1198) (nil fontified nil 1142 . 1143) (nil fontified nil 1090 . 1142) (nil fontified nil 1089 . 1090) (1089 . 1198)) nil (26219 11541 403041 689000) 0 nil])
([nil nil ((1200 . 1203)) nil (26219 11541 403030 361000) 0 nil])
([nil nil ((#("palomino" 0 8 (face font-lock-constant-face fontified t)) . 1174) (undo-tree-id5572 . -7) (undo-tree-id5573 . -8) (t 26219 11541 424845 637000)) nil (26219 11732 377237 672000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 1174) (undo-tree-id5570 . -1) (undo-tree-id5571 . -2)) nil (26219 11732 377230 395000) 0 nil])
([nil nil ((#("VincentDriver" 0 13 (fontified t)) . 1174) (undo-tree-id5531 . -12) (undo-tree-id5532 . -12) (undo-tree-id5533 . -12) (undo-tree-id5534 . -12) (undo-tree-id5535 . -12) (undo-tree-id5536 . -12) (undo-tree-id5537 . -12) (undo-tree-id5538 . -12) (undo-tree-id5539 . -12) (undo-tree-id5540 . -12) (undo-tree-id5541 . -12) (undo-tree-id5542 . -12) (undo-tree-id5543 . -12) (undo-tree-id5544 . -12) (undo-tree-id5545 . -12) (undo-tree-id5546 . -12) (undo-tree-id5547 . -12) (undo-tree-id5548 . -12) (undo-tree-id5549 . -12) (undo-tree-id5550 . -12) (undo-tree-id5551 . -12) (undo-tree-id5552 . -12) (undo-tree-id5553 . -12) (undo-tree-id5554 . -12) (undo-tree-id5555 . -12) (undo-tree-id5556 . -12) (undo-tree-id5557 . -12) (undo-tree-id5558 . -12) (undo-tree-id5559 . -12) (undo-tree-id5560 . -12) (undo-tree-id5561 . -12) (undo-tree-id5562 . -12) (undo-tree-id5563 . -12) (undo-tree-id5564 . -12) (undo-tree-id5565 . -12) (undo-tree-id5566 . -12) (undo-tree-id5567 . -12) (undo-tree-id5568 . -12) (undo-tree-id5569 . -13)) nil (26219 11732 377220 717000) 0 nil])
([nil nil ((1194 . 1200) (#("PraPub" 0 6 (fontified nil)) . -1194) (1194 . 1200) (1192 . 1194) (1174 . 1192) (#("com" 0 3 (fontified nil)) . 1174) (1174 . 1177) (#("component_practice" 0 18 (fontified nil)) . -1174) (1174 . 1192) (#("com" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1174) (undo-tree-id5362 . -3) (undo-tree-id5363 . -3) (undo-tree-id5364 . -3) (undo-tree-id5365 . -3) (undo-tree-id5366 . -3) (undo-tree-id5367 . -3) (undo-tree-id5368 . -3) (undo-tree-id5369 . -3) (undo-tree-id5370 . -3) (undo-tree-id5371 . -3) (undo-tree-id5372 . -3) (undo-tree-id5373 . -3) (undo-tree-id5374 . -3) (undo-tree-id5375 . -3) (undo-tree-id5376 . -3) (undo-tree-id5377 . -3) (undo-tree-id5378 . -3) (undo-tree-id5379 . -3) (undo-tree-id5380 . -3) (undo-tree-id5381 . -3) (undo-tree-id5382 . -3) (undo-tree-id5383 . -3) (undo-tree-id5384 . -3) (undo-tree-id5385 . -3) (undo-tree-id5386 . -3) (undo-tree-id5387 . -3) (undo-tree-id5388 . -3) (undo-tree-id5389 . -3) (undo-tree-id5390 . -3) (undo-tree-id5391 . -3) (undo-tree-id5392 . -3) (undo-tree-id5393 . -3) (undo-tree-id5394 . -3) (undo-tree-id5395 . -3) (undo-tree-id5396 . -3) (undo-tree-id5397 . -3) (undo-tree-id5398 . -3) (undo-tree-id5399 . -3) (undo-tree-id5400 . -3) (undo-tree-id5401 . -3) (undo-tree-id5402 . -3) (undo-tree-id5403 . -3) (undo-tree-id5404 . -3) (undo-tree-id5405 . -3) (undo-tree-id5406 . -3) (undo-tree-id5407 . -3) (undo-tree-id5408 . -3) (undo-tree-id5409 . -3) (undo-tree-id5410 . -3) (undo-tree-id5411 . -3) (undo-tree-id5412 . -3) (undo-tree-id5413 . -3) (undo-tree-id5414 . -3) (undo-tree-id5415 . -3) (undo-tree-id5416 . -3) (undo-tree-id5417 . -3) (undo-tree-id5418 . -3) (undo-tree-id5419 . -3) (undo-tree-id5420 . -3) (undo-tree-id5421 . -3) (undo-tree-id5422 . -3) (undo-tree-id5423 . -3) (undo-tree-id5424 . -3) (undo-tree-id5425 . -3) (undo-tree-id5426 . -3) (undo-tree-id5427 . -3) (undo-tree-id5428 . -3) (undo-tree-id5429 . -3) (undo-tree-id5430 . -3) (undo-tree-id5431 . -3) (undo-tree-id5432 . -3) (undo-tree-id5433 . -3) (undo-tree-id5434 . -3) (undo-tree-id5435 . -3) (undo-tree-id5436 . -3) (undo-tree-id5437 . -3) (undo-tree-id5438 . -3) (undo-tree-id5439 . -3) (undo-tree-id5440 . -3) (undo-tree-id5441 . -3) (undo-tree-id5442 . -3) 1177 (1176 . 1177) (1174 . 1176) (#("n" 0 1 (fontified t)) . -1174) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) 1175 (1174 . 1175)) nil (26219 11742 88959 635000) 0 nil])
([nil nil ((apply -6 1089 1209 undo--wrap-and-run-primitive-undo 1089 1209 ((1145 . 1148) (1089 . 1092))) (t 26219 11732 395961 673000)) nil (26219 11989 152892 120000) 0 nil] [nil nil ((#("component_practice::PraPub" 0 18 (face font-lock-constant-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 26 (fontified t)) . 1174) (undo-tree-id5574 . -25) (undo-tree-id5575 . -25) (undo-tree-id5576 . -25) (undo-tree-id5577 . -25) (undo-tree-id5578 . -25) (undo-tree-id5579 . -25) (undo-tree-id5580 . -25) (undo-tree-id5581 . -25) (undo-tree-id5582 . -25) (undo-tree-id5583 . -25) (undo-tree-id5584 . -25) (undo-tree-id5585 . -25) (undo-tree-id5586 . -25) (undo-tree-id5587 . -25) (undo-tree-id5588 . -25) (undo-tree-id5589 . -25) (undo-tree-id5590 . -25) (undo-tree-id5591 . -25) (undo-tree-id5592 . -25) (undo-tree-id5593 . -25) (undo-tree-id5594 . -25) (undo-tree-id5595 . -25) (undo-tree-id5596 . -25) (undo-tree-id5597 . -25) (undo-tree-id5598 . -25) (undo-tree-id5599 . -25) (undo-tree-id5600 . -25) (undo-tree-id5601 . -25) (undo-tree-id5602 . -25) (undo-tree-id5603 . -25) (undo-tree-id5604 . -25) (undo-tree-id5605 . -25) (undo-tree-id5606 . -25) (undo-tree-id5607 . -25) (undo-tree-id5608 . -25) (undo-tree-id5609 . -25) (undo-tree-id5610 . -25) (undo-tree-id5611 . -25) (undo-tree-id5612 . -25) (undo-tree-id5613 . -25) (undo-tree-id5614 . -25) (undo-tree-id5615 . -25) (undo-tree-id5616 . -25) (undo-tree-id5617 . -25) (undo-tree-id5618 . -25) (undo-tree-id5619 . -25) (undo-tree-id5620 . -25) (undo-tree-id5621 . -20) (undo-tree-id5622 . -26) (undo-tree-id5623 . -25) (undo-tree-id5624 . -25) (undo-tree-id5625 . -25) (undo-tree-id5626 . -25) (undo-tree-id5627 . -25) (undo-tree-id5628 . -25) (undo-tree-id5629 . -25) (undo-tree-id5630 . -25) (undo-tree-id5631 . -25) (undo-tree-id5632 . -25) (undo-tree-id5633 . -25) (undo-tree-id5634 . -25) (undo-tree-id5635 . -25) (undo-tree-id5636 . -25) (undo-tree-id5637 . -25) (undo-tree-id5638 . -25) (undo-tree-id5639 . -25) (undo-tree-id5640 . -25) (undo-tree-id5641 . -25) (undo-tree-id5642 . -25) (undo-tree-id5643 . -25) (undo-tree-id5644 . -25) (undo-tree-id5645 . -25) (undo-tree-id5646 . -25) (undo-tree-id5647 . -25) (undo-tree-id5648 . -25) (undo-tree-id5649 . -25) (undo-tree-id5650 . -25) (undo-tree-id5651 . -25) (undo-tree-id5652 . -25) (undo-tree-id5653 . -25) (undo-tree-id5654 . -25) (undo-tree-id5655 . -25) (undo-tree-id5656 . -25) (undo-tree-id5657 . -25) (undo-tree-id5658 . -25) (undo-tree-id5659 . -25) (undo-tree-id5660 . -25) (undo-tree-id5661 . -25) (undo-tree-id5662 . -25) (undo-tree-id5663 . -25) (undo-tree-id5664 . -25) (undo-tree-id5665 . -25) (undo-tree-id5666 . -25) (undo-tree-id5667 . -25) (undo-tree-id5668 . -25) (undo-tree-id5669 . -25) (undo-tree-id5670 . -25) (undo-tree-id5671 . -25) (undo-tree-id5672 . -25) (undo-tree-id5673 . -25) (undo-tree-id5674 . -25) (undo-tree-id5675 . -25) (undo-tree-id5676 . -25) (undo-tree-id5677 . -25) (undo-tree-id5678 . -25) (undo-tree-id5679 . -25) (undo-tree-id5680 . -25) (undo-tree-id5681 . -25) (undo-tree-id5682 . -25) (undo-tree-id5683 . -25) (undo-tree-id5684 . -25) (undo-tree-id5685 . -25) (undo-tree-id5686 . -25) (undo-tree-id5687 . -25) (undo-tree-id5688 . -25) (undo-tree-id5689 . -25) (undo-tree-id5690 . -25) (undo-tree-id5691 . -25) (undo-tree-id5692 . -25) (undo-tree-id5693 . -25) (undo-tree-id5694 . -25) (undo-tree-id5695 . -26) (undo-tree-id5696 . -26) 1199 (t 26219 11732 395961 673000)) ((1174 . 1200)) (26219 11741 194688 574000) 0 nil])
([nil nil ((#("

// int main(int argc, char** argv) {
//   rclcpp::init(argc, argv);

//   rclcpp::NodeOptions options = rclcpp::NodeOptions();

//   rclcpp::spin(std::make_shared<component_practice::PraPub>(options));

//   rclcpp::shutdown();

//   return 0;

// }


" 0 1 (c-in-sws t c-is-sws t fontified t) 1 2 (c-in-sws t c-is-sws t fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3 5 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 5 6 (face font-lock-comment-face fontified t c-in-sws t) 6 7 (face font-lock-comment-face fontified t c-in-sws t) 7 8 (face font-lock-comment-face fontified t c-in-sws t) 8 9 (face font-lock-comment-face fontified t c-in-sws t) 9 10 (face font-lock-comment-face fontified t c-in-sws t) 10 11 (face font-lock-comment-face fontified t c-in-sws t) 11 12 (face font-lock-comment-face fontified t c-in-sws t) 12 13 (face font-lock-comment-face fontified t c-in-sws t) 13 14 (face font-lock-comment-face fontified t c-in-sws t) 14 15 (face font-lock-comment-face fontified t c-in-sws t) 15 16 (face font-lock-comment-face fontified t c-in-sws t) 16 17 (face font-lock-comment-face fontified t c-in-sws t) 17 18 (face font-lock-comment-face fontified t c-in-sws t) 18 19 (face font-lock-comment-face fontified t c-in-sws t) 19 20 (face font-lock-comment-face fontified t c-in-sws t) 20 21 (face font-lock-comment-face fontified t c-in-sws t) 21 22 (face font-lock-comment-face fontified t c-in-sws t) 22 23 (face font-lock-comment-face fontified t c-in-sws t) 23 24 (face font-lock-comment-face fontified t c-in-sws t) 24 25 (face font-lock-comment-face fontified t c-in-sws t) 25 26 (face font-lock-comment-face fontified t c-in-sws t) 26 27 (face font-lock-comment-face fontified t c-in-sws t) 27 28 (face font-lock-comment-face fontified t c-in-sws t) 28 29 (face font-lock-comment-face fontified t c-in-sws t) 29 30 (face font-lock-comment-face fontified t c-in-sws t) 30 31 (face font-lock-comment-face fontified t c-in-sws t) 31 32 (face font-lock-comment-face fontified t c-in-sws t) 32 33 (face font-lock-comment-face fontified t c-in-sws t) 33 34 (face font-lock-comment-face fontified t c-in-sws t) 34 35 (face font-lock-comment-face fontified t c-in-sws t) 35 36 (face font-lock-comment-face fontified t c-in-sws t) 36 37 (face font-lock-comment-face fontified t c-in-sws t) 37 38 (face font-lock-comment-face fontified t c-in-sws t) 38 39 (face font-lock-comment-face fontified t c-in-sws t) 39 42 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 42 44 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 44 45 (face font-lock-comment-face fontified t c-in-sws t) 45 46 (face font-lock-comment-face fontified t c-in-sws t) 46 47 (face font-lock-comment-face fontified t c-in-sws t) 47 48 (face font-lock-comment-face fontified t c-in-sws t) 48 49 (face font-lock-comment-face fontified t c-in-sws t) 49 50 (face font-lock-comment-face fontified t c-in-sws t) 50 51 (face font-lock-comment-face fontified t c-in-sws t) 51 52 (face font-lock-comment-face fontified t c-in-sws t) 52 56 (face font-lock-comment-face fontified t c-in-sws t) 56 57 (face font-lock-comment-face fontified t c-in-sws t) 57 61 (face font-lock-comment-face fontified t c-in-sws t) 61 62 (face font-lock-comment-face fontified t c-in-sws t) 62 63 (face font-lock-comment-face fontified t c-in-sws t) 63 67 (face font-lock-comment-face fontified t c-in-sws t) 67 68 (face font-lock-comment-face fontified t c-in-sws t) 68 69 (face font-lock-comment-face fontified t c-in-sws t) 69 70 (face font-lock-comment-face fontified t c-in-sws t) 70 71 (fontified t c-in-sws t) 71 72 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 72 74 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 74 76 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 76 82 (face font-lock-comment-face fontified t c-in-sws t) 82 83 (face font-lock-comment-face fontified t c-in-sws t) 83 84 (face font-lock-comment-face fontified t c-in-sws t) 84 94 (face font-lock-comment-face fontified t c-in-sws t) 94 95 (face font-lock-comment-face fontified t c-in-sws t) 95 96 (face font-lock-comment-face fontified t c-in-sws t) 96 97 (face font-lock-comment-face fontified t c-in-sws t) 97 98 (face font-lock-comment-face fontified t c-in-sws t) 98 99 (face font-lock-comment-face fontified t c-in-sws t) 99 100 (face font-lock-comment-face fontified t c-in-sws t) 100 101 (face font-lock-comment-face fontified t c-in-sws t) 101 102 (face font-lock-comment-face fontified t c-in-sws t) 102 103 (face font-lock-comment-face fontified t c-in-sws t) 103 104 (face font-lock-comment-face fontified t c-in-sws t) 104 105 (face font-lock-comment-face fontified t c-in-sws t) 105 106 (face font-lock-comment-face fontified t c-in-sws t) 106 112 (face font-lock-comment-face fontified t c-in-sws t) 112 113 (face font-lock-comment-face fontified t c-in-sws t) 113 114 (face font-lock-comment-face fontified t c-in-sws t) 114 125 (face font-lock-comment-face fontified t c-in-sws t) 125 126 (face font-lock-comment-face fontified t c-in-sws t) 126 127 (face font-lock-comment-face fontified t c-in-sws t) 127 128 (face font-lock-comment-face fontified t c-in-sws t) 128 129 (face font-lock-comment-face fontified t c-in-sws t) 129 130 (fontified t c-in-sws t) 130 133 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 133 135 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 135 141 (face font-lock-comment-face fontified t c-in-sws t) 141 142 (face font-lock-comment-face fontified t c-in-sws t) 142 143 (face font-lock-comment-face fontified t c-in-sws t) 143 146 (face font-lock-comment-face fontified t c-in-sws t) 146 147 (face font-lock-comment-face fontified t c-in-sws t) 147 148 (face font-lock-comment-face fontified t c-in-sws t) 148 149 (face font-lock-comment-face fontified t c-in-sws t) 149 150 (face font-lock-comment-face fontified t c-in-sws t) 150 151 (face font-lock-comment-face fontified t c-in-sws t) 151 152 (face font-lock-comment-face fontified t c-in-sws t) 152 153 (face font-lock-comment-face fontified t c-in-sws t) 153 164 (face font-lock-comment-face fontified t c-in-sws t) 164 165 (face font-lock-comment-face fontified t c-in-sws t) 165 183 (face font-lock-comment-face fontified t c-in-sws t) 183 185 (face font-lock-comment-face fontified t c-in-sws t) 185 191 (face font-lock-comment-face fontified t c-in-sws t) 191 192 (face font-lock-comment-face fontified t c-in-sws t) 192 193 (face font-lock-comment-face fontified t c-in-sws t) 193 200 (face font-lock-comment-face fontified t c-in-sws t) 200 201 (face font-lock-comment-face fontified t c-in-sws t) 201 202 (face font-lock-comment-face fontified t c-in-sws t) 202 203 (face font-lock-comment-face fontified t c-in-sws t) 203 204 (face font-lock-comment-face fontified t c-in-sws t) 204 205 (fontified t c-in-sws t) 205 208 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 208 210 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 210 216 (face font-lock-comment-face fontified t c-in-sws t) 216 217 (face font-lock-comment-face fontified t c-in-sws t) 217 218 (face font-lock-comment-face fontified t c-in-sws t) 218 226 (face font-lock-comment-face fontified t c-in-sws t) 226 227 (face font-lock-comment-face fontified t c-in-sws t) 227 228 (face font-lock-comment-face fontified t c-in-sws t) 228 229 (face font-lock-comment-face fontified t c-in-sws t) 229 230 (face font-lock-comment-face fontified t c-in-sws t) 230 231 (fontified t c-in-sws t) 231 234 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 234 236 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 236 237 (face font-lock-comment-face fontified t c-in-sws t) 237 238 (face font-lock-comment-face fontified t c-in-sws t) 238 239 (face font-lock-comment-face fontified t c-in-sws t) 239 240 (face font-lock-comment-face fontified t c-in-sws t) 240 241 (face font-lock-comment-face fontified t c-in-sws t) 241 242 (face font-lock-comment-face fontified t c-in-sws t) 242 243 (face font-lock-comment-face fontified t c-in-sws t) 243 244 (face font-lock-comment-face fontified t c-in-sws t) 244 245 (face font-lock-comment-face fontified t c-in-sws t) 245 246 (face font-lock-comment-face fontified t c-in-sws t) 246 247 (fontified t c-in-sws t) 247 250 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 250 251 (face font-lock-comment-face fontified t c-in-sws t) 251 252 (face font-lock-comment-face fontified t c-in-sws t) 252 253 (fontified t c-is-sws t) 253 254 (fontified t)) . 1211) (undo-tree-id5796 . -253) (undo-tree-id5797 . -254) (undo-tree-id5798 . -247) (undo-tree-id5799 . -247) (undo-tree-id5800 . -247) (undo-tree-id5801 . -2) (undo-tree-id5802 . -2) (undo-tree-id5803 . -254) (undo-tree-id5804 . -2) (undo-tree-id5805 . -148) (undo-tree-id5806 . -251) (undo-tree-id5807 . -254) (undo-tree-id5808 . -2) (undo-tree-id5809 . -254) 1465 (t 26219 11989 174361 492000)) nil (26219 12021 223199 634000) 0 nil])
nil
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t fontified t)) . 1209)) nil (26219 12021 223177 645000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1209) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1)) nil (26219 12021 223174 274000) 0 nil])
([nil nil ((#("
" 0 1 (c-in-sws t c-is-sws t fontified t)) . -1208) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) 1209) nil (26219 12021 223142 891000) 0 nil])
([nil nil ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 1089) (undo-tree-id5697 . -2) (undo-tree-id5698 . -3)) nil (26219 12021 222989 705000) 0 nil])
([nil nil ((#("// " 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 1142) (undo-tree-id5810 . -2) (undo-tree-id5811 . -3) (t 26219 12021 274586 552000)) nil (26219 12063 200490 572000) 0 nil])
([nil nil ((531 . 533) (520 . 531) (#("N" 0 1 (fontified nil)) . 520) (520 . 521) (#("NodeOptions" 0 11 (fontified nil)) . -520) (520 . 531) (#("N" 0 1 (fontified t)) . -520) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) 521 (520 . 521) (518 . 520) (512 . 518) (#("rcl" 0 3 (fontified nil)) . 512) (512 . 515) (#("rclcpp" 0 6 (fontified nil)) . -512) (512 . 518) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -512) (undo-tree-id5846 . -3) (undo-tree-id5847 . -3) 515 (512 . 515) (#("N" 0 1 (fontified t)) . -512) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) 513 (512 . 513) (#("m" 0 1 (fontified t)) . -512) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) 513 (509 . 513) (t 26219 12063 250865 42000)) nil (26219 12109 993199 351000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 510) (undo-tree-id5870 . -1) (undo-tree-id5871 . -2) (t 26219 12110 19157 283000)) nil (26219 12163 135602 168000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (face font-lock-constant-face fontified t)) . 510) (undo-tree-id5868 . -5) (undo-tree-id5869 . -6)) nil (26219 12163 135596 638000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 510) (undo-tree-id5866 . -1) (undo-tree-id5867 . -2)) nil (26219 12163 135590 627000) 0 nil])
([nil nil ((#("NodeOptions" 0 11 (fontified t)) . 510) (undo-tree-id5858 . -10) (undo-tree-id5859 . -11) (undo-tree-id5860 . -11) (undo-tree-id5861 . -11) (undo-tree-id5862 . -11) (undo-tree-id5863 . -11) (undo-tree-id5864 . -11) (undo-tree-id5865 . -11)) nil (26219 12163 135584 285000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 510) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1)) nil (26219 12163 135568 527000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 510) (undo-tree-id5852 . 1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1)) nil (26219 12163 135558 376000) 0 nil])
([nil nil ((480 . 486)) nil (26219 12167 148596 452000) 0 nil])
([nil nil ((484 . 491) (#(" " 0 1 (fontified t)) . -484) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) 485 (479 . 485) (473 . 479) (468 . 473) (t 26219 12163 159470 145000)) nil (26219 12648 888964 986000) 0 nil] [nil nil ((#("_" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . 1112) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (t 26219 12163 159470 145000)) ((1112 . 1113)) (26219 12167 145206 969000) 0 nil])
([nil nil ((#("    COMPOSITION_PUBLIC
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 20 (face font-lock-type-face fontified t) 20 21 (face font-lock-type-face fontified t) 21 22 (face font-lock-type-face c-type c-decl-id-start fontified t) 22 23 (fontified t)) . 469) (undo-tree-id5906 . 1) (undo-tree-id5907 . -22) (undo-tree-id5908 . 1) (undo-tree-id5909 . -4) (undo-tree-id5910 . -22) (undo-tree-id5911 . -21) (undo-tree-id5912 . -21) (undo-tree-id5913 . -21) (undo-tree-id5914 . -21) (undo-tree-id5915 . -21) (undo-tree-id5916 . -21) (undo-tree-id5917 . -21) (undo-tree-id5918 . -21) (undo-tree-id5919 . -21) (undo-tree-id5920 . -21) (undo-tree-id5921 . -21) (undo-tree-id5922 . -21) (undo-tree-id5923 . -21) (undo-tree-id5924 . -21) (undo-tree-id5925 . -21) (undo-tree-id5926 . -21) (undo-tree-id5927 . -21) (undo-tree-id5928 . -21) (undo-tree-id5929 . -21) (undo-tree-id5930 . -21) (undo-tree-id5931 . -21) (undo-tree-id5932 . -21) (undo-tree-id5933 . -21) (undo-tree-id5934 . -21) (undo-tree-id5935 . -21) (undo-tree-id5936 . -21) (undo-tree-id5937 . -21) (undo-tree-id5938 . -21) (undo-tree-id5939 . -21) (undo-tree-id5940 . -21) (undo-tree-id5941 . -21) (undo-tree-id5942 . -21) (undo-tree-id5943 . -21) (undo-tree-id5944 . -21) (undo-tree-id5945 . -21) (undo-tree-id5946 . -21) (undo-tree-id5947 . -21) (undo-tree-id5948 . -21) (undo-tree-id5949 . -21) (undo-tree-id5950 . -21) (undo-tree-id5951 . -21) (undo-tree-id5952 . -21) (undo-tree-id5953 . -21) (undo-tree-id5954 . -21) (undo-tree-id5955 . -21) (undo-tree-id5956 . -21) (undo-tree-id5957 . -21) (undo-tree-id5958 . -21) (undo-tree-id5959 . -21) (undo-tree-id5960 . -21) (undo-tree-id5961 . -21) (undo-tree-id5962 . -21) (undo-tree-id5963 . -21) (undo-tree-id5964 . -21) (undo-tree-id5965 . -21) (undo-tree-id5966 . -23) 490 (t 26219 12648 914924 874000)) nil (26219 12780 386315 172000) 0 nil])
nil
([nil nil ((403 . 415) (399 . 403) (apply yas--snippet-revive 390 406 #s(yas--snippet nil (#s(yas--field 0 399 405 nil nil nil nil nil)) nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 399 405 nil nil nil nil nil)) nil 0 nil nil nil nil)) (390 . 406) (#("include <${0:header}>" 0 21 (fontified nil c-in-sws t)) . 390) (undo-tree-id27 . -21) (390 . 411) (#("i" 0 1 (c-in-sws t fontified nil)) . 390) (undo-tree-id28 . -1) (390 . 391) (#("include <header>" 0 8 (fontified nil c-in-sws t) 8 9 (category c-<-as-paren-syntax fontified nil c-in-sws t) 9 15 (fontified nil c-in-sws t) 15 16 (category c->-as-paren-syntax fontified nil c-in-sws t)) . -390) (undo-tree-id29 . -16) (390 . 406) (#("incl" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -390) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) 394 (391 . 394) (#("c" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -391) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -392) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("l" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -393) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("u" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -394) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 395 (390 . 395) (389 . 390) (388 . 389) (t 26219 12780 411356 121000)) nil (26231 62001 105414 457000) 0 nil])
([nil nil ((#("header" 0 6 (fontified t c-in-sws t face font-lock-string-face)) . 415) (undo-tree-id23 . -6) (undo-tree-id24 . 6) (undo-tree-id25 . 6) (undo-tree-id26 . -5)) nil (26231 62001 105342 780000) 0 nil])
([nil nil ((416 . 417)) nil (26231 62001 105327 68000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t c-in-sws t)) . -416) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 417) nil (26231 62025 121309 723000) 0 nil])
([nil nil ((#("#include <rclcpp_lifecycle>
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax) 10 11 (fontified t c-in-sws t face font-lock-string-face) 11 12 (fontified t c-in-sws t face font-lock-string-face) 12 13 (fontified t c-in-sws t face font-lock-string-face) 13 14 (fontified t c-in-sws t face font-lock-string-face) 14 15 (fontified t c-in-sws t face font-lock-string-face) 15 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (fontified t c-in-sws t face font-lock-string-face) 17 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face font-lock-string-face) 19 20 (fontified t c-in-sws t face font-lock-string-face) 20 21 (fontified t c-in-sws t face font-lock-string-face) 21 22 (fontified t c-in-sws t face font-lock-string-face) 22 23 (fontified t c-in-sws t face font-lock-string-face) 23 24 (fontified t c-in-sws t face font-lock-string-face) 24 25 (fontified t c-in-sws t face font-lock-string-face) 25 26 (fontified t c-in-sws t face font-lock-string-face) 26 27 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax) 27 28 (fontified t c-in-sws t)) . 389) (undo-tree-id150 . -27) (undo-tree-id151 . -26) (undo-tree-id152 . -27) (undo-tree-id153 . -26) (undo-tree-id154 . -26) (undo-tree-id155 . -26) (undo-tree-id156 . -26) (undo-tree-id157 . -26) (undo-tree-id158 . -26) (undo-tree-id159 . -26) (undo-tree-id160 . -26) (undo-tree-id161 . -26) (undo-tree-id162 . -26) (undo-tree-id163 . -26) (undo-tree-id164 . -26) (undo-tree-id165 . -26) (undo-tree-id166 . -26) (undo-tree-id167 . -26) (undo-tree-id168 . -26) (undo-tree-id169 . -26) (undo-tree-id170 . -26) (undo-tree-id171 . -26) (undo-tree-id172 . -26) (undo-tree-id173 . -26) (undo-tree-id174 . -26) (undo-tree-id175 . -26) (undo-tree-id176 . -26) (undo-tree-id177 . -26) (undo-tree-id178 . -26) (undo-tree-id179 . -26) (undo-tree-id180 . -26) (undo-tree-id181 . -26) (undo-tree-id182 . -26) (undo-tree-id183 . -26) (undo-tree-id184 . -26) (undo-tree-id185 . -26) (undo-tree-id186 . -26) (undo-tree-id187 . -26) (undo-tree-id188 . -26) (undo-tree-id189 . -26) (undo-tree-id190 . -26) (undo-tree-id191 . -26) (undo-tree-id192 . -26) (undo-tree-id193 . -26) (undo-tree-id194 . -26) (undo-tree-id195 . -26) (undo-tree-id196 . -26) (undo-tree-id197 . -26) (undo-tree-id198 . -26) (undo-tree-id199 . -26) (undo-tree-id200 . -26) (undo-tree-id201 . -26) (undo-tree-id202 . -26) (undo-tree-id203 . -26) (undo-tree-id204 . -28) 415) nil (26231 62026 810174 40000) 0 nil] [nil nil ((#("#include <rclcpp_lifecycle>
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax) 10 11 (fontified t c-in-sws t face font-lock-string-face) 11 12 (fontified t c-in-sws t face font-lock-string-face) 12 13 (fontified t c-in-sws t face font-lock-string-face) 13 14 (fontified t c-in-sws t face font-lock-string-face) 14 15 (fontified t c-in-sws t face font-lock-string-face) 15 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (fontified t c-in-sws t face font-lock-string-face) 17 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face font-lock-string-face) 19 20 (fontified t c-in-sws t face font-lock-string-face) 20 21 (fontified t c-in-sws t face font-lock-string-face) 21 22 (fontified t c-in-sws t face font-lock-string-face) 22 23 (fontified t c-in-sws t face font-lock-string-face) 23 24 (fontified t c-in-sws t face font-lock-string-face) 24 25 (fontified t c-in-sws t face font-lock-string-face) 25 26 (fontified t c-in-sws t face font-lock-string-face) 26 27 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax) 27 28 (fontified t c-in-sws t)) . 389) (undo-tree-id45 . -27) (undo-tree-id46 . -13) (undo-tree-id47 . -26) (undo-tree-id49 . 1) (undo-tree-id50 . -27) (undo-tree-id51 . -26) (undo-tree-id52 . -26) (undo-tree-id53 . -26) (undo-tree-id54 . -26) (undo-tree-id55 . -26) (undo-tree-id57 . -26) (undo-tree-id59 . -26) (undo-tree-id61 . -26) (undo-tree-id63 . -26) (undo-tree-id65 . -26) (undo-tree-id67 . -26) (undo-tree-id69 . -26) (undo-tree-id71 . -26) (undo-tree-id73 . -26) (undo-tree-id75 . -26) (undo-tree-id77 . -26) (undo-tree-id79 . -26) (undo-tree-id81 . -26) (undo-tree-id83 . -26) (undo-tree-id85 . -26) (undo-tree-id87 . -26) (undo-tree-id89 . -26) (undo-tree-id91 . -26) (undo-tree-id93 . -26) (undo-tree-id95 . -26) (undo-tree-id97 . -26) (undo-tree-id99 . -26) (undo-tree-id101 . -26) (undo-tree-id103 . -26) (undo-tree-id105 . -26) (undo-tree-id107 . -26) (undo-tree-id109 . -26) (undo-tree-id111 . -26) (undo-tree-id113 . -26) (undo-tree-id115 . -26) (undo-tree-id117 . -26) (undo-tree-id119 . -26) (undo-tree-id121 . -26) (undo-tree-id123 . -26) (undo-tree-id125 . -26) (undo-tree-id127 . -26) (undo-tree-id129 . -26) (undo-tree-id131 . -26) (undo-tree-id133 . -26) (undo-tree-id135 . -26) (undo-tree-id137 . -26) (undo-tree-id139 . -28) 415 (t 26231 62001 143215 635000)) ((389 . 417) (t 26231 62011 259460 609000)) (26231 62024 750239 742000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (fontified t face font-lock-constant-face)) . 444) (undo-tree-id264 . -5) (t 26231 62026 855838 260000)) nil (26231 62081 401668 574000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (fontified t face font-lock-constant-face)) . 444) (undo-tree-id146 . -5) (t 26231 62011 259460 609000)) ((444 . 450)) (26231 62024 379826 252000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 444) (undo-tree-id263 . -1)) nil (26231 62081 401665 116000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 444) (undo-tree-id145 . -1)) ((444 . 446)) (26231 62024 31235 615000) 0 nil])
([nil nil ((#("Node " 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t)) . 444) (undo-tree-id262 . -4)) nil (26231 62081 401662 107000) 0 nil])
([nil nil ((#("Node " 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t)) . 444) (undo-tree-id144 . -4)) ((444 . 449)) (26231 62023 648916 726000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-type-face)) . -444) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -445) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -446) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -447) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -448) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -449) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -450) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("l" 0 1 (fontified nil face font-lock-type-face)) . -451) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("i" 0 1 (fontified nil face font-lock-type-face)) . -452) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("f" 0 1 (fontified nil face font-lock-type-face)) . -453) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("e" 0 1 (fontified nil face font-lock-type-face)) . -454) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("c" 0 1 (fontified nil face font-lock-type-face)) . -455) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("y" 0 1 (fontified t face font-lock-type-face)) . -456) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("v" 0 1 (fontified t face font-lock-type-face)) . -457) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -458) (undo-tree-id260 . -1) (undo-tree-id261 . -1) 459 (456 . 459) (444 . 456)) nil (26231 62081 401646 957000) 0 nil])
([nil nil ((444 . 453)) ((#("rclcpp_li" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face)) . 444) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -9)) (26231 62023 313209 108000) 0 nil])
([nil nil ((416 . 435) (#("l" 0 1 (c-in-sws t fontified nil)) . 416) (416 . 417) (#("lifecycle_node.hpp>" 0 19 (c-in-sws t fontified nil)) . -416) (416 . 435) (#("l" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -416) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 417 (416 . 417) (399 . 416) (#("r" 0 1 (c-in-sws t fontified nil)) . 399) (399 . 400) (#("rclcpp_lifecycle/" 0 17 (c-in-sws t fontified nil)) . -399) (399 . 416) (#("rclc" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face)) . -399) (undo-tree-id223 . -4) (undo-tree-id224 . -3) (undo-tree-id225 . -4) (undo-tree-id226 . -4) 403 (399 . 403) (398 . 399) (390 . 398) (389 . 390)) nil (26231 62081 401583 279000) 0 nil])
([nil nil ((#("rclcpp" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face)) . 444) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -6)) ((444 . 450)) (26231 62022 998904 275000) 0 nil])
([nil nil ((435 . 436) (t 26231 62081 421159 206000)) nil (26231 62091 542997 621000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-type-face)) . 444) (undo-tree-id140 . -1)) ((444 . 445)) (26231 62022 996629 706000) 0 nil])
([nil nil ((509 . 522) (#("LifecycleNode" 0 13 (fontified nil)) . -509) (509 . 522) (#("L" 0 1 (fontified t face font-lock-type-face)) . -509) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 510 (509 . 510) (507 . 509) (491 . 507) (#("rclcpp_" 0 7 (fontified nil)) . 491) (491 . 498) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -491) (491 . 507) (#("rclcpp_" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face)) . -491) (undo-tree-id280 . -6) (undo-tree-id281 . -7) (undo-tree-id282 . -7) 498 (496 . 498) (494 . 496) (490 . 494)) nil (26231 62091 542983 655000) 0 nil])
nil
([nil nil ((#("rclcpp" 0 6 (fontified t face font-lock-constant-face)) . 586) (undo-tree-id294 . -5) (t 26231 62091 565404 737000)) nil (26231 62107 354162 455000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 586) (undo-tree-id293 . -1)) nil (26231 62107 354158 750000) 0 nil])
([nil nil ((#("Node" 0 4 (fontified t)) . 586) (undo-tree-id292 . -3)) nil (26231 62107 354155 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 586 640 #s(yas--snippet nil (#s(yas--field 0 618 639 nil nil nil nil nil)) nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 618 639 nil nil nil nil nil)) nil 1 nil nil nil nil)) (586 . 640) (#("rclcpp_lifecycle::LifecycleNode(${0:const LifecycleNode &})" 0 59 (fontified nil)) . 586) (586 . 645) (#("rcl" 0 3 (fontified nil)) . 586) (586 . 589) (#("rclcpp_lifecycle::LifecycleNode(const LifecycleNode &)" 0 54 (fontified nil)) . -586) (586 . 640) (#("rcl" 0 1 (fontified t) 1 3 (fontified t)) . -586) (undo-tree-id290 . -3) (undo-tree-id291 . -3) 589 (586 . 589)) nil (26231 62107 354149 448000) 0 nil])
([nil nil ((#("(const LifecycleNode &" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 20 (fontified t face font-lock-type-face) 20 22 (fontified t)) . 617) (undo-tree-id286 . -22) (undo-tree-id287 . 21) (undo-tree-id288 . -21) (undo-tree-id289 . -22)) nil (26231 62107 724925 270000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 617) (undo-tree-id295 . 1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1)) nil (26231 62110 934971 668000) 0 nil] [nil nil ((#("PraNode" 0 7 (fontified t face font-lock-string-face)) . 620) (undo-tree-id285 . -6)) ((620 . 627)) (26231 62107 357595 496000) 0 nil])
([nil nil ((638 . 642) (#(" " 0 1 (fontified nil)) . 637) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (638 . 639) (t 26231 62110 985874 750000)) nil (26231 62116 262221 8000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 620) (undo-tree-id283 . -1) (undo-tree-id284 . -1)) ((620 . 621) (nil syntax-table nil 632 . 633) (nil syntax-table (1) 619 . 620)) (26231 62107 354118 647000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 644) (undo-tree-id321 . -1) (t 26231 62116 286003 13000)) nil (26231 62121 174854 194000) 0 nil])
nil
([nil nil ((#("private" 0 7 (fontified t face font-lock-keyword-face)) . 858) (undo-tree-id332 . -6) (undo-tree-id333 . -7) (t 26231 62121 966140 472000)) nil (26231 62165 942665 892000) 0 nil] [nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 644) (undo-tree-id318 . -6) (undo-tree-id319 . -6) (undo-tree-id320 . -7)) ((644 . 651)) (26231 62121 172777 265000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 858) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1)) nil (26231 62165 942657 832000) 0 nil])
nil
([nil nil ((1061 . 1063) (#("    " 0 4 (fontified nil)) . 1061) (undo-tree-id322 . -4) (1072 . 1073) (1070 . 1072) (#("g" 0 1 (fontified t)) . -1070) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("e" 0 1 (fontified t)) . -1071) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 1072 (1065 . 1072) (1061 . 1065) (#("    " 0 4 (fontified nil)) . 1060) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (1059 . 1065)) nil (26231 62165 942641 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 984 . 985) (nil fontified nil 858 . 985) (858 . 985) 857 (t 26231 62165 995205 837000)) nil (26231 62198 415835 205000) 0 nil])
([nil nil ((934 . 938) (#("  " 0 2 (fontified nil)) . 934) (983 . 984) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -983) (983 . 984)) nil (26231 62198 415830 214000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -986) (undo-tree-id351 . -6) (undo-tree-id352 . -6) 992 (986 . 992) (985 . 991)) nil (26231 62198 415825 707000) 0 nil])
([nil nil ((#("      
      publisher = this->create_publisher<std_msgs::msg::String>(\"chat_here\", 10);
      timer = this->create_wall_timer(std::chrono::milliseconds(500),
				      std::bind(&PraPub::publish, this));
" 0 6 (fontified t) 6 7 (fontified t) 7 25 (fontified t) 25 29 (fontified t face font-lock-keyword-face) 29 47 (fontified t) 47 48 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 48 56 (fontified t face font-lock-constant-face) 56 58 (fontified t) 58 61 (fontified t face font-lock-constant-face) 61 69 (fontified t) 69 70 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 70 71 (fontified t face (rainbow-delimiters-depth-4-face)) 71 82 (fontified t face font-lock-string-face) 82 86 (fontified t) 86 87 (fontified t face (rainbow-delimiters-depth-4-face)) 87 88 (fontified t) 88 89 (fontified t) 89 103 (fontified t) 103 107 (fontified t face font-lock-keyword-face) 107 126 (fontified t) 126 127 (fontified t face (rainbow-delimiters-depth-4-face)) 127 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 138 (fontified t face font-lock-constant-face) 138 152 (fontified t) 152 153 (fontified t face (rainbow-delimiters-depth-5-face)) 153 156 (fontified t) 156 157 (fontified t face (rainbow-delimiters-depth-5-face)) 157 169 (fontified t) 169 172 (fontified t face font-lock-constant-face) 172 178 (fontified t) 178 179 (fontified t face (rainbow-delimiters-depth-5-face)) 179 180 (fontified t) 180 186 (fontified t face font-lock-constant-face) 186 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t face (rainbow-delimiters-depth-5-face)) 202 203 (fontified t face (rainbow-delimiters-depth-4-face)) 203 205 (fontified t)) . 644) (undo-tree-id344 . -204) (undo-tree-id345 . -204) (undo-tree-id346 . -204) (undo-tree-id347 . -7) (undo-tree-id348 . -204) (undo-tree-id349 . -205) (undo-tree-id350 . -204) 848) nil (26231 62198 415817 166000) 0 nil])
([nil nil ((nil rear-nonsticky nil 985 . 986) (nil fontified nil 851 . 986) (nil fontified nil 850 . 851) (nil category c->-as-paren-syntax 850 . 851) (nil fontified nil 829 . 850) (nil fontified nil 828 . 829) (nil category c-<-as-paren-syntax 828 . 829) (nil fontified nil 781 . 828) (781 . 986)) nil (26231 62198 415801 82000) 0 nil])
([nil nil ((781 . 787) (#("      " 0 6 (fontified t)) . 781)) nil (26231 62198 415795 108000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -643) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 644) nil (26231 62198 415790 248000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 643) (undo-tree-id334 . 4) (undo-tree-id335 . -3) (undo-tree-id336 . 4)) nil (26231 62258 783989 699000) 0 nil])
([nil nil ((#("    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher;
" 0 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t) 12 21 (fontified t face font-lock-constant-face) 21 22 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-constant-face) 35 37 (fontified t) 37 43 (fontified t) 43 44 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 44 46 (fontified t) 46 54 (fontified t face font-lock-type-face) 54 55 (fontified t c-type c-decl-id-start face font-lock-type-face) 55 56 (fontified t) 56 65 (fontified t face font-lock-variable-name-face) 65 66 (fontified t) 66 67 (fontified t)) . 1203) (undo-tree-id427 . 57) (undo-tree-id428 . -66) (undo-tree-id429 . -4) (undo-tree-id430 . -4) 1207 (t 26231 62198 439990 761000)) nil (26231 62312 321289 200000) 0 nil] [nil nil ((#("rclcpp" 0 6 (fontified t face font-lock-constant-face)) . 1207) (undo-tree-id353 . -5) (t 26231 62198 439990 761000)) ((1207 . 1213)) (26231 62258 780171 727000) 0 nil])
([nil nil ((1339 . 1340) (1320 . 1339) (1318 . 1320) (apply yas--snippet-revive 1277 1318 #s(yas--snippet nil (#s(yas--field 1 1296 1317 nil nil nil t nil)) nil 2 nil #s(yas--field 1 1296 1317 nil nil nil t nil) nil nil)) (1311 . 1317) (#("String" 0 6 (fontified nil)) . -1311) (1311 . 1317) (#("S" 0 1 (fontified t)) . -1311) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 1312 (1311 . 1312) (1309 . 1311) (1306 . 1309) (#("msg" 0 3 (fontified nil)) . -1306) (1306 . 1309) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1306) (undo-tree-id356 . -2) (undo-tree-id357 . -2) 1308 (1306 . 1308) (1304 . 1306) (nil fontified nil 1296 . 1304) (nil face (rainbow-delimiters-depth-3-face) 1296 . 1304) (1296 . 1304) (#("std" 0 3 (fontified nil)) . 1296) (nil fontified nil 1296 . 1299) (nil face (rainbow-delimiters-depth-3-face) 1296 . 1299) (1296 . 1299) (#("std_msgs" 0 8 (fontified nil)) . -1296) (nil fontified nil 1296 . 1304) (nil face (rainbow-delimiters-depth-3-face) 1296 . 1304) (1296 . 1304) (#("std_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1296) (undo-tree-id358 . -3) (undo-tree-id359 . -4) (undo-tree-id360 . -4) 1300 (1297 . 1300) (#("typename MessageT" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 17 (fontified nil face font-lock-type-face)) . 1297) (1296 . 1297) (304 . 356) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1296 1317 nil nil nil t nil)) nil 2 nil #s(yas--field 1 1296 1317 nil nil nil t nil) nil nil)) (1225 . 1262) (#("LifecyclePublisher<${1:typename MessageT}>" 0 42 (fontified nil)) . 1225) (1225 . 1267) (#("LifecyclePublisher<typename MessageT, typename Alloc>" 0 18 (fontified nil) 18 19 (category c-<-as-paren-syntax fontified nil) 19 36 (fontified nil) 36 37 (c-type c-<>-arg-sep fontified nil) 37 52 (fontified nil) 52 53 (category c->-as-paren-syntax fontified nil)) . -1225) (1225 . 1278) (#("L" 0 1 (fontified t face font-lock-type-face)) . -1225) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 1226 (1225 . 1226) (1203 . 1207) (#("  " 0 2 (fontified nil)) . 1203) (1222 . 1223) (1203 . 1205) (#("    " 0 4 (fontified nil)) . 1203) (undo-tree-id364 . -4) (1223 . 1224) (1207 . 1223) (#("rclcpp_" 0 7 (fontified nil)) . 1207) (1207 . 1214) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -1207) (1207 . 1223) (#("rclcpp_" 0 1 (fontified t face font-lock-type-face) 1 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face)) . -1207) (undo-tree-id365 . -5) (undo-tree-id366 . -7) (undo-tree-id367 . -7) 1214 (1207 . 1214) (#("s" 0 1 (fontified t)) . -1207) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("t" 0 1 (fontified t)) . -1208) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("d" 0 1 (fontified t)) . -1209) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#(":" 0 1 (fontified t c-type c-decl-end)) . -1210) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#(":" 0 1 (fontified t)) . -1211) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("s" 0 1 (fontified t)) . -1212) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#("h" 0 1 (fontified t)) . -1213) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("a" 0 1 (fontified t)) . -1214) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("r" 0 1 (fontified t)) . -1215) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("e" 0 1 (fontified t)) . -1216) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("d" 0 1 (fontified nil)) . -1217) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("_" 0 1 (fontified nil)) . -1218) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("p" 0 1 (fontified nil)) . -1219) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("t" 0 1 (fontified nil)) . -1220) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("r" 0 1 (fontified t)) . -1221) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#("<" 0 1 (fontified t)) . -1222) (undo-tree-id413 . -1) (undo-tree-id414 . -1) 1223 (1222 . 1223) (1220 . 1222) (#("r" 0 1 (fontified t)) . -1220) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("t" 0 1 (fontified t)) . -1221) (undo-tree-id417 . -1) (undo-tree-id418 . -1) 1222 (1213 . 1222) (#("h" 0 1 (fontified t)) . -1213) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("a" 0 1 (fontified t)) . -1214) (undo-tree-id422 . -1) (undo-tree-id423 . -1) 1215 (1213 . 1215) (#("a" 0 1 (fontified t)) . -1213) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) 1214 (1212 . 1214) (1203 . 1207) (#("  " 0 2 (fontified nil)) . 1203) (1209 . 1210) (1203 . 1205) (#("    " 0 4 (fontified nil)) . 1203) (1210 . 1211) (1207 . 1210) (1202 . 1207)) nil (26231 62312 321239 756000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -1255) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) 1259 (1254 . 1259) (t 26231 62312 374746 202000)) nil (26231 62325 955390 744000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1343) (undo-tree-id568 . -4) (undo-tree-id569 . -4) 1347 (1343 . 1347) (#("    " 0 4 (fontified nil)) . 1342) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (1341 . 1347) (t 26231 62326 7075 800000)) nil (26231 62730 177786 742000) 0 nil])
([nil nil ((1352 . 1355) (#("S" 0 1 (fontified t)) . -1352) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) 1353 (1352 . 1353) (1343 . 1347) (#("  " 0 2 (fontified nil)) . 1343) (1349 . 1350) (1343 . 1345) (#("    " 0 4 (fontified nil)) . 1343) (1350 . 1351) (1347 . 1350) (1343 . 1347) (#("    " 0 4 (fontified nil)) . 1342) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (1346 . 1347) (1342 . 1346)) nil (26231 62730 177773 403000) 0 nil])
([nil nil ((#("    std::sha
" 0 4 (fontified t) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 1343) (undo-tree-id558 . -9) (undo-tree-id559 . 1) (undo-tree-id560 . -12) (undo-tree-id561 . -11) (undo-tree-id562 . -11) 1354) nil (26231 62730 177757 960000) 0 nil])
([nil nil ((#("    rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::String>::SharedPtr publisher;
" 0 4 (fontified t) 4 20 (fontified t face font-lock-constant-face) 20 21 (fontified t) 21 22 (fontified t) 22 40 (fontified t face font-lock-constant-face) 40 41 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-3-face)) 41 49 (fontified t face font-lock-constant-face) 49 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t face font-lock-constant-face) 54 55 (fontified t) 55 56 (fontified t) 56 62 (fontified t) 62 63 (fontified t category c->-as-paren-syntax face (rainbow-delimiters-depth-3-face)) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t face font-lock-type-face) 66 67 (fontified t face font-lock-type-face) 67 68 (fontified t face font-lock-type-face) 68 69 (fontified t face font-lock-type-face) 69 70 (fontified t face font-lock-type-face) 70 71 (fontified t face font-lock-type-face) 71 72 (fontified t face font-lock-type-face) 72 73 (fontified t face font-lock-type-face) 73 74 (fontified t c-type c-decl-id-start face font-lock-type-face) 74 75 (fontified t) 75 76 (fontified t face font-lock-variable-name-face) 76 77 (fontified t face font-lock-variable-name-face) 77 78 (fontified t face font-lock-variable-name-face) 78 79 (fontified t face font-lock-variable-name-face) 79 80 (fontified t face font-lock-variable-name-face) 80 81 (fontified t face font-lock-variable-name-face) 81 82 (fontified t face font-lock-variable-name-face) 82 83 (fontified t face font-lock-variable-name-face) 83 84 (fontified t face font-lock-variable-name-face) 84 85 (fontified t) 85 86 (fontified t)) . 1256) (undo-tree-id554 . -85) (undo-tree-id555 . -11) (undo-tree-id556 . -11) (undo-tree-id557 . -11)) nil (26231 62730 177659 619000) 0 nil])
([nil nil ((1345 . 1346) (1335 . 1345) (apply yas--snippet-revive 1294 1335 #s(yas--snippet nil (#s(yas--field 1 1313 1334 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1313 1334 nil nil nil t nil) nil nil)) (1328 . 1334) (#("S" 0 1 (fontified nil)) . 1328) (1328 . 1329) (#("String" 0 6 (fontified nil)) . -1328) (1328 . 1334) (#("St" 0 1 (fontified t) 1 2 (fontified t)) . -1328) (undo-tree-id462 . -2) (undo-tree-id463 . -2) 1330 (1328 . 1330) (1326 . 1328) (1323 . 1326) (#("msg" 0 3 (fontified nil)) . -1323) (1323 . 1326) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -1323) (undo-tree-id464 . -2) (undo-tree-id465 . -2) 1325 (1323 . 1325) (1321 . 1323) (nil fontified nil 1313 . 1321) (nil face (rainbow-delimiters-depth-3-face) 1313 . 1321) (1313 . 1321) (#("std_" 0 4 (fontified nil)) . 1313) (nil fontified nil 1313 . 1317) (nil face (rainbow-delimiters-depth-3-face) 1313 . 1317) (1313 . 1317) (#("std_msgs" 0 8 (fontified nil)) . -1313) (nil fontified nil 1313 . 1321) (nil face (rainbow-delimiters-depth-3-face) 1313 . 1321) (1313 . 1321) (#("std_ms" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1313) (undo-tree-id466 . -4) (undo-tree-id467 . -6) (undo-tree-id468 . -6) 1319 (1316 . 1319) (#(":" 0 1 (fontified t)) . -1316) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#(":" 0 1 (fontified t)) . -1317) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 1318 (1316 . 1318) (1314 . 1316) (#("typename MessageT" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 17 (fontified nil face font-lock-type-face)) . 1314) (1313 . 1314) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1313 1334 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1313 1334 nil nil nil t nil) nil nil)) (1294 . 1331) (#("LifecyclePublisher<${1:typename MessageT}>" 0 42 (fontified nil)) . 1294) (1294 . 1336) (#("LifecyclePublisher<typename MessageT, typename Alloc>" 0 18 (fontified nil) 18 19 (category c-<-as-paren-syntax fontified nil) 19 36 (fontified nil) 36 37 (c-type c-<>-arg-sep fontified nil) 37 52 (fontified nil) 52 53 (category c->-as-paren-syntax fontified nil)) . -1294) (1294 . 1347) (#("L" 0 1 (fontified t)) . -1294) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) 1295 (1294 . 1295) (#("N" 0 1 (fontified t)) . -1294) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) 1295 (1294 . 1295) (1292 . 1294) (1276 . 1292) (#("rclc" 0 4 (fontified nil)) . 1276) (1276 . 1280) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -1276) (1276 . 1292) (#("rclc" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1276) (undo-tree-id479 . -4) (undo-tree-id480 . -4) 1280 (1278 . 1280) (#("l" 0 1 (fontified t)) . -1278) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("_" 0 1 (fontified t)) . -1279) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("i" 0 1 (fontified t)) . -1280) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("n" 0 1 (fontified t)) . -1281) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("t" 0 1 (fontified t)) . -1282) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("e" 0 1 (fontified t)) . -1283) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("r" 0 1 (fontified t)) . -1284) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("f" 0 1 (fontified t)) . -1285) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("a" 0 1 (fontified t)) . -1286) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("c" 0 1 (fontified t)) . -1287) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("e" 0 1 (fontified t)) . -1288) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("s" 0 1 (fontified t)) . -1289) (undo-tree-id503 . -1) (undo-tree-id504 . -1) 1290 (1276 . 1290) (#("rcl" 0 3 (fontified nil)) . 1276) (1276 . 1279) (#("rcl_interfaces" 0 14 (fontified nil)) . -1276) (1276 . 1290) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1276) (undo-tree-id505 . -3) (undo-tree-id506 . -3) 1279 (1276 . 1279) (#("t" 0 1 (fontified t)) . -1276) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("c" 0 1 (fontified t)) . -1277) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("l" 0 1 (fontified t)) . -1278) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 1279 (1276 . 1279) (1275 . 1276) (1274 . 1275) (1273 . 1274) (#("r" 0 1 (fontified t)) . -1273) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("t" 0 1 (fontified t)) . -1274) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 1275 (1268 . 1275) (#("r" 0 1 (fontified t)) . -1268) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("e" 0 1 (fontified t)) . -1269) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (#("d" 0 1 (fontified t)) . -1270) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("_" 0 1 (fontified t)) . -1271) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("p" 0 1 (fontified t)) . -1272) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("t" 0 1 (fontified t)) . -1273) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("r" 0 1 (fontified t)) . -1274) (undo-tree-id529 . -1) (undo-tree-id530 . -1) 1275 (1272 . 1275) (#("t" 0 1 (fontified t)) . -1272) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("o" 0 1 (fontified t)) . -1273) (undo-tree-id533 . -1) (undo-tree-id534 . -1) 1274 (1268 . 1274) (1266 . 1268) (1265 . 1266) (#("s" 0 1 (fontified t)) . -1265) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("h" 0 1 (fontified t)) . -1266) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (#("a" 0 1 (fontified t)) . -1267) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("r" 0 1 (fontified t)) . -1268) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (#("e" 0 1 (fontified t)) . -1269) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("d" 0 1 (fontified t)) . -1270) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("_" 0 1 (fontified t)) . -1271) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("p" 0 1 (fontified t)) . -1272) (undo-tree-id552 . -1) (undo-tree-id553 . -1) 1273 (1265 . 1273) (1256 . 1260) (#("  " 0 2 (fontified nil)) . 1256) (1262 . 1263) (1256 . 1258) (#("    " 0 4 (fontified nil)) . 1256) (1263 . 1264) (1260 . 1263) (1256 . 1260)) nil (26231 62730 177616 958000) 0 nil])
([nil nil ((1345 . 1346) (1343 . 1345) (#("r" 0 1 (fontified t)) . -1343) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("e" 0 1 (fontified t)) . -1344) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#(";" 0 1 (fontified t)) . -1345) (undo-tree-id460 . -1) (undo-tree-id461 . -1) 1346) nil (26231 62730 177421 354000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1344 . 1345) (nil fontified nil 1336 . 1345) (1336 . 1345) (#("publisher" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . 1336) (undo-tree-id572 . -9) (undo-tree-id573 . -8) (undo-tree-id574 . -8) (undo-tree-id575 . -9) (undo-tree-id576 . -8) (undo-tree-id577 . -9) (undo-tree-id578 . -9) (undo-tree-id579 . -9) (undo-tree-id580 . -8) (undo-tree-id581 . -9) (undo-tree-id582 . -9) (undo-tree-id583 . -9) (undo-tree-id584 . -9) (undo-tree-id585 . -9) (undo-tree-id586 . -9) (undo-tree-id587 . -9) (undo-tree-id588 . -9) (undo-tree-id589 . -9) (undo-tree-id590 . -9) (undo-tree-id591 . -9) (undo-tree-id592 . -9) (undo-tree-id593 . -9) (undo-tree-id594 . -9) (undo-tree-id595 . -9) (undo-tree-id596 . -9) (undo-tree-id597 . -9) (undo-tree-id598 . -9) (undo-tree-id599 . -9) (undo-tree-id600 . -9) (undo-tree-id601 . -9) (undo-tree-id602 . -9) (undo-tree-id603 . -9) (undo-tree-id604 . -9) (undo-tree-id605 . -9) (undo-tree-id606 . -9) (undo-tree-id607 . -9) (undo-tree-id608 . -9) (undo-tree-id609 . -9) (undo-tree-id610 . -9) (undo-tree-id611 . -9) (undo-tree-id612 . -9) (undo-tree-id613 . -9) (undo-tree-id614 . -9) (undo-tree-id615 . -9) (undo-tree-id616 . -9) (undo-tree-id617 . -9) (undo-tree-id618 . -9) (undo-tree-id619 . -9) (undo-tree-id620 . -8) (undo-tree-id621 . -8) (undo-tree-id622 . -8) (undo-tree-id623 . -8) (undo-tree-id624 . -8) (undo-tree-id625 . -8) (undo-tree-id626 . -8) (undo-tree-id627 . -8) (undo-tree-id628 . -8) (undo-tree-id629 . -8) (undo-tree-id630 . -8) (undo-tree-id631 . -8) (undo-tree-id632 . -8) (undo-tree-id633 . -8) (undo-tree-id634 . -8) (undo-tree-id635 . -8) (undo-tree-id636 . -8) (undo-tree-id637 . -8) (undo-tree-id638 . -8) (undo-tree-id639 . -8) (undo-tree-id640 . -8) (undo-tree-id641 . -9) (undo-tree-id642 . -9) 1345 (t 26231 62730 204842 795000)) nil (26231 62755 171953 219000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1147) (undo-tree-id657 . -6) (undo-tree-id658 . -6) 1153 (1147 . 1153) (#("      " 0 6 (fontified nil)) . 1146) (undo-tree-id659 . -6) (undo-tree-id660 . -6) (1145 . 1153) (t 26231 62755 225447 116000)) nil (26231 62805 700890 591000) 0 nil])
([nil nil ((1148 . 1154) (#("      " 0 6 (fontified nil)) . 1147) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (1153 . 1154) (1147 . 1153)) nil (26231 62805 700880 480000) 0 nil])
([nil nil ((1177 . 1179) (1176 . 1177) (1168 . 1176) (1167 . 1168) (1166 . 1167) (1157 . 1166) (#("pu" 0 2 (fontified nil)) . 1157) (1157 . 1159) (#("publisher" 0 9 (fontified nil)) . -1157) (1157 . 1166) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -1157) (undo-tree-id653 . -2) (undo-tree-id654 . -2) 1159 (1157 . 1159) (1156 . 1158) (1153 . 1156) (1147 . 1153)) nil (26231 62805 700872 113000) 0 nil])
([nil nil ((1176 . 1180) (#("e" 0 1 (fontified t)) . -1176) (undo-tree-id651 . -1) (undo-tree-id652 . -1) 1177) nil (26231 62805 700861 443000) 0 nil])
([nil nil ((1186 . 1187) (1185 . 1193) (1184 . 1186) (1183 . 1184)) nil (26231 62805 700855 667000) 0 nil])
([nil nil ((#("      RCLCPP_INFO(this->get_logger(), \"sent Message\");
" 0 2 (fontified t) 2 6 (fontified t) 6 7 (fontified t) 7 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-4-face)) 18 22 (fontified t face font-lock-keyword-face) 22 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-5-face)) 35 36 (fontified t face (rainbow-delimiters-depth-5-face)) 36 37 (fontified t) 37 38 (fontified t) 38 51 (fontified t face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 53 (fontified t face (rainbow-delimiters-depth-4-face)) 53 54 (fontified t) 54 55 (fontified t)) . 1203) (undo-tree-id650 . -54)) nil (26231 62805 700852 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1193 . 1194) (#("
" 0 1 (fontified nil)) . -1242) (1187 . 1243) 1186) nil (26231 62805 700849 42000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1186) (undo-tree-id649 . -1)) nil (26231 62805 700845 510000) 0 nil])
([nil nil ((1186 . 1187) (#("      " 0 2 (fontified t) 2 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . 1186)) nil (26231 62805 700841 255000) 0 nil])
([nil nil ((#("else" 0 4 (fontified nil face font-lock-keyword-face)) . 1248) (undo-tree-id645 . -4) (1244 . 1248) 1252 (1251 . 1252) (1250 . 1258) (1249 . 1251) (1248 . 1249) (#("else" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 1248) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (1244 . 1248) 1248 (1243 . 1248)) nil (26231 62805 700835 927000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1253 . 1254) (#("
" 0 1 (fontified nil)) . -1302) (1252 . 1303) 1251) nil (26231 62805 700821 513000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1251) (undo-tree-id643 . -1) (undo-tree-id644 . -2)) nil (26231 62805 700815 161000) 0 nil])
([nil nil ((1285 . 1289)) nil (26231 62805 700786 250000) 0 nil])
([nil nil ((#("message" 0 7 (fontified t)) . 1345) (undo-tree-id692 . -6) (undo-tree-id693 . -7) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . -7) (undo-tree-id698 . -7) (undo-tree-id699 . -7) (undo-tree-id700 . -7) (t 26231 62805 754667 462000)) nil (26231 62832 238213 933000) 0 nil])
([nil nil ((1345 . 1352) (#("mes" 0 3 (fontified nil)) . 1345) (1345 . 1348) (#("message" 0 7 (fontified nil)) . -1345) (1345 . 1352) (#("mess" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1345) (undo-tree-id661 . -4) (undo-tree-id662 . -4) (undo-tree-id663 . -4) 1349 (1345 . 1349) (#("m" 0 1 (fontified t)) . -1345) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 1346 (1345 . 1346) (#("s" 0 1 (fontified t)) . -1345) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("t" 0 1 (fontified t)) . -1346) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("d" 0 1 (fontified t)) . -1347) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(":" 0 1 (fontified t)) . -1348) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#(":" 0 1 (fontified t)) . -1349) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("m" 0 1 (fontified t)) . -1350) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("o" 0 1 (fontified t)) . -1351) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("v" 0 1 (fontified t)) . -1352) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("e" 0 1 (fontified t)) . -1353) (undo-tree-id690 . -1) (undo-tree-id691 . -1) 1354 (1350 . 1354) (1348 . 1350) (1345 . 1348)) nil (26231 62832 238178 111000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1362) (undo-tree-id761 . -4) (undo-tree-id762 . -4) 1366 (1362 . 1366) (#("    " 0 4 (fontified nil)) . 1361) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (1360 . 1366) (t 26231 62832 267307 735000)) nil (26231 62866 994356 433000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1942 . 1943) (nil fontified nil 1633 . 1943) (nil fontified nil 1632 . 1633) (nil fontified nil 1362 . 1632) (1362 . 1943)) nil (26231 62866 994187 47000) 0 nil])
([nil nil ((1362 . 1366) (#("  " 0 2 (fontified t)) . 1362)) nil (26231 62866 994183 215000) 0 nil])
([nil nil ((1440 . 1444) (#("  " 0 2 (fontified t)) . 1440) 1444) nil (26231 62866 994180 157000) 0 nil])
([nil nil ((1497 . 1503) (#("    " 0 4 (fontified t)) . 1497) 1503) nil (26231 62866 994177 605000) 0 nil])
([nil nil ((1564 . 1570)) nil (26231 62866 994174 362000) 0 nil])
([nil nil ((1571 . 1577) (#("    " 0 4 (fontified t)) . 1571) 1576) nil (26231 62866 994172 125000) 0 nil])
([nil nil ((1630 . 1636)) nil (26231 62866 994169 680000) 0 nil])
([nil nil ((1637 . 1643) (#("   " 0 3 (fontified nil)) . -1637) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (#(" " 0 1 (fontified t)) . 1640)) nil (26231 62866 994166 384000) 0 nil])
([nil nil ((1644 . 1650) (#("    " 0 4 (fontified t c-in-sws t c-is-sws t)) . 1644) 1649) nil (26231 62866 994160 552000) 0 nil])
([nil nil ((1680 . 1686) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t)) . 1680) 1687) nil (26231 62866 994157 752000) 0 nil])
([nil nil ((1723 . 1729) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t)) . 1723) 1732) nil (26231 62866 994154 893000) 0 nil])
([nil nil ((1762 . 1768) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t)) . 1762) 1773) nil (26231 62866 994152 225000) 0 nil])
([nil nil ((1830 . 1836)) nil (26231 62866 994149 888000) 0 nil])
([nil nil ((1837 . 1843) (#("    " 0 4 (fontified t c-in-sws t c-is-sws t)) . 1837) 1842) nil (26231 62866 994147 690000) 0 nil])
([nil nil ((1976 . 1980) (#("  " 0 2 (fontified t)) . -1976) (undo-tree-id758 . -2) 1978) nil (26231 62866 994144 114000) 0 nil])
([nil nil ((1982 . 1986)) nil (26231 62866 994136 313000) 0 nil])
([nil nil ((1982 . 1986) (#("   " 0 3 (fontified nil)) . -1982) (undo-tree-id745 . -3) (undo-tree-id746 . -3) (undo-tree-id747 . -3) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (#(" " 0 1 (fontified t)) . 1985) (undo-tree-id757 . -1)) nil (26231 62866 994132 585000) 0 nil])
([nil nil ((1987 . 1991)) nil (26231 62866 994108 241000) 0 nil])
([nil nil ((#("   // Let's sleep for 2 seconds.
      // We emulate we are doing important
      // work in the activating phase.
      std::this_thread::sleep_for(std::chrono::milliseconds(2000));
    " 0 3 (fontified t c-in-sws t c-is-sws t) 3 4 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 4 6 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 6 9 (fontified t c-in-sws t face font-lock-comment-face) 9 10 (fontified t c-in-sws t face font-lock-comment-face) 10 32 (fontified t c-in-sws t face font-lock-comment-face) 32 33 (fontified t face font-lock-comment-face c-in-sws t) 33 34 (fontified t c-in-sws t) 34 39 (fontified t c-in-sws t) 39 40 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 40 42 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 42 75 (fontified t c-in-sws t face font-lock-comment-face) 75 76 (fontified t face font-lock-comment-face c-in-sws t) 76 77 (fontified t c-in-sws t) 77 82 (fontified t c-in-sws t) 82 83 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 83 85 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 85 114 (fontified t c-in-sws t face font-lock-comment-face) 114 115 (fontified t face font-lock-comment-face c-in-sws t) 115 116 (fontified t c-is-sws t c-in-sws t) 116 121 (fontified t c-is-sws t c-in-sws t) 121 122 (fontified t c-is-sws t face font-lock-constant-face) 122 124 (fontified t face font-lock-constant-face) 124 126 (fontified t) 126 137 (fontified t face font-lock-constant-face) 137 148 (fontified t) 148 149 (fontified t face (rainbow-delimiters-depth-4-face)) 149 152 (fontified t face font-lock-constant-face) 152 154 (fontified t) 154 160 (fontified t face font-lock-constant-face) 160 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-5-face)) 175 179 (fontified t) 179 180 (fontified t face (rainbow-delimiters-depth-5-face)) 180 181 (fontified t face (rainbow-delimiters-depth-4-face)) 181 183 (fontified t) 183 187 (fontified t)) . 1647) (undo-tree-id701 . -186) (undo-tree-id702 . -186) (undo-tree-id703 . -186) (undo-tree-id704 . -186) (undo-tree-id705 . -186) (undo-tree-id706 . -186) (undo-tree-id707 . -186) (undo-tree-id708 . -186) (undo-tree-id709 . -186) (undo-tree-id710 . -186) (undo-tree-id711 . -186) (undo-tree-id712 . -187) (undo-tree-id713 . -186) (undo-tree-id714 . -186) (undo-tree-id715 . -186) (undo-tree-id716 . -186) (undo-tree-id717 . -186) (undo-tree-id718 . -186) (undo-tree-id719 . -186) (undo-tree-id720 . -186) (undo-tree-id721 . -186) (undo-tree-id722 . -186) (undo-tree-id723 . -118) (undo-tree-id724 . -118) (undo-tree-id725 . -118) (undo-tree-id726 . -118) (undo-tree-id727 . -118) (undo-tree-id728 . -118) (undo-tree-id729 . -118) (undo-tree-id730 . -79) (undo-tree-id731 . -79) (undo-tree-id732 . -79) (undo-tree-id733 . -79) (undo-tree-id734 . -79) (undo-tree-id735 . -79) (undo-tree-id736 . -79) (undo-tree-id737 . -36) (undo-tree-id738 . -36) (undo-tree-id739 . -36) (undo-tree-id740 . -36) (undo-tree-id741 . -36) (undo-tree-id742 . -36) (undo-tree-id743 . -36) (undo-tree-id744 . -187)) nil (26231 62866 994095 687000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1637) (undo-tree-id885 . -6) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -7) 1640 (t 26231 62867 20146 988000)) nil (26231 62868 789942 972000) 0 nil])
([nil nil ((#("     
" 0 3 (fontified t) 3 5 (fontified t) 5 6 (fontified t)) . 1637) (undo-tree-id765 . -3) (undo-tree-id766 . -5) (undo-tree-id767 . -3) (undo-tree-id768 . 3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -3) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -3) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -3) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -5) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -6) 1640) nil (26231 62868 789889 189000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2213 . 2214) (nil fontified nil 1791 . 2214) (1791 . 2214) 1790 (t 26231 62868 816190 360000)) nil (26231 62895 468358 192000) 0 nil])
([nil nil ((1782 . 1786) (#("    " 0 4 (fontified t)) . 1782)) nil (26231 62895 468354 836000) 0 nil])
([nil nil ((1787 . 1791) (#("      " 0 4 (fontified t) 4 6 (fontified t)) . 1787) (undo-tree-id996 . -4) (undo-tree-id997 . -4) (undo-tree-id998 . -3) (undo-tree-id999 . -3) 1790) nil (26231 62895 468351 369000) 0 nil])
([nil nil ((1865 . 1869) (#("  " 0 2 (fontified t)) . 1865) 1869) nil (26231 62895 468342 325000) 0 nil])
([nil nil ((1924 . 1930)) nil (26231 62895 468340 142000) 0 nil])
([nil nil ((1931 . 1937) (#("    " 0 4 (fontified t)) . 1931) 1936) nil (26231 62895 468338 76000) 0 nil])
([nil nil ((1992 . 1998) (#("	" 0 1 (fontified nil)) . -1992) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("						     " 0 11 (fontified t)) . 1993)) nil (26231 62895 468334 692000) 0 nil])
([nil nil ((1999 . 2005)) nil (26231 62895 468329 688000) 0 nil])
([nil nil ((2006 . 2012)) nil (26231 62895 468328 267000) 0 nil])
([nil nil ((2013 . 2019) (#("    " 0 4 (fontified t)) . 2013) 2018) nil (26231 62895 468326 190000) 0 nil])
([nil nil ((2082 . 2088)) nil (26231 62895 468323 830000) 0 nil])
([nil nil ((2089 . 2095)) nil (26231 62895 468322 97000) 0 nil])
([nil nil ((2096 . 2102) (#("    " 0 4 (fontified t)) . 2096) 2101) nil (26231 62895 468319 440000) 0 nil])
([nil nil ((2144 . 2150) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t)) . 2144) 2151) nil (26231 62895 468316 661000) 0 nil])
([nil nil ((2241 . 2245) (#("  " 0 2 (fontified t)) . -2241) 2243) nil (26231 62895 468313 745000) 0 nil])
([nil nil ((2247 . 2251) (#(" " 0 1 (fontified t rear-nonsticky t)) . 2247)) nil (26231 62895 468311 126000) 0 nil])
([nil nil ((2252 . 2256)) nil (26231 62895 468308 536000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1999) (undo-tree-id991 . -6) (undo-tree-id992 . -4) (undo-tree-id993 . -4) 2003) nil (26231 62895 468305 621000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1999) (undo-tree-id988 . -6) (undo-tree-id989 . -4) (undo-tree-id990 . -4) 2003) nil (26231 62895 468296 661000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 2068) (undo-tree-id906 . -6) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -7) 2072) nil (26231 62895 468274 181000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2228) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) 2232 (2228 . 2232) (#("    " 0 4 (fontified nil)) . 2227) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (2227 . 2232) (#("    " 0 4 (fontified nil)) . 2226) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (2230 . 2231) (t 26231 62895 520835 232000)) nil (26231 62946 943085 49000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2679 . 2680) (nil fontified nil 2228 . 2680) (2228 . 2680)) nil (26231 62946 943067 266000) 0 nil])
([nil nil ((2228 . 2232) (#("  " 0 2 (fontified t)) . 2228)) nil (26231 62946 943064 498000) 0 nil])
([nil nil ((2306 . 2310) (#("  " 0 2 (fontified t)) . 2306) 2310) nil (26231 62946 943061 953000) 0 nil])
([nil nil ((2362 . 2368) (#("    " 0 4 (fontified t)) . 2362) 2368) nil (26231 62946 943059 99000) 0 nil])
([nil nil ((2383 . 2389) (#("    " 0 4 (fontified t)) . 2383) 2391) nil (26231 62946 943056 391000) 0 nil])
([nil nil ((2408 . 2414)) nil (26231 62946 943054 41000) 0 nil])
([nil nil ((2415 . 2421) (#("    " 0 4 (fontified t)) . 2415) 2420) nil (26231 62946 943051 824000) 0 nil])
([nil nil ((2473 . 2479) (#("   " 0 3 (fontified nil)) . -2473) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (#(" " 0 1 (fontified t)) . 2476)) nil (26231 62946 943048 525000) 0 nil])
([nil nil ((2480 . 2486) (#("    " 0 4 (fontified t)) . 2480) 2485) nil (26231 62946 943042 284000) 0 nil])
([nil nil ((2544 . 2550) (#("   " 0 3 (fontified t)) . 2544) 2551) nil (26231 62946 943039 147000) 0 nil])
([nil nil ((2577 . 2583) (#("   " 0 1 (fontified t c-is-sws t c-in-sws t) 1 3 (fontified t c-in-sws t c-is-sws t)) . 2577) 2587) nil (26231 62946 943036 503000) 0 nil])
([nil nil ((2606 . 2612) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t)) . 2606) 2619) nil (26231 62946 943033 573000) 0 nil])
([nil nil ((2703 . 2707) (#("  " 0 2 (fontified t)) . -2703) 2705) nil (26231 62946 943030 838000) 0 nil])
([nil nil ((2709 . 2713)) nil (26231 62946 943028 595000) 0 nil])
([nil nil ((2714 . 2718)) nil (26231 62946 943026 832000) 0 nil])
([nil nil ((2473 . 2479) (#("     " 0 5 (fontified nil)) . -2473) (undo-tree-id1005 . -5) (#(" " 0 1 (fontified t)) . 2478)) nil (26231 62946 943023 705000) 0 nil])
([nil nil ((2408 . 2414) (#("     " 0 5 (fontified nil)) . -2408) (undo-tree-id1004 . -5) (#(" " 0 1 (fontified t)) . 2413)) nil (26231 62946 943018 642000) 0 nil])
([nil nil ((2710 . 2714) (#("    " 0 4 (fontified nil)) . 2709) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) (2708 . 2714)) nil (26231 62946 943013 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3224 . 3225) (nil fontified nil 2714 . 3225) (2714 . 3225) 2713) nil (26231 62946 943006 347000) 0 nil])
([nil nil ((2715 . 2719) (#("  " 0 2 (fontified t)) . 2715)) nil (26231 62946 943003 97000) 0 nil])
([nil nil ((2793 . 2797) (#("  " 0 2 (fontified t)) . 2793) 2797) nil (26231 62946 943000 266000) 0 nil])
([nil nil ((2850 . 2856) (#("    " 0 4 (fontified t)) . 2850) 2856) nil (26231 62946 942997 315000) 0 nil])
([nil nil ((2871 . 2877) (#("    " 0 4 (fontified t)) . 2871) 2879) nil (26231 62946 942994 749000) 0 nil])
([nil nil ((2896 . 2902)) nil (26231 62946 942992 401000) 0 nil])
([nil nil ((2903 . 2909) (#("    " 0 4 (fontified t)) . 2903) 2908) nil (26231 62946 942990 251000) 0 nil])
([nil nil ((2962 . 2968)) nil (26231 62946 942987 972000) 0 nil])
([nil nil ((2969 . 2975) (#("    " 0 4 (fontified t)) . 2969) 2974) nil (26231 62946 942986 4000) 0 nil])
([nil nil ((3064 . 3070)) nil (26231 62946 942983 783000) 0 nil])
([nil nil ((3071 . 3077) (#("   " 0 3 (fontified t c-in-sws t c-is-sws t)) . 3071) 3076) nil (26231 62946 942981 765000) 0 nil])
([nil nil ((3122 . 3128) (#("   " 0 1 (fontified t c-is-sws t c-in-sws t) 1 3 (fontified t c-in-sws t c-is-sws t)) . 3122) 3130) nil (26231 62946 942979 97000) 0 nil])
([nil nil ((3158 . 3164) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 3158)) nil (26231 62946 942975 363000) 0 nil])
([nil nil ((3165 . 3171)) nil (26231 62946 942973 237000) 0 nil])
([nil nil ((3172 . 3178) (#("    " 0 4 (fontified t c-in-sws t c-is-sws t)) . 3172) 3177) nil (26231 62946 942970 862000) 0 nil])
([nil nil ((3269 . 3273) (#("  " 0 2 (fontified t)) . -3269) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) 3271) nil (26231 62946 942966 22000) 0 nil])
([nil nil ((3275 . 3279)) nil (26231 62946 942942 844000) 0 nil])
([nil nil ((3280 . 3284)) nil (26231 62946 942931 672000) 0 nil])
([nil nil ((3392 . 3393) (t 26231 62946 998078 252000)) nil (26231 63026 357795 703000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1035) (undo-tree-id1023 . -6) (undo-tree-id1024 . -6) 1041 (1035 . 1041) (#("      " 0 6 (fontified nil)) . 1034) (undo-tree-id1025 . -6) (undo-tree-id1026 . -6) (1034 . 1041) (#("      " 0 6 (fontified nil)) . 1033) (undo-tree-id1027 . -6) (undo-tree-id1028 . -6) (1032 . 1040) (t 26231 63026 383995 44000)) nil (26231 63090 131429 159000) 0 nil])
([nil nil ((1189 . 1196) (#("SUCCESS" 0 7 (fontified nil)) . -1189) (1189 . 1196) (1187 . 1189) (1173 . 1187) (#("CallbackReturn" 0 14 (fontified nil)) . -1173) (1173 . 1187) (#("C" 0 1 (fontified t)) . -1173) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) 1174 (1173 . 1174) (#("S" 0 1 (fontified t)) . -1173) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) 1174 (1173 . 1174) (1172 . 1173) (1171 . 1172) (356 . 429) (1076 . 1098) (#("LifecycleNodeInterface" 0 22 (fontified nil)) . -1076) (1076 . 1098) (1074 . 1076) (1059 . 1074) (#("node_interfaces" 0 15 (fontified nil)) . -1059) (1059 . 1074) (#("node" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1059) (undo-tree-id1018 . -1) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) 1063 (1059 . 1063) (1035 . 1041) (#("    " 0 4 (fontified nil)) . 1035) (1056 . 1057) (1035 . 1039) (#("      " 0 6 (fontified nil)) . 1035) (1057 . 1058) (1041 . 1057) (#("r" 0 1 (fontified nil)) . 1041) (1041 . 1042) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -1041) (1041 . 1057) (#("r" 0 1 (fontified t)) . -1041) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) 1042 (1041 . 1042) (1035 . 1041)) nil (26231 63090 131404 941000) 0 nil])
([nil nil ((1196 . 1197)) nil (26231 63090 131342 8000) 0 nil])
([nil current ((1114 . 1121)) nil (26231 63090 131332 446000) 0 nil])
nil
