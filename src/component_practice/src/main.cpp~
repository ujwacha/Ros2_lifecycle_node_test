#include <chrono>
#include <functional>
#include <memory>
#include <rclcpp/executors.hpp>
#include <rclcpp/logging.hpp>
#include <rclcpp/node.hpp>
#include <rclcpp/node_options.hpp>
#include <rclcpp/publisher.hpp>
#include <rclcpp/rclcpp.hpp>
#include <rclcpp/timer.hpp>
#include <rclcpp/utilities.hpp>
#include <std_msgs/msg/detail/string__struct.hpp>
#include <std_msgs/msg/string.hpp>

namespace component_practice {
  class PraPub: public rclcpp::Node {
  public:
    PraPub(const rclcpp::NodeOptions & options ) : rclcpp::Node("PraNode", options) {

      
      publisher = this->create_publisher<std_msgs::msg::String>("chat_here", 10);
      timer = this->create_wall_timer(std::chrono::milliseconds(500),
				      std::bind(&PraPub::publish, this));
    }

  private:

    void publish() {
      auto message = std_msgs::msg::String();
      message.data = "Hi Everyone";
      RCLCPP_INFO(this->get_logger(), "sent Message");
      publisher->publish(message);
    }

    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher;
    rclcpp::TimerBase::SharedPtr timer;
  };
};

#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE(component_practice::PraPub)
