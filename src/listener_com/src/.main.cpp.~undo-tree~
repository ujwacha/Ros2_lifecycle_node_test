(undo-tree-save-format-version . 1)
"88f60cf55d21b6c1a67daef7e42b78cdcdaf9507"
[nil nil nil nil (26231 63376 979214 284000) 0 nil]
([nil nil ((111 . 130) (#("lifecycle_node.hpp>" 0 19 (fontified nil c-in-sws t)) . -111) (111 . 130) (94 . 111) (#("rclcpp_l" 0 8 (fontified nil c-in-sws t)) . 94) (94 . 102) (#("rclcpp_lifecycle/" 0 17 (fontified nil c-in-sws t)) . -94) (94 . 111) (#("rclcpp_l" 0 7 (face font-lock-string-face fontified t c-in-sws t) 7 8 (face font-lock-string-face c-in-sws t fontified t)) . -94) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -8) 102 (101 . 102) (#("c" 0 1 (face font-lock-string-face fontified nil c-in-sws t)) . -101) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("o" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -102) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("m" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -103) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("p" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -104) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("o" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -105) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("n" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -106) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("e" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -107) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("n" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -108) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("t" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -109) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("s" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -110) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("/" 0 1 (face font-lock-string-face fontified t c-in-sws t)) . -111) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 112 (94 . 112) (#("r" 0 1 (fontified nil c-in-sws t)) . 94) (94 . 95) (#("rclcpp_components/" 0 18 (fontified nil c-in-sws t)) . -94) (94 . 112) (#("rclc" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t)) . -94) (undo-tree-id35 . -4) (undo-tree-id36 . -3) (undo-tree-id37 . -4) (undo-tree-id38 . -4) 98 (96 . 98) (94 . 96) (93 . 94) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified nil)) . -93) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (nil syntax-table nil 94 . 95) (nil syntax-table (1) 93 . 94) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 94) (undo-tree-id43 . -1) (#("header" 0 6 (face font-lock-string-face c-in-sws t fontified t)) . 94) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (apply yas--snippet-revive 85 101 #s(yas--snippet nil (#s(yas--field 0 94 100 nil nil nil nil nil)) nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 94 100 nil nil nil nil nil)) nil 4 nil nil nil nil)) (85 . 101) (#("include \"${0:header}\"" 0 21 (c-in-sws t fontified nil)) . 85) (undo-tree-id46 . -21) (85 . 106) (#("i" 0 1 (fontified nil c-in-sws t)) . 85) (undo-tree-id47 . -1) (85 . 86) (#("include \"header\"" 0 16 (c-in-sws t fontified nil)) . -85) (undo-tree-id48 . -16) (85 . 101) (#("inclu" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -85) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) 90 (85 . 90) (84 . 85) (83 . 84) (t 26219 17769 10498 949000)) nil (26231 63376 979193 736000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (face font-lock-constant-face fontified t)) . 220) (undo-tree-id70 . -5) (undo-tree-id71 . -6) (t 26231 63377 16459 782000)) nil (26231 63391 157595 782000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 220) (undo-tree-id68 . -1) (undo-tree-id69 . -2)) nil (26231 63391 157590 171000) 0 nil])
([nil nil ((#("Node" 0 4 (face font-lock-type-face fontified t)) . 220) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -4)) nil (26231 63391 157582 583000) 0 nil])
([nil nil ((240 . 253) (#("LifecycleNode" 0 13 (fontified nil)) . -240) (240 . 253) (239 . 240) (187 . 189) (236 . 237) (220 . 236) (#("rclcpp" 0 6 (fontified nil)) . 220) (220 . 226) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -220) (220 . 236) (#("rclcpp" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t)) . -220) (undo-tree-id52 . -5) (undo-tree-id53 . -6) (undo-tree-id54 . -6) 226 (220 . 226) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -221) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 222 (220 . 222)) nil (26231 63391 157508 573000) 0 nil])
([nil nil ((#("Node" 0 4 (fontified t)) . 329) (undo-tree-id88 . -3) (t 26231 63391 156801 111000)) nil (26231 63402 994128 598000) 0 nil])
([nil nil ((apply yas--snippet-revive 329 383 #s(yas--snippet nil (#s(yas--field 0 361 382 nil nil nil nil nil)) nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 361 382 nil nil nil nil nil)) nil 5 nil nil nil nil)) (329 . 383) (#("rclcpp_lifecycle::LifecycleNode(${0:const LifecycleNode &})" 0 59 (fontified nil)) . 329) (329 . 388) (#("rcl" 0 3 (fontified nil)) . 329) (329 . 332) (#("rclcpp_lifecycle::LifecycleNode(const LifecycleNode &)" 0 54 (fontified nil)) . -329) (329 . 383) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -329) (undo-tree-id86 . -3) (undo-tree-id87 . -3) 332 (329 . 332)) nil (26231 63402 994121 566000) 0 nil])
([nil nil ((#("(const LifecycleNode &" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 20 (face font-lock-type-face fontified t) 20 22 (fontified t)) . 360) (undo-tree-id79 . -21) (undo-tree-id80 . 21) (undo-tree-id81 . -21) (undo-tree-id82 . -21) (undo-tree-id83 . -21) (undo-tree-id84 . -22) (undo-tree-id85 . -22)) nil (26231 63402 994111 401000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . 363) (undo-tree-id77 . -1) (undo-tree-id78 . -1)) nil (26231 63402 994095 724000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 360) (undo-tree-id72 . 1) (undo-tree-id73 . 1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1)) nil (26231 63402 994087 100000) 0 nil])
([nil nil ((362 . 363)) nil (26231 63459 852944 932000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -560) (undo-tree-id1204 . -2) (undo-tree-id1205 . -2) 562 (560 . 562) (#("  " 0 2 (fontified nil)) . 559) (undo-tree-id1206 . -2) (undo-tree-id1207 . -2) (559 . 562) (#("  " 0 2 (fontified nil)) . 558) (undo-tree-id1208 . -2) (undo-tree-id1209 . -2) (557 . 561) (t 26231 63403 29087 693000)) nil (26231 63517 714635 318000) 0 nil] [nil nil ((#("rclcpp" 0 6 (face font-lock-constant-face fontified t)) . 724) (undo-tree-id111 . -5) (t 26231 63403 29087 693000)) ((724 . 730)) (26231 63459 359781 835000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1130 . 1131) (nil fontified nil 793 . 1131) (nil fontified nil 792 . 793) (nil category c->-as-paren-syntax 792 . 793) (nil fontified nil 771 . 792) (nil fontified nil 770 . 771) (nil category c-<-as-paren-syntax 770 . 771) (nil fontified nil 609 . 770) (nil fontified nil 608 . 609) (nil fontified nil 562 . 608) (nil fontified nil 561 . 562) (nil fontified nil 559 . 561) (559 . 1131)) nil (26231 63517 714619 963000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 724) (undo-tree-id110 . -1)) ((724 . 726)) (26231 63458 998384 439000) 0 nil])
([nil nil ((822 . 826)) nil (26231 63517 714614 234000) 0 nil])
([nil nil ((789 . 803) (#("rcl" 0 3 (fontified nil)) . 789) (789 . 792) (#("rcl_interfaces" 0 14 (fontified nil)) . -789) (789 . 803) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -789) (undo-tree-id225 . -3) (undo-tree-id226 . -3) 792 (789 . 792) (787 . 789) (#("  " 0 2 (fontified nil)) . 786) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (788 . 789) (785 . 788)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 785) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) (undo-tree-id1052 . -3) (undo-tree-id1053 . -3) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (undo-tree-id1064 . -3) (#("
" 0 1 (fontified nil)) . 788) (undo-tree-id1065 . 1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (786 . 788) (#("  " 0 2 (fontified nil)) . 787) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (#("rcl" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 789) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (789 . 792) (#("rcl_interfaces" 0 14 (fontified nil)) . 789) (789 . 803) (#("rcl" 0 3 (fontified nil)) . 789) (789 . 792) (#("rcl_interfaces" 0 14 (fontified t)) . 789) (undo-tree-id1147 . -13) (undo-tree-id1148 . -13) (undo-tree-id1149 . -13) (undo-tree-id1150 . -13) (undo-tree-id1151 . -13) (undo-tree-id1152 . -13) (undo-tree-id1153 . -13) (undo-tree-id1154 . -13) (undo-tree-id1155 . -13) (undo-tree-id1156 . -13) (undo-tree-id1157 . -13) (undo-tree-id1158 . -13) (undo-tree-id1159 . -13) (undo-tree-id1160 . -13) (undo-tree-id1161 . -13) (undo-tree-id1162 . -13) (undo-tree-id1163 . -13) (undo-tree-id1164 . -13) (undo-tree-id1165 . -13) (undo-tree-id1166 . -13) (undo-tree-id1167 . -13) (undo-tree-id1168 . -13) (undo-tree-id1169 . -13) (undo-tree-id1170 . -13) (undo-tree-id1171 . -13) (undo-tree-id1172 . -13) (undo-tree-id1173 . -13) (undo-tree-id1174 . -13) (undo-tree-id1175 . -13) (undo-tree-id1176 . -13) (undo-tree-id1177 . -13) (undo-tree-id1178 . -13) (undo-tree-id1179 . -13) (undo-tree-id1180 . -13) (undo-tree-id1181 . -13) (undo-tree-id1182 . -13) (undo-tree-id1183 . -13) (undo-tree-id1184 . -13) (undo-tree-id1185 . -13)) (26231 63458 627963 772000) 0 nil] [nil nil ((#("Subscription" 0 12 (face font-lock-constant-face fontified t)) . 724) (undo-tree-id109 . -11)) ((724 . 736)) (26231 63438 730173 674000) 0 nil])
([nil nil ((827 . 831)) nil (26231 63517 714612 697000) 0 nil])
([nil nil ((#("  rcl_interfaces
" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t)) . 787) (undo-tree-id221 . 1) (undo-tree-id222 . -16) (undo-tree-id223 . -15) (undo-tree-id224 . -15) 802) ((787 . 804)) (26231 63458 252990 574000) 0 nil])
([nil nil ((740 . 742) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -740) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -741) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 742 (740 . 742) (#("L" 0 1 (face font-lock-constant-face fontified t)) . -740) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -741) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 742 (740 . 742) (720 . 722) (737 . 738) (#("    " 0 4 (fontified nil)) . 720) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (740 . 741) (724 . 740) (#("rclc" 0 4 (fontified nil)) . 724) (724 . 728) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -724) (724 . 740) (#("rclc" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t)) . -724) (undo-tree-id107 . -4) (undo-tree-id108 . -4) 728 (724 . 728)) ((#("rclc" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 724) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (724 . 728) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . 724) (724 . 740) (#("rclc" 0 4 (fontified nil)) . 724) (724 . 728) (#("rclcpp_lifecycle" 0 16 (face font-lock-constant-face fontified nil)) . 724) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (undo-tree-id117 . -16) (undo-tree-id118 . -16) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (#(":" 0 1 (fontified nil)) . 740) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (720 . 724) (#(":" 0 1 (fontified nil)) . 737) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("  " 0 2 (fontified nil)) . 720) (#("Li" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil)) . 740) (undo-tree-id180 . -1) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (740 . 742) (#("su" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil)) . 740) (undo-tree-id183 . -1) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (740 . 742) (#("Su" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t)) . 740) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1)) (26231 63438 594417 22000) 0 nil])
([nil nil ((919 . 923)) nil (26231 63517 714611 99000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 839 858 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 839 858 nil nil nil nil nil) nil nil)) (806 . 859) (#("SubscriptionOptionsWithAllocator<${1:typename AllocatorT}>" 0 58 (fontified nil)) . 806) (806 . 864) (#("SubscriptionOptionsWithAllocator<typename AllocatorT>" 0 32 (fontified nil) 32 33 (fontified nil category c-<-as-paren-syntax) 33 52 (fontified nil) 52 53 (fontified nil category c->-as-paren-syntax)) . -806) (806 . 859) (#("Su" 0 1 (fontified t) 1 2 (fontified t)) . -806) (undo-tree-id214 . -1) (undo-tree-id215 . -2) (undo-tree-id216 . -2) 808 (806 . 808) (786 . 788) (803 . 804) (#("  " 0 2 (fontified nil)) . 786) (undo-tree-id217 . -2) (804 . 805) (788 . 804) (#("rclcp" 0 5 (fontified nil)) . 788) (788 . 793) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -788) (788 . 804) (#("rclcp" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -788) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) 793 (788 . 793) (786 . 788)) ((#("  " 0 2 (fontified nil)) . 786) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (#("rclcp" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 788) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (788 . 793) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . 788) (788 . 804) (#("rclcp" 0 5 (fontified nil)) . 788) (788 . 793) (#("rclcpp_lifecycle" 0 16 (face font-lock-constant-face fontified nil)) . 788) (undo-tree-id358 . -16) (undo-tree-id359 . -16) (undo-tree-id360 . -16) (undo-tree-id361 . -16) (undo-tree-id362 . -16) (undo-tree-id363 . -16) (undo-tree-id364 . -16) (undo-tree-id365 . -16) (undo-tree-id366 . -16) (undo-tree-id367 . -16) (undo-tree-id368 . -16) (undo-tree-id369 . -16) (undo-tree-id370 . -16) (undo-tree-id371 . -16) (undo-tree-id372 . -16) (undo-tree-id373 . -16) (undo-tree-id374 . -16) (undo-tree-id375 . -16) (undo-tree-id376 . -16) (undo-tree-id377 . -16) (undo-tree-id378 . -16) (undo-tree-id379 . -16) (undo-tree-id380 . -16) (undo-tree-id381 . -16) (undo-tree-id382 . -16) (undo-tree-id383 . -16) (undo-tree-id384 . -16) (undo-tree-id385 . -16) (undo-tree-id386 . -16) (undo-tree-id387 . -16) (undo-tree-id388 . -16) (undo-tree-id389 . -16) (undo-tree-id390 . -16) (undo-tree-id391 . -16) (undo-tree-id392 . -16) (undo-tree-id393 . -16) (undo-tree-id394 . -16) (undo-tree-id395 . -16) (undo-tree-id396 . -16) (undo-tree-id397 . -16) (undo-tree-id398 . -16) (undo-tree-id399 . -16) (undo-tree-id400 . -16) (undo-tree-id401 . -16) (undo-tree-id402 . -16) (undo-tree-id403 . -16) (undo-tree-id404 . -16) (undo-tree-id405 . -16) (undo-tree-id406 . -16) (undo-tree-id407 . -16) (undo-tree-id408 . -16) (undo-tree-id409 . -16) (undo-tree-id410 . -16) (undo-tree-id411 . -16) (undo-tree-id412 . -16) (undo-tree-id413 . -16) (undo-tree-id414 . -16) (undo-tree-id415 . -16) (undo-tree-id416 . -16) (undo-tree-id417 . -16) (undo-tree-id418 . -16) (undo-tree-id419 . -16) (undo-tree-id420 . -16) (undo-tree-id421 . -16) (undo-tree-id422 . -16) (undo-tree-id423 . -16) (undo-tree-id424 . -16) (undo-tree-id425 . -16) (undo-tree-id426 . -16) (undo-tree-id427 . -16) (undo-tree-id428 . -16) (undo-tree-id429 . -16) (undo-tree-id430 . -16) (undo-tree-id431 . -16) (undo-tree-id432 . -16) (undo-tree-id433 . -16) (undo-tree-id434 . -16) (undo-tree-id435 . -16) (undo-tree-id436 . -16) (undo-tree-id437 . -16) (undo-tree-id438 . -16) (undo-tree-id439 . -16) (undo-tree-id440 . -16) (undo-tree-id441 . -16) (undo-tree-id442 . -16) (undo-tree-id443 . -16) (undo-tree-id444 . -16) (undo-tree-id445 . -16) (undo-tree-id446 . -16) (undo-tree-id447 . -16) (undo-tree-id448 . -16) (undo-tree-id449 . -16) (undo-tree-id450 . -16) (undo-tree-id451 . -16) (undo-tree-id452 . -16) (undo-tree-id453 . -16) (undo-tree-id454 . -16) (undo-tree-id455 . -16) (undo-tree-id456 . -16) (undo-tree-id457 . -16) (undo-tree-id458 . -16) (undo-tree-id459 . -16) (undo-tree-id460 . -16) (undo-tree-id461 . -16) (undo-tree-id462 . -16) (undo-tree-id463 . -16) (undo-tree-id464 . -16) (undo-tree-id465 . -16) (undo-tree-id466 . -16) (undo-tree-id467 . -16) (undo-tree-id468 . -16) (undo-tree-id469 . -16) (undo-tree-id470 . -16) (undo-tree-id471 . -16) (undo-tree-id472 . -16) (undo-tree-id473 . -16) (undo-tree-id474 . -16) (undo-tree-id475 . -16) (undo-tree-id476 . -16) (undo-tree-id477 . -16) (undo-tree-id478 . -16) (undo-tree-id479 . -16) (undo-tree-id480 . -16) (undo-tree-id481 . -16) (undo-tree-id482 . -16) (undo-tree-id483 . -16) (#(":" 0 1 (fontified nil)) . 804) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (786 . 788) (#(":" 0 1 (fontified nil)) . 803) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("  " 0 2 (fontified nil)) . 786) (#("Su" 0 1 (fontified nil) 1 2 (fontified nil)) . 806) (undo-tree-id736 . -1) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (806 . 808) (#("SubscriptionOptionsWithAllocator<typename AllocatorT>" 0 32 (fontified nil) 32 33 (category c-<-as-paren-syntax fontified nil) 33 52 (fontified nil) 52 53 (category c->-as-paren-syntax fontified nil)) . 806) (806 . 859) (#("SubscriptionOptionsWithAllocator<${1:typename AllocatorT}>" 0 58 (fontified nil)) . 806) (806 . 864) (#("SubscriptionOptionsWithAllocator<typename AllocatorT>" 0 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) category c-<-as-paren-syntax fontified t) 33 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 52 (face font-lock-type-face fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start category c->-as-paren-syntax fontified t)) . 806) (undo-tree-id739 . -32) (undo-tree-id740 . 20) (undo-tree-id741 . -53) (undo-tree-id742 . -33) (undo-tree-id743 . -33) (undo-tree-id744 . -33) (undo-tree-id745 . -32) (undo-tree-id746 . -32) (undo-tree-id747 . -32) (undo-tree-id748 . -32) (undo-tree-id749 . -32) (undo-tree-id750 . -32) (undo-tree-id751 . -32) (undo-tree-id752 . -32) (undo-tree-id753 . -32) (undo-tree-id754 . -32) (undo-tree-id755 . -32) (undo-tree-id756 . -32) (undo-tree-id757 . -32) (undo-tree-id758 . -32) (undo-tree-id759 . -32) (undo-tree-id760 . -32) (undo-tree-id761 . -32) (undo-tree-id762 . -32) (undo-tree-id763 . -32) (undo-tree-id764 . -32) (undo-tree-id765 . -32) (undo-tree-id766 . -32) (undo-tree-id767 . -32) (undo-tree-id768 . -32) (undo-tree-id769 . -32) (undo-tree-id770 . -32) (undo-tree-id771 . -32) (undo-tree-id772 . -32) (undo-tree-id773 . -32) (undo-tree-id774 . -32) (undo-tree-id775 . -32) (undo-tree-id776 . -32) (undo-tree-id777 . -32) (undo-tree-id778 . -32) (undo-tree-id779 . -32) (undo-tree-id780 . -32) (undo-tree-id781 . -32) (undo-tree-id782 . -32) (undo-tree-id783 . -32) (undo-tree-id784 . -32) (undo-tree-id785 . -32) (undo-tree-id786 . -32) (undo-tree-id787 . -32) (undo-tree-id788 . -32) (undo-tree-id789 . -32) (undo-tree-id790 . -32) (undo-tree-id791 . -32) (undo-tree-id792 . -32) (undo-tree-id793 . -32) (undo-tree-id794 . -32) (undo-tree-id795 . -32) (undo-tree-id796 . -32) (undo-tree-id797 . -32) (undo-tree-id798 . -32) (undo-tree-id799 . -32) (undo-tree-id800 . -33) (undo-tree-id801 . -33) (undo-tree-id802 . -33) (undo-tree-id803 . -33) (undo-tree-id804 . -33) (undo-tree-id805 . -33) (undo-tree-id806 . -33) (undo-tree-id807 . -33) (undo-tree-id808 . -33) (undo-tree-id809 . -33) (undo-tree-id810 . -33) (undo-tree-id811 . -33) (undo-tree-id812 . -33) (undo-tree-id813 . -33) (undo-tree-id814 . -33) (undo-tree-id815 . -33) (undo-tree-id816 . -33) (undo-tree-id817 . -33) (undo-tree-id818 . -33) (undo-tree-id819 . -33) (undo-tree-id820 . -33) (undo-tree-id821 . -33) (undo-tree-id822 . -33) (undo-tree-id823 . -33) (undo-tree-id824 . -33) (undo-tree-id825 . -33) (undo-tree-id826 . -33) (undo-tree-id827 . -33) (undo-tree-id828 . -33) (undo-tree-id829 . -33) (undo-tree-id830 . -33) (undo-tree-id831 . -33) (undo-tree-id832 . -33) (undo-tree-id833 . -33) (undo-tree-id834 . -33) (undo-tree-id835 . -33) (undo-tree-id836 . -33) (undo-tree-id837 . -33) (undo-tree-id838 . -33) (undo-tree-id839 . -33) (undo-tree-id840 . -33) (undo-tree-id841 . -33) (undo-tree-id842 . -33) (undo-tree-id843 . -33) (undo-tree-id844 . -33) (undo-tree-id845 . -33) (undo-tree-id846 . -33) (undo-tree-id847 . -33) (undo-tree-id848 . -33) (undo-tree-id849 . -33) (undo-tree-id850 . -33) (undo-tree-id851 . -33) (undo-tree-id852 . -33) (undo-tree-id853 . -33) (undo-tree-id854 . -33) (undo-tree-id855 . -33) (undo-tree-id856 . -33) (undo-tree-id857 . -33) (undo-tree-id858 . -33) (undo-tree-id859 . -33) (undo-tree-id860 . -33) (undo-tree-id861 . -33) (undo-tree-id862 . -33) (undo-tree-id863 . -33) (undo-tree-id864 . -33) (undo-tree-id865 . -33) (apply yas--snippet-revive 806 859 #s(yas--snippet nil (#s(yas--field 1 839 858 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 839 858 nil nil nil nil nil) nil nil))) (26231 63457 847032 503000) 0 nil])
([nil nil ((#("  rclcpp_lifecycle::Su<std_msgs::msg::String>::SharedPtr subscription_;
" 0 2 (fontified t) 2 18 (face font-lock-constant-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (face font-lock-constant-face fontified t) 21 22 (face font-lock-constant-face fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) category c-<-as-paren-syntax fontified t) 23 31 (face font-lock-constant-face fontified t) 31 33 (fontified t) 33 36 (face font-lock-constant-face fontified t) 36 38 (fontified t) 38 44 (face font-lock-type-face fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) category c->-as-paren-syntax fontified t) 45 47 (fontified t) 47 55 (face font-lock-type-face fontified t) 55 56 (face font-lock-type-face c-type c-decl-id-start fontified t) 56 57 (fontified t) 57 59 (face font-lock-variable-name-face fontified t) 59 60 (face font-lock-variable-name-face fontified t) 60 64 (face font-lock-variable-name-face fontified t) 64 70 (face font-lock-variable-name-face fontified t) 70 71 (fontified t) 71 72 (fontified t)) . 720) (undo-tree-id89 . -21) (undo-tree-id90 . 50) (undo-tree-id91 . -71) (undo-tree-id92 . -21) (undo-tree-id93 . -21) (undo-tree-id94 . 50) 741) ((720 . 792)) (26231 63438 590835 199000) 0 nil])
([nil nil ((990 . 994)) nil (26231 63517 714609 419000) 0 nil])
([nil nil ((apply yas--snippet-revive 806 859 #s(yas--snippet nil (#s(yas--field 1 839 858 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 839 858 nil nil nil nil nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 839 858 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 839 858 nil nil nil nil nil) nil nil))) (26231 63457 539075 515000) 0 nil])
nil
([nil nil ((1146 . 1148)) nil (26231 63517 714607 822000) 0 nil])
([nil nil ((#("  rclcpp_lifecycle::SubscriptionOptionsWithAllocator<typename AllocatorT>
" 0 2 (fontified t) 2 18 (face font-lock-constant-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 52 (face font-lock-type-face fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) category c-<-as-paren-syntax fontified t) 53 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t) 62 72 (face font-lock-type-face fontified t) 72 73 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start category c->-as-paren-syntax fontified t) 73 74 (fontified t)) . 786) (undo-tree-id208 . -52) (undo-tree-id209 . 21) (undo-tree-id210 . -73) (undo-tree-id211 . -52) (undo-tree-id212 . -52) (undo-tree-id213 . -53) 838) ((786 . 860)) (26231 63457 536201 913000) 0 nil])
([nil nil ((1149 . 1151)) nil (26231 63517 714606 49000) 0 nil])
nil
([nil nil ((#("    publisher = this->create_publisher<std_msgs::msg::String>(\"lifecycle_publisher\", 10);
" 0 16 (fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified t) 39 47 (face font-lock-constant-face fontified t) 47 49 (fontified t) 49 52 (face font-lock-constant-face fontified t) 52 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified t) 61 62 (face (rainbow-delimiters-depth-4-face) fontified t) 62 83 (face font-lock-string-face fontified t) 83 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-4-face) fontified t) 88 90 (fontified t)) . 732) (undo-tree-id1201 . -89) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) 733) nil (26231 63517 714603 703000) 0 nil])
([nil nil ((#("    timer = this->create_wall_timer(1s,
" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 40 (fontified t)) . 742) (undo-tree-id1198 . -39) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) 743) nil (26231 63517 714596 588000) 0 nil])
([nil nil ((#("				    std::bind(&Life_Talker::publ, this));
" 0 8 (fontified t) 8 11 (face font-lock-constant-face fontified t) 11 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 19 (fontified t) 19 30 (face font-lock-constant-face fontified t) 30 38 (fontified t) 38 42 (face font-lock-keyword-face fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (face (rainbow-delimiters-mismatched-face) fontified t) 44 45 (fontified t) 45 46 (fontified t)) . 742) (undo-tree-id1195 . -45) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) 743) nil (26231 63517 714588 589000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 742)) nil (26231 63517 717195 239000) 0 nil])
([nil nil ((#("      subscription_ = this->create_subscription<std_msgs::msg::String>(
      \"chat_here\", 10, std::bind(&MinimalSubscriber::topic_callback, this, _1));
 " 0 22 (fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified t) 48 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 69 (face font-lock-type-face fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified t) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 72 (fontified t) 72 78 (fontified t) 78 89 (face font-lock-string-face fontified t) 89 95 (fontified t) 95 98 (face font-lock-constant-face fontified t) 98 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-5-face) fontified t) 105 106 (fontified t) 106 123 (face font-lock-constant-face fontified t) 123 141 (fontified t) 141 145 (face font-lock-keyword-face fontified t) 145 149 (fontified t) 149 150 (face (rainbow-delimiters-depth-5-face) fontified t) 150 151 (face (rainbow-delimiters-depth-4-face) fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 154 (fontified t)) . 398) (undo-tree-id1220 . -153) (undo-tree-id1221 . -72) (undo-tree-id1222 . -72) (undo-tree-id1223 . -153) (undo-tree-id1224 . -153) (undo-tree-id1225 . -153) (undo-tree-id1226 . -153) (undo-tree-id1227 . -4) (undo-tree-id1228 . -153) 551) nil (26231 63528 350764 484000) 0 nil] [nil nil ((#("      subscription_ = this->create_subscription<std_msgs::msg::String>(
" 0 22 (fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 48 56 (face font-lock-constant-face fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 69 (face font-lock-type-face fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 72 (fontified t)) . 398) (undo-tree-id1186 . -72) (undo-tree-id1187 . -72) (undo-tree-id1188 . -71) (undo-tree-id1189 . -4) (undo-tree-id1190 . -4) (undo-tree-id1191 . -4) (undo-tree-id1192 . -22) (undo-tree-id1193 . -70) (undo-tree-id1194 . -72)) ((398 . 470)) (26231 63517 714570 392000) 0 nil])
([nil nil ((nil rear-nonsticky nil 732 . 733) (nil fontified nil 649 . 733) (nil fontified nil 648 . 649) (nil category c->-as-paren-syntax 648 . 649) (nil fontified nil 627 . 648) (nil fontified nil 626 . 627) (nil category c-<-as-paren-syntax 626 . 627) (nil fontified nil 579 . 626) (579 . 733) 578) nil (26231 63528 350745 931000) 0 nil])
nil
([nil nil ((578 . 582) (#("       " 0 1 (fontified t) 1 7 (fontified t)) . 578) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1)) nil (26231 63528 350740 1000) 0 nil])
([nil nil ((648 . 661) (#("      " 0 6 (fontified t)) . 648) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) 652) nil (26231 63528 350676 687000) 0 nil])
([nil nil ((736 . 740) (#("   " 0 1 (rear-nonsticky t fontified nil) 1 3 (fontified nil)) . -736) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (#(" " 0 1 (fontified t)) . 739)) nil (26231 63528 350668 754000) 0 nil])
([nil nil ((741 . 745) (#("   " 0 3 (fontified nil)) . -741) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (#(" " 0 1 (fontified t)) . 744)) nil (26231 63528 350660 461000) 0 nil])
([nil nil ((746 . 750) (#("   " 0 3 (fontified nil)) . -746) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (#(" " 0 1 (fontified t)) . 749)) nil (26231 63528 350646 910000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 399) (undo-tree-id1483 . -1) (undo-tree-id1484 . -2) (t 26231 63528 363390 460000)) nil (26231 63547 95759 155000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -398) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . 1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) 399) nil (26231 63547 95744 784000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -397) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) 398) nil (26231 63547 95428 884000) 0 nil])
([nil nil ((1228 . 1229) (1214 . 1228) (1211 . 1214) (t 26231 63547 138043 183000)) nil (26231 63556 708547 416000) 0 nil])
([nil nil ((1228 . 1236) (t 26231 63556 749115 174000)) nil (26231 63566 162852 869000) 0 nil])
([nil nil ((758 . 759) (750 . 758) (741 . 750) (#("ac" 0 2 (fontified nil)) . 741) (741 . 743) (#("activated" 0 9 (fontified nil)) . -741) (741 . 750) (#("acti" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -741) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) 745 (741 . 745) (737 . 741) (#("   " 0 3 (fontified nil)) . -737) (undo-tree-id1488 . -3) (undo-tree-id1489 . -3) (#(" " 0 1 (fontified t)) . 740) (t 26231 63566 177699 537000)) nil (26231 63575 5341 27000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -990) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) 992 (990 . 992) (#("  " 0 2 (fontified nil)) . 989) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (989 . 992) (#("  " 0 2 (fontified nil)) . 988) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (988 . 991) (#("  " 0 2 (fontified nil)) . 987) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (989 . 990) (t 26231 63575 17049 474000)) nil (26231 63621 611804 878000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1570 . 1571) (nil fontified nil 1260 . 1571) (nil fontified nil 1259 . 1260) (nil fontified nil 989 . 1259) (989 . 1571)) nil (26231 63621 611786 820000) 0 nil])
([nil nil ((1185 . 1189)) nil (26231 63621 611782 956000) 0 nil])
([nil nil ((1247 . 1251)) nil (26231 63621 611781 171000) 0 nil])
([nil nil ((1252 . 1256) (#("   " 0 3 (fontified nil)) . -1252) (undo-tree-id1500 . -3) (undo-tree-id1501 . -3) (#(" " 0 1 (fontified t)) . 1255)) nil (26231 63621 611777 575000) 0 nil])
([nil nil ((1268 . 1269) (1262 . 1268) (#("-" 0 1 (fontified t)) . -1262) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (#(" " 0 1 (fontified t)) . -1263) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) 1264 (1261 . 1264) (1252 . 1261) (#("ac" 0 2 (fontified nil)) . 1252) (1252 . 1254) (#("activated" 0 9 (fontified nil)) . -1252) (1252 . 1261) (#("ac" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1252) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) 1254 (1252 . 1254) (1248 . 1252) (#("    " 0 4 (fontified nil)) . 1247) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) (1251 . 1252) (1247 . 1251) (#("   " 0 3 (fontified nil)) . -1247) (undo-tree-id1498 . -3) (undo-tree-id1499 . -3) (#(" " 0 1 (fontified t)) . 1250)) nil (26231 63621 611760 598000) 0 nil])
([nil nil ((#("    subscription_ = this->create_subscription<std_msgs::msg::String>(
								     \"chat_here\", 10, std::bind(&MinimalSubscriber::topic_callback, this, _1));
 " 0 4 (fontified t) 4 20 (fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 46 54 (face font-lock-constant-face fontified t) 54 56 (fontified t) 56 59 (face font-lock-constant-face fontified t) 59 61 (fontified t) 61 67 (face font-lock-type-face fontified t) 67 68 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 83 (fontified t) 83 94 (face font-lock-string-face fontified t) 94 100 (fontified t) 100 103 (face font-lock-constant-face fontified t) 103 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-5-face) fontified t) 110 111 (fontified t) 111 128 (face font-lock-constant-face fontified t) 128 146 (fontified t) 146 150 (face font-lock-keyword-face fontified t) 150 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-5-face) fontified t) 155 156 (face (rainbow-delimiters-depth-4-face) fontified t) 156 158 (fontified t) 158 159 (fontified t)) . 574) (undo-tree-id1529 . -158) (undo-tree-id1530 . -158) (undo-tree-id1531 . -158) (undo-tree-id1532 . -158) (undo-tree-id1533 . -158) (undo-tree-id1534 . -158) 732 (t 26231 63621 624397 90000)) nil (26231 63637 863977 30000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1246 . 1247) (nil fontified nil 1156 . 1247) (nil fontified nil 1155 . 1156) (nil category c->-as-paren-syntax 1155 . 1156) (nil fontified nil 1134 . 1155) (nil fontified nil 1133 . 1134) (nil category c-<-as-paren-syntax 1133 . 1134) (nil fontified nil 1088 . 1133) (1088 . 1247)) nil (26231 63637 863963 881000) 0 nil])
([nil nil ((1246 . 1250) (#(" " 0 1 (rear-nonsticky t fontified t)) . 1246)) nil (26231 63637 863958 240000) 0 nil])
([nil nil ((1273 . 1277) (#("   " 0 3 (fontified nil)) . -1273) (undo-tree-id1510 . -3) (undo-tree-id1511 . -3) (undo-tree-id1512 . -3) (undo-tree-id1513 . -3) (undo-tree-id1514 . -3) (undo-tree-id1515 . -3) (undo-tree-id1516 . -3) (undo-tree-id1517 . -3) (undo-tree-id1518 . -3) (undo-tree-id1519 . -3) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (#(" " 0 1 (fontified t)) . 1276)) nil (26231 63637 863948 217000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1599) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) 1601 (1599 . 1601) (#("  " 0 2 (fontified nil)) . 1598) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (1597 . 1601) (t 26231 63637 895486 207000)) nil (26231 63657 775091 98000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2021 . 2022) (nil fontified nil 1599 . 2022) (1599 . 2022)) nil (26231 63657 775080 740000) 0 nil])
([nil nil ((1732 . 1736)) nil (26231 63657 775078 31000) 0 nil])
([nil nil ((1796 . 1800) (#("	" 0 1 (fontified nil)) . -1796) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (#("						     " 0 11 (fontified t)) . 1797)) nil (26231 63657 775072 349000) 0 nil])
([nil nil ((1801 . 1805)) nil (26231 63657 775018 56000) 0 nil])
([nil nil ((1806 . 1810)) nil (26231 63657 775015 995000) 0 nil])
([nil nil ((1878 . 1882)) nil (26231 63657 775012 847000) 0 nil])
([nil nil ((1883 . 1887)) nil (26231 63657 775002 407000) 0 nil])
([nil nil ((1825 . 1827) (1820 . 1825) (1819 . 1820) (1818 . 1819) (#("." 0 1 (fontified t)) . -1818) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) 1819 (1818 . 1819) (1805 . 1818) (#("su" 0 2 (fontified nil)) . 1805) (1805 . 1807) (#("subscription_" 0 13 (fontified nil)) . -1805) (1805 . 1818) (#("su" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -1805) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) 1807 (1805 . 1807) (1801 . 1805) (#("    " 0 4 (fontified t)) . 1801) (undo-tree-id1563 . 3) (t 26231 63657 817853 677000)) nil (26231 63758 547968 375000) 0 nil])
([nil nil ((1827 . 1828)) nil (26231 63758 547795 97000) 0 nil])
([nil nil ((#("->" 0 1 (fontified t) 1 2 (fontified t)) . 1818) (undo-tree-id1564 . -1) (undo-tree-id1565 . -2) (t 26231 63758 587955 437000)) nil (26231 63778 138738 756000) 0 nil])
([nil nil ((1818 . 1819)) nil (26231 63778 138707 741000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2510 . 2511) (nil fontified nil 2059 . 2511) (2059 . 2511) 2058 (t 26231 63778 145424 981000)) nil (26231 63805 584842 380000) 0 nil])
([nil nil ((#("    timer.reset();
" 0 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-4-face) fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 19 (fontified t)) . 2189) (undo-tree-id1607 . -18) (undo-tree-id1608 . -4) (undo-tree-id1609 . -9) (undo-tree-id1610 . -9) (undo-tree-id1611 . -10)) nil (26231 63805 584837 615000) 0 nil])
([nil nil ((#("    publisher.reset();
" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 2189) (undo-tree-id1600 . -22) (undo-tree-id1601 . -4) (undo-tree-id1602 . -13) (undo-tree-id1603 . -4) (undo-tree-id1604 . -13) (undo-tree-id1605 . -13) (undo-tree-id1606 . -14)) nil (26231 63805 584827 79000) 0 nil])
([nil nil ((2190 . 2195) (#("     " 0 5 (fontified nil)) . 2189) (undo-tree-id1570 . -5) (undo-tree-id1571 . -5) (undo-tree-id1572 . -5) (undo-tree-id1573 . -5) (undo-tree-id1574 . -5) (undo-tree-id1575 . -5) (undo-tree-id1576 . -5) (undo-tree-id1577 . -5) (undo-tree-id1578 . -5) (undo-tree-id1579 . -5) (undo-tree-id1580 . -5) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -5) (undo-tree-id1585 . -5) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . -5) (undo-tree-id1591 . -5) (undo-tree-id1592 . -5) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -5) (undo-tree-id1596 . -5) (undo-tree-id1597 . -5) (undo-tree-id1598 . -5) (undo-tree-id1599 . -5) (2194 . 2195) (2189 . 2194)) nil (26231 63805 584811 555000) 0 nil])
([nil nil ((2213 . 2215) (2207 . 2213) (2194 . 2207) (#("su" 0 2 (fontified nil)) . 2194) (2194 . 2196) (#("subscription_" 0 13 (fontified nil)) . -2194) (2194 . 2207) (#("su" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2194) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) 2196 (2194 . 2196) (#("u" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2194) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) 2195 (2189 . 2194) 2190 (2189 . 2190)) nil (26231 63805 584752 896000) 0 nil])
([nil nil ((2215 . 2216)) nil (26231 63805 584714 969000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3013 . 3014) (nil fontified nil 2503 . 3014) (2503 . 3014) (t 26231 63805 597242 45000)) nil (26231 63824 989379 989000) 0 nil])
([nil nil ((#("    timer.reset();
    publisher.reset();

" 0 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-4-face) fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 40 (face (rainbow-delimiters-depth-4-face) fontified t) 40 43 (fontified t)) . 2635) (undo-tree-id1625 . -42) (undo-tree-id1626 . -42) (undo-tree-id1627 . -42) (undo-tree-id1628 . -42) (undo-tree-id1629 . -42)) nil (26231 63824 989375 498000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2636) (undo-tree-id1620 . -4) (undo-tree-id1621 . -4) (undo-tree-id1622 . -4) 2640 (2636 . 2640) (#("    " 0 4 (fontified nil)) . 2635) (undo-tree-id1623 . -4) (undo-tree-id1624 . -4) (2634 . 2640)) nil (26231 63824 989363 935000) 0 nil])
([nil nil ((2659 . 2661) (2654 . 2659) (2653 . 2654) (2640 . 2653) (#("su" 0 2 (fontified nil)) . 2640) (2640 . 2642) (#("subscription_" 0 13 (fontified nil)) . -2640) (2640 . 2653) (#("su" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2640) (undo-tree-id1612 . -2) (undo-tree-id1613 . -2) 2642 (2641 . 2642) (#("u" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2641) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (#("y" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2642) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) 2643 (2640 . 2643) (2636 . 2640) (#("    " 0 4 (fontified nil)) . 2635) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (2639 . 2640) (2635 . 2639)) nil (26231 63824 989345 677000) 0 nil])
([nil nil ((2661 . 2662)) nil (26231 63824 989300 758000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 187) 185 (253 . 254) (#("
" 0 1 (fontified nil)) . 253) (#("  " 0 2 (fontified t)) . 256) 255 (#(" " 0 1 (fontified nil)) . 313) (327 . 329) 322 (#("
   " 0 1 (fontified nil) 1 4 (fontified nil)) . 391) (#("
" 0 1 (fontified t)) . 400) (undo-tree-id1630 . -1) 398 (#("   " 0 3 (fontified t)) . 574) 573 (#("    " 0 4 (fontified t)) . 601) 600 (#("    " 0 4 (fontified t)) . 672) 671 (799 . 808) (#("
" 0 1 (fontified t)) . 829) 827 (#(" " 0 1 (fontified t)) . 951) (#("    " 0 4 (fontified t)) . 1026) 1025 (1158 . 1161) (#("								" 0 8 (fontified nil)) . 1158) 1157 (1187 . 1195) (#("    " 0 4 (fontified t)) . 1246) 1245 (#("    " 0 4 (fontified t)) . 1273) 1272 (1463 . 1464) (1569 . 1578) (#(" " 0 1 (fontified nil)) . 1722) (#("    " 0 4 (fontified t)) . 1732) 1731 (#("    " 0 4 (fontified t)) . 1796) 1795 (#("    " 0 4 (fontified t)) . 1828) 1827 (#("    
    " 0 4 (fontified t) 4 5 (fontified t) 5 9 (fontified t)) . 1900) 1899 (2026 . 2035) (#(" 
" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t)) . 2055) (#(" " 0 1 (fontified t rear-nonsticky t)) . 2058) (undo-tree-id1631 . -1) 2054 (#(" " 0 1 (fontified nil)) . 2179) (#(" " 0 1 (fontified nil)) . 2193) 2188 (#("     " 0 5 (fontified t)) . 2217) 2216 (#("    " 0 4 (fontified t)) . 2279) 2278 (2349 . 2350) 2345 (2379 . 2380) 2375 (2472 . 2481) (#("

" 0 1 (fontified t) 1 2 (fontified t)) . 2502) 2500 (#(" " 0 1 (fontified t)) . 2625) (2790 . 2806) (2819 . 2820) 2814 (2867 . 2868) 2863 (#(" 
" 0 2 (fontified t c-in-sws t)) . 2897) 2896 (2970 . 2979) (#("
  

  " 0 1 (fontified t rear-nonsticky t) 1 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 7 (fontified nil)) . 3000) 2998 (#("  " 0 2 (fontified nil)) . 3018) 3015 (#(" " 0 1 (fontified nil)) . 3069) (#("
   " 0 1 (fontified nil) 1 4 (fontified nil)) . 3080) (#("  " 0 2 (fontified nil)) . 3091) 3086 (#("  " 0 2 (fontified nil)) . 3163) 3160 (#("  " 0 2 (fontified t)) . 3169) 3166 (3272 . 3298) (#("
" 0 1 (fontified t)) . 3272) (t 26231 63825 27994 387000)) nil (26231 63849 449373 641000) 0 nil])
([nil nil ((#("SUCCESS" 0 7 (fontified t)) . 2018) (undo-tree-id163 . -7) (undo-tree-id164 . -6) (t 26231 63849 461521 469000)) nil (26246 54331 426485 70000) 0 nil])
([nil nil ((2018 . 2025) (#("F" 0 1 (fontified nil)) . 2018) (2018 . 2019) (#("FAILURE" 0 7 (fontified nil)) . -2018) (2018 . 2025) (#("F" 0 1 (fontified t)) . -2018) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 2019 (2018 . 2019)) nil (26246 54331 426455 258000) 0 nil])
([nil nil ((#("FAILURE" 0 7 (fontified t)) . 2018) (undo-tree-id314 . -6) (undo-tree-id315 . -7) (t 26246 54331 471078 584000)) nil (26246 54519 93061 330000) 0 nil])
([nil current ((2018 . 2025) (#("S" 0 1 (fontified nil)) . 2018) (2018 . 2019) (#("SUCCESS" 0 7 (fontified nil)) . -2018) (2018 . 2025) (#("SU" 0 1 (fontified t) 1 2 (fontified t)) . -2018) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) 2020 (2018 . 2020)) nil (26246 54519 93020 564000) 0 nil])
nil
