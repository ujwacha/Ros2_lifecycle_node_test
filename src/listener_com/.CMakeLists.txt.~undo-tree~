(undo-tree-save-format-version . 1)
"f8a37d24b584aded6a268977d8a26e24a18f6017"
[nil nil nil nil (26219 16433 193253 579000) 0 nil]
([nil nil ((nil rear-nonsticky nil 241 . 242) (#("
" 0 1 (fontified nil)) . -276) (241 . 277) 207 (t 26219 16353 849949 415000)) nil (26219 16433 193250 417000) 0 nil])
([nil nil ((nil rear-nonsticky nil 276 . 277) (#("
" 0 1 (fontified nil)) . -311) (276 . 312) 242) nil (26219 16433 193246 341000) 0 nil])
([nil nil ((nil rear-nonsticky nil 311 . 312) (#("
" 0 1 (fontified nil)) . -346) (311 . 347) 277) nil (26219 16433 193242 29000) 0 nil])
([nil nil ((#("ament" 0 5 (fontified t)) . 255) (undo-tree-id128 . -4) (undo-tree-id129 . -5)) nil (26219 16433 193237 847000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 255) (undo-tree-id127 . -1)) nil (26219 16433 193232 698000) 0 nil])
([nil nil ((#("cmake " 0 6 (fontified t)) . 255) (undo-tree-id125 . -5) (undo-tree-id126 . -6)) nil (26219 16433 193227 770000) 0 nil])
([nil nil ((255 . 262)) nil (26219 16433 193222 803000) 0 nil])
([nil nil ((#("ament" 0 5 (fontified t)) . 285) (undo-tree-id123 . -4) (undo-tree-id124 . -5)) nil (26219 16433 193220 229000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 285) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1)) nil (26219 16433 193213 282000) 0 nil])
([nil nil ((#("cmake " 0 6 (fontified t)) . 285) (undo-tree-id113 . -5) (undo-tree-id114 . -6)) nil (26219 16433 193198 485000) 0 nil])
([nil nil ((288 . 294) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -288) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 289 (288 . 289) (#(")" 0 1 (fontified nil)) . -288) (288 . 289) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -288) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("m" 0 1 (fontified t)) . -289) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 290 (288 . 290) (#(")" 0 1 (fontified nil)) . -288) (288 . 289) (#("-" 0 1 (fontified t)) . -288) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 289 (288 . 289) (285 . 288)) nil (26219 16433 193184 459000) 0 nil])
([nil nil ((#("ament" 0 5 (fontified t)) . 317) (undo-tree-id45 . -4) (undo-tree-id46 . -5)) nil (26219 16433 192846 451000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 317) (undo-tree-id44 . -1)) nil (26219 16433 192840 288000) 0 nil])
([nil nil ((#("cmake " 0 6 (fontified t)) . 317) (undo-tree-id35 . -5) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -6)) nil (26219 16433 192835 406000) 0 nil])
([nil nil ((329 . 335) (#("i" 0 1 (fontified t)) . -329) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 330 (324 . 330) (#("o" 0 1 (fontified t)) . -324) (undo-tree-id34 . -1) 325 (317 . 325)) nil (26219 16433 192816 989000) 0 nil])
([nil nil ((nil rear-nonsticky nil 344 . 345) (#("
" 0 1 (fontified nil)) . -385) (344 . 386) 334) nil (26219 16433 192789 946000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (fontified t)) . 358) (undo-tree-id19 . -5) (undo-tree-id20 . -6)) nil (26219 16433 192786 556000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 358) (undo-tree-id18 . -1)) nil (26219 16433 192780 535000) 0 nil])
([nil nil ((#("components " 0 11 (fontified t)) . 358) (undo-tree-id16 . -10) (undo-tree-id17 . -11)) nil (26219 16433 192774 748000) 0 nil])
([nil nil ((361 . 370) (#("o" 0 1 (fontified t)) . -361) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 362 (358 . 362)) nil (26219 16433 192760 616000) 0 nil])
([nil nil ((505 . 507) (t 26219 16433 228666 826000)) nil (26219 16460 98561 300000) 0 nil])
([nil nil ((537 . 549) (531 . 537) (#("i" 0 1 (fontified t)) . -531) (undo-tree-id130 . -1) 532 (527 . 532) (518 . 527) (506 . 519)) nil (26219 16460 98550 480000) 0 nil])
([nil nil ((541 . 544) (#("D" 0 1 (fontified t)) . -541) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#(" " 0 1 (fontified t)) . -542) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 543 (537 . 543) (t 26219 16460 132301 929000)) nil (26219 16466 763203 302000) 0 nil])
([nil nil ((557 . 559) (t 26219 16466 796216 616000)) nil (26219 16497 321186 16000) 0 nil])
([nil nil ((nil rear-nonsticky nil 637 . 638) (nil fontified nil 558 . 638) (558 . 638)) nil (26219 16497 321183 728000) 0 nil])
([nil nil ((#("talker" 0 6 (fontified t)) . 585) (undo-tree-id465 . -5) (undo-tree-id466 . -6)) nil (26219 16497 321178 784000) 0 nil])
([nil nil ((590 . 593) (#("r" 0 1 (fontified t)) . -590) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("n" 0 1 (fontified t)) . -591) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("e" 0 1 (fontified t)) . -592) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("r" 0 1 (fontified t)) . -593) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) 594 (585 . 594)) nil (26219 16497 321137 631000) 0 nil])
([nil nil ((639 . 641) (t 26219 16497 359850 68000)) nil (26219 16499 597120 620000) 0 nil])
([nil nil ((nil rear-nonsticky nil 754 . 755) (nil fontified nil 641 . 755) (641 . 755) (t 26219 16499 607824 669000)) nil (26219 16596 853779 805000) 0 nil])
([nil nil ((#("talker" 0 6 (fontified t)) . 677) (undo-tree-id472 . -5) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -6)) nil (26219 16596 853774 805000) 0 nil])
([nil nil ((677 . 685)) nil (26219 16596 853758 92000) 0 nil])
([nil nil ((#("component" 0 9 (face font-lock-string-face fontified t)) . 706) (undo-tree-id470 . -8) (undo-tree-id471 . -9)) nil (26219 16596 853755 102000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-string-face fontified t)) . 706) (undo-tree-id469 . -1)) nil (26219 16596 853749 54000) 0 nil])
([nil nil ((#("practice" 0 8 (face font-lock-string-face fontified t)) . 706) (undo-tree-id467 . -7) (undo-tree-id468 . -8)) nil (26219 16596 853742 398000) 0 nil])
([nil nil ((706 . 718)) nil (26219 16596 853714 560000) 0 nil])
([nil nil ((#("talker" 0 6 (fontified t)) . 741) (undo-tree-id490 . -5) (undo-tree-id491 . -5) (undo-tree-id492 . -5) (undo-tree-id493 . -5) (undo-tree-id494 . -5) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -6) (t 26219 16596 890914 172000)) nil (26219 16600 790760 157000) 0 nil])
([nil nil ((740 . 749) (#("l" 0 1 (fontified t)) . -740) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 741 (740 . 741)) nil (26219 16600 790647 971000) 0 nil])
([nil nil ((754 . 756) (t 26219 16600 826884 589000)) nil (26219 16636 665304 327000) 0 nil])
([nil nil ((nil rear-nonsticky nil 951 . 952) (nil fontified nil 756 . 952) (756 . 952)) nil (26219 16636 665300 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1018 . 1019) (nil fontified nil 954 . 1019) (954 . 1019)) nil (26219 16636 665296 755000) 0 nil])
([nil nil ((#("
if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t) 4 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 21 (fontified t) 21 33 (face font-lock-function-name-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 62 (fontified t) 62 128 (face font-lock-comment-face fontified t) 128 130 (fontified t) 130 134 (face font-lock-comment-face fontified t) 134 207 (face font-lock-comment-face fontified t) 207 209 (fontified t) 209 212 (face font-lock-function-name-face fontified t) 212 213 (face (rainbow-delimiters-depth-1-face) fontified t) 213 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-1-face) fontified t) 246 249 (fontified t) 249 311 (face font-lock-comment-face fontified t) 311 313 (fontified t) 313 375 (face font-lock-comment-face fontified t) 375 376 (face font-lock-comment-face fontified t) 376 378 (fontified t) 378 433 (face font-lock-comment-face fontified t) 433 435 (fontified t) 435 436 (face font-lock-function-name-face fontified t) 436 438 (face font-lock-function-name-face fontified t) 438 439 (face (rainbow-delimiters-depth-1-face) fontified t) 439 469 (fontified t) 469 470 (face (rainbow-delimiters-depth-1-face) fontified t) 470 471 (fontified t) 471 473 (fontified t) 473 474 (face font-lock-function-name-face fontified t) 474 494 (face font-lock-function-name-face fontified t) 494 498 (face font-lock-function-name-face fontified t) 498 500 (face font-lock-function-name-face fontified t) 500 511 (fontified t face font-lock-function-name-face) 511 512 (fontified t face (rainbow-delimiters-depth-1-face)) 512 513 (fontified t face (rainbow-delimiters-depth-1-face)) 513 514 (fontified t) 514 519 (face font-lock-keyword-face fontified t) 519 520 (face (rainbow-delimiters-depth-1-face) fontified t) 520 521 (face (rainbow-delimiters-depth-1-face) fontified t) 521 523 (fontified t)) . 1020) (undo-tree-id499 . -522) (undo-tree-id500 . -522) (undo-tree-id501 . -19) (undo-tree-id502 . -522) (undo-tree-id503 . -17) (undo-tree-id504 . -17) (undo-tree-id505 . -17) (undo-tree-id506 . -17) (undo-tree-id507 . -17) (undo-tree-id508 . -17) (undo-tree-id509 . -17) (undo-tree-id510 . -522) (undo-tree-id511 . -523) (undo-tree-id512 . -522) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -19) (undo-tree-id521 . -19) (undo-tree-id522 . -19) (undo-tree-id523 . -19) (undo-tree-id524 . -19) (undo-tree-id525 . -19) (undo-tree-id526 . -19) (undo-tree-id527 . -19) (undo-tree-id528 . -60) (undo-tree-id529 . -60) (undo-tree-id530 . -60) (undo-tree-id531 . -60) (undo-tree-id532 . -60) (undo-tree-id533 . -60) (undo-tree-id534 . -60) (undo-tree-id535 . -128) (undo-tree-id536 . -128) (undo-tree-id537 . -128) (undo-tree-id538 . -128) (undo-tree-id539 . -128) (undo-tree-id540 . -128) (undo-tree-id541 . -128) (undo-tree-id542 . -207) (undo-tree-id543 . -207) (undo-tree-id544 . -207) (undo-tree-id545 . -207) (undo-tree-id546 . -207) (undo-tree-id547 . -207) (undo-tree-id548 . -207) (undo-tree-id549 . -247) (undo-tree-id550 . -247) (undo-tree-id551 . -247) (undo-tree-id552 . -247) (undo-tree-id553 . -247) (undo-tree-id554 . -247) (undo-tree-id555 . -247) (undo-tree-id556 . -311) (undo-tree-id557 . -311) (undo-tree-id558 . -311) (undo-tree-id559 . -311) (undo-tree-id560 . -311) (undo-tree-id561 . -311) (undo-tree-id562 . -311) (undo-tree-id563 . -376) (undo-tree-id564 . -376) (undo-tree-id565 . -376) (undo-tree-id566 . -376) (undo-tree-id567 . -376) (undo-tree-id568 . -376) (undo-tree-id569 . -376) (undo-tree-id570 . -433) (undo-tree-id571 . -433) (undo-tree-id572 . -433) (undo-tree-id573 . -433) (undo-tree-id574 . -433) (undo-tree-id575 . -433) (undo-tree-id576 . -433) (undo-tree-id577 . -471) (undo-tree-id578 . -471) (undo-tree-id579 . -471) (undo-tree-id580 . -471) (undo-tree-id581 . -471) (undo-tree-id582 . -471) (undo-tree-id583 . -471) (undo-tree-id584 . -514) (undo-tree-id585 . -514) (undo-tree-id586 . -514) (undo-tree-id587 . -514) (undo-tree-id588 . -514) (undo-tree-id589 . -514) (undo-tree-id590 . -514) (undo-tree-id591 . -514) (undo-tree-id592 . -522) (undo-tree-id593 . -522) (undo-tree-id594 . -522) (undo-tree-id595 . -522) (undo-tree-id596 . -522) (undo-tree-id597 . -522) (undo-tree-id598 . -522) (undo-tree-id599 . -522) (undo-tree-id600 . -522) (undo-tree-id601 . -523) 1542) nil (26219 16636 665276 663000) 0 nil])
([nil nil ((1019 . 1021) (t 26219 16636 702638 708000)) nil (26219 16640 100766 499000) 0 nil])
([nil nil ((#("PraPub" 0 6 (face font-lock-string-face fontified t)) . 720) (undo-tree-id708 . -5) (undo-tree-id709 . -6) (t 26219 16640 138617 343000)) nil (26219 17073 698834 52000) 0 nil])
([nil nil ((720 . 721)) nil (26219 17073 698829 148000) 0 nil])
([nil nil ((nil rear-nonsticky nil 736 . 737) (nil fontified nil 706 . 737) (706 . 737) (#("listener_com::M" 0 15 (face font-lock-string-face fontified t)) . 706) (undo-tree-id602 . -14) (undo-tree-id603 . -15) (undo-tree-id604 . -14) (undo-tree-id605 . -15) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -14) (undo-tree-id614 . -14) (undo-tree-id615 . -14) (undo-tree-id616 . -14) (undo-tree-id617 . -14) (undo-tree-id618 . -14) (undo-tree-id619 . -14) (undo-tree-id620 . -14) (undo-tree-id621 . -14) (undo-tree-id622 . -14) (undo-tree-id623 . -14) (undo-tree-id624 . -14) (undo-tree-id625 . -14) (undo-tree-id626 . -14) (undo-tree-id627 . -14) (undo-tree-id628 . -14) (undo-tree-id629 . -14) (undo-tree-id630 . -14) (undo-tree-id631 . -14) (undo-tree-id632 . -14) (undo-tree-id633 . -14) (undo-tree-id634 . -14) (undo-tree-id635 . -14) (undo-tree-id636 . -14) (undo-tree-id637 . -14) (undo-tree-id638 . -14) (undo-tree-id639 . -14) (undo-tree-id640 . -14) (undo-tree-id641 . -14) (undo-tree-id642 . -14) (undo-tree-id643 . -14) (undo-tree-id644 . -14) (undo-tree-id645 . -14) (undo-tree-id646 . -14) (undo-tree-id647 . -15) (undo-tree-id648 . -15) (undo-tree-id649 . -15) (undo-tree-id650 . -15) (undo-tree-id651 . -15) (undo-tree-id652 . -15) (undo-tree-id653 . -15) (undo-tree-id654 . -15) (undo-tree-id655 . -15) (undo-tree-id656 . -15) (undo-tree-id657 . -15) (undo-tree-id658 . -15) (undo-tree-id659 . -15) (undo-tree-id660 . -15) (undo-tree-id661 . -15) (undo-tree-id662 . -15) (undo-tree-id663 . -15) (undo-tree-id664 . -15) (undo-tree-id665 . -15) (undo-tree-id666 . -15) (undo-tree-id667 . -15) (undo-tree-id668 . -15) (undo-tree-id669 . -15) (undo-tree-id670 . -15) (undo-tree-id671 . -15) (undo-tree-id672 . -15) (undo-tree-id673 . -15) (undo-tree-id674 . -15) (undo-tree-id675 . -15) (undo-tree-id676 . -14) (undo-tree-id677 . -15) (undo-tree-id678 . -15) (undo-tree-id679 . -15) (undo-tree-id680 . -15) (undo-tree-id681 . -15) (undo-tree-id682 . -15) (undo-tree-id683 . -15) (undo-tree-id684 . -15) (undo-tree-id685 . -15) (undo-tree-id686 . -14) (undo-tree-id687 . -14) (undo-tree-id688 . -14) (undo-tree-id689 . -14) (undo-tree-id690 . -14) (undo-tree-id691 . -14) (undo-tree-id692 . -14) (undo-tree-id693 . -14) (undo-tree-id694 . -14) (undo-tree-id695 . -15) (undo-tree-id696 . -14) (undo-tree-id697 . -14) (undo-tree-id698 . -14) (undo-tree-id699 . -14) (undo-tree-id700 . -14) (undo-tree-id701 . -14) (undo-tree-id702 . -14) (undo-tree-id703 . -14) (undo-tree-id704 . -14) (undo-tree-id705 . -14) (undo-tree-id706 . -15) (undo-tree-id707 . -15) 721) nil (26219 17073 698815 330000) 0 nil])
([nil nil ((#("talker" 0 6 (fontified t)) . 832) (undo-tree-id710 . -5) (undo-tree-id711 . -6) (t 26219 17073 710217 143000)) nil (26219 17175 18227 91000) 0 nil])
([nil nil ((832 . 840)) nil (26219 17175 18194 995000) 0 nil])
([nil nil ((718 . 719) (#("e" 0 1 (fontified t)) . -718) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) 719 (707 . 719) (686 . 707) (667 . 686) (666 . 668) (#(" " 0 1 (fontified t)) . -666) (undo-tree-id728 . -1) 667 (648 . 667) (#("r" 0 1 (fontified t)) . -648) (undo-tree-id729 . -1) 649 (647 . 649) (641 . 647) (640 . 641) (t 26219 17175 30589 320000)) nil (26219 17249 925036 499000) 0 nil])
([nil nil ((721 . 736) (719 . 721) (t 26219 17249 962939 24000)) nil (26231 63215 677779 656000) 0 nil])
([nil nil ((736 . 751)) nil (26231 63215 677776 801000) 0 nil])
([nil nil ((720 . 721) (#("r" 0 1 (fontified t)) . 720)) nil (26231 63215 677774 797000) 0 nil])
([nil nil ((nil rear-nonsticky nil 379 . 380) (#("
" 0 1 (fontified nil)) . -414) (379 . 415) 378) nil (26231 63215 677772 358000) 0 nil])
([nil nil ((#("composition REQUIRED" 0 20 (fontified t)) . 393) (undo-tree-id56 . -19) (undo-tree-id57 . -19) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19) 412) nil (26231 63215 677768 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 423 . 424) (nil fontified nil 393 . 424) (393 . 424) 392) nil (26231 63215 677757 126000) 0 nil])
([nil nil ((424 . 433)) nil (26231 63215 677754 451000) 0 nil])
([nil nil ((nil rear-nonsticky nil 434 . 435) (#("
" 0 1 (fontified nil)) . -489) (434 . 490) 420) nil (26231 63215 677752 22000) 0 nil])
([nil nil ((#("rclcpp" 0 6 (fontified t)) . 448) (undo-tree-id54 . -5) (undo-tree-id55 . -6)) nil (26231 63215 677748 547000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 448) (undo-tree-id53 . -1)) nil (26231 63215 677743 670000) 0 nil])
([nil nil ((#("lifecycle " 0 10 (fontified t)) . 448) (undo-tree-id51 . -9) (undo-tree-id52 . -10)) nil (26231 63215 677739 616000) 0 nil])
([nil nil ((#("lifecycle" 0 9 (fontified t)) . 410) (undo-tree-id49 . -8) (undo-tree-id50 . -9)) nil (26231 63215 677734 770000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 410) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1)) nil (26231 63215 677726 5000) 0 nil])
([nil current ((#("msgs " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (fontified t)) . 410) (undo-tree-id0 . -4) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5)) nil (26231 63215 677681 92000) 0 nil])
nil
