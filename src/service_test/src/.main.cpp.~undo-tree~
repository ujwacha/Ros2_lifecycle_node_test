(undo-tree-save-format-version . 1)
"07f864f8b9d309064f0a78dd04bcd3a95649db0c"
[nil nil nil nil (26236 15685 750473 509000) 0 nil]
([nil nil ((9 . 11) (6 . 9) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -6) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) 7 (1 . 7) (t 26236 15685 749577 144000)) nil (26236 15702 245345 642000) 0 nil])
([nil nil ((9 . 11) (1 . 9) (1 . 2) (#("int main()" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t) 4 5 (face font-lock-function-name-face fontified t) 5 6 (face font-lock-function-name-face fontified t) 6 7 (face font-lock-function-name-face fontified t) 7 8 (face font-lock-function-name-face fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1) (undo-tree-id51 . -9) (undo-tree-id52 . -8) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) (undo-tree-id150 . -5) (undo-tree-id151 . -5) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -5) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (undo-tree-id166 . -5) (undo-tree-id167 . -5) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (undo-tree-id187 . -5) (undo-tree-id188 . -5) (undo-tree-id189 . -5) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) (undo-tree-id199 . -5) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) (undo-tree-id205 . -5) (undo-tree-id206 . -5) (undo-tree-id207 . -5) (undo-tree-id208 . -5) (undo-tree-id209 . -5) (undo-tree-id210 . -5) (undo-tree-id211 . -5) (undo-tree-id212 . -5) (undo-tree-id213 . -5) (undo-tree-id214 . -5) (undo-tree-id215 . -5) (undo-tree-id216 . -5) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) (undo-tree-id221 . -5) (undo-tree-id222 . -5) (undo-tree-id223 . -5) (undo-tree-id224 . -5) (undo-tree-id225 . -5) (undo-tree-id226 . -5) (undo-tree-id227 . -5) (undo-tree-id228 . -6) (undo-tree-id229 . -6) (undo-tree-id230 . -6) (undo-tree-id231 . -6) (undo-tree-id232 . -6) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) (undo-tree-id237 . -6) (undo-tree-id238 . -6) (undo-tree-id239 . -6) (undo-tree-id240 . -6) (undo-tree-id241 . -6) (undo-tree-id242 . -6) (undo-tree-id243 . -6) (undo-tree-id244 . -6) (undo-tree-id245 . -6) (undo-tree-id246 . -6) (undo-tree-id247 . -6) (undo-tree-id248 . -6) (undo-tree-id249 . -6) (undo-tree-id250 . -6) (undo-tree-id251 . -6) (undo-tree-id252 . -6) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (undo-tree-id255 . -6) (undo-tree-id256 . -6) (undo-tree-id257 . -6) (undo-tree-id258 . -6) (undo-tree-id259 . -6) (undo-tree-id260 . -6) (undo-tree-id261 . -6) (undo-tree-id262 . -6) (undo-tree-id263 . -7) (undo-tree-id264 . -7) (undo-tree-id265 . -7) (undo-tree-id266 . -7) (undo-tree-id267 . -7) (undo-tree-id268 . -7) (undo-tree-id269 . -7) (undo-tree-id270 . -7) (undo-tree-id271 . -7) (undo-tree-id272 . -7) (undo-tree-id273 . -7) (undo-tree-id274 . -7) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -7) (undo-tree-id278 . -7) (undo-tree-id279 . -7) (undo-tree-id280 . -7) (undo-tree-id281 . -7) (undo-tree-id282 . -7) (undo-tree-id283 . -7) (undo-tree-id284 . -7) (undo-tree-id285 . -7) (undo-tree-id286 . -7) (undo-tree-id287 . -7) (undo-tree-id288 . -7) (undo-tree-id289 . -7) (undo-tree-id290 . -7) (undo-tree-id291 . -7) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . -7) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (undo-tree-id305 . -7) (undo-tree-id306 . -7) (undo-tree-id307 . -7) (undo-tree-id308 . -7) (undo-tree-id309 . -7) (undo-tree-id310 . -7) (undo-tree-id311 . -7) (undo-tree-id312 . -7) (undo-tree-id313 . -7) (undo-tree-id314 . -7) (undo-tree-id315 . -7) (undo-tree-id316 . -8) (undo-tree-id317 . -8) (undo-tree-id318 . -8) (undo-tree-id319 . -8) (undo-tree-id320 . -8) (undo-tree-id321 . -8) (undo-tree-id322 . -8) (undo-tree-id323 . -8) (undo-tree-id324 . -8) (undo-tree-id325 . -8) (undo-tree-id326 . -8) (undo-tree-id327 . -8) (undo-tree-id328 . -8) (undo-tree-id329 . -8) (undo-tree-id330 . -8) (undo-tree-id331 . -8) (undo-tree-id332 . -8) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -8) (undo-tree-id336 . -8) (undo-tree-id337 . -8) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) (undo-tree-id342 . -9) (undo-tree-id343 . -9) (undo-tree-id344 . -9) (undo-tree-id345 . -9) (undo-tree-id346 . -9) (undo-tree-id347 . -9) (undo-tree-id348 . -9) (undo-tree-id349 . -9) (undo-tree-id350 . -9) (undo-tree-id351 . -9) (undo-tree-id352 . -9) (undo-tree-id353 . -9) (undo-tree-id354 . -9) (undo-tree-id355 . -9) (undo-tree-id356 . -9) (undo-tree-id357 . -9) (undo-tree-id358 . -9) (undo-tree-id359 . -9) (undo-tree-id360 . -9) (undo-tree-id361 . -9) (undo-tree-id362 . -9) (undo-tree-id363 . -9) (undo-tree-id364 . -9) (undo-tree-id365 . -9) (undo-tree-id366 . -9) (undo-tree-id367 . -9) (undo-tree-id368 . -9) (undo-tree-id369 . -9) (undo-tree-id370 . -9) (undo-tree-id371 . -9) (undo-tree-id372 . -9) (undo-tree-id373 . -9) (undo-tree-id374 . -9) (undo-tree-id375 . -9) (undo-tree-id376 . -9) (undo-tree-id377 . -9) (undo-tree-id378 . -9) (undo-tree-id379 . -9) (undo-tree-id380 . -9) (undo-tree-id381 . -9) (undo-tree-id382 . -9) (undo-tree-id383 . -9) (undo-tree-id384 . -9) (undo-tree-id385 . -9) (undo-tree-id386 . -9) (undo-tree-id387 . 1) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -8) (undo-tree-id391 . -8) (undo-tree-id392 . -8) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -9) (undo-tree-id398 . -10) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -8) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -8) (undo-tree-id409 . -10) (undo-tree-id410 . -10) (undo-tree-id411 . -10) (undo-tree-id412 . -9) 9) nil (26236 15852 278971 888000) 0 nil])
([nil nil ((14 . 16) (13 . 15) (11 . 14)) ((#(" " 0 1 (fontified nil)) . 11) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id532 . -1) (undo-tree-id534 . -1) (undo-tree-id536 . -1) (undo-tree-id538 . -1) (undo-tree-id540 . -1) (undo-tree-id542 . -1) (undo-tree-id544 . -1) (undo-tree-id546 . -1) (undo-tree-id548 . -1) (undo-tree-id550 . -1) (undo-tree-id552 . -1) (undo-tree-id554 . -1) (undo-tree-id556 . -1) (undo-tree-id558 . -1) (undo-tree-id560 . -1) (undo-tree-id562 . -1) (undo-tree-id564 . -1) (undo-tree-id566 . -1) (undo-tree-id568 . -1) (undo-tree-id570 . -1) (undo-tree-id572 . -1) (undo-tree-id574 . -1) (undo-tree-id576 . -1) (undo-tree-id578 . -1) (undo-tree-id580 . -1) (undo-tree-id582 . -1) (undo-tree-id584 . -1) (undo-tree-id586 . -1) (undo-tree-id588 . -1) (undo-tree-id590 . -1) (undo-tree-id592 . -1) (undo-tree-id594 . -1) (undo-tree-id596 . -1) (undo-tree-id598 . -1) (undo-tree-id600 . -1) (undo-tree-id602 . -1) (undo-tree-id604 . -1) (undo-tree-id606 . -1) (undo-tree-id608 . -1) (undo-tree-id610 . -1) (undo-tree-id612 . -1) (undo-tree-id614 . -1) (undo-tree-id616 . -1) (undo-tree-id618 . -1) (undo-tree-id620 . -1) (undo-tree-id622 . -1) (undo-tree-id624 . -1) (undo-tree-id626 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 12) (undo-tree-id627 . 1) (undo-tree-id628 . 1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id642 . -1) (undo-tree-id644 . -1) (undo-tree-id646 . -1) (undo-tree-id648 . -1) (undo-tree-id650 . -1) (undo-tree-id652 . -1) (undo-tree-id654 . -1) (undo-tree-id656 . -1) (undo-tree-id658 . -1) (undo-tree-id660 . -1) (undo-tree-id662 . -1) (undo-tree-id664 . -1) (undo-tree-id666 . -1) (undo-tree-id668 . -1) (undo-tree-id670 . -1) (undo-tree-id672 . -1) (undo-tree-id674 . -1) (undo-tree-id676 . -1) (undo-tree-id678 . -1) (undo-tree-id680 . -1) (undo-tree-id682 . -1) (undo-tree-id684 . -1) (undo-tree-id686 . -1) (undo-tree-id688 . -1) (undo-tree-id690 . -1) (undo-tree-id692 . -1) (undo-tree-id694 . -1) (undo-tree-id696 . -1) (undo-tree-id698 . -1) (undo-tree-id700 . -1) (undo-tree-id702 . -1) (undo-tree-id704 . -1) (undo-tree-id706 . -1) (undo-tree-id708 . -1) (undo-tree-id710 . -1) (undo-tree-id712 . -1) (undo-tree-id714 . -1) (undo-tree-id716 . -1) (undo-tree-id718 . -1) (undo-tree-id720 . -1) (undo-tree-id722 . -1) (undo-tree-id724 . -1) (undo-tree-id726 . -1) (undo-tree-id728 . -1) (undo-tree-id730 . -1) (undo-tree-id732 . -1) (undo-tree-id734 . -1) (undo-tree-id736 . -1) (#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 13) (undo-tree-id737 . 1) (undo-tree-id738 . 1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id752 . -1) (undo-tree-id754 . -1) (undo-tree-id756 . -1) (undo-tree-id758 . -1) (undo-tree-id760 . -1) (undo-tree-id762 . -1) (undo-tree-id764 . -1) (undo-tree-id766 . -1) (undo-tree-id768 . -1) (undo-tree-id770 . -1) (undo-tree-id772 . -1) (undo-tree-id774 . -1) (undo-tree-id776 . -1) (undo-tree-id778 . -1) (undo-tree-id780 . -1) (undo-tree-id782 . -1) (undo-tree-id784 . -1) (undo-tree-id786 . -2) (undo-tree-id788 . -2) (undo-tree-id790 . -2) (undo-tree-id792 . -2) (undo-tree-id794 . -2) (undo-tree-id796 . -2) (undo-tree-id798 . -2) (undo-tree-id800 . -2) (undo-tree-id802 . -2) (undo-tree-id804 . -2) (undo-tree-id806 . -2) (undo-tree-id808 . -2) (undo-tree-id810 . -2) (undo-tree-id812 . -1) (undo-tree-id814 . -1) (undo-tree-id816 . -1) (undo-tree-id818 . -1) (undo-tree-id820 . -1) (undo-tree-id822 . -1) (undo-tree-id824 . -1) (undo-tree-id826 . -1) (undo-tree-id828 . -1) (undo-tree-id830 . -1) (undo-tree-id832 . -1) (undo-tree-id834 . -1) (undo-tree-id836 . -1) (undo-tree-id838 . -1) (undo-tree-id840 . -1) (undo-tree-id842 . -1) (undo-tree-id844 . -1) (undo-tree-id846 . -1) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 14) (undo-tree-id848 . -1) (undo-tree-id850 . -1) (undo-tree-id852 . -1) (undo-tree-id854 . -1) (undo-tree-id856 . -1) (undo-tree-id858 . -1) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) (undo-tree-id876 . -1) (undo-tree-id878 . -1) (undo-tree-id880 . -1)) (26236 15853 808122 197000) 0 nil])
([nil nil ((23 . 25) (#("-" 0 1 (fontified nil)) . 23) (19 . 24) (#("run -" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 19) (18 . 24) (#("ru" 0 1 (fontified nil) 1 2 (fontified nil)) . 18) (18 . 20) (#("u" 0 1 (fontified nil)) . 18) (14 . 19) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 14) (undo-tree-id882 . -1)) ((14 . 16) (#("  " 0 2 (fontified nil)) . 14) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (#("reu" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil)) . 16) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (18 . 19) (#("ru" 0 1 (fontified nil) 1 2 (fontified nil)) . 18) (18 . 20) (#("trun -" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 18) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (19 . 24) (#("urn -" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 19) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (23 . 24) (#("0" 0 1 (fontified nil)) . 23) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#(";" 0 1 (fontified t)) . 24) (t 26236 15702 281650 208000)) (26236 15854 71903 687000) 0 nil])
([nil nil ((1 . 5) (t 26236 15702 281650 208000)) nil (26236 15867 20919 518000) 0 nil])
([nil nil ((29 . 30) (18 . 29) (#("r" 0 1 (fontified nil c-in-sws t)) . 18) (undo-tree-id883 . -1) (18 . 19) (#("rclcpp.hpp>" 0 11 (fontified nil c-in-sws t)) . -18) (undo-tree-id884 . -11) (18 . 29) (#("r" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -18) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) 19 (18 . 19) (11 . 18) (#("rheader>" 0 1 (fontified nil c-in-sws t) 1 7 (c-in-sws t face font-lock-string-face fontified nil) 7 8 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 11) (undo-tree-id970 . -7) (undo-tree-id971 . -8) (undo-tree-id972 . 7) (undo-tree-id973 . -8) (11 . 12) (#("rclcpp/" 0 7 (fontified nil c-in-sws t)) . -11) (11 . 18) (#("rclc" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t)) . -11) (undo-tree-id974 . -3) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -4) (undo-tree-id1074 . -4) (undo-tree-id1075 . -4) (undo-tree-id1076 . -4) (undo-tree-id1077 . -4) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -4) (undo-tree-id1084 . -4) (undo-tree-id1085 . -4) (undo-tree-id1086 . -4) (undo-tree-id1087 . -4) (undo-tree-id1088 . -4) (undo-tree-id1089 . -4) (undo-tree-id1090 . -4) (undo-tree-id1091 . -4) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) (undo-tree-id1094 . -4) (undo-tree-id1095 . -4) (undo-tree-id1096 . -4) (undo-tree-id1097 . -4) (undo-tree-id1098 . -4) (undo-tree-id1099 . -4) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) (undo-tree-id1105 . -4) (undo-tree-id1106 . -4) (undo-tree-id1107 . -4) (undo-tree-id1108 . -4) (undo-tree-id1109 . -4) (undo-tree-id1110 . -4) (undo-tree-id1111 . -4) (undo-tree-id1112 . -4) (undo-tree-id1113 . -4) (undo-tree-id1114 . -4) (undo-tree-id1115 . -4) (undo-tree-id1116 . -4) (undo-tree-id1117 . -4) (undo-tree-id1118 . -4) (undo-tree-id1119 . -4) (undo-tree-id1120 . -4) (undo-tree-id1121 . -4) (undo-tree-id1122 . -4) (undo-tree-id1123 . -4) (undo-tree-id1124 . -4) (undo-tree-id1125 . -4) (undo-tree-id1126 . -4) (undo-tree-id1127 . -4) (undo-tree-id1128 . -4) (undo-tree-id1129 . -4) (undo-tree-id1130 . -4) (undo-tree-id1131 . -4) (undo-tree-id1132 . -4) (undo-tree-id1133 . -4) (undo-tree-id1134 . -4) (undo-tree-id1135 . -4) 15 (11 . 15) (apply yas--snippet-revive 2 18 #s(yas--snippet nil (#s(yas--field 0 11 17 nil nil nil nil nil)) nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 11 17 nil nil nil nil nil)) nil 10 nil nil nil nil)) (2 . 18) (#("include <${0:header}>" 0 21 (fontified nil c-in-sws t)) . 2) (undo-tree-id1136 . -21) (2 . 23) (#("i" 0 1 (fontified nil c-in-sws t)) . 2) (undo-tree-id1137 . -1) (2 . 3) (#("include <header>" 0 16 (fontified nil c-in-sws t)) . -2) (undo-tree-id1138 . -16) (2 . 18) (#("includ" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -2) (undo-tree-id1139 . -6) (undo-tree-id1140 . -6) (undo-tree-id1141 . -6) (undo-tree-id1142 . -6) 8 (2 . 8) (1 . 2)) nil (26236 15867 20887 514000) 0 nil])
([nil nil ((167 . 177) (#("&" 0 1 (fontified t)) . -167) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#(" " 0 1 (fontified t)) . -168) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) 169 (167 . 169) (28 . 63) (121 . 132) (#("N" 0 1 (fontified nil)) . 121) (121 . 122) (#("NodeOptions" 0 11 (fontified nil)) . -121) (121 . 132) (#("NO" 0 1 (fontified t) 1 2 (fontified t)) . -121) (undo-tree-id1180 . -1) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) 123 (121 . 123) (119 . 121) (113 . 119) (112 . 114) (101 . 112) (#("S" 0 1 (fontified nil)) . 101) (101 . 102) (#("ServiceNode" 0 11 (fontified nil)) . -101) (101 . 112) (#("S" 0 1 (fontified t)) . -101) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) 102 (101 . 102) (99 . 101) (98 . 100) (97 . 99) (96 . 97) (1 . 28) (65 . 69) (#("N" 0 1 (fontified nil)) . 65) (65 . 66) (#("Node" 0 4 (fontified nil)) . -65) (65 . 69) (#("N" 0 1 (face font-lock-type-face fontified t)) . -65) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) 66 (65 . 66) (63 . 65) (57 . 63) (#("rcl" 0 3 (fontified nil)) . 57) (57 . 60) (#("rclcpp" 0 6 (fontified nil)) . -57) (57 . 63) (#("rcl" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . -57) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) 60 (57 . 60) (#("N" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -60) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#(" " 0 1 (fontified t)) . -61) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) 62 (49 . 62) (48 . 49) (37 . 48) (31 . 37) (t 26236 15867 30369 805000)) nil (26236 15931 250584 86000) 0 nil])
([nil nil ((194 . 201) (#("op" 0 2 (fontified nil)) . 194) (194 . 196) (#("options" 0 7 (fontified nil)) . -194) (194 . 201) (#("op" 0 1 (fontified t) 1 2 (fontified t)) . -194) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) 196 (194 . 196) (193 . 195) (189 . 193) (#("N" 0 1 (fontified nil)) . 189) (189 . 190) (#("Node" 0 4 (fontified nil)) . -189) (189 . 193) (#("N" 0 1 (fontified t)) . -189) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) 190 (189 . 190) (187 . 189) (181 . 187) (#("rcl" 0 3 (fontified nil)) . 181) (181 . 184) (#("rclcpp" 0 6 (fontified nil)) . -181) (181 . 187) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -181) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) 184 (180 . 184) (179 . 180) (178 . 179)) nil (26236 15931 250507 958000) 0 nil])
([nil nil ((200 . 204) (#("_" 0 1 (face font-lock-string-face fontified t)) . -200) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#("N" 0 1 (face font-lock-string-face fontified t)) . -201) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -202) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -203) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -204) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) 205 (200 . 205) (195 . 200) (195 . 196) (nil syntax-table nil 203 . 204) (nil syntax-table (1) 194 . 195) (194 . 195) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -194) (nil syntax-table nil 203 . 204) (nil syntax-table (1) 194 . 195) (194 . 195)) nil (26236 15931 250477 610000) 0 nil])
([nil nil ((205 . 206)) nil (26236 15931 250422 169000) 0 nil])
([nil nil ((214 . 216) (#(" " 0 1 (fontified t)) . -214) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("P" 0 1 (fontified t)) . -215) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (#("
" 0 1 (fontified t)) . -216) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#(" " 0 1 (fontified t)) . -217) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) 218 (#(" " 0 1 (fontified t)) . -218) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (#(" " 0 1 (fontified t)) . -219) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (#(" " 0 1 (fontified t)) . -220) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 221 (216 . 221) (214 . 216)) nil (26236 15931 250414 779000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -216) (undo-tree-id1143 . -4) (undo-tree-id1144 . -4) 220 (216 . 220) (215 . 219)) nil (26236 15931 250378 666000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -221) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) 223 (220 . 223) (t 26236 15931 266646 806000)) nil (26236 15938 397273 908000) 0 nil])
([nil nil ((92 . 95)) nil (26236 15938 397248 418000) 0 nil])
([nil nil ((133 . 145) (132 . 133) (130 . 132) (127 . 130) (122 . 127) (122 . 123) (nil syntax-table nil 122 . 123) (nil syntax-table (1) 121 . 122) (121 . 122) (#("\"" 0 1 (fontified nil)) . -121) (nil syntax-table nil 122 . 123) (nil syntax-table (1) 121 . 122) (106 . 122) (105 . 106) (104 . 105) (103 . 104) (#("t" 0 1 (face font-lock-type-face fontified t)) . -103) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) 104 (94 . 104) (t 26236 15938 406677 494000)) nil (26236 15963 903375 577000) 0 nil])
([nil nil ((278 . 279) (t 26236 15963 942787 71000)) nil (26236 15970 368738 924000) 0 nil])
([nil nil ((146 . 147) (t 26236 15970 406814 772000)) nil (26236 15972 871672 607000) 0 nil])
([nil nil ((281 . 283) (#("  " 0 2 (fontified nil)) . 280) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (280 . 283) (#("  " 0 2 (fontified nil)) . 279) (undo-tree-id1264 . -2) (undo-tree-id1265 . -2) (279 . 282) (#("  " 0 2 (fontified nil)) . 278) (undo-tree-id1266 . -2) (undo-tree-id1267 . -2) (277 . 281) (t 26236 15972 882825 378000)) nil (26236 15994 371866 175000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -191) (undo-tree-id1258 . -2) (undo-tree-id1259 . -2) 193 (191 . 193) (#("  " 0 2 (fontified nil)) . 190) (undo-tree-id1260 . -2) (undo-tree-id1261 . -2) (189 . 193)) nil (26236 15994 371846 219000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 191) (199 . 200) (194 . 199) (193 . 194) (191 . 193)) nil (26236 15994 371835 103000) 0 nil])
([nil nil ((apply yas--snippet-revive 288 296 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (288 . 296) (#("private:" 0 8 (fontified nil)) . 288) (288 . 296) (#("pr" 0 2 (fontified nil)) . 288) (288 . 290) (#("private:" 0 8 (fontified nil)) . -288) (288 . 296) (#("priv" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -288) (undo-tree-id1253 . -4) (undo-tree-id1254 . -4) (undo-tree-id1255 . -4) 292 (291 . 292) (#("b" 0 1 (fontified t)) . -291) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) 292 (289 . 292) (288 . 289)) nil (26236 15994 371826 368000) 0 nil])
([nil nil ((244 . 248) (#(" " 0 1 (fontified nil)) . 243) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (244 . 245)) nil (26236 15994 371792 967000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 249) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (t 26236 15994 410917 491000)) nil (26236 15997 660507 475000) 0 nil])
([nil nil ((249 . 250) (t 26236 15997 674931 442000)) nil (26236 16001 373085 143000) 0 nil])
([nil nil ((283 . 286)) nil (26236 16001 373074 370000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -351) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (#("i" 0 1 (fontified t)) . -352) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("f" 0 1 (fontified t)) . -353) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("e" 0 1 (fontified t)) . -354) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) 355 (352 . 355) (#("typename ServiceT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 352) (351 . 352) (1 . 30) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 351 351 nil nil nil t nil)) nil 12 nil #s(yas--field 1 351 351 nil nil nil t nil) nil nil)) (315 . 340) (#("Client<${1:typename ServiceT}>" 0 30 (fontified nil)) . 315) (315 . 345) (#("C" 0 1 (fontified nil)) . 315) (315 . 316) (#("Client<typename ServiceT>" 0 6 (fontified nil) 6 7 (fontified nil category c-<-as-paren-syntax) 7 24 (fontified nil) 24 25 (fontified nil category c->-as-paren-syntax)) . -315) (315 . 340) (#("Clie" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -315) (undo-tree-id1574 . -3) (undo-tree-id1575 . -4) (undo-tree-id1576 . -4) 319 (316 . 319) (315 . 316) (305 . 307) (312 . 313) (#("  " 0 2 (fontified nil)) . 305) (313 . 314) (307 . 313) (#("rcl" 0 3 (fontified nil)) . 307) (307 . 310) (#("rclcpp" 0 6 (fontified nil)) . -307) (307 . 313) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -307) (undo-tree-id1577 . -3) (undo-tree-id1578 . -3) 310 (307 . 310) (305 . 307) (#(" " 0 1 (fontified nil)) . -305) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (#(" " 0 1 (fontified t)) . 306) (t 26236 16001 410947 403000)) nil (26236 16061 521603 483000) 0 nil])
([nil nil ((apply yas--snippet-revive 344 352 #s(yas--snippet nil (#s(yas--field 1 351 351 nil nil nil t nil)) nil 12 nil #s(yas--field 1 351 351 nil nil nil t nil) nil nil))) nil (26236 16061 521567 985000) 0 nil])
([nil nil ((150 . 167) (#("change_state.hpp>" 0 17 (fontified nil c-in-sws t)) . -150) (150 . 167) (146 . 150) (#("s" 0 1 (fontified nil c-in-sws t)) . 146) (146 . 147) (#("srv/" 0 4 (fontified nil c-in-sws t)) . -146) (146 . 150) (#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -146) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) 147 (146 . 147) (131 . 146) (#("lifecheader>" 0 5 (fontified nil c-in-sws t) 5 11 (c-in-sws t face font-lock-string-face fontified nil) 11 12 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 131) (undo-tree-id1556 . -11) (131 . 136) (#("lifecycle_msgs/" 0 15 (fontified nil c-in-sws t)) . -131) (131 . 146) (#("lifec" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t) 4 5 (face font-lock-string-face c-in-sws t fontified t)) . -131) (undo-tree-id1557 . -5) (undo-tree-id1558 . -5) 136 (131 . 136) (apply yas--snippet-revive 122 138 #s(yas--snippet nil (#s(yas--field 0 131 137 nil nil nil nil nil)) nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 131 137 nil nil nil nil nil)) nil 13 nil nil nil nil)) (122 . 138) (#("include <${0:header}>" 0 21 (c-in-sws t fontified nil)) . 122) (undo-tree-id1559 . -21) (122 . 143) (#("i" 0 1 (fontified nil c-in-sws t)) . 122) (undo-tree-id1560 . -1) (122 . 123) (#("include <header>" 0 8 (c-in-sws t fontified nil) 8 9 (c-in-sws t fontified nil category c-<-as-paren-syntax) 9 15 (c-in-sws t fontified nil) 15 16 (c-in-sws t fontified nil category c->-as-paren-syntax)) . -122) (undo-tree-id1561 . -16) (122 . 138) (#("incl" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -122) (undo-tree-id1562 . -1) (undo-tree-id1563 . -4) (undo-tree-id1564 . -4) (undo-tree-id1565 . -4) 126 (122 . 126) (121 . 122) (120 . 121)) nil (26236 16061 521560 725000) 0 nil])
([nil nil ((1 . 63) (419 . 430) (#("ChangeState" 0 11 (fontified nil)) . -419) (419 . 430) (#("C" 0 1 (fontified t)) . -419) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) 420 (419 . 420) (417 . 419) (414 . 417) (#("srv" 0 3 (fontified nil)) . -414) (414 . 417) (412 . 414) (nil fontified nil 398 . 412) (nil face (rainbow-delimiters-depth-2-face) 398 . 412) (398 . 412) (#("li" 0 2 (fontified nil)) . 398) (nil fontified nil 398 . 400) (nil face (rainbow-delimiters-depth-2-face) 398 . 400) (398 . 400) (#("lifecycle_msgs" 0 14 (fontified nil)) . -398) (nil fontified nil 398 . 412) (nil face (rainbow-delimiters-depth-2-face) 398 . 412) (398 . 412) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -398) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -2) (undo-tree-id1531 . -2) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) (undo-tree-id1536 . -2) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -2) (undo-tree-id1541 . -2) (undo-tree-id1542 . -2) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) 400 (398 . 400)) nil (26236 16061 521507 677000) 0 nil])
([nil nil ((500 . 501) (494 . 500) (493 . 494) (#(" " 0 1 (fontified t)) . -493) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) 494 (493 . 494)) nil (26236 16061 521121 315000) 0 nil])
([nil nil ((428 . 432) (#("    " 0 4 (fontified nil)) . 427) (undo-tree-id1758 . -4) (undo-tree-id1759 . -4) (427 . 432) (#("    " 0 4 (fontified nil)) . 426) (undo-tree-id1760 . -4) (undo-tree-id1761 . -4) (430 . 431) (426 . 430) (t 26236 16061 679204 304000)) nil (26236 16107 168188 97000) 0 nil])
([nil nil ((507 . 508) (apply yas--snippet-revive 446 507 #s(yas--snippet nil (#s(yas--field 1 460 492 nil nil nil t #s(yas--field 2 494 506 nil nil nil t nil)) #s(yas--field 2 494 506 nil nil nil t nil)) nil 14 nil #s(yas--field 2 494 506 nil nil nil t nil) nil nil)) (494 . 506) (#("ser" 0 3 (fontified nil)) . 494) (undo-tree-id1581 . -3) (494 . 497) (#("service_name" 0 12 (fontified nil)) . -494) (undo-tree-id1582 . -12) (494 . 506) (#("ser" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -494) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3) (undo-tree-id1585 . -3) (undo-tree-id1586 . -3) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) (undo-tree-id1625 . -3) (undo-tree-id1626 . -3) (undo-tree-id1627 . -3) (undo-tree-id1628 . -3) (undo-tree-id1629 . -3) (undo-tree-id1630 . -3) (undo-tree-id1631 . -3) (undo-tree-id1632 . -3) (undo-tree-id1633 . -3) (undo-tree-id1634 . -3) (undo-tree-id1635 . -3) (undo-tree-id1636 . -3) (undo-tree-id1637 . -3) (undo-tree-id1638 . -3) (undo-tree-id1639 . -3) (undo-tree-id1640 . -3) (undo-tree-id1641 . -3) (undo-tree-id1642 . -3) (undo-tree-id1643 . -3) (undo-tree-id1644 . -3) (undo-tree-id1645 . -3) (undo-tree-id1646 . -3) (undo-tree-id1647 . -3) (undo-tree-id1648 . -3) (undo-tree-id1649 . -3) (undo-tree-id1650 . -3) (undo-tree-id1651 . -3) (undo-tree-id1652 . -3) (undo-tree-id1653 . -3) (undo-tree-id1654 . -3) (undo-tree-id1655 . -3) (undo-tree-id1656 . -3) (undo-tree-id1657 . -3) (undo-tree-id1658 . -3) (undo-tree-id1659 . -3) (undo-tree-id1660 . -3) (undo-tree-id1661 . -3) (undo-tree-id1662 . -3) (undo-tree-id1663 . -3) (undo-tree-id1664 . -3) (undo-tree-id1665 . -3) (undo-tree-id1666 . -3) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . -3) (undo-tree-id1674 . -3) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) (undo-tree-id1679 . -3) (undo-tree-id1680 . -3) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -3) (undo-tree-id1713 . -3) (undo-tree-id1714 . -3) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) 497 (495 . 497) (#("const std::string &service_name" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil) 11 16 (face font-lock-type-face fontified nil) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified nil) 17 19 (fontified nil) 19 31 (face font-lock-variable-name-face fontified nil)) . 495) (undo-tree-id1725 . -31) (undo-tree-id1726 . -5) (494 . 495) (481 . 492) (#("ChangeState" 0 11 (fontified nil)) . -481) (undo-tree-id1727 . -11) (481 . 492) (#("C" 0 1 (fontified t)) . -481) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) 482 (481 . 482) (479 . 481) (476 . 479) (#("srv" 0 3 (fontified nil)) . -476) (undo-tree-id1732 . -3) (476 . 479) (#("sr" 0 1 (fontified t) 1 2 (fontified t)) . -476) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) 478 (476 . 478) (474 . 476) (nil fontified nil 460 . 474) (nil face (rainbow-delimiters-depth-3-face) 460 . 474) (460 . 474) (#("life" 0 4 (fontified nil)) . 460) (undo-tree-id1736 . -4) (nil fontified nil 460 . 464) (nil face (rainbow-delimiters-depth-3-face) 460 . 464) (460 . 464) (#("lifecycle_msgs" 0 14 (fontified nil)) . -460) (undo-tree-id1737 . -14) (nil fontified nil 460 . 474) (nil face (rainbow-delimiters-depth-3-face) 460 . 474) (460 . 474) (#("life" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -460) (undo-tree-id1738 . -4) (undo-tree-id1739 . -4) (undo-tree-id1740 . -4) 464 (461 . 464) (#("typename ServiceT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 461) (undo-tree-id1741 . -17) (460 . 461) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 460 492 nil nil nil t #s(yas--field 2 494 506 nil nil nil t nil)) #s(yas--field 2 494 506 nil nil nil t nil)) nil 14 nil #s(yas--field 2 494 506 nil nil nil t nil) nil nil)) (446 . 511) (#("create_client<${1:typename ServiceT}>(${2:const std::string &service_name})" 0 75 (fontified nil)) . 446) (446 . 521) (#("create_client<typename ServiceT>(const std::string &service_name, const rmw_qos_profile_t &qos_profile = rmw_qos_profile_services_default, rclcpp::CallbackGroup::SharedPtr group)" 0 13 (fontified nil) 13 14 (fontified nil category c-<-as-paren-syntax) 14 31 (fontified nil) 31 32 (fontified nil category c->-as-paren-syntax) 32 178 (fontified nil)) . -446) (446 . 624) (#("cli" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -446) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) 449 (446 . 449) (#("m" 0 1 (fontified t)) . -446) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("a" 0 1 (fontified t)) . -447) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (#("k" 0 1 (fontified t)) . -448) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (#("e" 0 1 (fontified t)) . -449) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) 450 (446 . 450) (445 . 446) (437 . 445) (431 . 437) (#("cli" 0 3 (fontified nil)) . 431) (431 . 434) (#("client" 0 6 (fontified nil)) . -431) (431 . 437) (#("cli" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -431) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) 434 (431 . 434) (427 . 431)) nil (26236 16107 168143 746000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -510) (undo-tree-id1767 . -4) (undo-tree-id1768 . -4) 514 (510 . 514) (#("    " 0 4 (fontified nil)) . 509) (undo-tree-id1769 . -4) (undo-tree-id1770 . -4) (508 . 514) (t 26236 16107 183397 511000)) nil (26236 16127 665748 743000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 510) (undo-tree-id1766 . 1)) nil (26236 16127 665736 212000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 510) (undo-tree-id1764 . 5) (undo-tree-id1765 . -4)) nil (26236 16127 665731 666000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -585) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) 587 (584 . 587)) nil (26236 16127 665722 940000) 0 nil])
([nil nil ((610 . 611) (603 . 610) (587 . 603) (585 . 587)) nil (26236 16167 255148 692000) 0 nil])
([nil nil ((632 . 634) (230 . 258) (595 . 604) (#("Ti" 0 2 (fontified nil)) . 595) (595 . 597) (#("TimerBase" 0 9 (fontified nil)) . -595) (595 . 604) (#("Timer" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -595) (undo-tree-id2466 . -2) (undo-tree-id2467 . -5) (undo-tree-id2468 . -5) (undo-tree-id2469 . -2) (undo-tree-id2470 . -2) (undo-tree-id2471 . -2) (undo-tree-id2472 . -2) (undo-tree-id2473 . -2) (undo-tree-id2474 . -2) (undo-tree-id2475 . -2) (undo-tree-id2476 . -2) (undo-tree-id2477 . -2) (undo-tree-id2478 . -2) (undo-tree-id2479 . -2) (undo-tree-id2480 . -2) (undo-tree-id2481 . -2) (undo-tree-id2482 . -2) (undo-tree-id2483 . -2) (undo-tree-id2484 . -2) (undo-tree-id2485 . -2) (undo-tree-id2486 . -2) (undo-tree-id2487 . -3) (undo-tree-id2488 . -3) (undo-tree-id2489 . -3) (undo-tree-id2490 . -3) (undo-tree-id2491 . -3) (undo-tree-id2492 . -3) (undo-tree-id2493 . -3) (undo-tree-id2494 . -3) (undo-tree-id2495 . -3) (undo-tree-id2496 . -3) (undo-tree-id2497 . -3) (undo-tree-id2498 . -3) (undo-tree-id2499 . -3) (undo-tree-id2500 . -3) (undo-tree-id2501 . -3) (undo-tree-id2502 . -3) (undo-tree-id2503 . -3) (undo-tree-id2504 . -3) (undo-tree-id2505 . -3) (undo-tree-id2506 . -3) (undo-tree-id2507 . -3) (undo-tree-id2508 . -3) (undo-tree-id2509 . -3) (undo-tree-id2510 . -3) (undo-tree-id2511 . -3) (undo-tree-id2512 . -4) (undo-tree-id2513 . -4) (undo-tree-id2514 . -4) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -4) (undo-tree-id2521 . -4) (undo-tree-id2522 . -4) (undo-tree-id2523 . -4) (undo-tree-id2524 . -4) (undo-tree-id2525 . -4) (undo-tree-id2526 . -4) (undo-tree-id2527 . -4) (undo-tree-id2528 . -4) (undo-tree-id2529 . -4) (undo-tree-id2530 . -4) (undo-tree-id2531 . -4) (undo-tree-id2532 . -4) (undo-tree-id2533 . -4) (undo-tree-id2534 . -4) (undo-tree-id2535 . -4) (undo-tree-id2536 . -4) (undo-tree-id2537 . -4) (undo-tree-id2538 . -4) (undo-tree-id2539 . -4) (undo-tree-id2540 . -4) (undo-tree-id2541 . -4) (undo-tree-id2542 . -4) (undo-tree-id2543 . -4) (undo-tree-id2544 . -4) (undo-tree-id2545 . -4) (undo-tree-id2546 . -5) (undo-tree-id2547 . -5) (undo-tree-id2548 . -5) (undo-tree-id2549 . -5) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) (undo-tree-id2561 . -5) (undo-tree-id2562 . -5) (undo-tree-id2563 . -5) (undo-tree-id2564 . -5) (undo-tree-id2565 . -5) (undo-tree-id2566 . -5) (undo-tree-id2567 . -5) (undo-tree-id2568 . -5) (undo-tree-id2569 . -5) (undo-tree-id2570 . -5) (undo-tree-id2571 . -5) (undo-tree-id2572 . -5) (undo-tree-id2573 . -5) (undo-tree-id2574 . -5) (undo-tree-id2575 . -5) (undo-tree-id2576 . -5) (undo-tree-id2577 . -5) (undo-tree-id2578 . -5) (undo-tree-id2579 . -5) (undo-tree-id2580 . -5) (undo-tree-id2581 . -5) (undo-tree-id2582 . -5) (undo-tree-id2583 . -5) (undo-tree-id2584 . -5) (undo-tree-id2585 . -5) (undo-tree-id2586 . -5) (undo-tree-id2587 . -5) (undo-tree-id2588 . -5) (undo-tree-id2589 . -5) (undo-tree-id2590 . -5) (undo-tree-id2591 . -5) (undo-tree-id2592 . -5) (undo-tree-id2593 . -5) (undo-tree-id2594 . -5) (undo-tree-id2595 . -5) (undo-tree-id2596 . -5) (undo-tree-id2597 . -5) (undo-tree-id2598 . -5) (undo-tree-id2599 . -5) (undo-tree-id2600 . -5) (undo-tree-id2601 . -5) (undo-tree-id2602 . -5) (undo-tree-id2603 . -5) (undo-tree-id2604 . -5) (undo-tree-id2605 . -5) (undo-tree-id2606 . -5) (undo-tree-id2607 . -5) 600 (596 . 600) (595 . 596) (585 . 587) (592 . 593) (#("  " 0 2 (fontified nil)) . 585) (593 . 594) (587 . 593) (#("rcl" 0 3 (fontified nil)) . 587) (587 . 590) (#("rclcpp" 0 6 (fontified nil)) . -587) (587 . 593) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -587) (undo-tree-id2608 . -3) (undo-tree-id2609 . -3) 590 (588 . 590) (587 . 588) (584 . 587)) nil (26236 16193 114718 735000) 0 nil] [nil nil ((230 . 258) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 605 622 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 605 622 nil nil nil nil nil) nil nil)) (595 . 623) (#("WallTimer<${1:typename FunctorT}>" 0 33 (fontified nil)) . 595) (595 . 628) (#("W" 0 1 (fontified nil)) . 595) (595 . 596) (#("WallTimer<typename FunctorT, int *>" 0 9 (fontified nil) 9 10 (fontified nil category c-<-as-paren-syntax) 10 27 (fontified nil) 27 28 (fontified nil c-type c-<>-arg-sep) 28 34 (fontified nil) 34 35 (fontified nil category c->-as-paren-syntax)) . -595) (595 . 630) (#("Wall" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -595) (undo-tree-id1853 . -3) (undo-tree-id1854 . -4) (undo-tree-id1855 . -4) 599 (595 . 599) (#("T" 0 1 (fontified t)) . -595) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (#("i" 0 1 (fontified t)) . -596) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 597 (596 . 597) (#("r" 0 1 (fontified t)) . -596) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) 597 (595 . 597) (#("t" 0 1 (fontified t)) . -595) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (#("i" 0 1 (fontified t)) . -596) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (#("m" 0 1 (fontified t)) . -597) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (#("e" 0 1 (fontified t)) . -598) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) 599 (595 . 599) (585 . 587) (592 . 593) (#("  " 0 2 (fontified nil)) . 585) (593 . 594) (587 . 593) (#("rcl" 0 3 (fontified nil)) . 587) (587 . 590) (#("rclcpp" 0 6 (fontified nil)) . -587) (587 . 593) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -587) (undo-tree-id1875 . -3) (undo-tree-id1876 . -3) 590 (587 . 590) (584 . 587) (t 26236 16127 707484 464000)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 584) (undo-tree-id1877 . -3) (undo-tree-id1878 . -3) (undo-tree-id1879 . -3) (undo-tree-id1880 . -3) (undo-tree-id1881 . -3) (undo-tree-id1882 . -3) (undo-tree-id1883 . -3) (undo-tree-id1884 . -3) (undo-tree-id1885 . -3) (undo-tree-id1886 . -3) (undo-tree-id1887 . -3) (undo-tree-id1888 . -3) (undo-tree-id1889 . -3) (undo-tree-id1890 . -3) (undo-tree-id1891 . -3) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) (undo-tree-id1895 . -3) (undo-tree-id1896 . -3) (undo-tree-id1897 . -3) (undo-tree-id1898 . -3) (undo-tree-id1899 . -3) (undo-tree-id1900 . -3) (undo-tree-id1901 . -3) (undo-tree-id1902 . -3) (undo-tree-id1903 . -3) (undo-tree-id1904 . -3) (undo-tree-id1905 . -3) (undo-tree-id1906 . -3) (undo-tree-id1907 . -3) (undo-tree-id1908 . -3) (undo-tree-id1909 . -3) (undo-tree-id1910 . -3) (undo-tree-id1911 . -3) (undo-tree-id1912 . -3) (undo-tree-id1913 . -3) (undo-tree-id1914 . -3) (undo-tree-id1915 . -3) (undo-tree-id1916 . -3) (undo-tree-id1917 . -3) (undo-tree-id1918 . -3) (undo-tree-id1919 . -3) (undo-tree-id1920 . -3) (undo-tree-id1921 . -3) (undo-tree-id1922 . -3) (undo-tree-id1923 . -3) (undo-tree-id1924 . -3) (undo-tree-id1925 . -3) (undo-tree-id1926 . -3) (undo-tree-id1927 . -3) (undo-tree-id1928 . -3) (undo-tree-id1929 . -3) (undo-tree-id1930 . -3) (undo-tree-id1931 . -3) (undo-tree-id1932 . -3) (undo-tree-id1933 . -3) (undo-tree-id1934 . -3) (undo-tree-id1935 . -3) (undo-tree-id1936 . -3) (undo-tree-id1937 . -3) (undo-tree-id1938 . -3) (undo-tree-id1939 . -3) (undo-tree-id1940 . -3) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) (undo-tree-id1943 . -3) (undo-tree-id1944 . -3) (undo-tree-id1945 . -3) (undo-tree-id1946 . -3) (undo-tree-id1947 . -3) (undo-tree-id1948 . -3) (undo-tree-id1949 . -3) (undo-tree-id1950 . -3) (undo-tree-id1951 . -3) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) (undo-tree-id1954 . -3) (undo-tree-id1955 . -3) (undo-tree-id1956 . -3) (undo-tree-id1957 . -3) (undo-tree-id1958 . -3) (undo-tree-id1959 . -3) (undo-tree-id1960 . -3) (undo-tree-id1961 . -3) (undo-tree-id1962 . -3) (undo-tree-id1963 . -3) (undo-tree-id1964 . -3) (undo-tree-id1965 . -3) (undo-tree-id1966 . -3) (undo-tree-id1967 . -3) (undo-tree-id1968 . -3) (undo-tree-id1969 . -3) (undo-tree-id1970 . -3) (undo-tree-id1971 . -3) (undo-tree-id1972 . -3) (undo-tree-id1973 . -3) (undo-tree-id1974 . -3) (undo-tree-id1975 . -3) (undo-tree-id1976 . -3) (undo-tree-id1977 . -3) (undo-tree-id1978 . -3) (undo-tree-id1979 . -3) (undo-tree-id1980 . -3) (undo-tree-id1981 . -3) (undo-tree-id1982 . -3) (undo-tree-id1983 . -3) (undo-tree-id1984 . -3) (undo-tree-id1985 . -3) (undo-tree-id1986 . -3) (undo-tree-id1987 . -3) (undo-tree-id1988 . -3) (undo-tree-id1989 . -1) (undo-tree-id1990 . -3) (#("rcl" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 587) (undo-tree-id1991 . -3) (undo-tree-id1992 . -3) (587 . 590) (#("rclcpp" 0 6 (fontified nil)) . 587) (587 . 593) (#("rcl" 0 3 (fontified nil)) . 587) (587 . 590) (#("rclcpp" 0 6 (face font-lock-constant-face fontified nil)) . 587) (undo-tree-id1993 . -6) (undo-tree-id1994 . -6) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -6) (undo-tree-id1999 . -6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -6) (undo-tree-id2003 . -6) (undo-tree-id2004 . -6) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (undo-tree-id2008 . -6) (undo-tree-id2009 . -6) (undo-tree-id2010 . -6) (undo-tree-id2011 . -6) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6) (undo-tree-id2017 . -6) (undo-tree-id2018 . -6) (undo-tree-id2019 . -6) (undo-tree-id2020 . -6) (undo-tree-id2021 . -6) (undo-tree-id2022 . -6) (undo-tree-id2023 . -6) (undo-tree-id2024 . -6) (undo-tree-id2025 . -6) (undo-tree-id2026 . -6) (undo-tree-id2027 . -6) (undo-tree-id2028 . -6) (undo-tree-id2029 . -6) (undo-tree-id2030 . -6) (undo-tree-id2031 . -6) (undo-tree-id2032 . -6) (undo-tree-id2033 . -6) (undo-tree-id2034 . -6) (undo-tree-id2035 . -6) (undo-tree-id2036 . -6) (undo-tree-id2037 . -6) (undo-tree-id2038 . -6) (undo-tree-id2039 . -6) (undo-tree-id2040 . -6) (undo-tree-id2041 . -6) (undo-tree-id2042 . -6) (undo-tree-id2043 . -6) (undo-tree-id2044 . -6) (undo-tree-id2045 . -6) (undo-tree-id2046 . -6) (undo-tree-id2047 . -6) (undo-tree-id2048 . -6) (undo-tree-id2049 . -6) (undo-tree-id2050 . -6) (undo-tree-id2051 . -6) (undo-tree-id2052 . -6) (undo-tree-id2053 . -6) (undo-tree-id2054 . -6) (undo-tree-id2055 . -6) (undo-tree-id2056 . -6) (undo-tree-id2057 . -6) (undo-tree-id2058 . -6) (undo-tree-id2059 . -6) (undo-tree-id2060 . -6) (undo-tree-id2061 . -6) (undo-tree-id2062 . -6) (undo-tree-id2063 . -6) (undo-tree-id2064 . -6) (undo-tree-id2065 . -6) (undo-tree-id2066 . -6) (undo-tree-id2067 . -5) (undo-tree-id2068 . -6) (undo-tree-id2069 . -6) (undo-tree-id2070 . -6) (undo-tree-id2071 . -6) (undo-tree-id2072 . -6) (undo-tree-id2073 . -6) (undo-tree-id2074 . -6) (undo-tree-id2075 . -6) (undo-tree-id2076 . -6) (undo-tree-id2077 . -6) (undo-tree-id2078 . -6) (undo-tree-id2079 . -6) (undo-tree-id2080 . -6) (undo-tree-id2081 . -6) (undo-tree-id2082 . -6) (undo-tree-id2083 . -6) (undo-tree-id2084 . -6) (undo-tree-id2085 . -6) (undo-tree-id2086 . -6) (undo-tree-id2087 . -6) (undo-tree-id2088 . -6) (undo-tree-id2089 . -6) (undo-tree-id2090 . -6) (undo-tree-id2091 . -6) (undo-tree-id2092 . -6) (undo-tree-id2093 . -6) (undo-tree-id2094 . -6) (undo-tree-id2095 . -6) (undo-tree-id2096 . -6) (undo-tree-id2097 . -6) (undo-tree-id2098 . -6) (undo-tree-id2099 . -6) (undo-tree-id2100 . -6) (undo-tree-id2101 . -6) (undo-tree-id2102 . -6) (undo-tree-id2103 . -6) (undo-tree-id2104 . -6) (undo-tree-id2105 . -6) (#(":" 0 1 (fontified nil)) . 593) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (585 . 587) (#(":" 0 1 (fontified nil)) . 592) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (#("  " 0 2 (fontified nil)) . 585) (#("time" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 595) (undo-tree-id2330 . -3) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (595 . 599) (#("Tr" 0 1 (fontified nil) 1 2 (fontified nil)) . 595) (undo-tree-id2333 . -2) (undo-tree-id2334 . -2) (undo-tree-id2335 . -2) (596 . 597) (#("i" 0 1 (fontified nil)) . 596) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (595 . 597) (#("Wall" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 595) (undo-tree-id2338 . -3) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (595 . 599) (#("WallTimer<typename FunctorT, int *>" 0 9 (fontified nil) 9 10 (category c-<-as-paren-syntax fontified nil) 10 27 (fontified nil) 27 28 (c-type c-<>-arg-sep fontified nil) 28 34 (fontified nil) 34 35 (category c->-as-paren-syntax fontified nil)) . 595) (595 . 630) (#("W" 0 1 (fontified nil)) . 595) (595 . 596) (#("WallTimer<${1:typename FunctorT}>" 0 33 (fontified nil)) . 595) (595 . 628) (#("WallTimer<typename FunctorT>" 0 9 (face font-lock-type-face fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t) 10 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) c-type c-decl-id-start category c->-as-paren-syntax fontified t)) . 595) (undo-tree-id2341 . 18) (undo-tree-id2342 . -9) (undo-tree-id2343 . -10) (undo-tree-id2344 . -10) (undo-tree-id2345 . -10) (undo-tree-id2346 . -10) (undo-tree-id2347 . -10) (undo-tree-id2348 . -10) (undo-tree-id2349 . -10) (undo-tree-id2350 . -10) (undo-tree-id2351 . -10) (undo-tree-id2352 . -10) (undo-tree-id2353 . -10) (undo-tree-id2354 . -10) (undo-tree-id2355 . -10) (undo-tree-id2356 . -10) (undo-tree-id2357 . -10) (undo-tree-id2358 . -10) (undo-tree-id2359 . -10) (undo-tree-id2360 . -10) (undo-tree-id2361 . -10) (undo-tree-id2362 . -10) (undo-tree-id2363 . -10) (undo-tree-id2364 . -10) (undo-tree-id2365 . -10) (undo-tree-id2366 . -10) (undo-tree-id2367 . -10) (undo-tree-id2368 . -10) (undo-tree-id2369 . -9) (undo-tree-id2370 . -9) (undo-tree-id2371 . -9) (undo-tree-id2372 . -9) (undo-tree-id2373 . -9) (undo-tree-id2374 . -9) (undo-tree-id2375 . -9) (undo-tree-id2376 . -9) (undo-tree-id2377 . -9) (undo-tree-id2378 . -9) (undo-tree-id2379 . -9) (undo-tree-id2380 . -9) (undo-tree-id2381 . -9) (undo-tree-id2382 . -9) (undo-tree-id2383 . -9) (undo-tree-id2384 . -9) (undo-tree-id2385 . -9) (undo-tree-id2386 . -9) (undo-tree-id2387 . -9) (undo-tree-id2388 . -9) (undo-tree-id2389 . -9) (undo-tree-id2390 . -9) (undo-tree-id2391 . -9) (undo-tree-id2392 . -9) (undo-tree-id2393 . -9) (undo-tree-id2394 . -9) (undo-tree-id2395 . -9) (undo-tree-id2396 . -9) (undo-tree-id2397 . -9) (undo-tree-id2398 . -9) (undo-tree-id2399 . -9) (undo-tree-id2400 . -9) (undo-tree-id2401 . -9) (undo-tree-id2402 . -9) (undo-tree-id2403 . -9) (undo-tree-id2404 . -9) (undo-tree-id2405 . -9) (undo-tree-id2406 . -9) (undo-tree-id2407 . -9) (undo-tree-id2408 . -9) (undo-tree-id2409 . -9) (undo-tree-id2410 . -9) (undo-tree-id2411 . -9) (undo-tree-id2412 . -9) (undo-tree-id2413 . -9) (undo-tree-id2414 . -9) (undo-tree-id2415 . -10) (undo-tree-id2416 . -7) (undo-tree-id2417 . -9) (undo-tree-id2418 . -9) (undo-tree-id2419 . -9) (undo-tree-id2420 . -9) (undo-tree-id2421 . -9) (undo-tree-id2422 . -9) (undo-tree-id2423 . -9) (undo-tree-id2424 . -9) (undo-tree-id2425 . -9) (undo-tree-id2426 . -9) (undo-tree-id2427 . -9) (undo-tree-id2428 . -9) (undo-tree-id2429 . -9) (undo-tree-id2430 . -9) (undo-tree-id2431 . -9) (undo-tree-id2432 . -9) (undo-tree-id2433 . -9) (undo-tree-id2434 . -9) (undo-tree-id2435 . -9) (undo-tree-id2436 . -9) (undo-tree-id2437 . -9) (undo-tree-id2438 . -9) (undo-tree-id2439 . -9) (undo-tree-id2440 . -9) (undo-tree-id2441 . -9) (undo-tree-id2442 . -9) (undo-tree-id2443 . -9) (undo-tree-id2444 . -9) (undo-tree-id2445 . -9) (undo-tree-id2446 . -9) (undo-tree-id2447 . -9) (undo-tree-id2448 . -9) (undo-tree-id2449 . -9) (undo-tree-id2450 . -9) (undo-tree-id2451 . -9) (undo-tree-id2452 . -9) (undo-tree-id2453 . -10) (apply yas--snippet-revive 595 623 #s(yas--snippet nil (#s(yas--field 1 605 622 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 605 622 nil nil nil nil nil) nil nil)) (#("#include <rclcpp/timer.hpp>
" 0 1 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1 8 (face font-lock-preprocessor-face fontified t c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 10 26 (face font-lock-string-face fontified t c-in-sws t) 26 27 (category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 27 28 (fontified t c-in-sws t)) . 230) (undo-tree-id2454 . -27) (undo-tree-id2455 . 19) (undo-tree-id2456 . -27)) (26236 16166 712262 367000) 0 nil])
([nil nil ((606 . 615) (604 . 606)) nil (26236 16193 114354 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 623 651 #s(yas--snippet nil (#s(yas--field 1 605 622 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 605 622 nil nil nil nil nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 605 622 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 605 622 nil nil nil nil nil) nil nil))) (26236 16166 322587 743000) 0 nil])
([nil nil ((660 . 661) (654 . 660) (645 . 654) (#("SharedPtr" 0 9 (fontified nil)) . -645) (645 . 654) (#("Sha" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -645) (undo-tree-id2457 . -1) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) 648 (645 . 648) (643 . 645) (#(" " 0 1 (fontified t)) . -643) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) 644 (643 . 644) (#(":" 0 1 (fontified t)) . -643) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (#(":" 0 1 (fontified t)) . -644) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) 645) nil (26236 16196 930200 472000) 0 nil])
([nil nil ((#("  rclcpp::WallTimer<typename FunctorT>
" 0 2 (fontified t) 2 8 (face font-lock-constant-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax) 20 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 37 (face font-lock-type-face fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) c-type c-decl-id-start fontified t category c->-as-paren-syntax) 38 39 (fontified t)) . 613) (undo-tree-id1771 . 19) (undo-tree-id1772 . -38) (undo-tree-id1773 . -19) (undo-tree-id1774 . -19) (undo-tree-id1775 . -19) (undo-tree-id1776 . -20) (undo-tree-id1777 . -29) (undo-tree-id1778 . -37) (undo-tree-id1779 . -29) (undo-tree-id1780 . -37) (undo-tree-id1781 . -20) (undo-tree-id1782 . -20) (undo-tree-id1783 . -20) (undo-tree-id1784 . -20) (undo-tree-id1785 . -20) (undo-tree-id1786 . -20) (undo-tree-id1787 . -20) (undo-tree-id1788 . -20) (undo-tree-id1789 . -20) (undo-tree-id1790 . -20) (undo-tree-id1791 . -20) (undo-tree-id1792 . -20) (undo-tree-id1793 . -20) (undo-tree-id1794 . -20) (undo-tree-id1795 . -20) (undo-tree-id1796 . -20) (undo-tree-id1797 . -20) (undo-tree-id1798 . -20) (undo-tree-id1799 . -20) (undo-tree-id1800 . -20) (undo-tree-id1801 . -20) (undo-tree-id1802 . -20) (undo-tree-id1803 . -20) (undo-tree-id1804 . -20) (undo-tree-id1805 . -20) (undo-tree-id1806 . -19) (undo-tree-id1807 . -19) (undo-tree-id1808 . -19) (undo-tree-id1809 . -19) (undo-tree-id1810 . -19) (undo-tree-id1811 . -19) (undo-tree-id1812 . -19) (undo-tree-id1813 . -19) (undo-tree-id1814 . -19) (undo-tree-id1815 . -19) (undo-tree-id1816 . -19) (undo-tree-id1817 . -19) (undo-tree-id1818 . -19) (undo-tree-id1819 . -19) (undo-tree-id1820 . -19) (undo-tree-id1821 . -19) (undo-tree-id1822 . -19) (undo-tree-id1823 . -19) (undo-tree-id1824 . -19) (undo-tree-id1825 . -19) (undo-tree-id1826 . -19) (undo-tree-id1827 . -19) (undo-tree-id1828 . -19) (undo-tree-id1829 . -19) (undo-tree-id1830 . -19) (undo-tree-id1831 . -19) (undo-tree-id1832 . -19) (undo-tree-id1833 . -19) (undo-tree-id1834 . -19) (undo-tree-id1835 . -19) (undo-tree-id1836 . -19) (undo-tree-id1837 . -19) (undo-tree-id1838 . -19) (undo-tree-id1839 . -19) (undo-tree-id1840 . -19) (undo-tree-id1841 . -19) (undo-tree-id1842 . -19) (undo-tree-id1843 . -19) (undo-tree-id1844 . -19) (undo-tree-id1845 . -19) (undo-tree-id1846 . -19) (undo-tree-id1847 . -19) (undo-tree-id1848 . -19) (undo-tree-id1849 . -19) (undo-tree-id1850 . -19) (undo-tree-id1851 . -19) (undo-tree-id1852 . -39) 632) ((613 . 652) (t 26236 16165 87642 537000)) (26236 16165 44010 954000) 0 nil])
([nil nil ((537 . 541) (t 26236 16193 159761 18000)) nil (26236 16262 179491 154000) 0 nil] [nil nil ((539 . 543) (#("    " 0 4 (fontified nil)) . 538) (undo-tree-id2610 . -4) (undo-tree-id2611 . -4) (undo-tree-id2612 . -4) (undo-tree-id2613 . -4) (undo-tree-id2614 . -4) (undo-tree-id2615 . -4) (undo-tree-id2616 . -4) (undo-tree-id2617 . -4) (undo-tree-id2618 . -4) (undo-tree-id2619 . -4) (undo-tree-id2620 . -4) (undo-tree-id2621 . -4) (undo-tree-id2622 . -4) (undo-tree-id2623 . -4) (undo-tree-id2624 . -4) (undo-tree-id2625 . -4) (undo-tree-id2626 . -4) (undo-tree-id2627 . -4) (undo-tree-id2628 . -4) (undo-tree-id2629 . -4) (undo-tree-id2630 . -4) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) (undo-tree-id2633 . -4) (undo-tree-id2634 . -4) (undo-tree-id2635 . -4) (undo-tree-id2636 . -4) (undo-tree-id2637 . -4) (undo-tree-id2638 . -4) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (538 . 543) (#("    " 0 4 (fontified nil)) . 537) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -4) (undo-tree-id2670 . -4) (undo-tree-id2671 . -4) (undo-tree-id2672 . -4) (undo-tree-id2673 . -4) (undo-tree-id2674 . -4) (undo-tree-id2675 . -4) (undo-tree-id2676 . -4) (undo-tree-id2677 . -4) (undo-tree-id2678 . -4) (undo-tree-id2679 . -4) (undo-tree-id2680 . -4) (undo-tree-id2681 . -4) (undo-tree-id2682 . -4) (undo-tree-id2683 . -4) (undo-tree-id2684 . -4) (undo-tree-id2685 . -4) (undo-tree-id2686 . -4) (541 . 542) (537 . 541) (t 26236 16193 159761 18000)) ((#("    " 0 4 (fontified nil)) . 537) (undo-tree-id2687 . -4) (undo-tree-id2688 . -4) (undo-tree-id2689 . -4) (undo-tree-id2690 . -4) (undo-tree-id2691 . -4) (undo-tree-id2692 . -4) (undo-tree-id2693 . -4) (undo-tree-id2694 . -4) (undo-tree-id2695 . -4) (undo-tree-id2696 . -4) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (undo-tree-id2699 . -4) (undo-tree-id2700 . -4) (undo-tree-id2701 . -4) (undo-tree-id2702 . -4) (undo-tree-id2703 . -4) (undo-tree-id2704 . -4) (undo-tree-id2705 . -4) (undo-tree-id2706 . -4) (undo-tree-id2707 . -4) (undo-tree-id2708 . -4) (undo-tree-id2709 . -4) (undo-tree-id2710 . -4) (undo-tree-id2711 . -4) (undo-tree-id2712 . -4) (undo-tree-id2713 . -4) (undo-tree-id2714 . -4) (undo-tree-id2715 . -4) (undo-tree-id2716 . -4) (undo-tree-id2717 . -4) (undo-tree-id2718 . -4) (undo-tree-id2719 . -4) (undo-tree-id2720 . -4) (undo-tree-id2721 . -4) (undo-tree-id2722 . -4) (undo-tree-id2723 . -4) (undo-tree-id2724 . -4) (undo-tree-id2725 . -4) (undo-tree-id2726 . -4) (undo-tree-id2727 . -4) (undo-tree-id2728 . -4) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -4) (undo-tree-id2732 . -4) (undo-tree-id2733 . -4) (undo-tree-id2734 . -4) (undo-tree-id2735 . -4) (undo-tree-id2736 . -4) (undo-tree-id2737 . -4) (undo-tree-id2738 . -4) (undo-tree-id2739 . -4) (undo-tree-id2740 . -4) (undo-tree-id2741 . -4) (undo-tree-id2742 . -4) (undo-tree-id2743 . -4) (undo-tree-id2744 . -4) (undo-tree-id2745 . -4) (undo-tree-id2746 . -4) (undo-tree-id2747 . -4) (undo-tree-id2748 . -4) (undo-tree-id2749 . -4) (undo-tree-id2750 . -4) (undo-tree-id2751 . -4) (undo-tree-id2752 . -4) (undo-tree-id2753 . -4) (undo-tree-id2754 . -4) (undo-tree-id2755 . -4) (undo-tree-id2756 . -4) (undo-tree-id2757 . -4) (undo-tree-id2758 . -4) (undo-tree-id2759 . -4) (undo-tree-id2760 . -4) (undo-tree-id2761 . -4) (#("
" 0 1 (fontified nil)) . 541) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (537 . 541) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 538) (undo-tree-id2802 . -5) (undo-tree-id2803 . -4) (undo-tree-id2804 . -4) (undo-tree-id2805 . -4) (undo-tree-id2806 . -4) (undo-tree-id2807 . -4) (undo-tree-id2808 . -4) (undo-tree-id2809 . -4) (undo-tree-id2810 . -4) (undo-tree-id2811 . -4) (undo-tree-id2812 . -4) (undo-tree-id2813 . -4) (undo-tree-id2814 . -4) (undo-tree-id2815 . -4) (undo-tree-id2816 . -4) (undo-tree-id2817 . -4) (undo-tree-id2818 . -4) (undo-tree-id2819 . -4) (undo-tree-id2820 . -4) (undo-tree-id2821 . -4) (undo-tree-id2822 . -4) (undo-tree-id2823 . -4) (undo-tree-id2824 . -4) (undo-tree-id2825 . -4) (undo-tree-id2826 . -4) (undo-tree-id2827 . -4) (undo-tree-id2828 . -4) (undo-tree-id2829 . -4) (undo-tree-id2830 . -4) (undo-tree-id2831 . -4) (undo-tree-id2832 . -4) (undo-tree-id2833 . -4) (undo-tree-id2834 . -4) (undo-tree-id2835 . -4) (undo-tree-id2836 . -4) (undo-tree-id2837 . -4) (undo-tree-id2838 . -4) (undo-tree-id2839 . -4) (538 . 542) (#("    " 0 4 (fontified t)) . 539) (undo-tree-id2840 . -3)) (26236 16196 918592 312000) 0 nil])
nil
([nil nil ((539 . 543) (#("    " 0 4 (fontified nil)) . 538) (undo-tree-id2875 . -4) (undo-tree-id2876 . -4) (538 . 543) (#(" " 0 1 (fontified nil)) . 538) (#("   " 0 3 (fontified nil)) . 537) (undo-tree-id2877 . -3) (undo-tree-id2878 . -3) (540 . 541)) nil (26236 16262 179487 282000) 0 nil])
nil
([nil nil ((575 . 583) (574 . 576) (apply yas--snippet-revive 556 575 #s(yas--snippet nil nil #s(yas--exit 574 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 574 nil) 16 nil nil nil nil)) (556 . 575) (#("create_wall_timer($0)" 0 21 (fontified nil)) . 556) (556 . 577) (#("create_wall_timer(std::chrono::duration<DurationRepT, DurationT> period, CallbackT callback, rclcpp::CallbackGroup::SharedPtr group)" 0 39 (fontified nil) 39 40 (fontified nil category c-<-as-paren-syntax) 40 52 (fontified nil) 52 53 (fontified nil c-type c-<>-arg-sep) 53 63 (fontified nil) 63 64 (fontified nil category c->-as-paren-syntax) 64 132 (fontified nil)) . -556) (556 . 688) (#("crea" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -556) (undo-tree-id2871 . -4) (undo-tree-id2872 . -4) 560 (556 . 560) (555 . 556) (547 . 555) (542 . 547) (#("tim" 0 3 (fontified nil)) . 542) (542 . 545) (#("timer" 0 5 (fontified nil)) . -542) (542 . 547) (#("tim" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -542) (undo-tree-id2873 . -3) (undo-tree-id2874 . -3) 545 (542 . 545) (538 . 542)) nil (26236 16262 179472 752000) 0 nil])
([nil nil ((584 . 592) (585 . 586)) nil (26236 16262 179454 214000) 0 nil])
([nil nil ((575 . 583) (#("				   " 0 7 (fontified nil)) . -575) (undo-tree-id2869 . -7) (undo-tree-id2870 . -7) (#(" " 0 1 (fontified t)) . 582)) nil (26236 16262 179450 307000) 0 nil])
([nil nil ((629 . 631) (627 . 629) (#("2" 0 1 (fontified t)) . -627) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (#("1" 0 1 (fontified t)) . -628) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (#("0" 0 1 (fontified t)) . -629) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) 630 (627 . 630) (626 . 628) (1 . 19) (596 . 608) (#("mi" 0 2 (fontified nil)) . 596) (596 . 598) (#("milliseconds" 0 12 (fontified nil)) . -596) (596 . 608) (#("mi" 0 1 (fontified t) 1 2 (fontified t)) . -596) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) 598 (596 . 598) (594 . 596) (588 . 594) (#("ch" 0 2 (fontified nil)) . 588) (588 . 590) (#("chrono" 0 6 (fontified nil)) . -588) (588 . 594) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -588) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) 590 (588 . 590) (586 . 588) (583 . 586) (575 . 583) (#("				 " 0 5 (fontified t)) . -575) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) 580 (#(" " 0 1 (fontified t)) . -580) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) 581 (#(" " 0 1 (fontified t)) . -581) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (#(" " 0 1 (fontified t)) . -582) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) 583 (574 . 583)) nil (26236 16262 179435 460000) 0 nil])
([nil nil ((632 . 633)) nil (26236 16262 179392 625000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -646) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) 647 (#("b" 0 1 (fontified t)) . -647) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) 648 (647 . 648) (634 . 642) (#("    " 0 4 (fontified nil)) . 634) (642 . 643) (634 . 638) (#("				    " 0 8 (fontified nil)) . 634) (645 . 646) (642 . 645) (634 . 642) (#("				   " 0 7 (fontified nil)) . -634) (undo-tree-id2849 . -7) (#(" " 0 1 (fontified t)) . 641)) nil (26236 16262 179387 325000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -680) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) 682 (680 . 682) (#("  " 0 2 (fontified nil)) . 679) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (678 . 682)) nil (26236 16262 179371 200000) 0 nil])
([nil nil ((694 . 696) (681 . 694) (679 . 681)) nil (26236 16262 179346 943000) 0 nil])
([nil nil ((699 . 703) (698 . 702) (697 . 699) (696 . 697)) nil (26236 16262 179342 377000) 0 nil])
([nil nil ((686 . 692)) nil (26236 16262 179331 40000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -693) (693 . 694) (#(")" 0 1 (fontified nil)) . -693) (693 . 694) (688 . 693) (#("timer" 0 5 (fontified nil)) . -688) (688 . 693) (#("ti" 0 1 (fontified t) 1 2 (fontified t)) . -688) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) 690 (688 . 690) (#("T" 0 1 (fontified t)) . -688) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) 689 (688 . 689) (686 . 688) (675 . 686) (#("S" 0 1 (fontified nil)) . 675) (675 . 676) (#("ServiceNode" 0 11 (fontified nil)) . -675) (675 . 686) (#("S" 0 1 (fontified t)) . -675) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) 676 (674 . 676) (apply yas--snippet-revive 669 675 #s(yas--snippet nil nil #s(yas--exit 674 nil) 17 nil nil nil nil)) (19 . 41) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 674 nil) 17 nil nil nil nil)) (647 . 653) (#("bind($0)" 0 8 (fontified nil)) . 647) (647 . 655) (#("b" 0 1 (fontified nil)) . 647) (647 . 648) (#("bind(…)" 0 7 (fontified nil)) . -647) (647 . 654) (#("bin" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -647) (undo-tree-id2922 . -3) (undo-tree-id2923 . -3) 650 (647 . 650) (646 . 647) (t 26236 16262 192051 571000)) nil (26236 16315 49303 938000) 0 nil])
([nil nil ((702 . 703) (#(")" 0 1 (fontified nil)) . -702) (702 . 703) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -702) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 703) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -703) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) 704 (apply yas--snippet-revive 688 704 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (688 . 704) (#("timer_callback()" 0 16 (fontified nil)) . 688) (688 . 704) (#("timer_" 0 6 (fontified nil)) . 688) (688 . 694) (#("timer_callback()" 0 16 (fontified nil)) . -688) (688 . 704) (#("timer_ca" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -688) (undo-tree-id2912 . -6) (undo-tree-id2913 . -8) (undo-tree-id2914 . -8) 696 (693 . 696)) nil (26236 16315 49266 455000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -708) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (#(" " 0 1 (fontified t)) . -709) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) 710 (709 . 710) (708 . 709) (704 . 708) (#("1" 0 1 (fontified t)) . -704) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) 705 (703 . 705) (702 . 703)) nil (26236 16315 49244 547000) 0 nil])
([nil nil ((709 . 710)) nil (26236 16315 49224 651000) 0 nil])
([nil nil ((729 . 731) (#("_1" 0 2 (fontified nil)) . -729) (729 . 731) (727 . 729) (715 . 727) (#("p" 0 1 (fontified nil)) . 715) (715 . 716) (#("placeholders" 0 12 (fontified nil)) . -715) (715 . 727) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -715) (undo-tree-id2879 . -2) (undo-tree-id2880 . -3) (undo-tree-id2881 . -3) (undo-tree-id2882 . -3) (undo-tree-id2883 . -3) (undo-tree-id2884 . -3) (undo-tree-id2885 . -3) (undo-tree-id2886 . -3) (undo-tree-id2887 . -3) (undo-tree-id2888 . -3) (undo-tree-id2889 . -3) (undo-tree-id2890 . -3) (undo-tree-id2891 . -3) (undo-tree-id2892 . -3) (undo-tree-id2893 . -3) (undo-tree-id2894 . -3) (undo-tree-id2895 . -3) (undo-tree-id2896 . -3) (undo-tree-id2897 . -3) (undo-tree-id2898 . -3) 718 (715 . 718) (713 . 715) (#("_" 0 1 (fontified t)) . -713) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) 714 (709 . 714) (708 . 709)) nil (26236 16315 49208 101000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -732) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) 733 (t 26236 16315 64273 424000)) nil (26236 16323 420030 380000) 0 nil])
([nil nil ((#("				    " 0 8 (fontified t)) . 733) (undo-tree-id3024 . -7) (undo-tree-id3025 . 8) (undo-tree-id3026 . -8) (undo-tree-id3027 . -8)) nil (26236 16323 420022 577000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -732) (undo-tree-id2924 . 1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) 733) nil (26236 16323 419996 553000) 0 nil])
([nil nil ((654 . 655) (#(";" 0 1 (fontified t)) . -654) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) 655 (t 26236 16323 464308 618000)) nil (26236 16329 707357 423000) 0 nil])
([nil nil ((#("std" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t)) . 710) (undo-tree-id3048 . -2) (t 26236 16329 752334 954000)) nil (26236 16343 619167 183000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 710) (undo-tree-id3047 . -1)) nil (26236 16343 619162 513000) 0 nil])
([nil nil ((#("placeholders" 0 12 (face font-lock-constant-face fontified t)) . 710) (undo-tree-id3046 . -11)) nil (26236 16343 619157 657000) 0 nil])
([nil nil ((#("::_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 710) (undo-tree-id3045 . -2)) nil (26236 16343 619152 681000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 710)) nil (26236 16343 619146 964000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 708) (undo-tree-id3044 . -1)) nil (26236 16343 619142 261000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 708)) nil (26236 16343 619115 638000) 0 nil])
([nil nil ((#("				    " 0 8 (fontified t)) . 615) (undo-tree-id3187 . -7) (undo-tree-id3188 . -8) (t 26236 16343 636393 84000)) nil (26236 16353 649223 759000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -614) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) 615) nil (26236 16444 919002 719000) 0 nil])
([nil nil ((750 . 754) (#("    " 0 4 (fontified t)) . 750) (t 26236 16445 936820 384000)) nil (26236 16495 828245 690000) 0 nil] [nil nil ((#("this" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t)) . 508) (undo-tree-id3192 . -3) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . 2) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (t 26236 16353 664435 46000)) ((508 . 512)) (26236 16444 393432 939000) 0 nil])
([nil nil ((752 . 756) (#("    " 0 4 (fontified nil)) . 751) (undo-tree-id3332 . -4) (undo-tree-id3333 . -4) (751 . 756) (#("    " 0 4 (fontified nil)) . 750) (undo-tree-id3334 . -4) (undo-tree-id3335 . -4) (754 . 755) (750 . 754) (#("   " 0 3 (fontified nil)) . -750) (undo-tree-id3336 . -3) (undo-tree-id3337 . -3) (#(" " 0 1 (fontified t)) . 753)) nil (26236 16495 828241 312000) 0 nil])
([nil nil ((#("->" 0 1 (fontified t) 1 2 (fontified t)) . 508) (undo-tree-id3189 . -1) (undo-tree-id3190 . 2) (undo-tree-id3191 . -2)) ((508 . 510) (t 26236 16439 624794 66000)) (26236 16439 606652 18000) 0 nil])
([nil nil ((751 . 755) (#("    " 0 4 (fontified nil)) . 750) (undo-tree-id3330 . -4) (undo-tree-id3331 . -4) (754 . 755) (750 . 754)) nil (26236 16495 828227 655000) 0 nil])
nil
([nil nil ((#("false" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t)) . 895) (undo-tree-id3328 . -4) (undo-tree-id3329 . -5)) nil (26236 16495 828221 702000) 0 nil])
([nil nil ((895 . 899) (#("tr" 0 2 (fontified nil)) . 895) (895 . 897) (#("true" 0 4 (fontified nil)) . -895) (895 . 899) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . -895) (undo-tree-id3278 . -2) (undo-tree-id3279 . -2) (undo-tree-id3280 . -2) (undo-tree-id3281 . -2) (undo-tree-id3282 . -2) (undo-tree-id3283 . -2) (undo-tree-id3284 . -2) (undo-tree-id3285 . -2) (undo-tree-id3286 . -2) (undo-tree-id3287 . -2) (undo-tree-id3288 . -2) (undo-tree-id3289 . -2) (undo-tree-id3290 . -2) (undo-tree-id3291 . -2) (undo-tree-id3292 . -2) (undo-tree-id3293 . -2) (undo-tree-id3294 . -2) (undo-tree-id3295 . -2) (undo-tree-id3296 . -2) (undo-tree-id3297 . -2) (undo-tree-id3298 . -2) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -2) (undo-tree-id3307 . -2) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2) (undo-tree-id3310 . -2) (undo-tree-id3311 . -2) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) 897 (895 . 897)) nil (26236 16495 828211 345000) 0 nil])
([nil nil ((762 . 772) (#("fi" 0 2 (fontified nil)) . 762) (762 . 764) (#("first_take" 0 10 (fontified nil)) . -762) (762 . 772) (#("fi" 0 1 (fontified t) 1 2 (fontified t)) . -762) (undo-tree-id3206 . -2) (undo-tree-id3207 . -2) (undo-tree-id3208 . -2) (undo-tree-id3209 . -2) (undo-tree-id3210 . -2) (undo-tree-id3211 . -2) (undo-tree-id3212 . -2) (undo-tree-id3213 . -2) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2) (undo-tree-id3216 . -2) (undo-tree-id3217 . -2) (undo-tree-id3218 . -2) (undo-tree-id3219 . -2) (undo-tree-id3220 . -2) (undo-tree-id3221 . -2) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -2) (undo-tree-id3225 . -2) (undo-tree-id3226 . -2) (undo-tree-id3227 . -2) (undo-tree-id3228 . -2) (undo-tree-id3229 . -2) (undo-tree-id3230 . -2) (undo-tree-id3231 . -2) (undo-tree-id3232 . -2) (undo-tree-id3233 . -2) (undo-tree-id3234 . -2) (undo-tree-id3235 . -2) (undo-tree-id3236 . -2) (undo-tree-id3237 . -2) (undo-tree-id3238 . -2) (undo-tree-id3239 . -2) (undo-tree-id3240 . -2) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -2) (undo-tree-id3244 . -2) (undo-tree-id3245 . -2) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) (undo-tree-id3250 . -2) (undo-tree-id3251 . -2) (undo-tree-id3252 . -2) (undo-tree-id3253 . -2) (undo-tree-id3254 . -2) (undo-tree-id3255 . -2) (undo-tree-id3256 . -2) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) (undo-tree-id3261 . -2) (undo-tree-id3262 . -2) (undo-tree-id3263 . -2) (undo-tree-id3264 . -2) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -2) (undo-tree-id3268 . -2) (undo-tree-id3269 . -2) (undo-tree-id3270 . -2) (undo-tree-id3271 . -2) (undo-tree-id3272 . -2) (undo-tree-id3273 . -2) (undo-tree-id3274 . -2) 764 (762 . 764) (758 . 762) (#("    " 0 4 (fontified nil)) . 757) (undo-tree-id3275 . -4) (undo-tree-id3276 . -4) (761 . 762) (757 . 761) (#("   " 0 3 (fontified nil)) . -757) (undo-tree-id3277 . -3) (#(" " 0 1 (fontified t)) . 760)) nil (26236 16495 828119 683000) 0 nil])
([nil nil ((767 . 768) (762 . 767)) nil (26236 16495 827847 340000) 0 nil])
([nil nil ((786 . 787) (779 . 786) (#("-" 0 1 (fontified t)) . -779) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (#(" " 0 1 (fontified t)) . -780) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (#("f" 0 1 (fontified t)) . -781) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (#("a" 0 1 (fontified t)) . -782) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) 783 (778 . 783)) nil (26236 16495 827835 720000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -755) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (#("h" 0 1 (fontified t)) . -756) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (#("i" 0 1 (fontified t)) . -757) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -758) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) 759 (755 . 759) (#("f" 0 1 (fontified t)) . -755) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (#("i" 0 1 (fontified t)) . -756) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (#("r" 0 1 (fontified t)) . -757) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) 758 (755 . 758) (751 . 755) (#("   " 0 3 (fontified nil)) . -751) (undo-tree-id3531 . -3) (#(" " 0 1 (fontified t)) . 754) (t 26236 16495 873028 395000)) nil (26236 16533 137322 329000) 0 nil])
([nil nil ((759 . 769) (#("fi" 0 2 (fontified nil)) . 759) (759 . 761) (#("first_take" 0 10 (fontified nil)) . -759) (759 . 769) (#("fi" 0 1 (fontified t) 1 2 (fontified t)) . -759) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -2) (undo-tree-id3437 . -2) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (undo-tree-id3440 . -2) (undo-tree-id3441 . -2) (undo-tree-id3442 . -2) (undo-tree-id3443 . -2) (undo-tree-id3444 . -2) (undo-tree-id3445 . -2) (undo-tree-id3446 . -2) (undo-tree-id3447 . -2) (undo-tree-id3448 . -2) (undo-tree-id3449 . -2) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) 761 (759 . 761) (758 . 759) (757 . 759) (754 . 757) (750 . 754)) nil (26236 16533 137073 469000) 0 nil])
([nil nil ((apply yas--snippet-revive 779 786 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (779 . 786) (#("return;" 0 7 (fontified nil)) . 779) (779 . 786) (#("ret" 0 3 (fontified nil)) . 779) (779 . 782) (#("return;" 0 7 (fontified nil)) . -779) (779 . 786) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -779) (undo-tree-id3338 . -3) (undo-tree-id3339 . -3) (undo-tree-id3340 . -2) (undo-tree-id3341 . -2) (undo-tree-id3342 . -2) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -2) (undo-tree-id3346 . -2) (undo-tree-id3347 . -2) (undo-tree-id3348 . -2) (undo-tree-id3349 . -3) (undo-tree-id3350 . -3) (undo-tree-id3351 . -3) (undo-tree-id3352 . -3) (undo-tree-id3353 . -3) (undo-tree-id3354 . -3) (undo-tree-id3355 . -3) (undo-tree-id3356 . -3) (undo-tree-id3357 . -3) (undo-tree-id3358 . -3) (undo-tree-id3359 . -3) (undo-tree-id3360 . -3) (undo-tree-id3361 . -3) (undo-tree-id3362 . -3) (undo-tree-id3363 . -3) (undo-tree-id3364 . -3) (undo-tree-id3365 . -3) (undo-tree-id3366 . -3) (undo-tree-id3367 . -3) (undo-tree-id3368 . -3) (undo-tree-id3369 . -3) (undo-tree-id3370 . -3) (undo-tree-id3371 . -3) (undo-tree-id3372 . -3) (undo-tree-id3373 . -3) (undo-tree-id3374 . -3) (undo-tree-id3375 . -3) (undo-tree-id3376 . -3) (undo-tree-id3377 . -3) (undo-tree-id3378 . -3) (undo-tree-id3379 . -3) (undo-tree-id3380 . -3) (undo-tree-id3381 . -3) (undo-tree-id3382 . -3) (undo-tree-id3383 . -3) (undo-tree-id3384 . -3) (undo-tree-id3385 . -3) (undo-tree-id3386 . -3) (undo-tree-id3387 . -3) (undo-tree-id3388 . -3) (undo-tree-id3389 . -3) (undo-tree-id3390 . -3) (undo-tree-id3391 . -3) (undo-tree-id3392 . -3) (undo-tree-id3393 . -3) (undo-tree-id3394 . -3) (undo-tree-id3395 . -3) (undo-tree-id3396 . -3) (undo-tree-id3397 . -3) (undo-tree-id3398 . -3) (undo-tree-id3399 . -3) (undo-tree-id3400 . -3) (undo-tree-id3401 . -3) (undo-tree-id3402 . -3) (undo-tree-id3403 . -3) (undo-tree-id3404 . -3) (undo-tree-id3405 . -3) (undo-tree-id3406 . -3) (undo-tree-id3407 . -3) (undo-tree-id3408 . -3) (undo-tree-id3409 . -3) (undo-tree-id3410 . -3) (undo-tree-id3411 . -3) (undo-tree-id3412 . -3) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) (undo-tree-id3415 . -3) (undo-tree-id3416 . -3) (undo-tree-id3417 . -3) (undo-tree-id3418 . -3) (undo-tree-id3419 . -3) 782 (779 . 782) (#("r" 0 1 (fontified t)) . -779) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (#("e" 0 1 (fontified t)) . -780) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (#("t" 0 1 (fontified t)) . -781) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (#("u" 0 1 (fontified t)) . -782) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (#("r" 0 1 (fontified t)) . -783) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -784) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (#(" " 0 1 (fontified t)) . -785) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) 786 (779 . 786) (773 . 779) (772 . 778) (771 . 773) (770 . 771)) nil (26236 16533 136975 434000) 0 nil])
([nil nil ((829 . 830) (828 . 829) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -828) (828 . 829) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -828) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) 829 (apply yas--snippet-revive 819 829 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (298 . 330) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (787 . 797) (#("shutdown()" 0 10 (fontified nil)) . 787) (787 . 797) (#("s" 0 1 (fontified nil)) . 787) (787 . 788) (#("shutdown(rclcpp::Context::SharedPtr context = nullptr, const std::string &reason = \"user called rclcpp::shutdown()\")" 0 116 (fontified nil)) . -787) (787 . 903) (#("sh" 0 1 (fontified t) 1 2 (fontified t)) . -787) (undo-tree-id3580 . -2) (undo-tree-id3581 . -2) (undo-tree-id3582 . -2) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) (undo-tree-id3628 . -2) (undo-tree-id3629 . -2) (undo-tree-id3630 . -2) (undo-tree-id3631 . -2) (undo-tree-id3632 . -2) (undo-tree-id3633 . -2) (undo-tree-id3634 . -2) (undo-tree-id3635 . -2) (undo-tree-id3636 . -2) (undo-tree-id3637 . -2) (undo-tree-id3638 . -2) (undo-tree-id3639 . -2) (undo-tree-id3640 . -2) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) (undo-tree-id3644 . -2) (undo-tree-id3645 . -2) (undo-tree-id3646 . -2) (undo-tree-id3647 . -2) (undo-tree-id3648 . -2) (undo-tree-id3649 . -2) (undo-tree-id3650 . -2) (undo-tree-id3651 . -2) (undo-tree-id3652 . -2) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -2) (undo-tree-id3658 . -2) (undo-tree-id3659 . -2) (undo-tree-id3660 . -2) (undo-tree-id3661 . -2) (undo-tree-id3662 . -2) (undo-tree-id3663 . -2) (undo-tree-id3664 . -2) (undo-tree-id3665 . -2) (undo-tree-id3666 . -2) (undo-tree-id3667 . -2) (undo-tree-id3668 . -2) (undo-tree-id3669 . -2) (undo-tree-id3670 . -2) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) (undo-tree-id3673 . -2) (undo-tree-id3674 . -2) (undo-tree-id3675 . -2) (undo-tree-id3676 . -2) (undo-tree-id3677 . -2) (undo-tree-id3678 . -2) (undo-tree-id3679 . -2) (undo-tree-id3680 . -2) (undo-tree-id3681 . -2) (undo-tree-id3682 . -2) (undo-tree-id3683 . -2) (undo-tree-id3684 . -2) (undo-tree-id3685 . -2) (undo-tree-id3686 . -2) (undo-tree-id3687 . -2) (undo-tree-id3688 . -2) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2) (undo-tree-id3691 . -2) (undo-tree-id3692 . -2) (undo-tree-id3693 . -2) (undo-tree-id3694 . -2) (undo-tree-id3695 . -2) (undo-tree-id3696 . -2) 789 (787 . 789) (773 . 779) (#("    " 0 4 (fontified nil)) . 773) (784 . 785) (773 . 777) (#("      " 0 6 (fontified nil)) . 773) (785 . 786) (779 . 785) (772 . 779) (t 26236 16533 157183 490000)) nil (26236 16540 790872 262000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 851) (undo-tree-id3731 . -4) (undo-tree-id3732 . -3) 854 (t 26236 16540 809215 302000)) nil (26236 16692 592458 284000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 851)) nil (26236 16692 592451 996000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -853) (undo-tree-id3725 . -4) (undo-tree-id3726 . -4) 857 (853 . 857) (#("    " 0 4 (fontified nil)) . 852) (undo-tree-id3727 . -4) (undo-tree-id3728 . -4) (852 . 857) (#("    " 0 4 (fontified nil)) . 851) (undo-tree-id3729 . -4) (undo-tree-id3730 . -4) (850 . 856)) nil (26236 16692 592448 237000) 0 nil])
([nil nil ((918 . 920) (916 . 918) (915 . 917) (903 . 915) (#("m" 0 1 (fontified nil)) . 903) (903 . 904) (#("milliseconds" 0 12 (fontified nil)) . -903) (903 . 915) (#("mi" 0 1 (fontified t) 1 2 (fontified t)) . -903) (undo-tree-id3711 . -2) (undo-tree-id3712 . -2) 905 (903 . 905) (902 . 903) (901 . 902) (895 . 901) (#("ch" 0 2 (fontified nil)) . 895) (895 . 897) (#("chrono" 0 6 (fontified nil)) . -895) (895 . 901) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -895) (undo-tree-id3713 . -2) (undo-tree-id3714 . -2) 897 (895 . 897) (893 . 895) (890 . 893) (889 . 891) (887 . 889) (#("f" 0 1 (fontified t)) . -887) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (#("e" 0 1 (fontified t)) . -888) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) 889 (873 . 889) (872 . 873) (871 . 872) (865 . 871) (#("clie" 0 4 (fontified nil)) . 865) (865 . 869) (#("client" 0 6 (fontified nil)) . -865) (865 . 871) (#("clie" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -865) (undo-tree-id3719 . -4) (undo-tree-id3720 . -4) 869 (864 . 869) (863 . 865) (862 . 863) (#(" x" 0 2 (fontified nil)) . -862) (862 . 864) (#("while" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 862) (undo-tree-id3721 . -5) (undo-tree-id3722 . -5) (857 . 862) 862 (857 . 862) (853 . 857) (#("    " 0 4 (fontified nil)) . 852) (undo-tree-id3723 . -4) (undo-tree-id3724 . -4) (856 . 857) (852 . 856)) nil (26236 16692 592425 443000) 0 nil])
([nil nil ((926 . 932) (925 . 931) (924 . 926) (923 . 924)) nil (26236 16692 592245 223000) 0 nil])
([nil nil ((926 . 932) (#("     " 0 5 (fontified nil)) . -926) (undo-tree-id3710 . -5) (#(" " 0 1 (fontified t)) . 931)) nil (26236 16692 592241 376000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1216 . 1217) (nil fontified nil 932 . 1217) (932 . 1217) 931) nil (26236 16731 406852 958000) 0 nil])
([nil nil ((#("   if (rclcpp::ok()) {
        RCLCPP_ERROR(
            this->get_logger(),
            \"Client interrupted while waiting for service. Terminating...\");
        return;
      }
      RCLCPP_INFO(this->get_logger(),
                  \"Service Unavailable. Waiting for Service...\");
    }
    }" 0 2 (fontified t) 2 3 (fontified t) 3 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 13 (face font-lock-constant-face fontified t) 13 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-5-face) fontified t) 18 19 (face (rainbow-delimiters-depth-5-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 23 (fontified t) 23 31 (fontified t) 31 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-5-face) fontified t) 44 45 (fontified t) 45 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-6-face) fontified t) 74 75 (face (rainbow-delimiters-depth-6-face) fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 89 (fontified t) 89 151 (face font-lock-string-face fontified t) 151 152 (face (rainbow-delimiters-depth-5-face) fontified t) 152 154 (fontified t) 154 162 (fontified t) 162 168 (face font-lock-keyword-face fontified t) 168 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-4-face) fontified t) 177 195 (fontified t) 195 196 (face (rainbow-delimiters-depth-4-face) fontified t) 196 200 (face font-lock-keyword-face fontified t) 200 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-5-face) fontified t) 213 214 (face (rainbow-delimiters-depth-5-face) fontified t) 214 234 (fontified t) 234 279 (face font-lock-string-face fontified t) 279 280 (face (rainbow-delimiters-depth-4-face) fontified t) 280 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 287 288 (fontified t) 288 292 (fontified t) 292 293 (face (rainbow-delimiters-depth-2-face) fontified t)) . 930) (undo-tree-id5046 . -292) (undo-tree-id5047 . -292) (undo-tree-id5048 . -292) (undo-tree-id5049 . -27) (undo-tree-id5050 . -292) (undo-tree-id5051 . -57) (undo-tree-id5052 . -61) (undo-tree-id5053 . -196) (undo-tree-id5054 . -200) (undo-tree-id5055 . -293) (undo-tree-id5056 . -292) (undo-tree-id5057 . -174) (undo-tree-id5058 . -174) (undo-tree-id5059 . -174) (undo-tree-id5060 . -174) (undo-tree-id5061 . -174) (undo-tree-id5062 . -174) (undo-tree-id5063 . -174) (undo-tree-id5064 . -174) (undo-tree-id5065 . -174) (undo-tree-id5066 . -286) (undo-tree-id5067 . -286) (undo-tree-id5068 . -286) (undo-tree-id5069 . -286) (undo-tree-id5070 . -286) (undo-tree-id5071 . -286) (undo-tree-id5072 . -286) (undo-tree-id5073 . -286) (undo-tree-id5074 . -286) (undo-tree-id5075 . -288) (undo-tree-id5076 . -292) (undo-tree-id5077 . -292) (undo-tree-id5078 . -292) (undo-tree-id5079 . -292) (undo-tree-id5080 . -292) (undo-tree-id5081 . -292) (undo-tree-id5082 . -292) (undo-tree-id5083 . -292) (undo-tree-id5084 . -292) (undo-tree-id5085 . -292) (undo-tree-id5086 . -293) 1222) nil (26236 16734 613907 875000) 0 nil] [nil nil ((926 . 932) (#("       " 0 6 (fontified t) 6 7 (fontified t)) . 926) (undo-tree-id3707 . -6) (undo-tree-id3708 . -6) (undo-tree-id3709 . -4) 930) ((926 . 933) (#("      " 0 6 (fontified t)) . 926)) (26236 16731 149410 137000) 0 nil])
([nil nil ((931 . 935) (931 . 932) (#("}" 0 1 (fontified nil)) . -931) (931 . 932) (t 26236 16734 634019 14000)) nil (26236 16739 680741 827000) 0 nil])
([nil nil ((974 . 981) (#("            " 0 12 (fontified t)) . 974) (undo-tree-id3706 . -8) 982) ((974 . 986) (#("		     " 0 7 (fontified t)) . 974) (undo-tree-id5045 . -7)) (26236 16730 429948 879000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -951) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (#("n" 0 1 (fontified t)) . -952) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -953) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (#("m" 0 1 (fontified t)) . -954) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (#("a" 0 1 (fontified t)) . -955) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (#("x" 0 1 (fontified t)) . -956) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (#("_" 0 1 (fontified t)) . -957) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (#("t" 0 1 (fontified t)) . -958) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) 959 (19 . 38) (932 . 940) (#("i" 0 1 (fontified nil)) . 932) (932 . 933) (#("intmax_t" 0 8 (fontified nil)) . -932) (932 . 940) (#("i" 0 1 (fontified t)) . -932) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) 933 (932 . 933) (926 . 932) (#("   " 0 3 (fontified nil)) . -926) (undo-tree-id5159 . -3) (undo-tree-id5160 . -3) (undo-tree-id5161 . -3) (undo-tree-id5162 . -3) (undo-tree-id5163 . -3) (#(" " 0 1 (fontified t)) . 929) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (t 26236 16739 730040 101000)) nil (26236 16784 265904 419000) 0 nil])
([nil nil ((1001 . 1008) (#("            " 0 12 (fontified t)) . 1001) 1022) ((1001 . 1013) (#("		     " 0 7 (fontified t)) . 1001)) (26236 16729 945084 110000) 0 nil])
([nil nil ((945 . 951) (#("     " 0 5 (fontified nil)) . -945) (undo-tree-id5168 . -5) (undo-tree-id5169 . -5) (#(" " 0 1 (fontified t)) . 950) (t 26236 16784 286224 353000)) nil (26236 16804 970786 493000) 0 nil])
([nil nil ((1207 . 1209) (#("    " 0 4 (fontified t)) . -1207) (undo-tree-id3705 . -4) 1211) ((1207 . 1211) (#("  " 0 2 (fontified t)) . 1207)) (26236 16729 213143 612000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1228 . 1229) (nil fontified nil 951 . 1229) (951 . 1229) 950) nil (26236 16804 970763 846000) 0 nil])
([nil nil ((1212 . 1214)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1212) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1)) (26236 16728 614923 248000) 0 nil])
([nil nil ((993 . 1000) (#("            " 0 12 (fontified t)) . 993) 1013) nil (26236 16804 970760 430000) 0 nil])
([nil nil ((1211 . 1213)) ((#("  " 0 2 (fontified t)) . 1211)) (26236 16727 853891 312000) 0 nil])
([nil nil ((1020 . 1027) (#("            " 0 12 (fontified t)) . 1020) 1049) nil (26236 16804 970755 278000) 0 nil])
([nil nil ((1216 . 1218) (#("  " 0 2 (fontified nil)) . 1215) (undo-tree-id3697 . -2) (undo-tree-id3698 . -2) (undo-tree-id3700 . -2) (1215 . 1218) (#("  " 0 2 (fontified nil)) . 1214) (undo-tree-id3701 . -2) (undo-tree-id3702 . -2) (1216 . 1217) (1214 . 1216) (#(" " 0 1 (fontified nil)) . -1214) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (#(" " 0 1 (fontified t)) . 1215)) ((1214 . 1216) (#("  " 0 2 (fontified nil)) . 1214) (undo-tree-id4708 . -2) (undo-tree-id4709 . -2) (undo-tree-id4710 . -2) (undo-tree-id4711 . -2) (undo-tree-id4712 . -2) (undo-tree-id4713 . -2) (undo-tree-id4714 . -2) (undo-tree-id4715 . -2) (undo-tree-id4716 . -2) (undo-tree-id4717 . -2) (undo-tree-id4718 . -2) (undo-tree-id4719 . -2) (undo-tree-id4720 . -2) (undo-tree-id4721 . -2) (undo-tree-id4722 . -2) (undo-tree-id4723 . -2) (undo-tree-id4724 . -2) (undo-tree-id4725 . -2) (undo-tree-id4726 . -2) (undo-tree-id4727 . -2) (undo-tree-id4728 . -2) (undo-tree-id4729 . -2) (undo-tree-id4730 . -2) (undo-tree-id4731 . -2) (undo-tree-id4732 . -2) (undo-tree-id4733 . -2) (undo-tree-id4734 . -2) (undo-tree-id4735 . -2) (undo-tree-id4736 . -2) (undo-tree-id4737 . -2) (undo-tree-id4738 . -2) (undo-tree-id4739 . -2) (undo-tree-id4740 . -2) (undo-tree-id4741 . -2) (undo-tree-id4742 . -2) (undo-tree-id4743 . -2) (undo-tree-id4744 . -2) (undo-tree-id4745 . -2) (undo-tree-id4746 . -2) (undo-tree-id4747 . -2) (undo-tree-id4748 . -2) (undo-tree-id4749 . -2) (undo-tree-id4750 . -2) (undo-tree-id4751 . -2) (undo-tree-id4752 . -2) (undo-tree-id4753 . -2) (undo-tree-id4754 . -2) (undo-tree-id4755 . -2) (undo-tree-id4756 . -2) (undo-tree-id4757 . -2) (undo-tree-id4758 . -2) (undo-tree-id4759 . -2) (undo-tree-id4760 . -2) (undo-tree-id4761 . -2) (undo-tree-id4762 . -2) (undo-tree-id4763 . -2) (undo-tree-id4764 . -2) (undo-tree-id4765 . -2) (undo-tree-id4766 . -2) (undo-tree-id4767 . -2) (undo-tree-id4768 . -2) (undo-tree-id4769 . -2) (undo-tree-id4770 . -2) (undo-tree-id4771 . -2) (undo-tree-id4772 . -2) (undo-tree-id4773 . -2) (undo-tree-id4774 . -2) (undo-tree-id4775 . -2) (undo-tree-id4776 . -2) (undo-tree-id4777 . -2) (undo-tree-id4778 . -2) (undo-tree-id4779 . -2) (undo-tree-id4780 . -2) (undo-tree-id4781 . -2) (undo-tree-id4782 . -2) (undo-tree-id4783 . -2) (undo-tree-id4784 . -2) (undo-tree-id4785 . -2) (undo-tree-id4786 . -2) (undo-tree-id4787 . -2) (undo-tree-id4788 . -2) (undo-tree-id4789 . -2) (undo-tree-id4790 . -2) (undo-tree-id4791 . -2) (undo-tree-id4792 . -2) (undo-tree-id4793 . -2) (undo-tree-id4794 . -2) (undo-tree-id4795 . -2) (undo-tree-id4796 . -2) (undo-tree-id4797 . -2) (undo-tree-id4798 . -2) (undo-tree-id4799 . -2) (undo-tree-id4800 . -2) (undo-tree-id4801 . -2) (undo-tree-id4802 . -2) (undo-tree-id4803 . -2) (undo-tree-id4804 . -2) (undo-tree-id4805 . -2) (undo-tree-id4806 . -2) (undo-tree-id4807 . -2) (undo-tree-id4808 . -2) (undo-tree-id4809 . -2) (undo-tree-id4810 . -2) (undo-tree-id4811 . -2) (undo-tree-id4812 . -2) (undo-tree-id4813 . -2) (undo-tree-id4814 . -2) (undo-tree-id4815 . -2) (undo-tree-id4816 . -2) (undo-tree-id4817 . -2) (undo-tree-id4818 . -2) (undo-tree-id4819 . -2) (undo-tree-id4820 . -2) (undo-tree-id4821 . -2) (undo-tree-id4822 . -2) (undo-tree-id4823 . -2) (undo-tree-id4824 . -2) (undo-tree-id4825 . -2) (undo-tree-id4826 . -2) (undo-tree-id4827 . -2) (undo-tree-id4828 . -2) (undo-tree-id4829 . -2) (undo-tree-id4830 . -2) (#("
" 0 1 (fontified nil)) . 1216) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (1214 . 1216) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 1215) (undo-tree-id4954 . 1) (undo-tree-id4955 . 1) (undo-tree-id4956 . -2) (undo-tree-id4957 . -2) (1215 . 1217) (#("  " 0 2 (fontified t)) . 1216)) (26236 16727 245208 6000) 0 nil])
([nil nil ((1226 . 1230)) nil (26236 16804 970743 978000) 0 nil])
([nil nil ((1215 . 1217)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1215) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1)) (26236 16726 645687 773000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1230) (undo-tree-id5217 . -4) (undo-tree-id5218 . -4) 1234 (1230 . 1234) (#("    " 0 4 (fontified nil)) . 1229) (undo-tree-id5219 . -4) (undo-tree-id5220 . -4) (1229 . 1234) (#("    " 0 4 (fontified nil)) . 1228) (undo-tree-id5221 . -4) (undo-tree-id5222 . -4) (1228 . 1233) (#("    " 0 4 (fontified nil)) . 1227) (undo-tree-id5223 . -4) (undo-tree-id5224 . -4) (1227 . 1232) (#("    " 0 4 (fontified nil)) . 1226) (undo-tree-id5225 . -4) (1230 . 1231) (t 26236 16805 18310 29000)) nil (26236 16927 801162 844000) 0 nil])
([nil nil ((1248 . 1250) (1241 . 1248) (1237 . 1241) (1235 . 1237) (1217 . 1235) (1215 . 1217) (#(" " 0 1 (fontified nil)) . -1215) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (#(" " 0 1 (fontified t)) . 1216) (t 26236 16692 613845 74000)) ((1215 . 1217) (#("  " 0 2 (fontified nil)) . 1215) (undo-tree-id3853 . -2) (undo-tree-id3854 . -2) (undo-tree-id3855 . -2) (undo-tree-id3856 . -2) (undo-tree-id3857 . -2) (undo-tree-id3858 . -2) (undo-tree-id3859 . -2) (undo-tree-id3860 . -2) (undo-tree-id3861 . -2) (undo-tree-id3862 . -2) (undo-tree-id3863 . -2) (undo-tree-id3864 . -2) (undo-tree-id3865 . -2) (undo-tree-id3866 . -2) (undo-tree-id3867 . -2) (undo-tree-id3868 . -2) (undo-tree-id3869 . -2) (undo-tree-id3870 . -2) (undo-tree-id3871 . -2) (undo-tree-id3872 . -2) (undo-tree-id3873 . -2) (undo-tree-id3874 . -2) (undo-tree-id3875 . -2) (undo-tree-id3876 . -2) (undo-tree-id3877 . -2) (undo-tree-id3878 . -2) (undo-tree-id3879 . -2) (undo-tree-id3880 . -2) (undo-tree-id3881 . -2) (undo-tree-id3882 . -2) (undo-tree-id3883 . -2) (undo-tree-id3884 . -2) (undo-tree-id3885 . -2) (undo-tree-id3886 . -2) (undo-tree-id3887 . -2) (undo-tree-id3888 . -2) (undo-tree-id3889 . -2) (undo-tree-id3890 . -2) (undo-tree-id3891 . -2) (undo-tree-id3892 . -2) (undo-tree-id3893 . -2) (undo-tree-id3894 . -2) (undo-tree-id3895 . -2) (undo-tree-id3896 . -2) (undo-tree-id3897 . -2) (undo-tree-id3898 . -2) (undo-tree-id3899 . -2) (undo-tree-id3900 . -2) (undo-tree-id3901 . -2) (undo-tree-id3902 . -2) (undo-tree-id3903 . -2) (undo-tree-id3904 . -2) (undo-tree-id3905 . -2) (undo-tree-id3906 . -2) (undo-tree-id3907 . -2) (undo-tree-id3908 . -2) (undo-tree-id3909 . -2) (undo-tree-id3910 . -2) (undo-tree-id3911 . -2) (undo-tree-id3912 . -2) (undo-tree-id3913 . -2) (undo-tree-id3914 . -2) (undo-tree-id3915 . -2) (undo-tree-id3916 . -2) (undo-tree-id3917 . -2) (undo-tree-id3918 . -2) (undo-tree-id3919 . -2) (undo-tree-id3920 . -2) (undo-tree-id3921 . -2) (undo-tree-id3922 . -2) (undo-tree-id3923 . -2) (undo-tree-id3924 . -2) (undo-tree-id3925 . -2) (undo-tree-id3926 . -2) (undo-tree-id3927 . -2) (undo-tree-id3928 . -2) (undo-tree-id3929 . -2) (undo-tree-id3930 . -2) (undo-tree-id3931 . -2) (undo-tree-id3932 . -2) (undo-tree-id3933 . -2) (undo-tree-id3934 . -2) (undo-tree-id3935 . -2) (undo-tree-id3936 . -2) (undo-tree-id3937 . -2) (undo-tree-id3938 . -2) (undo-tree-id3939 . -2) (undo-tree-id3940 . -2) (undo-tree-id3941 . -2) (undo-tree-id3942 . -2) (undo-tree-id3943 . -2) (undo-tree-id3944 . -2) (undo-tree-id3945 . -2) (undo-tree-id3946 . -2) (undo-tree-id3947 . -2) (undo-tree-id3948 . -2) (undo-tree-id3949 . -2) (undo-tree-id3950 . -2) (undo-tree-id3951 . -2) (undo-tree-id3952 . -2) (undo-tree-id3953 . -2) (undo-tree-id3954 . -2) (undo-tree-id3955 . -2) (undo-tree-id3956 . -2) (undo-tree-id3957 . -2) (undo-tree-id3958 . -2) (undo-tree-id3959 . -2) (undo-tree-id3960 . -2) (undo-tree-id3961 . -2) (undo-tree-id3962 . -2) (undo-tree-id3963 . -2) (undo-tree-id3964 . -2) (undo-tree-id3965 . -2) (undo-tree-id3966 . -2) (undo-tree-id3967 . -2) (undo-tree-id3968 . -2) (undo-tree-id3969 . -2) (undo-tree-id3970 . -2) (undo-tree-id3971 . -2) (undo-tree-id3972 . -2) (undo-tree-id3973 . -2) (undo-tree-id3974 . -2) (undo-tree-id3975 . -2) (undo-tree-id3976 . -2) (undo-tree-id3977 . -2) (undo-tree-id3978 . -2) (undo-tree-id3979 . -2) (undo-tree-id3980 . -2) (undo-tree-id3981 . -2) (undo-tree-id3982 . -2) (undo-tree-id3983 . -2) (undo-tree-id3984 . -2) (undo-tree-id3985 . -2) (undo-tree-id3986 . -2) (undo-tree-id3987 . -2) (undo-tree-id3988 . -2) (undo-tree-id3989 . -2) (undo-tree-id3990 . -2) (undo-tree-id3991 . -2) (undo-tree-id3992 . -2) (#("auto request = std" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 11 (face font-lock-variable-name-face fontified nil) 11 12 (face font-lock-variable-name-face fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (face font-lock-constant-face fontified nil) 16 17 (face font-lock-constant-face fontified nil) 17 18 (face font-lock-constant-face fontified nil)) . 1217) (undo-tree-id3993 . -18) (undo-tree-id3994 . -18) (undo-tree-id3995 . -18) (undo-tree-id3996 . -18) (undo-tree-id3997 . -18) (undo-tree-id3998 . -18) (undo-tree-id3999 . -18) (undo-tree-id4000 . -18) (undo-tree-id4001 . -18) (undo-tree-id4002 . -18) (undo-tree-id4003 . -18) (undo-tree-id4004 . -18) (undo-tree-id4005 . -18) (undo-tree-id4006 . -18) (undo-tree-id4007 . -18) (undo-tree-id4008 . -18) (undo-tree-id4009 . -18) (undo-tree-id4010 . -18) (undo-tree-id4011 . -18) (undo-tree-id4012 . -18) (undo-tree-id4013 . -18) (undo-tree-id4014 . -18) (undo-tree-id4015 . -18) (undo-tree-id4016 . -18) (undo-tree-id4017 . -18) (undo-tree-id4018 . -18) (undo-tree-id4019 . -18) (undo-tree-id4020 . -18) (undo-tree-id4021 . -18) (undo-tree-id4022 . -18) (undo-tree-id4023 . -18) (undo-tree-id4024 . -18) (undo-tree-id4025 . -18) (undo-tree-id4026 . -18) (undo-tree-id4027 . -18) (undo-tree-id4028 . -18) (undo-tree-id4029 . -18) (undo-tree-id4030 . -18) (undo-tree-id4031 . -18) (undo-tree-id4032 . -18) (undo-tree-id4033 . -18) (undo-tree-id4034 . -18) (undo-tree-id4035 . -18) (undo-tree-id4036 . -18) (undo-tree-id4037 . -18) (undo-tree-id4038 . -18) (undo-tree-id4039 . -18) (undo-tree-id4040 . -18) (undo-tree-id4041 . -18) (undo-tree-id4042 . -18) (undo-tree-id4043 . -18) (undo-tree-id4044 . -18) (undo-tree-id4045 . -18) (undo-tree-id4046 . -18) (undo-tree-id4047 . -18) (undo-tree-id4048 . -18) (undo-tree-id4049 . -18) (undo-tree-id4050 . -4) (undo-tree-id4051 . -5) (undo-tree-id4052 . -12) (undo-tree-id4053 . -18) (undo-tree-id4054 . -18) (undo-tree-id4055 . -18) (undo-tree-id4056 . -18) (undo-tree-id4057 . -18) (undo-tree-id4058 . -18) (undo-tree-id4059 . -18) (undo-tree-id4060 . -18) (undo-tree-id4061 . -18) (undo-tree-id4062 . -18) (undo-tree-id4063 . -18) (undo-tree-id4064 . -18) (undo-tree-id4065 . -18) (undo-tree-id4066 . -18) (undo-tree-id4067 . -18) (undo-tree-id4068 . -18) (undo-tree-id4069 . -18) (undo-tree-id4070 . -18) (undo-tree-id4071 . -18) (undo-tree-id4072 . -18) (undo-tree-id4073 . -18) (undo-tree-id4074 . -18) (undo-tree-id4075 . -18) (undo-tree-id4076 . -18) (undo-tree-id4077 . -18) (undo-tree-id4078 . -18) (undo-tree-id4079 . -18) (undo-tree-id4080 . -18) (undo-tree-id4081 . -18) (undo-tree-id4082 . -18) (undo-tree-id4083 . -18) (undo-tree-id4084 . -18) (undo-tree-id4085 . -18) (undo-tree-id4086 . -18) (undo-tree-id4087 . -18) (undo-tree-id4088 . -18) (undo-tree-id4089 . -18) (undo-tree-id4090 . -18) (undo-tree-id4091 . -18) (undo-tree-id4092 . -18) (undo-tree-id4093 . -18) (undo-tree-id4094 . -18) (undo-tree-id4095 . -18) (undo-tree-id4096 . -18) (undo-tree-id4097 . -18) (undo-tree-id4098 . -18) (undo-tree-id4099 . -18) (undo-tree-id4100 . -18) (undo-tree-id4101 . -18) (undo-tree-id4102 . -18) (undo-tree-id4103 . -18) (undo-tree-id4104 . -18) (undo-tree-id4105 . -18) (undo-tree-id4106 . -18) (undo-tree-id4107 . -18) (undo-tree-id4108 . -18) (undo-tree-id4109 . -18) (undo-tree-id4110 . -18) (undo-tree-id4111 . -18) (undo-tree-id4112 . -18) (undo-tree-id4113 . -18) (undo-tree-id4114 . -18) (undo-tree-id4115 . -18) (undo-tree-id4116 . -18) (undo-tree-id4117 . -18) (undo-tree-id4118 . -18) (undo-tree-id4119 . -18) (undo-tree-id4120 . -18) (undo-tree-id4121 . -18) (undo-tree-id4122 . -18) (undo-tree-id4123 . -18) (undo-tree-id4124 . -18) (undo-tree-id4125 . -18) (undo-tree-id4126 . -18) (undo-tree-id4127 . -18) (undo-tree-id4128 . -18) (undo-tree-id4129 . -18) (undo-tree-id4130 . -18) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 1235) (undo-tree-id4131 . -2) (undo-tree-id4132 . -2) (undo-tree-id4133 . -2) (undo-tree-id4134 . -2) (undo-tree-id4135 . -2) (undo-tree-id4136 . -2) (undo-tree-id4137 . -2) (undo-tree-id4138 . -2) (undo-tree-id4139 . -2) (undo-tree-id4140 . -2) (undo-tree-id4141 . -2) (undo-tree-id4142 . -2) (undo-tree-id4143 . -2) (undo-tree-id4144 . -2) (undo-tree-id4145 . -2) (undo-tree-id4146 . -2) (undo-tree-id4147 . -2) (undo-tree-id4148 . -2) (undo-tree-id4149 . -2) (undo-tree-id4150 . -2) (undo-tree-id4151 . -2) (undo-tree-id4152 . -2) (undo-tree-id4153 . -2) (undo-tree-id4154 . -2) (undo-tree-id4155 . -2) (undo-tree-id4156 . -2) (undo-tree-id4157 . -2) (undo-tree-id4158 . -2) (undo-tree-id4159 . -2) (undo-tree-id4160 . -2) (undo-tree-id4161 . -2) (undo-tree-id4162 . -2) (undo-tree-id4163 . -2) (undo-tree-id4164 . -2) (undo-tree-id4165 . -2) (undo-tree-id4166 . -2) (undo-tree-id4167 . -2) (undo-tree-id4168 . -2) (undo-tree-id4169 . -2) (undo-tree-id4170 . -2) (undo-tree-id4171 . -2) (undo-tree-id4172 . -2) (undo-tree-id4173 . -2) (undo-tree-id4174 . -2) (undo-tree-id4175 . -2) (undo-tree-id4176 . -2) (undo-tree-id4177 . -2) (undo-tree-id4178 . -2) (undo-tree-id4179 . -2) (undo-tree-id4180 . -2) (undo-tree-id4181 . -2) (undo-tree-id4182 . -2) (undo-tree-id4183 . -2) (undo-tree-id4184 . -2) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -2) (undo-tree-id4188 . -2) (undo-tree-id4189 . -2) (undo-tree-id4190 . -2) (undo-tree-id4191 . -2) (undo-tree-id4192 . -2) (undo-tree-id4193 . -2) (undo-tree-id4194 . -2) (undo-tree-id4195 . -2) (undo-tree-id4196 . -2) (undo-tree-id4197 . -2) (undo-tree-id4198 . -2) (undo-tree-id4199 . -2) (undo-tree-id4200 . -2) (undo-tree-id4201 . -2) (undo-tree-id4202 . -2) (undo-tree-id4203 . -2) (undo-tree-id4204 . -2) (undo-tree-id4205 . -2) (undo-tree-id4206 . -2) (undo-tree-id4207 . -2) (undo-tree-id4208 . -2) (undo-tree-id4209 . -2) (undo-tree-id4210 . -2) (undo-tree-id4211 . -2) (undo-tree-id4212 . -2) (undo-tree-id4213 . -2) (undo-tree-id4214 . -2) (undo-tree-id4215 . -2) (undo-tree-id4216 . -2) (undo-tree-id4217 . -2) (undo-tree-id4218 . -2) (undo-tree-id4219 . -2) (undo-tree-id4220 . -2) (undo-tree-id4221 . -2) (undo-tree-id4222 . -2) (undo-tree-id4223 . -2) (undo-tree-id4224 . -2) (undo-tree-id4225 . -2) (undo-tree-id4226 . -2) (undo-tree-id4227 . -2) (undo-tree-id4228 . -2) (undo-tree-id4229 . -2) (undo-tree-id4230 . -2) (undo-tree-id4231 . -2) (undo-tree-id4232 . -2) (undo-tree-id4233 . -2) (undo-tree-id4234 . -2) (undo-tree-id4235 . -2) (undo-tree-id4236 . -2) (undo-tree-id4237 . -2) (undo-tree-id4238 . -2) (undo-tree-id4239 . -2) (undo-tree-id4240 . -2) (undo-tree-id4241 . -2) (undo-tree-id4242 . -2) (undo-tree-id4243 . -2) (undo-tree-id4244 . -2) (undo-tree-id4245 . -2) (undo-tree-id4246 . -2) (undo-tree-id4247 . -2) (undo-tree-id4248 . -2) (undo-tree-id4249 . -2) (undo-tree-id4250 . -2) (undo-tree-id4251 . -2) (undo-tree-id4252 . -2) (undo-tree-id4253 . -2) (undo-tree-id4254 . -2) (undo-tree-id4255 . -2) (undo-tree-id4256 . -2) (undo-tree-id4257 . -2) (undo-tree-id4258 . -2) (undo-tree-id4259 . -2) (undo-tree-id4260 . -2) (undo-tree-id4261 . -2) (undo-tree-id4262 . -2) (undo-tree-id4263 . -2) (undo-tree-id4264 . -2) (undo-tree-id4265 . -2) (#("make" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil)) . 1237) (undo-tree-id4266 . -4) (undo-tree-id4267 . -4) (undo-tree-id4268 . -4) (undo-tree-id4269 . -4) (undo-tree-id4270 . -4) (undo-tree-id4271 . -4) (undo-tree-id4272 . -4) (undo-tree-id4273 . -4) (undo-tree-id4274 . -4) (undo-tree-id4275 . -4) (undo-tree-id4276 . -4) (undo-tree-id4277 . -4) (undo-tree-id4278 . -4) (undo-tree-id4279 . -4) (undo-tree-id4280 . -4) (undo-tree-id4281 . -4) (undo-tree-id4282 . -4) (undo-tree-id4283 . -4) (undo-tree-id4284 . -4) (undo-tree-id4285 . -4) (undo-tree-id4286 . -4) (undo-tree-id4287 . -4) (undo-tree-id4288 . -4) (undo-tree-id4289 . -4) (undo-tree-id4290 . -4) (undo-tree-id4291 . -4) (undo-tree-id4292 . -4) (undo-tree-id4293 . -4) (undo-tree-id4294 . -4) (undo-tree-id4295 . -4) (undo-tree-id4296 . -4) (undo-tree-id4297 . -4) (undo-tree-id4298 . -4) (undo-tree-id4299 . -4) (undo-tree-id4300 . -4) (undo-tree-id4301 . -4) (undo-tree-id4302 . -4) (undo-tree-id4303 . -4) (undo-tree-id4304 . -4) (undo-tree-id4305 . -4) (undo-tree-id4306 . -4) (undo-tree-id4307 . -4) (undo-tree-id4308 . -4) (undo-tree-id4309 . -4) (undo-tree-id4310 . -4) (undo-tree-id4311 . -4) (undo-tree-id4312 . -4) (undo-tree-id4313 . -4) (undo-tree-id4314 . -4) (undo-tree-id4315 . -4) (undo-tree-id4316 . -4) (undo-tree-id4317 . -4) (undo-tree-id4318 . -4) (undo-tree-id4319 . -4) (undo-tree-id4320 . -4) (undo-tree-id4321 . -4) (undo-tree-id4322 . -4) (undo-tree-id4323 . -4) (undo-tree-id4324 . -4) (undo-tree-id4325 . -4) (undo-tree-id4326 . -4) (undo-tree-id4327 . -4) (undo-tree-id4328 . -4) (undo-tree-id4329 . -4) (undo-tree-id4330 . -4) (undo-tree-id4331 . -4) (undo-tree-id4332 . -4) (undo-tree-id4333 . -4) (undo-tree-id4334 . -4) (undo-tree-id4335 . -4) (undo-tree-id4336 . -4) (undo-tree-id4337 . -4) (undo-tree-id4338 . -4) (undo-tree-id4339 . -4) (undo-tree-id4340 . -4) (undo-tree-id4341 . -4) (undo-tree-id4342 . -4) (undo-tree-id4343 . -4) (undo-tree-id4344 . -4) (undo-tree-id4345 . -4) (undo-tree-id4346 . -4) (undo-tree-id4347 . -4) (undo-tree-id4348 . -4) (undo-tree-id4349 . -4) (undo-tree-id4350 . -4) (undo-tree-id4351 . -4) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) (undo-tree-id4354 . -4) (undo-tree-id4355 . -4) (undo-tree-id4356 . -4) (undo-tree-id4357 . -4) (undo-tree-id4358 . -4) (undo-tree-id4359 . -4) (undo-tree-id4360 . -4) (undo-tree-id4361 . -4) (undo-tree-id4362 . -4) (undo-tree-id4363 . -4) (undo-tree-id4364 . -4) (undo-tree-id4365 . -4) (undo-tree-id4366 . -4) (undo-tree-id4367 . -4) (undo-tree-id4368 . -4) (undo-tree-id4369 . -4) (undo-tree-id4370 . -4) (undo-tree-id4371 . -4) (undo-tree-id4372 . -4) (undo-tree-id4373 . -4) (undo-tree-id4374 . -4) (undo-tree-id4375 . -4) (undo-tree-id4376 . -4) (undo-tree-id4377 . -4) (undo-tree-id4378 . -4) (undo-tree-id4379 . -4) (undo-tree-id4380 . -4) (undo-tree-id4381 . -4) (undo-tree-id4382 . -4) (undo-tree-id4383 . -4) (undo-tree-id4384 . -4) (undo-tree-id4385 . -4) (undo-tree-id4386 . -4) (undo-tree-id4387 . -4) (undo-tree-id4388 . -4) (undo-tree-id4389 . -4) (undo-tree-id4390 . -4) (undo-tree-id4391 . -4) (undo-tree-id4392 . -4) (undo-tree-id4393 . -4) (undo-tree-id4394 . -4) (undo-tree-id4395 . -4) (undo-tree-id4396 . -4) (undo-tree-id4397 . -4) (undo-tree-id4398 . -4) (undo-tree-id4399 . -4) (undo-tree-id4400 . -4) (#("_shared" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil)) . 1241) (undo-tree-id4401 . -7) (undo-tree-id4402 . -7) (undo-tree-id4403 . -7) (undo-tree-id4404 . -7) (undo-tree-id4405 . -7) (undo-tree-id4406 . -7) (undo-tree-id4407 . -7) (undo-tree-id4408 . -7) (undo-tree-id4409 . -7) (undo-tree-id4410 . -7) (undo-tree-id4411 . -7) (undo-tree-id4412 . -7) (undo-tree-id4413 . -7) (undo-tree-id4414 . -7) (undo-tree-id4415 . -7) (undo-tree-id4416 . -7) (undo-tree-id4417 . -7) (undo-tree-id4418 . -7) (undo-tree-id4419 . -7) (undo-tree-id4420 . -7) (undo-tree-id4421 . -7) (undo-tree-id4422 . -7) (undo-tree-id4423 . -7) (undo-tree-id4424 . -7) (undo-tree-id4425 . -7) (undo-tree-id4426 . -7) (undo-tree-id4427 . -7) (undo-tree-id4428 . -7) (undo-tree-id4429 . -7) (undo-tree-id4430 . -7) (undo-tree-id4431 . -7) (undo-tree-id4432 . -7) (undo-tree-id4433 . -7) (undo-tree-id4434 . -7) (undo-tree-id4435 . -7) (undo-tree-id4436 . -7) (undo-tree-id4437 . -7) (undo-tree-id4438 . -7) (undo-tree-id4439 . -7) (undo-tree-id4440 . -7) (undo-tree-id4441 . -7) (undo-tree-id4442 . -7) (undo-tree-id4443 . -7) (undo-tree-id4444 . -7) (undo-tree-id4445 . -7) (undo-tree-id4446 . -7) (undo-tree-id4447 . -7) (undo-tree-id4448 . -7) (undo-tree-id4449 . -7) (undo-tree-id4450 . -7) (undo-tree-id4451 . -7) (undo-tree-id4452 . -7) (undo-tree-id4453 . -7) (undo-tree-id4454 . -7) (undo-tree-id4455 . -7) (undo-tree-id4456 . -7) (undo-tree-id4457 . -7) (undo-tree-id4458 . -7) (undo-tree-id4459 . -7) (undo-tree-id4460 . -7) (undo-tree-id4461 . -7) (undo-tree-id4462 . -7) (undo-tree-id4463 . -7) (undo-tree-id4464 . -7) (undo-tree-id4465 . -7) (undo-tree-id4466 . -7) (undo-tree-id4467 . -7) (undo-tree-id4468 . -7) (undo-tree-id4469 . -7) (undo-tree-id4470 . -7) (undo-tree-id4471 . -7) (undo-tree-id4472 . -7) (undo-tree-id4473 . -7) (undo-tree-id4474 . -7) (undo-tree-id4475 . -7) (undo-tree-id4476 . -7) (undo-tree-id4477 . -7) (undo-tree-id4478 . -7) (undo-tree-id4479 . -7) (undo-tree-id4480 . -7) (undo-tree-id4481 . -7) (undo-tree-id4482 . -7) (undo-tree-id4483 . -7) (undo-tree-id4484 . -7) (undo-tree-id4485 . -7) (undo-tree-id4486 . -7) (undo-tree-id4487 . -7) (undo-tree-id4488 . -7) (undo-tree-id4489 . -7) (undo-tree-id4490 . -7) (undo-tree-id4491 . -7) (undo-tree-id4492 . -7) (undo-tree-id4493 . -7) (undo-tree-id4494 . -7) (undo-tree-id4495 . -7) (undo-tree-id4496 . -7) (undo-tree-id4497 . -7) (undo-tree-id4498 . -7) (undo-tree-id4499 . -7) (undo-tree-id4500 . -7) (undo-tree-id4501 . -7) (undo-tree-id4502 . -7) (undo-tree-id4503 . -7) (undo-tree-id4504 . -7) (undo-tree-id4505 . -7) (undo-tree-id4506 . -7) (undo-tree-id4507 . -7) (undo-tree-id4508 . -7) (undo-tree-id4509 . -7) (undo-tree-id4510 . -7) (undo-tree-id4511 . -7) (undo-tree-id4512 . -7) (undo-tree-id4513 . -7) (undo-tree-id4514 . -7) (undo-tree-id4515 . -7) (undo-tree-id4516 . -7) (undo-tree-id4517 . -7) (undo-tree-id4518 . -7) (undo-tree-id4519 . -7) (undo-tree-id4520 . -7) (undo-tree-id4521 . -7) (undo-tree-id4522 . -7) (undo-tree-id4523 . -7) (undo-tree-id4524 . -7) (undo-tree-id4525 . -7) (undo-tree-id4526 . -7) (undo-tree-id4527 . -7) (undo-tree-id4528 . -7) (undo-tree-id4529 . -7) (undo-tree-id4530 . -7) (undo-tree-id4531 . -7) (undo-tree-id4532 . -7) (undo-tree-id4533 . -7) (undo-tree-id4534 . -7) (undo-tree-id4535 . -7) (#("<>" 0 1 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t)) . 1248) (undo-tree-id4536 . 1) (undo-tree-id4537 . 1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1)) (26236 16726 191055 610000) 0 nil])
([nil nil ((1229 . 1233)) nil (26236 16927 801141 632000) 0 nil])
([nil nil ((1249 . 1253) (#("L" 0 1 (fontified t)) . -1249) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) 1250 (1249 . 1250)) ((#("L" 0 1 (fontified nil)) . 1249) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (1249 . 1250) (#("life" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1249) (undo-tree-id3761 . -3) (undo-tree-id3762 . -3) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) (undo-tree-id3765 . -3) (undo-tree-id3766 . -3) (undo-tree-id3767 . -3) (undo-tree-id3768 . -3) (undo-tree-id3769 . -3) (undo-tree-id3770 . -3) (undo-tree-id3771 . -3) (undo-tree-id3772 . -3) (undo-tree-id3773 . -3) (undo-tree-id3774 . -3) (undo-tree-id3775 . -3) (undo-tree-id3776 . -3) (undo-tree-id3777 . -3) (undo-tree-id3778 . -3) (undo-tree-id3779 . -3) (undo-tree-id3780 . -3) (undo-tree-id3781 . -3) (undo-tree-id3782 . -3) (undo-tree-id3783 . -3) (undo-tree-id3784 . -3) (undo-tree-id3785 . -3) (undo-tree-id3786 . -3) (undo-tree-id3787 . -3) (undo-tree-id3788 . -3) (undo-tree-id3789 . -3) (undo-tree-id3790 . -3) (undo-tree-id3791 . -3) (undo-tree-id3792 . -3) (undo-tree-id3793 . -3) (undo-tree-id3794 . -3) (undo-tree-id3795 . -3) (undo-tree-id3796 . -3) (undo-tree-id3797 . -3) (undo-tree-id3798 . -3) (undo-tree-id3799 . -3) (undo-tree-id3800 . -3) (undo-tree-id3801 . -3) (undo-tree-id3802 . -3) (undo-tree-id3803 . -3) (undo-tree-id3804 . -3) (undo-tree-id3805 . -3) (undo-tree-id3806 . -3) (undo-tree-id3807 . -3) (undo-tree-id3808 . -3) (undo-tree-id3809 . -3) (undo-tree-id3810 . -3) (undo-tree-id3811 . -3) (undo-tree-id3812 . -3) (undo-tree-id3813 . -3) (undo-tree-id3814 . -3) (undo-tree-id3815 . -3) (undo-tree-id3816 . -3) (undo-tree-id3817 . -3) (undo-tree-id3818 . -3) (undo-tree-id3819 . -3) (undo-tree-id3820 . -3) (undo-tree-id3821 . -3) (undo-tree-id3822 . -3) (undo-tree-id3823 . -3) (undo-tree-id3824 . -3) (undo-tree-id3825 . -3) (undo-tree-id3826 . -3) (undo-tree-id3827 . -3) (undo-tree-id3828 . -3) (undo-tree-id3829 . -3) (undo-tree-id3830 . -3) (undo-tree-id3831 . -3) (undo-tree-id3832 . -3) (undo-tree-id3833 . -3) (undo-tree-id3834 . -3) (undo-tree-id3835 . -3) (undo-tree-id3836 . -3) (undo-tree-id3837 . -3) (undo-tree-id3838 . -3) (undo-tree-id3839 . -3) (undo-tree-id3840 . -3) (undo-tree-id3841 . -3) (undo-tree-id3842 . -3) (undo-tree-id3843 . -3) (undo-tree-id3844 . -3) (undo-tree-id3845 . -3) (undo-tree-id3846 . -3) (undo-tree-id3847 . -3) (undo-tree-id3848 . -3) (undo-tree-id3849 . -3) (undo-tree-id3850 . -3) (undo-tree-id3851 . -3) (undo-tree-id3852 . -3)) (26236 16724 451612 705000) 0 nil])
([nil nil ((#("Args &&args..." 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 7 (fontified t) 7 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t)) . 1316) (1303 . 1314) (#("ChangeState" 0 11 (fontified nil)) . -1303) (1303 . 1314) (1301 . 1303) (1298 . 1301) (#("sr" 0 2 (fontified nil)) . 1298) (1298 . 1300) (#("srv" 0 3 (fontified nil)) . -1298) (1298 . 1301) (#("sr" 0 1 (fontified t) 1 2 (fontified t)) . -1298) (undo-tree-id5202 . -2) (undo-tree-id5203 . -2) (undo-tree-id5204 . -2) 1300 (1298 . 1300) (1296 . 1298) (nil fontified nil 1282 . 1296) (nil face (rainbow-delimiters-depth-3-face) 1282 . 1296) (1282 . 1296) (#("li" 0 2 (fontified nil)) . 1282) (nil fontified nil 1282 . 1284) (nil face (rainbow-delimiters-depth-3-face) 1282 . 1284) (1282 . 1284) (#("lifecycle_msgs" 0 14 (fontified nil)) . -1282) (nil fontified nil 1282 . 1296) (nil face (rainbow-delimiters-depth-3-face) 1282 . 1296) (1282 . 1296) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1282) (undo-tree-id5205 . -2) (undo-tree-id5206 . -2) 1284 (1282 . 1284) (#("s" 0 1 (fontified t)) . -1282) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (#("t" 0 1 (fontified t)) . -1283) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) 1284 (1283 . 1284) (#("typename Tp" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-type-face fontified nil)) . 1283) (1282 . 1283) (122 . 140) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1282 1314 nil nil nil t #s(yas--field 2 1316 1316 nil nil nil t nil)) #s(yas--field 2 1316 1316 nil nil nil t nil)) nil 21 nil #s(yas--field 2 1316 1316 nil nil nil t nil) nil nil)) (1252 . 1292) (#("make_shared<${1:typename Tp}>(${2:Args &&args...})" 0 50 (fontified nil)) . 1252) (1252 . 1302) (#("m" 0 1 (fontified nil)) . 1252) (1252 . 1253) (#("make_shared<typename Tp>(Args &&args...)" 0 11 (fontified nil) 11 12 (fontified nil category c-<-as-paren-syntax) 12 23 (fontified nil) 23 24 (fontified nil category c->-as-paren-syntax) 24 40 (fontified nil)) . -1252) (1252 . 1292) (#("ma" 0 1 (fontified t) 1 2 (fontified t)) . -1252) (undo-tree-id5211 . -2) (undo-tree-id5212 . -2) 1254 (1252 . 1254) (1251 . 1252) (1250 . 1251) (1249 . 1250) (1237 . 1249) (1236 . 1237) (1234 . 1236) (#("d" 0 1 (fontified t)) . -1234) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (#("o" 0 1 (fontified t)) . -1235) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) 1236 (1232 . 1236) (1228 . 1232)) nil (26236 16927 801127 956000) 0 nil])
([nil nil ((#("  auto request = std::make_shared<life>
" 0 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (face font-lock-constant-face fontified t) 18 19 (face font-lock-constant-face fontified t) 19 20 (face font-lock-constant-face fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (face font-lock-type-face fontified t) 24 25 (face font-lock-type-face fontified t) 25 26 (face font-lock-type-face fontified t) 26 27 (face font-lock-type-face fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (face font-lock-type-face fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (face font-lock-type-face fontified t) 31 32 (face font-lock-type-face fontified t) 32 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 39 40 (fontified t)) . 1215) (undo-tree-id3733 . 2) (undo-tree-id3734 . -39) (undo-tree-id3735 . -37) (undo-tree-id3736 . -37) (undo-tree-id3737 . 2) (undo-tree-id3738 . -2) (undo-tree-id3739 . -6) (undo-tree-id3740 . -7) (undo-tree-id3741 . -14) (undo-tree-id3742 . -37) (undo-tree-id3743 . -37) (undo-tree-id3744 . -37) (undo-tree-id3745 . -37) (undo-tree-id3746 . -37) (undo-tree-id3747 . -37) (undo-tree-id3748 . -37) (undo-tree-id3749 . -37) (undo-tree-id3750 . -37) (undo-tree-id3751 . -37) (undo-tree-id3752 . -37) (undo-tree-id3753 . -37) (undo-tree-id3754 . -40) 1252) ((1215 . 1255) (t 26236 16715 537939 984000)) (26236 16715 488912 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 1270 1317 #s(yas--snippet nil (#s(yas--field 1 1282 1314 nil nil nil t #s(yas--field 2 1316 1316 nil nil nil t nil)) #s(yas--field 2 1316 1316 nil nil nil t nil)) nil 21 nil #s(yas--field 2 1316 1316 nil nil nil t nil) nil nil))) nil (26236 16927 801081 836000) 0 nil])
nil
([nil nil ((1317 . 1318)) nil (26236 16927 801079 494000) 0 nil])
([nil nil ((1320 . 1324) (#("    " 0 4 (fontified nil)) . 1319) (undo-tree-id5200 . -4) (undo-tree-id5201 . -4) (1318 . 1324)) nil (26236 16927 801076 505000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1328) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) 1329 (1324 . 1329) 1323) nil (26236 16927 801069 280000) 0 nil])
([nil nil ((1331 . 1342) (1324 . 1331) (#("re" 0 2 (fontified nil)) . 1324) (1324 . 1326) (#("request" 0 7 (fontified nil)) . -1324) (1324 . 1331) (#("re" 0 1 (fontified t) 1 2 (fontified t)) . -1324) (undo-tree-id5195 . -2) (undo-tree-id5196 . -2) 1326 (1325 . 1326) (1324 . 1325) (1320 . 1324) (#("  " 0 2 (fontified nil)) . -1320) (undo-tree-id5197 . -2) (#("  " 0 2 (fontified t)) . 1322)) nil (26236 16927 801058 770000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1331) (undo-tree-id5194 . -1)) nil (26236 16927 801047 334000) 0 nil])
([nil nil ((1332 . 1333) (1331 . 1332)) nil (26236 16927 801042 310000) 0 nil])
([nil nil ((1459 . 1460) (1439 . 1459) (#("TRANSITION_CONFIGURE" 0 20 (fontified nil)) . -1439) (1439 . 1459) (#("TRANSITION_CO" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . -1439) (undo-tree-id5170 . -13) (undo-tree-id5171 . -13) 1452 (1439 . 1452) (1437 . 1439) (60 . 120) (1367 . 1377) (#("Transition" 0 10 (fontified nil)) . -1367) (1367 . 1377) (1365 . 1367) (1362 . 1365) (#("msg" 0 3 (fontified nil)) . -1362) (1362 . 1365) (1360 . 1362) (1346 . 1360) (#("li" 0 2 (fontified nil)) . 1346) (1346 . 1348) (#("lifecycle_msgs" 0 14 (fontified nil)) . -1346) (1346 . 1360) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1346) (undo-tree-id5172 . -2) (undo-tree-id5173 . -2) 1348 (1338 . 1348) (#("t" 0 1 (fontified t)) . -1338) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) 1339 (1334 . 1339) (#("r" 0 1 (fontified t)) . -1334) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (#("a" 0 1 (fontified t)) . -1335) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (#("n" 0 1 (fontified t)) . -1336) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (#("s" 0 1 (fontified t)) . -1337) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (#("i" 0 1 (fontified t)) . -1338) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (#("t" 0 1 (fontified t)) . -1339) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (#("o" 0 1 (fontified t)) . -1340) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (#("n" 0 1 (fontified t)) . -1341) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (#(" " 0 1 (fontified t)) . -1342) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) 1343) nil (26236 16927 801021 625000) 0 nil])
([nil nil ((1376 . 1383) (#("Request" 0 7 (fontified nil)) . -1376) (1376 . 1383) (#("Re" 0 1 (fontified t) 1 2 (fontified t)) . -1376) (undo-tree-id5226 . -2) (undo-tree-id5227 . -2) (undo-tree-id5228 . -2) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -2) (undo-tree-id5232 . -2) (undo-tree-id5233 . -2) (undo-tree-id5234 . -2) (undo-tree-id5235 . -2) (undo-tree-id5236 . -2) (undo-tree-id5237 . -2) (undo-tree-id5238 . -2) (undo-tree-id5239 . -2) (undo-tree-id5240 . -2) (undo-tree-id5241 . -2) (undo-tree-id5242 . -2) (undo-tree-id5243 . -2) (undo-tree-id5244 . -2) (undo-tree-id5245 . -2) (undo-tree-id5246 . -2) (undo-tree-id5247 . -2) (undo-tree-id5248 . -2) (undo-tree-id5249 . -2) (undo-tree-id5250 . -2) (undo-tree-id5251 . -2) (undo-tree-id5252 . -2) (undo-tree-id5253 . -2) (undo-tree-id5254 . -2) (undo-tree-id5255 . -2) (undo-tree-id5256 . -2) (undo-tree-id5257 . -2) (undo-tree-id5258 . -2) (undo-tree-id5259 . -2) (undo-tree-id5260 . -2) (undo-tree-id5261 . -2) (undo-tree-id5262 . -2) (undo-tree-id5263 . -2) (undo-tree-id5264 . -2) (undo-tree-id5265 . -2) (undo-tree-id5266 . -2) (undo-tree-id5267 . -2) (undo-tree-id5268 . -2) (undo-tree-id5269 . -2) (undo-tree-id5270 . -2) (undo-tree-id5271 . -2) (undo-tree-id5272 . -2) (undo-tree-id5273 . -2) (undo-tree-id5274 . -2) (undo-tree-id5275 . -2) (undo-tree-id5276 . -2) (undo-tree-id5277 . -2) (undo-tree-id5278 . -2) (undo-tree-id5279 . -2) (undo-tree-id5280 . -2) (undo-tree-id5281 . -2) (undo-tree-id5282 . -2) (undo-tree-id5283 . -2) (undo-tree-id5284 . -2) (undo-tree-id5285 . -2) (undo-tree-id5286 . -2) (undo-tree-id5287 . -2) (undo-tree-id5288 . -2) (undo-tree-id5289 . -2) (undo-tree-id5290 . -2) (undo-tree-id5291 . -2) (undo-tree-id5292 . -2) (undo-tree-id5293 . -2) (undo-tree-id5294 . -2) (undo-tree-id5295 . -2) (undo-tree-id5296 . -2) (undo-tree-id5297 . -2) 1378 (1376 . 1378) (1374 . 1376) (t 26236 16927 849252 678000)) nil (26236 16980 452258 244000) 0 nil])
([nil nil ((1413 . 1415) (1412 . 1413) (t 26236 16980 472662 516000)) nil (26236 16986 825343 526000) 0 nil])
([nil nil ((#("   
" 0 3 (fontified t) 3 4 (fontified t)) . 1473) (undo-tree-id5369 . -3) (undo-tree-id5370 . -2) (undo-tree-id5371 . -2) 1475 (t 26236 16986 871969 837000)) nil (26236 17454 600120 557000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1475) (undo-tree-id5363 . -4) (undo-tree-id5364 . -4) 1479 (1475 . 1479) (#("    " 0 4 (fontified nil)) . 1474) (undo-tree-id5365 . -4) (undo-tree-id5366 . -4) (1474 . 1479) (#("    " 0 4 (fontified nil)) . 1473) (undo-tree-id5367 . -2) (undo-tree-id5368 . -4) (1477 . 1478)) nil (26236 17454 600100 978000) 0 nil])
([nil nil ((1529 . 1540) (1528 . 1530) (1527 . 1529) (1509 . 1527) (1508 . 1509) (1505 . 1508) (1493 . 1505) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1493) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) 1494 (1479 . 1494) (1475 . 1479)) nil (26236 17454 600081 383000) 0 nil])
([nil nil ((1557 . 1559) (1553 . 1557) (1551 . 1553) (1548 . 1551) (1536 . 1548) (1535 . 1536) (1528 . 1535) (#("re" 0 2 (fontified nil)) . 1528) (1528 . 1530) (#("request" 0 7 (fontified nil)) . -1528) (1528 . 1535) (#("re" 0 1 (fontified t) 1 2 (fontified t)) . -1528) (undo-tree-id5359 . -2) (undo-tree-id5360 . -2) 1530 (1528 . 1530)) nil (26236 17454 600070 797000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1611) (undo-tree-id5353 . -2) (undo-tree-id5354 . -2) 1613 (1611 . 1613) (#("  " 0 2 (fontified nil)) . 1610) (undo-tree-id5355 . -2) (undo-tree-id5356 . -2) (1610 . 1613) (#("  " 0 2 (fontified nil)) . 1609) (undo-tree-id5357 . -2) (undo-tree-id5358 . -2) (1611 . 1612) (1608 . 1611)) nil (26236 17454 600059 261000) 0 nil])
([nil nil ((1634 . 1636) (1616 . 1634) (1615 . 1616) (1613 . 1615) (1611 . 1613)) nil (26236 17454 600044 98000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -1645) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (#("	" 0 1 (fontified nil)) . 1646) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (1638 . 1646) 1639 (1636 . 1639) (1635 . 1637)) nil (26236 17454 600039 467000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1645) (undo-tree-id5346 . 1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) 1646) nil (26236 17454 600028 778000) 0 nil])
([nil nil ((#("		       " 0 2 (fontified t) 2 9 (fontified t)) . 1636) (undo-tree-id5344 . -8) (undo-tree-id5345 . -9)) nil (26236 17454 600020 874000) 0 nil])
([nil nil ((1671 . 1682) (#("ChangeState" 0 11 (fontified nil)) . -1671) (1671 . 1682) (1669 . 1671) (1666 . 1669) (#("srv" 0 3 (fontified nil)) . -1666) (1666 . 1669) (1664 . 1666) (nil fontified nil 1650 . 1664) (nil face (rainbow-delimiters-depth-3-face) 1650 . 1664) (1650 . 1664) (#("li" 0 2 (fontified nil)) . 1650) (nil fontified nil 1650 . 1652) (nil face (rainbow-delimiters-depth-3-face) 1650 . 1652) (1650 . 1652) (#("lifecycle_msgs" 0 14 (fontified nil)) . -1650) (nil fontified nil 1650 . 1664) (nil face (rainbow-delimiters-depth-3-face) 1650 . 1664) (1650 . 1664) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -1650) (undo-tree-id5327 . -2) (undo-tree-id5328 . -2) 1652 (1651 . 1652) (#("typename ServiceT" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 17 (face font-lock-type-face fontified nil)) . 1651) (1650 . 1651) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1650 1682 nil nil nil t nil)) nil 22 nil #s(yas--field 1 1650 1682 nil nil nil t nil) nil nil)) (1643 . 1668) (#("Client<${1:typename ServiceT}>" 0 30 (fontified nil)) . 1643) (1643 . 1673) (#("C" 0 1 (fontified nil)) . 1643) (1643 . 1644) (#("Client<typename ServiceT>" 0 6 (fontified nil) 6 7 (fontified nil category c-<-as-paren-syntax) 7 24 (fontified nil) 24 25 (fontified nil category c->-as-paren-syntax)) . -1643) (1643 . 1668) (#("Cli" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1643) (undo-tree-id5329 . -3) (undo-tree-id5330 . -3) (undo-tree-id5331 . -3) 1646 (1643 . 1646) (1641 . 1643) (nil fontified nil 1635 . 1641) (nil face (rainbow-delimiters-depth-2-face) 1635 . 1641) (1635 . 1641) (#("rcl" 0 3 (fontified nil)) . 1635) (nil fontified nil 1635 . 1638) (nil face (rainbow-delimiters-depth-2-face) 1635 . 1638) (1635 . 1638) (#("rclcpp" 0 6 (fontified nil)) . -1635) (nil fontified nil 1635 . 1641) (nil face (rainbow-delimiters-depth-2-face) 1635 . 1641) (1635 . 1641) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1635) (undo-tree-id5332 . -3) (undo-tree-id5333 . -3) 1638 (1635 . 1638) (#("r" 0 1 (fontified t)) . -1635) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (#("c" 0 1 (fontified t)) . -1636) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (#("l" 0 1 (fontified t)) . -1637) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) 1638 (1635 . 1638) (#("
" 0 1 (fontified t)) . -1635) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) 1636) nil (26236 17454 599943 562000) 0 nil])
([nil nil ((1690 . 1704) (1685 . 1690) (1683 . 1685) (apply yas--snippet-revive 1643 1683 #s(yas--snippet nil (#s(yas--field 1 1650 1682 nil nil nil t nil)) nil 22 nil #s(yas--field 1 1650 1682 nil nil nil t nil) nil nil))) nil (26236 17454 599896 289000) 0 nil])
([nil nil ((1768 . 1772) (1767 . 1769) (1755 . 1767) (#("m" 0 1 (fontified nil)) . 1755) (1755 . 1756) (#("milliseconds" 0 12 (fontified nil)) . -1755) (1755 . 1767) (#("mi" 0 1 (fontified t) 1 2 (fontified t)) . -1755) (undo-tree-id5317 . -2) (undo-tree-id5318 . -2) 1757 (1755 . 1757) (1753 . 1755) (1747 . 1753) (#("ch" 0 2 (fontified nil)) . 1747) (1747 . 1749) (#("chrono" 0 6 (fontified nil)) . -1747) (1747 . 1753) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -1747) (undo-tree-id5319 . -2) (undo-tree-id5320 . -2) 1749 (1748 . 1749) (1747 . 1748) (1746 . 1747) (1745 . 1746) (1742 . 1745) (#("1" 0 1 (fontified t)) . -1742) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (#("s" 0 1 (fontified t)) . -1743) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) 1744 (1742 . 1744) (1741 . 1743) (1732 . 1741) (1726 . 1732) (#("fu" 0 2 (fontified nil)) . 1726) (1726 . 1728) (#("future" 0 6 (fontified nil)) . -1726) (1726 . 1732) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -1726) (undo-tree-id5325 . -2) (undo-tree-id5326 . -2) 1728 (1712 . 1728) (1708 . 1712) (1707 . 1711) (1706 . 1708) (1705 . 1706)) nil (26236 17454 599884 878000) 0 nil])
([nil nil ((1775 . 1776) (1774 . 1775)) nil (26236 17454 599852 789000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1774)) nil (26236 17454 599849 987000) 0 nil])
([nil nil ((1833 . 1838) (#("ready" 0 5 (fontified nil)) . -1833) (1833 . 1838) (1832 . 1833) (1831 . 1832) (60 . 78) (1800 . 1813) (#("fu" 0 2 (fontified nil)) . 1800) (1800 . 1802) (#("future_status" 0 13 (fontified nil)) . -1800) (1800 . 1813) (#("futu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1800) (undo-tree-id5312 . -4) (undo-tree-id5313 . -4) (undo-tree-id5314 . -4) 1804 (1801 . 1804) (1800 . 1801) (1799 . 1800) (1798 . 1799) (1797 . 1798) (1792 . 1797) (1787 . 1792) (1785 . 1787) (1784 . 1786) (1781 . 1784) (1777 . 1781) (#("    " 0 4 (fontified nil)) . 1776) (undo-tree-id5315 . -4) (undo-tree-id5316 . -4) (1775 . 1781)) nil (26236 17454 599843 124000) 0 nil])
([nil nil ((1842 . 1848) (1841 . 1847) (1840 . 1842) (1839 . 1840)) nil (26236 17454 599821 754000) 0 nil])
([nil nil ((1855 . 1859) (1854 . 1855) (1848 . 1854) (1842 . 1848) (#("     " 0 5 (fontified nil)) . -1842) (undo-tree-id5310 . -5) (undo-tree-id5311 . -5) (#(" " 0 1 (fontified t)) . 1847)) nil (26236 17454 599817 334000) 0 nil])
([nil nil ((1894 . 1895) (nil syntax-table nil 1895 . 1896) (nil syntax-table (1) 1880 . 1881) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1894) (1894 . 1895) (nil syntax-table nil 1895 . 1896) (nil syntax-table (1) 1880 . 1881) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1894) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (#(":" 0 1 (fontified t)) . -1895) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) 1896 (1895 . 1896) (#("\"" 0 1 (fontified nil)) . -1894) (nil syntax-table nil 1897 . 1898) (nil syntax-table (1) 1895 . 1896) (1894 . 1895) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1894) (nil syntax-table nil 1897 . 1898) (nil syntax-table (1) 1895 . 1896) (1881 . 1895) (1881 . 1882) (nil syntax-table nil 1882 . 1883) (nil syntax-table (1) 1880 . 1881) (1880 . 1881) (#("\"" 0 1 (fontified nil)) . -1880) (nil syntax-table nil 1882 . 1883) (nil syntax-table (1) 1880 . 1881) (1879 . 1881) (1878 . 1879) (apply yas--snippet-revive 1866 1878 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (1866 . 1878) (#("get_logger()" 0 12 (fontified nil)) . 1866) (1866 . 1878) (#("get_logger() const" 0 18 (fontified nil)) . -1866) (1866 . 1884) (#("get_lo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1866) (undo-tree-id5304 . -5) (undo-tree-id5305 . -6) (undo-tree-id5306 . -6) 1872 (1870 . 1872) (1866 . 1870) (1865 . 1866) (1860 . 1865) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1860) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (nil syntax-table nil 1862 . 1863) (nil syntax-table (1) 1860 . 1861) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 1861) (1861 . 1862) (nil syntax-table nil 1862 . 1863) (nil syntax-table (1) 1860 . 1861) (1860 . 1861) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1860) (nil syntax-table nil 1862 . 1863) (nil syntax-table (1) 1860 . 1861) (1860 . 1861) (1859 . 1861)) nil (26236 17454 599763 424000) 0 nil])
([nil nil ((1927 . 1930) (1926 . 1927) (1921 . 1926) (1900 . 1921) (1899 . 1900) (1898 . 1899) (1895 . 1898) (1894 . 1895)) nil (26236 17454 599723 699000) 0 nil])
([nil nil ((1943 . 1945) (1940 . 1943) (1939 . 1940) (1933 . 1939) (#("fu" 0 2 (fontified nil)) . 1933) (1933 . 1935) (#("future" 0 6 (fontified nil)) . -1933) (1933 . 1939) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -1933) (undo-tree-id5298 . -2) (undo-tree-id5299 . -2) 1935 (1933 . 1935) (1932 . 1933) (1931 . 1932)) nil (26236 17454 599715 541000) 0 nil])
([nil nil ((1953 . 1954) (1947 . 1953) (1946 . 1947) (1945 . 1946)) nil (26236 17454 599686 217000) 0 nil])
([nil nil ((1966 . 1968) (1955 . 1966) (1954 . 1955)) nil (26236 17454 599681 246000) 0 nil])
([nil nil ((1891 . 1892)) nil (26236 17454 599668 935000) 0 nil])
([nil nil ((1924 . 1925) (t 26236 17454 627644 496000)) nil (26236 17461 639378 171000) 0 nil])
([nil nil ((1841 . 1842) (t 26236 17461 689234 619000)) nil (26236 17471 11382 117000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1841) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) 1842) nil (26236 17471 11372 922000) 0 nil])
([nil nil ((1971 . 1972)) nil (26236 17471 11269 332000) 0 nil])
([nil nil ((#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 1983) (1979 . 1983) 1992 (1986 . 1992) (1985 . 1991) (1984 . 1986) (1983 . 1984) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil)) . 1983) (undo-tree-id5431 . -2) (undo-tree-id5432 . -4) (1979 . 1983) 1983 (1978 . 1983) (t 26236 17471 63309 583000)) nil (26236 17567 130531 538000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2054 . 2055) (nil fontified nil 1991 . 2055) (1991 . 2055) 1990) nil (26236 17567 130519 839000) 0 nil])
([nil nil ((1986 . 1992) (#("           " 0 5 (fontified t) 5 11 (fontified t)) . 1986) (undo-tree-id5419 . -5) (undo-tree-id5420 . -5) (undo-tree-id5421 . -4) (undo-tree-id5422 . -4) (undo-tree-id5423 . -4) (undo-tree-id5424 . -4) (undo-tree-id5425 . -4) (undo-tree-id5426 . -4) (undo-tree-id5427 . -4) (undo-tree-id5428 . -4) (undo-tree-id5429 . -4) (undo-tree-id5430 . -5) 2054) nil (26236 17567 130507 687000) 0 nil])
([nil nil ((#("    this->first_take = false;
" 0 4 (fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (face font-lock-constant-face fontified t) 24 25 (face font-lock-constant-face fontified t) 25 26 (face font-lock-constant-face fontified t) 26 27 (face font-lock-constant-face fontified t) 27 28 (face font-lock-constant-face fontified t) 28 29 (fontified t) 29 30 (fontified t)) . 1593) (undo-tree-id5550 . -29) (undo-tree-id5551 . -2) (undo-tree-id5552 . -2) (undo-tree-id5553 . -28) 1621 (t 26236 17567 181156 803000)) nil (26236 17598 446630 758000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2021) (undo-tree-id5546 . -6) (undo-tree-id5547 . -6) 2027 (2021 . 2027) (#(" " 0 1 (fontified nil)) . 2020) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (2021 . 2022)) nil (26236 17598 446618 933000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1944) (undo-tree-id5541 . -6) (undo-tree-id5542 . -6) (undo-tree-id5543 . -6) 1950 (1944 . 1950) (#("      " 0 6 (fontified nil)) . 1943) (undo-tree-id5544 . -6) (undo-tree-id5545 . -6) (1942 . 1950)) nil (26236 17598 446606 380000) 0 nil])
([nil nil ((1973 . 1974) (1965 . 1973) (1955 . 1965) (#("first_take" 0 10 (fontified nil)) . -1955) (1955 . 1965) (#("fi" 0 1 (fontified t) 1 2 (fontified t)) . -1955) (undo-tree-id5433 . -2) (undo-tree-id5434 . -2) (undo-tree-id5435 . -2) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -2) (undo-tree-id5462 . -2) (undo-tree-id5463 . -2) (undo-tree-id5464 . -2) (undo-tree-id5465 . -2) (undo-tree-id5466 . -2) (undo-tree-id5467 . -2) (undo-tree-id5468 . -2) (undo-tree-id5469 . -2) (undo-tree-id5470 . -2) (undo-tree-id5471 . -2) (undo-tree-id5472 . -2) (undo-tree-id5473 . -2) (undo-tree-id5474 . -2) (undo-tree-id5475 . -2) (undo-tree-id5476 . -2) (undo-tree-id5477 . -2) (undo-tree-id5478 . -2) (undo-tree-id5479 . -2) (undo-tree-id5480 . -2) (undo-tree-id5481 . -2) (undo-tree-id5482 . -2) (undo-tree-id5483 . -2) (undo-tree-id5484 . -2) (undo-tree-id5485 . -2) (undo-tree-id5486 . -2) (undo-tree-id5487 . -2) (undo-tree-id5488 . -2) (undo-tree-id5489 . -2) (undo-tree-id5490 . -2) (undo-tree-id5491 . -2) (undo-tree-id5492 . -2) (undo-tree-id5493 . -2) (undo-tree-id5494 . -2) (undo-tree-id5495 . -2) (undo-tree-id5496 . -2) (undo-tree-id5497 . -2) (undo-tree-id5498 . -2) (undo-tree-id5499 . -2) (undo-tree-id5500 . -2) (undo-tree-id5501 . -2) (undo-tree-id5502 . -2) (undo-tree-id5503 . -2) (undo-tree-id5504 . -2) (undo-tree-id5505 . -2) (undo-tree-id5506 . -2) (undo-tree-id5507 . -2) (undo-tree-id5508 . -2) (undo-tree-id5509 . -2) (undo-tree-id5510 . -2) (undo-tree-id5511 . -2) (undo-tree-id5512 . -2) (undo-tree-id5513 . -2) (undo-tree-id5514 . -2) (undo-tree-id5515 . -2) (undo-tree-id5516 . -2) (undo-tree-id5517 . -2) (undo-tree-id5518 . -2) (undo-tree-id5519 . -2) (undo-tree-id5520 . -2) (undo-tree-id5521 . -2) (undo-tree-id5522 . -2) (undo-tree-id5523 . -2) (undo-tree-id5524 . -2) (undo-tree-id5525 . -2) (undo-tree-id5526 . -2) (undo-tree-id5527 . -2) (undo-tree-id5528 . -2) (undo-tree-id5529 . -2) (undo-tree-id5530 . -2) (undo-tree-id5531 . -2) (undo-tree-id5532 . -2) (undo-tree-id5533 . -2) (undo-tree-id5534 . -2) (undo-tree-id5535 . -2) (undo-tree-id5536 . -2) (undo-tree-id5537 . -2) (undo-tree-id5538 . -2) (undo-tree-id5539 . -2) (undo-tree-id5540 . -2) 1957 (1955 . 1957) (1954 . 1955) (1949 . 1954) (1943 . 1949)) nil (26236 17598 446575 125000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1975) (undo-tree-id5554 . -1) (t 26236 17598 496911 750000)) nil (26236 17600 468138 78000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -898) (undo-tree-id5895 . -4) (undo-tree-id5896 . -4) 902 (898 . 902) (#("    " 0 4 (fontified nil)) . 897) (undo-tree-id5897 . -4) (undo-tree-id5898 . -4) (896 . 902) (t 26236 17600 495528 794000)) nil (26236 17640 354285 581000) 0 nil])
([nil nil ((nil rear-nonsticky nil 996 . 997) (nil fontified nil 897 . 997) (897 . 997)) nil (26236 17640 354275 731000) 0 nil])
([nil nil ((897 . 901) (#("		     " 0 7 (fontified t)) . 897)) nil (26236 17640 354273 87000) 0 nil])
([nil nil ((921 . 927) (#("		     " 0 7 (fontified t)) . 921) (undo-tree-id5894 . -1) 922) nil (26236 17640 354269 662000) 0 nil])
([nil nil ((#("    this->get_logger(),
" 0 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 23 (fontified t) 23 24 (fontified t)) . 897) (undo-tree-id5889 . -23) (undo-tree-id5890 . -8) (undo-tree-id5891 . -8) (undo-tree-id5892 . -4) (undo-tree-id5893 . -8) 905) nil (26236 17640 354264 847000) 0 nil])
([nil nil ((#("      \"Client interrupted while waiting for service. Terminating...\");
" 0 6 (fontified t) 6 68 (face font-lock-string-face fontified t) 68 69 (face (rainbow-delimiters-mismatched-face) fontified t) 69 70 (fontified t) 70 71 (fontified t)) . 897) (undo-tree-id5839 . -70) (undo-tree-id5840 . -7) (undo-tree-id5841 . -7) (undo-tree-id5842 . 63) (undo-tree-id5843 . -7) (undo-tree-id5844 . -7) (undo-tree-id5845 . -8) (undo-tree-id5846 . -8) (undo-tree-id5847 . -70) (undo-tree-id5848 . -8) (undo-tree-id5849 . -8) (undo-tree-id5850 . -8) (undo-tree-id5851 . -8) (undo-tree-id5852 . -8) (undo-tree-id5853 . -8) (undo-tree-id5854 . -8) (undo-tree-id5855 . -8) (undo-tree-id5856 . -8) (undo-tree-id5857 . -8) (undo-tree-id5858 . -8) (undo-tree-id5859 . -8) (undo-tree-id5860 . -8) (undo-tree-id5861 . -8) (undo-tree-id5862 . -8) (undo-tree-id5863 . -8) (undo-tree-id5864 . -8) (undo-tree-id5865 . -8) (undo-tree-id5866 . -8) (undo-tree-id5867 . -8) (undo-tree-id5868 . -8) (undo-tree-id5869 . -8) (undo-tree-id5870 . -8) (undo-tree-id5871 . -8) (undo-tree-id5872 . -8) (undo-tree-id5873 . -8) (undo-tree-id5874 . -8) (undo-tree-id5875 . -68) (undo-tree-id5876 . -69) (undo-tree-id5877 . -6) (undo-tree-id5878 . -68) (undo-tree-id5879 . -8) (undo-tree-id5880 . -8) (undo-tree-id5881 . -8) (undo-tree-id5882 . -8) (undo-tree-id5883 . -8) (undo-tree-id5884 . -8) (undo-tree-id5885 . -8) (undo-tree-id5886 . -8) (undo-tree-id5887 . -8) (undo-tree-id5888 . -71) 905) nil (26236 17640 354248 123000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1020 . 1021) (nil fontified nil 899 . 1021) (899 . 1021)) nil (26236 17640 354165 596000) 0 nil])
([nil nil ((#("Client interrupted while waiting for service. Terminating..." 0 60 (face font-lock-string-face fontified t)) . 956) (undo-tree-id5809 . -59) (undo-tree-id5810 . -59) (undo-tree-id5811 . -59) (undo-tree-id5812 . -59) (undo-tree-id5813 . -60) (undo-tree-id5814 . -59) (undo-tree-id5815 . -59) (undo-tree-id5816 . -59) (undo-tree-id5817 . -59) (undo-tree-id5818 . -59) (undo-tree-id5819 . -59) (undo-tree-id5820 . -59) (undo-tree-id5821 . -59) (undo-tree-id5822 . -59) (undo-tree-id5823 . -59) (undo-tree-id5824 . -59) (undo-tree-id5825 . -59) (undo-tree-id5826 . -59) (undo-tree-id5827 . -59) (undo-tree-id5828 . -59) (undo-tree-id5829 . -59) (undo-tree-id5830 . -59) (undo-tree-id5831 . -59) (undo-tree-id5832 . -59) (undo-tree-id5833 . -59) (undo-tree-id5834 . -59) (undo-tree-id5835 . -59) (undo-tree-id5836 . -59) (undo-tree-id5837 . -60) (undo-tree-id5838 . -60) 1015) nil (26236 17640 354158 584000) 0 nil])
([nil nil ((961 . 962) (956 . 961) (#("H" 0 1 (face font-lock-string-face fontified t)) . -956) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -957) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) 958 (956 . 958) (#("G" 0 1 (face font-lock-string-face fontified t)) . -956) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -957) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -958) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) 959 (956 . 959)) nil (26236 17640 354077 522000) 0 nil])
([nil nil ((962 . 970) (t 26236 17640 407117 41000)) nil (26236 17646 566601 679000) 0 nil])
([nil nil ((956 . 965)) nil (26236 17646 566589 826000) 0 nil])
([nil nil ((#("  return 0;
" 0 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 2305) (undo-tree-id5899 . -11) (undo-tree-id5900 . -10) (undo-tree-id5901 . -10) (undo-tree-id5902 . -10) (undo-tree-id5903 . -10) (undo-tree-id5904 . -10) (undo-tree-id5905 . -10) (undo-tree-id5906 . -10) (undo-tree-id5907 . -10) (undo-tree-id5908 . -10) (undo-tree-id5909 . -10) (undo-tree-id5910 . -10) (undo-tree-id5911 . -10) (undo-tree-id5912 . -10) (undo-tree-id5913 . -10) (undo-tree-id5914 . -10) (undo-tree-id5915 . -10) (undo-tree-id5916 . -10) (undo-tree-id5917 . -12) (undo-tree-id5918 . -12) (undo-tree-id5919 . -12) (undo-tree-id5920 . -12) (undo-tree-id5921 . -12) (undo-tree-id5922 . -12) (undo-tree-id5923 . -12) (undo-tree-id5924 . -12) (undo-tree-id5925 . -12) (undo-tree-id5926 . -12) (undo-tree-id5927 . -12) (undo-tree-id5928 . -12) (undo-tree-id5929 . -12) (undo-tree-id5930 . -12) (undo-tree-id5931 . -12) (undo-tree-id5932 . -12) (undo-tree-id5933 . -12) (undo-tree-id5934 . -12) (undo-tree-id5935 . -12) (undo-tree-id5936 . -12) (undo-tree-id5937 . -12) (undo-tree-id5938 . -12) (undo-tree-id5939 . -12) (undo-tree-id5940 . -12) (undo-tree-id5941 . -12) (undo-tree-id5942 . -12) (undo-tree-id5943 . -12) (undo-tree-id5944 . -12) (undo-tree-id5945 . -12) (undo-tree-id5946 . -12) (undo-tree-id5947 . -12) (undo-tree-id5948 . -12) (undo-tree-id5949 . -12) (undo-tree-id5950 . -12) (undo-tree-id5951 . -12) (undo-tree-id5952 . -12) (undo-tree-id5953 . -12) (undo-tree-id5954 . -12) (undo-tree-id5955 . -12) (undo-tree-id5956 . -12) (undo-tree-id5957 . -12) (undo-tree-id5958 . -10) (undo-tree-id5959 . -10) (undo-tree-id5960 . -10) (undo-tree-id5961 . -10) (undo-tree-id5962 . -10) (undo-tree-id5963 . -10) (undo-tree-id5964 . -10) (undo-tree-id5965 . -10) (undo-tree-id5966 . -10) (undo-tree-id5967 . -10) (undo-tree-id5968 . -10) (undo-tree-id5969 . -10) (undo-tree-id5970 . -10) (undo-tree-id5971 . -10) (undo-tree-id5972 . -10) (undo-tree-id5973 . -10) (undo-tree-id5974 . -10) (undo-tree-id5975 . -10) (undo-tree-id5976 . -10) (undo-tree-id5977 . -10) (undo-tree-id5978 . -10) (undo-tree-id5979 . -10) (undo-tree-id5980 . -10) (undo-tree-id5981 . -10) (undo-tree-id5982 . -10) (undo-tree-id5983 . -10) (undo-tree-id5984 . -10) (undo-tree-id5985 . -10) (undo-tree-id5986 . -10) (undo-tree-id5987 . -10) (undo-tree-id5988 . -10) (undo-tree-id5989 . -10) (undo-tree-id5990 . -10) (undo-tree-id5991 . -10) (undo-tree-id5992 . -10) (undo-tree-id5993 . -10) (undo-tree-id5994 . -12) 2315 (t 26236 17646 588910 718000)) nil (26236 17652 554310 165000) 0 nil])
([nil nil ((1665 . 1666) (t 26236 17652 578956 464000)) nil (26236 17688 355666 513000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1665) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) 1666) nil (26236 17688 355663 383000) 0 nil])
([nil nil ((1677 . 1678)) nil (26236 17688 355657 181000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 1677)) nil (26236 17688 355654 584000) 0 nil])
([nil nil ((1678 . 1689) (1679 . 1680)) nil (26236 17688 355652 351000) 0 nil])
([nil nil ((1666 . 1677) (#("						    " 0 10 (fontified nil)) . -1666) (undo-tree-id6086 . -10) (undo-tree-id6087 . -10) (undo-tree-id6088 . -10) (#(" " 0 1 (fontified t)) . 1676) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1)) nil (26236 17688 355648 546000) 0 nil])
([nil nil ((#("						     
" 0 11 (fontified t) 11 12 (fontified t)) . 1666) (undo-tree-id6082 . 1) (undo-tree-id6083 . -11) (undo-tree-id6084 . -11) (undo-tree-id6085 . -10) 1676) nil (26236 17688 355637 843000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -1693) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . 1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 1694) (undo-tree-id6073 . 1) (undo-tree-id6074 . -1) (undo-tree-id6075 . 1) (#("=" 0 1 (fontified t)) . -1694) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) 1695 (1694 . 1695) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 1694) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1693 1693 nil nil nil t nil)) nil 24 nil #s(yas--field 1 1693 1693 nil nil nil t nil) nil nil)) (1677 . 1705) (#("request_callback(${1:int future})" 0 33 (fontified nil)) . 1677) (1677 . 1710) (#("request_callback(int future)" 0 28 (fontified nil)) . -1677) (1677 . 1705) (#("re" 0 1 (fontified t) 1 2 (fontified t)) . -1677) (undo-tree-id6078 . -2) (undo-tree-id6079 . -2) 1679 (1677 . 1679) (1675 . 1677) (1664 . 1675) (#("S" 0 1 (fontified nil)) . 1664) (1664 . 1665) (#("ServiceNode" 0 11 (fontified nil)) . -1664) (1664 . 1675) (#("S" 0 1 (fontified t)) . -1664) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) 1665 (1664 . 1665)) nil (26236 17688 355622 105000) 0 nil])
([nil nil ((apply yas--snippet-revive 1677 1693 #s(yas--snippet nil (#s(yas--field 1 1693 1693 nil nil nil t nil)) nil 24 nil #s(yas--field 1 1693 1693 nil nil nil t nil) nil nil))) nil (26236 17688 355587 396000) 0 nil])
([nil nil ((1664 . 1665)) nil (26236 17688 355585 379000) 0 nil])
([nil nil ((1721 . 1723) (#("_1" 0 2 (fontified nil)) . -1721) (1721 . 1723) (#("_" 0 1 (fontified t)) . -1721) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) 1722 (1721 . 1722) (1719 . 1721) (1707 . 1719) (#("pla" 0 3 (fontified nil)) . 1707) (1707 . 1710) (#("placeholders" 0 12 (fontified nil)) . -1707) (1707 . 1719) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1707) (undo-tree-id6064 . -3) (undo-tree-id6065 . -3) (undo-tree-id6066 . -3) 1710 (1707 . 1710) (1706 . 1707) (1705 . 1706) (1701 . 1705) (1700 . 1701) (1695 . 1700) (1694 . 1695)) nil (26236 17688 355579 169000) 0 nil])
([nil nil ((1724 . 1725)) nil (26236 17688 355559 871000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1724) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) 1725) nil (26236 17688 355543 874000) 0 nil])
([nil nil ((#("						     " 0 11 (fontified t)) . 1725) (undo-tree-id6291 . -10) (t 26236 17688 382232 23000)) nil (26236 17872 227073 814000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1724) (undo-tree-id6286 . 1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) 1725) nil (26236 17872 226851 264000) 0 nil])
([nil nil ((1696 . 1710) (#(" " 0 1 (fontified nil)) . 1696) (1695 . 1696)) nil (26236 17872 226840 2000) 0 nil])
([nil nil ((1716 . 1730) (#(" " 0 1 (fontified nil)) . 1716) (1715 . 1716)) nil (26236 17872 226836 491000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2382) (undo-tree-id6187 . -2) (undo-tree-id6188 . -2) (undo-tree-id6189 . -2) (undo-tree-id6190 . -2) (undo-tree-id6191 . -2) (undo-tree-id6192 . -2) (undo-tree-id6193 . -2) (undo-tree-id6194 . -2) (undo-tree-id6195 . -2) (undo-tree-id6196 . -2) (undo-tree-id6197 . -2) (undo-tree-id6198 . -2) (undo-tree-id6199 . -2) (undo-tree-id6200 . -2) (undo-tree-id6201 . -2) (undo-tree-id6202 . -2) (undo-tree-id6203 . -2) (undo-tree-id6204 . -2) (undo-tree-id6205 . -2) (undo-tree-id6206 . -2) (undo-tree-id6207 . -2) (undo-tree-id6208 . -2) (undo-tree-id6209 . -2) (undo-tree-id6210 . -2) (undo-tree-id6211 . -2) (undo-tree-id6212 . -2) (undo-tree-id6213 . -2) (undo-tree-id6214 . -2) (undo-tree-id6215 . -2) (undo-tree-id6216 . -2) (undo-tree-id6217 . -2) (undo-tree-id6218 . -2) (undo-tree-id6219 . -2) (undo-tree-id6220 . -2) (undo-tree-id6221 . -2) (undo-tree-id6222 . -2) (undo-tree-id6223 . -2) (undo-tree-id6224 . -2) (undo-tree-id6225 . -2) 2384 (2382 . 2384) (#("  " 0 2 (fontified nil)) . 2381) (undo-tree-id6226 . -2) (undo-tree-id6227 . -2) (undo-tree-id6228 . -2) (undo-tree-id6229 . -2) (undo-tree-id6230 . -2) (undo-tree-id6231 . -2) (undo-tree-id6232 . -2) (undo-tree-id6233 . -2) (undo-tree-id6234 . -2) (undo-tree-id6235 . -2) (undo-tree-id6236 . -2) (undo-tree-id6237 . -2) (undo-tree-id6238 . -2) (undo-tree-id6239 . -2) (undo-tree-id6240 . -2) (undo-tree-id6241 . -2) (undo-tree-id6242 . -2) (undo-tree-id6243 . -2) (undo-tree-id6244 . -2) (undo-tree-id6245 . -2) (undo-tree-id6246 . -2) (undo-tree-id6247 . -2) (undo-tree-id6248 . -2) (undo-tree-id6249 . -2) (undo-tree-id6250 . -2) (undo-tree-id6251 . -2) (undo-tree-id6252 . -2) (undo-tree-id6253 . -2) (undo-tree-id6254 . -2) (undo-tree-id6255 . -2) (2381 . 2384) (#("  " 0 2 (fontified nil)) . 2380) (undo-tree-id6256 . -2) (undo-tree-id6257 . -2) (undo-tree-id6258 . -2) (undo-tree-id6259 . -2) (undo-tree-id6260 . -2) (undo-tree-id6261 . -2) (undo-tree-id6262 . -2) (undo-tree-id6263 . -2) (undo-tree-id6264 . -2) (undo-tree-id6265 . -2) (undo-tree-id6266 . -2) (undo-tree-id6267 . -2) (undo-tree-id6268 . -2) (undo-tree-id6269 . -2) (undo-tree-id6270 . -2) (undo-tree-id6271 . -2) (undo-tree-id6272 . -2) (undo-tree-id6273 . -2) (undo-tree-id6274 . -2) (undo-tree-id6275 . -2) (undo-tree-id6276 . -2) (undo-tree-id6277 . -2) (undo-tree-id6278 . -2) (undo-tree-id6279 . -2) (undo-tree-id6280 . -2) (undo-tree-id6281 . -2) (undo-tree-id6282 . -2) (undo-tree-id6283 . -2) (undo-tree-id6284 . -2) (undo-tree-id6285 . -2) (2379 . 2383)) nil (26236 17872 226821 775000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -2383) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) 2384 (2383 . 2384) (2381 . 2383)) nil (26236 17872 226637 583000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2383) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (#("t" 0 1 (fontified t)) . -2384) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (#("d" 0 1 (fontified t)) . -2385) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) 2386 (2383 . 2386) (2381 . 2383) (#(" " 0 1 (fontified nil)) . -2381) (undo-tree-id6321 . -1) (#(" " 0 1 (fontified t)) . 2382) (t 26236 17872 253231 926000)) nil (26236 17896 607628 651000) 0 nil])
([nil nil ((2393 . 2397) (2391 . 2393) (2389 . 2391) (#("t" 0 1 (fontified t)) . -2389) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (#(" " 0 1 (fontified t)) . -2390) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) 2391 (2386 . 2391) (2385 . 2386) (2384 . 2385) (2382 . 2384) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -2382) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) 2383 (2376 . 2383)) nil (26236 17896 607594 962000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2390) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1)) nil (26236 17896 607319 875000) 0 nil])
([nil nil ((2392 . 2393)) nil (26236 17896 607272 744000) 0 nil])
([nil nil ((#("ERROR" 0 5 (fontified t)) . 914) (undo-tree-id6525 . -4) (undo-tree-id6526 . -5) (undo-tree-id6527 . -5) (t 26236 17896 633925 511000)) nil (26236 17925 436843 939000) 0 nil])
([nil nil ((247 . 277) (907 . 918) (#("RCLCPP_" 0 7 (fontified nil)) . 907) (907 . 914) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -907) (907 . 931) (#("RCLCPP_IN" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -907) (undo-tree-id6322 . -7) (undo-tree-id6323 . -7) (undo-tree-id6324 . -7) (undo-tree-id6325 . -9) (undo-tree-id6326 . -9) (undo-tree-id6327 . -7) (undo-tree-id6328 . -7) (undo-tree-id6329 . -7) (undo-tree-id6330 . -7) (undo-tree-id6331 . -7) (undo-tree-id6332 . -7) (undo-tree-id6333 . -7) (undo-tree-id6334 . -7) (undo-tree-id6335 . -7) (undo-tree-id6336 . -7) (undo-tree-id6337 . -7) (undo-tree-id6338 . -7) (undo-tree-id6339 . -7) (undo-tree-id6340 . -7) (undo-tree-id6341 . -7) (undo-tree-id6342 . -7) (undo-tree-id6343 . -7) (undo-tree-id6344 . -7) (undo-tree-id6345 . -7) (undo-tree-id6346 . -7) (undo-tree-id6347 . -7) (undo-tree-id6348 . -7) (undo-tree-id6349 . -7) (undo-tree-id6350 . -7) (undo-tree-id6351 . -7) (undo-tree-id6352 . -7) (undo-tree-id6353 . -7) (undo-tree-id6354 . -7) (undo-tree-id6355 . -7) (undo-tree-id6356 . -7) (undo-tree-id6357 . -7) (undo-tree-id6358 . -7) (undo-tree-id6359 . -7) (undo-tree-id6360 . -7) (undo-tree-id6361 . -7) (undo-tree-id6362 . -7) (undo-tree-id6363 . -7) (undo-tree-id6364 . -7) (undo-tree-id6365 . -7) (undo-tree-id6366 . -7) (undo-tree-id6367 . -7) (undo-tree-id6368 . -7) (undo-tree-id6369 . -7) (undo-tree-id6370 . -7) (undo-tree-id6371 . -7) (undo-tree-id6372 . -7) (undo-tree-id6373 . -7) (undo-tree-id6374 . -7) (undo-tree-id6375 . -7) (undo-tree-id6376 . -7) (undo-tree-id6377 . -8) (undo-tree-id6378 . -8) (undo-tree-id6379 . -8) (undo-tree-id6380 . -8) (undo-tree-id6381 . -8) (undo-tree-id6382 . -8) (undo-tree-id6383 . -8) (undo-tree-id6384 . -8) (undo-tree-id6385 . -8) (undo-tree-id6386 . -8) (undo-tree-id6387 . -8) (undo-tree-id6388 . -8) (undo-tree-id6389 . -8) (undo-tree-id6390 . -8) (undo-tree-id6391 . -8) (undo-tree-id6392 . -8) (undo-tree-id6393 . -8) (undo-tree-id6394 . -8) (undo-tree-id6395 . -8) (undo-tree-id6396 . -8) (undo-tree-id6397 . -8) (undo-tree-id6398 . -8) (undo-tree-id6399 . -8) (undo-tree-id6400 . -8) (undo-tree-id6401 . -8) (undo-tree-id6402 . -8) (undo-tree-id6403 . -8) (undo-tree-id6404 . -8) (undo-tree-id6405 . -8) (undo-tree-id6406 . -8) (undo-tree-id6407 . -8) (undo-tree-id6408 . -8) (undo-tree-id6409 . -8) (undo-tree-id6410 . -8) (undo-tree-id6411 . -8) (undo-tree-id6412 . -8) (undo-tree-id6413 . -8) (undo-tree-id6414 . -8) (undo-tree-id6415 . -8) (undo-tree-id6416 . -8) (undo-tree-id6417 . -8) (undo-tree-id6418 . -8) (undo-tree-id6419 . -8) (undo-tree-id6420 . -9) (undo-tree-id6421 . -9) (undo-tree-id6422 . -9) (undo-tree-id6423 . -9) (undo-tree-id6424 . -9) (undo-tree-id6425 . -9) (undo-tree-id6426 . -9) (undo-tree-id6427 . -9) (undo-tree-id6428 . -9) (undo-tree-id6429 . -9) (undo-tree-id6430 . -9) (undo-tree-id6431 . -9) (undo-tree-id6432 . -9) (undo-tree-id6433 . -9) (undo-tree-id6434 . -9) (undo-tree-id6435 . -9) (undo-tree-id6436 . -9) (undo-tree-id6437 . -9) (undo-tree-id6438 . -9) (undo-tree-id6439 . -9) (undo-tree-id6440 . -9) (undo-tree-id6441 . -9) (undo-tree-id6442 . -9) (undo-tree-id6443 . -9) (undo-tree-id6444 . -9) (undo-tree-id6445 . -9) (undo-tree-id6446 . -9) (undo-tree-id6447 . -9) (undo-tree-id6448 . -9) (undo-tree-id6449 . -9) (undo-tree-id6450 . -9) (undo-tree-id6451 . -9) (undo-tree-id6452 . -9) (undo-tree-id6453 . -9) (undo-tree-id6454 . -9) (undo-tree-id6455 . -9) (undo-tree-id6456 . -9) (undo-tree-id6457 . -9) (undo-tree-id6458 . -9) (undo-tree-id6459 . -9) (undo-tree-id6460 . -9) (undo-tree-id6461 . -9) (undo-tree-id6462 . -9) (undo-tree-id6463 . -9) (undo-tree-id6464 . -9) (undo-tree-id6465 . -9) (undo-tree-id6466 . -9) (undo-tree-id6467 . -9) (undo-tree-id6468 . -9) (undo-tree-id6469 . -9) (undo-tree-id6470 . -9) (undo-tree-id6471 . -9) (undo-tree-id6472 . -9) (undo-tree-id6473 . -9) (undo-tree-id6474 . -9) (undo-tree-id6475 . -9) (undo-tree-id6476 . -9) (undo-tree-id6477 . -9) (undo-tree-id6478 . -9) (undo-tree-id6479 . -9) (undo-tree-id6480 . -9) (undo-tree-id6481 . -9) (undo-tree-id6482 . -9) (undo-tree-id6483 . -9) (undo-tree-id6484 . -9) (undo-tree-id6485 . -9) (undo-tree-id6486 . -9) (undo-tree-id6487 . -9) (undo-tree-id6488 . -9) (undo-tree-id6489 . -9) (undo-tree-id6490 . -9) (undo-tree-id6491 . -9) (undo-tree-id6492 . -9) (undo-tree-id6493 . -9) (undo-tree-id6494 . -9) (undo-tree-id6495 . -9) (undo-tree-id6496 . -9) (undo-tree-id6497 . -9) (undo-tree-id6498 . -9) (undo-tree-id6499 . -9) (undo-tree-id6500 . -9) (undo-tree-id6501 . -9) 916 (914 . 916) (#("L" 0 1 (fontified t)) . -914) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (#("O" 0 1 (fontified t)) . -915) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (#("G" 0 1 (fontified t)) . -916) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (#("G" 0 1 (fontified t)) . -917) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) 918 (914 . 918) (#("g" 0 1 (fontified t)) . -914) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (#("e" 0 1 (fontified t)) . -915) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (#("t" 0 1 (fontified t)) . -916) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) 917 (914 . 917)) nil (26236 17925 436812 355000) 0 nil])
([nil nil ((#("ERROR" 0 5 (fontified t)) . 1199) (undo-tree-id6528 . -4) (undo-tree-id6529 . -5) (t 26236 17925 461735 479000)) nil (26236 17930 719197 102000) 0 nil])
([nil nil ((1199 . 1203)) nil (26236 17930 719168 342000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1038) (undo-tree-id6624 . -6) (undo-tree-id6625 . -6) 1044 (1038 . 1044) (#("      " 0 6 (fontified nil)) . 1037) (undo-tree-id6626 . -6) (undo-tree-id6627 . -6) (1036 . 1044) (t 26236 17930 770960 873000)) nil (26236 17955 327136 580000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1120 . 1121) (nil fontified nil 1037 . 1121) (1037 . 1121)) nil (26236 17955 327123 319000) 0 nil])
([nil nil ((1058 . 1064) (#("		     " 0 7 (fontified t)) . 1058)) nil (26236 17955 327119 996000) 0 nil])
([nil nil ((1084 . 1090) (#("		     " 0 7 (fontified t)) . 1084) 1090) nil (26236 17955 327117 459000) 0 nil])
([nil nil ((1118 . 1119) (#(" " 0 1 (rear-nonsticky t fontified t)) . 1118)) nil (26236 17955 327114 554000) 0 nil])
([nil nil ((950 . 956) (#("		     " 0 7 (fontified t)) . 950) (undo-tree-id6623 . -7)) nil (26236 17955 327111 784000) 0 nil])
([nil nil ((929 . 933) (#("        " 0 8 (fontified t)) . 929) (undo-tree-id6622 . -8) 948) nil (26236 17955 327106 791000) 0 nil])
([nil nil ((946 . 948) (#("		    " 0 6 (fontified t)) . 946) (undo-tree-id6567 . -2) (undo-tree-id6568 . -2) (undo-tree-id6569 . -6) (undo-tree-id6570 . -6) (undo-tree-id6571 . -6) (undo-tree-id6572 . -6) (undo-tree-id6573 . -6) (undo-tree-id6574 . -6) (undo-tree-id6575 . -6) (undo-tree-id6576 . -6) (undo-tree-id6577 . -6) (undo-tree-id6578 . -6) (undo-tree-id6579 . -6) (undo-tree-id6580 . -6) (undo-tree-id6581 . -6) (undo-tree-id6582 . -6) (undo-tree-id6583 . -6) (undo-tree-id6584 . -6) (undo-tree-id6585 . -6) (undo-tree-id6586 . -6) (undo-tree-id6587 . -6) (undo-tree-id6588 . -6) (undo-tree-id6589 . -6) (undo-tree-id6590 . -6) (undo-tree-id6591 . -6) (undo-tree-id6592 . -6) (undo-tree-id6593 . -6) (undo-tree-id6594 . -6) (undo-tree-id6595 . -6) (undo-tree-id6596 . -6) (undo-tree-id6597 . -6) (undo-tree-id6598 . -6) (undo-tree-id6599 . -6) (undo-tree-id6600 . -6) (undo-tree-id6601 . -6) (undo-tree-id6602 . -6) (undo-tree-id6603 . -6) (undo-tree-id6604 . -6) (undo-tree-id6605 . -2) (undo-tree-id6606 . -2) (undo-tree-id6607 . -2) (undo-tree-id6608 . -2) (undo-tree-id6609 . -2) (undo-tree-id6610 . -2) (undo-tree-id6611 . -2) (undo-tree-id6612 . -2) (undo-tree-id6613 . -2) (undo-tree-id6614 . -2) (undo-tree-id6615 . -2) (undo-tree-id6616 . -2) (undo-tree-id6617 . -2) (undo-tree-id6618 . -2) (undo-tree-id6619 . -2) (undo-tree-id6620 . -2) (undo-tree-id6621 . -2) 948) nil (26236 17955 327096 801000) 0 nil])
([nil nil ((968 . 970) (#("		     " 0 7 (fontified t)) . 968) (undo-tree-id6539 . -2) (undo-tree-id6540 . -2) (undo-tree-id6541 . -2) (undo-tree-id6542 . -2) (undo-tree-id6543 . -2) (undo-tree-id6544 . -2) (undo-tree-id6545 . -2) (undo-tree-id6546 . -2) (undo-tree-id6547 . -2) (undo-tree-id6548 . -2) (undo-tree-id6549 . -2) (undo-tree-id6550 . -2) (undo-tree-id6551 . -2) (undo-tree-id6552 . -2) (undo-tree-id6553 . -2) (undo-tree-id6554 . -2) (undo-tree-id6555 . -2) (undo-tree-id6556 . -2) (undo-tree-id6557 . -2) (undo-tree-id6558 . -2) (undo-tree-id6559 . -2) (undo-tree-id6560 . -2) (undo-tree-id6561 . -2) (undo-tree-id6562 . -2) (undo-tree-id6563 . -2) (undo-tree-id6564 . -2) (undo-tree-id6565 . -2) (undo-tree-id6566 . -2) 970) nil (26236 17955 326981 691000) 0 nil])
([nil nil ((998 . 1002) (#(" " 0 1 (fontified t rear-nonsticky t)) . 998)) nil (26236 17955 326924 783000) 0 nil])
([nil nil ((1107 . 1108) (#("	" 0 1 (fontified t)) . 1107)) nil (26236 17955 326921 961000) 0 nil])
([nil nil ((#("HITMAN" 0 6 (face font-lock-string-face fontified t)) . 1089) (undo-tree-id6530 . -5) (undo-tree-id6531 . -6) (undo-tree-id6532 . -6) (undo-tree-id6533 . -6) (undo-tree-id6534 . -6) (undo-tree-id6535 . -6) (undo-tree-id6536 . -6) (undo-tree-id6537 . -6) (undo-tree-id6538 . -6)) nil (26236 17955 326915 986000) 0 nil])
([nil nil ((1089 . 1102)) nil (26236 17955 326871 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2040 . 2041) (#("
" 0 1 (fontified nil)) . -2165) (2034 . 2166) 1967 (t 26236 17955 352000 538000)) nil (26236 17986 641162 69000) 0 nil])
([nil nil ((2035 . 2039) (#("      " 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t)) . -2035) (undo-tree-id6806 . -6) (undo-tree-id6807 . -6) 2041) nil (26236 17986 641157 871000) 0 nil])
([nil nil ((#("Result Success: %i, Result From Service Success: %i" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t) 28 29 (face font-lock-string-face fontified t) 29 30 (face font-lock-string-face fontified t) 30 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 34 (face font-lock-string-face fontified t) 34 35 (face font-lock-string-face fontified t) 35 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t)) . 2072) (undo-tree-id6801 . -50) (undo-tree-id6802 . -50) (undo-tree-id6803 . -50) (undo-tree-id6804 . -50) (undo-tree-id6805 . -50) 2122) nil (26236 17986 641151 108000) 0 nil])
([nil nil ((#("future.get(" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2075) (undo-tree-id6757 . -10) (undo-tree-id6758 . -10) (undo-tree-id6759 . -10) (undo-tree-id6760 . -10) (undo-tree-id6761 . -10) (undo-tree-id6762 . -11) (undo-tree-id6763 . -10) (undo-tree-id6764 . -10) (undo-tree-id6765 . -10) (undo-tree-id6766 . -10) (undo-tree-id6767 . -10) (undo-tree-id6768 . -10) (undo-tree-id6769 . -10) (undo-tree-id6770 . -10) (undo-tree-id6771 . -10) (undo-tree-id6772 . -10) (undo-tree-id6773 . -10) (undo-tree-id6774 . -10) (undo-tree-id6775 . -10) (undo-tree-id6776 . -10) (undo-tree-id6777 . -10) (undo-tree-id6778 . -10) (undo-tree-id6779 . -10) (undo-tree-id6780 . -10) (undo-tree-id6781 . -10) (undo-tree-id6782 . -10) (undo-tree-id6783 . -10) (undo-tree-id6784 . -10) (undo-tree-id6785 . -10) (undo-tree-id6786 . -10) (undo-tree-id6787 . -10) (undo-tree-id6788 . -10) (undo-tree-id6789 . -10) (undo-tree-id6790 . -10) (undo-tree-id6791 . -10) (undo-tree-id6792 . -10) (undo-tree-id6793 . -10) (undo-tree-id6794 . -10) (undo-tree-id6795 . -10) (undo-tree-id6796 . -10) (undo-tree-id6797 . -10) (undo-tree-id6798 . -10) (undo-tree-id6799 . -11) (undo-tree-id6800 . -11) 2085) nil (26236 17986 644727 752000) 0 nil])
([nil nil ((#(")->success, future.get()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2075) (undo-tree-id7821 . -23) (undo-tree-id7822 . -23) (undo-tree-id7823 . -23) (undo-tree-id7824 . -1) (undo-tree-id7825 . -23) (undo-tree-id7826 . -11) (undo-tree-id7827 . -24) (undo-tree-id7828 . -23) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -23) (undo-tree-id7864 . -24) (undo-tree-id7865 . -24) 2098) nil (26236 18006 654669 384000) 0 nil] [nil nil ((#("this->get_logger(), \"\", " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (fontified t) 23 24 (fontified t)) . 2051) (undo-tree-id6628 . -23) (undo-tree-id6629 . -23) (undo-tree-id6630 . -23) (undo-tree-id6631 . -24) (undo-tree-id6632 . -23) (undo-tree-id6633 . -24) (undo-tree-id6634 . -24) (undo-tree-id6635 . -24) (undo-tree-id6636 . -24) (undo-tree-id6637 . -24) (undo-tree-id6638 . -24) (undo-tree-id6639 . -24) (undo-tree-id6640 . -24) (undo-tree-id6641 . -24) (undo-tree-id6642 . -24) (undo-tree-id6643 . -24) (undo-tree-id6644 . -24) (undo-tree-id6645 . -24) (undo-tree-id6646 . -24) (undo-tree-id6647 . -24) (undo-tree-id6648 . -24) (undo-tree-id6649 . -24) (undo-tree-id6650 . -24) (undo-tree-id6651 . -24) (undo-tree-id6652 . -24) (undo-tree-id6653 . -24) (undo-tree-id6654 . -24) (undo-tree-id6655 . -24) (undo-tree-id6656 . -24) (undo-tree-id6657 . -24) (undo-tree-id6658 . -24) (undo-tree-id6659 . -24) (undo-tree-id6660 . -24) (undo-tree-id6661 . -24) (undo-tree-id6662 . -24) (undo-tree-id6663 . -24) (undo-tree-id6664 . -24) (undo-tree-id6665 . -24) (undo-tree-id6666 . -24) (undo-tree-id6667 . -24) (undo-tree-id6668 . -24) (undo-tree-id6669 . -24) (undo-tree-id6670 . -24) (undo-tree-id6671 . -24) (undo-tree-id6672 . -24) (undo-tree-id6673 . -24) (undo-tree-id6674 . -24) (undo-tree-id6675 . -24) (undo-tree-id6676 . -24) (undo-tree-id6677 . -24) (undo-tree-id6678 . -24) (undo-tree-id6679 . -24) (undo-tree-id6680 . -24) (undo-tree-id6681 . -24) (undo-tree-id6682 . -24) (undo-tree-id6683 . -24) (undo-tree-id6684 . -24) (undo-tree-id6685 . -24) (undo-tree-id6686 . -24) (undo-tree-id6687 . -24) (undo-tree-id6688 . -24) (undo-tree-id6689 . -24) (undo-tree-id6690 . -24) (undo-tree-id6691 . -24) (undo-tree-id6692 . -24) (undo-tree-id6693 . -24) (undo-tree-id6694 . -24) (undo-tree-id6695 . -24) (undo-tree-id6696 . -24) (undo-tree-id6697 . -24) (undo-tree-id6698 . -24) (undo-tree-id6699 . -24) (undo-tree-id6700 . -24) (undo-tree-id6701 . -24) (undo-tree-id6702 . -24) (undo-tree-id6703 . -24) (undo-tree-id6704 . -24) (undo-tree-id6705 . -24) (undo-tree-id6706 . -24) (undo-tree-id6707 . -24) (undo-tree-id6708 . -24) (undo-tree-id6709 . -24) (undo-tree-id6710 . -24) (undo-tree-id6711 . -24) (undo-tree-id6712 . -24) (undo-tree-id6713 . -24) (undo-tree-id6714 . -24) (undo-tree-id6715 . -24) (undo-tree-id6716 . -24) (undo-tree-id6717 . -24) (undo-tree-id6718 . -24) (undo-tree-id6719 . -24) (undo-tree-id6720 . -24) (undo-tree-id6721 . -24) (undo-tree-id6722 . -24) (undo-tree-id6723 . -24) (undo-tree-id6724 . -24) (undo-tree-id6725 . -24) (undo-tree-id6726 . -24) (undo-tree-id6727 . -24) (undo-tree-id6728 . -24) (undo-tree-id6729 . -4) (undo-tree-id6730 . -24) (undo-tree-id6731 . -24) (undo-tree-id6732 . -24) (undo-tree-id6733 . -24) (undo-tree-id6734 . -24) (undo-tree-id6735 . -24) (undo-tree-id6736 . -24) (undo-tree-id6737 . -24) (undo-tree-id6738 . -24) (undo-tree-id6739 . -24) (undo-tree-id6740 . -24) (undo-tree-id6741 . -24) (undo-tree-id6742 . -23) (undo-tree-id6743 . -24) (undo-tree-id6744 . -24) (undo-tree-id6745 . -24) (undo-tree-id6746 . -24) (undo-tree-id6747 . -24) (undo-tree-id6748 . -24) (undo-tree-id6749 . -24) (undo-tree-id6750 . -24) (undo-tree-id6751 . -24) (undo-tree-id6752 . -24) (undo-tree-id6753 . -24) (undo-tree-id6754 . -23) (undo-tree-id6755 . -24) (undo-tree-id6756 . -24) 2074) ((2051 . 2075)) (26236 17986 641039 386000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2073) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1)) nil (26236 18006 654594 42000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 2073) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1)) nil (26236 18006 654442 267000) 0 nil])
([nil nil ((2085 . 2087) (#("D" 0 1 (face font-lock-string-face fontified t)) . -2085) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) 2086 (2078 . 2086) (#("X" 0 1 (face font-lock-string-face fontified t)) . -2078) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (#("K" 0 1 (face font-lock-string-face fontified t)) . -2079) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) 2080 (2078 . 2080) (2072 . 2078) (#("L" 0 1 (face font-lock-string-face fontified t)) . -2072) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (#("I" 0 1 (face font-lock-string-face fontified t)) . -2073) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (#("F" 0 1 (face font-lock-string-face fontified t)) . -2074) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -2075) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) 2076 (2072 . 2076)) nil (26236 18006 654082 641000) 0 nil])
([nil nil ((#("    RCLCPP_INFO(this->get_logger(), \"CALLBACK CALLED\");
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (face font-lock-keyword-face fontified t) 17 18 (face font-lock-keyword-face fontified t) 18 19 (face font-lock-keyword-face fontified t) 19 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-4-face) fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (fontified t) 55 56 (fontified t)) . 2035) (undo-tree-id6808 . 1) (undo-tree-id6809 . -55) (undo-tree-id6810 . -53) (undo-tree-id6811 . -53) (undo-tree-id6812 . 3) (undo-tree-id6813 . -53) (undo-tree-id6814 . -53) (undo-tree-id6815 . -54) (undo-tree-id6816 . -54) (undo-tree-id6817 . -53) (undo-tree-id6818 . -53) (undo-tree-id6819 . -53) (undo-tree-id6820 . -53) (undo-tree-id6821 . -53) (undo-tree-id6822 . -53) (undo-tree-id6823 . -53) (undo-tree-id6824 . -53) (undo-tree-id6825 . -53) (undo-tree-id6826 . -53) (undo-tree-id6827 . -53) (undo-tree-id6828 . -53) (undo-tree-id6829 . -53) (undo-tree-id6830 . -53) (undo-tree-id6831 . -53) (undo-tree-id6832 . -53) (undo-tree-id6833 . -53) (undo-tree-id6834 . -53) (undo-tree-id6835 . -53) (undo-tree-id6836 . -53) (undo-tree-id6837 . -53) (undo-tree-id6838 . -53) (undo-tree-id6839 . -53) (undo-tree-id6840 . -53) (undo-tree-id6841 . -53) (undo-tree-id6842 . -53) (undo-tree-id6843 . -53) (undo-tree-id6844 . -53) (undo-tree-id6845 . -53) (undo-tree-id6846 . -53) (undo-tree-id6847 . -53) (undo-tree-id6848 . -53) (undo-tree-id6849 . -53) (undo-tree-id6850 . -53) (undo-tree-id6851 . -53) (undo-tree-id6852 . -53) (undo-tree-id6853 . -53) (undo-tree-id6854 . -53) (undo-tree-id6855 . -53) (undo-tree-id6856 . -53) (undo-tree-id6857 . -53) (undo-tree-id6858 . -53) (undo-tree-id6859 . -53) (undo-tree-id6860 . -53) (undo-tree-id6861 . -53) (undo-tree-id6862 . -53) (undo-tree-id6863 . -53) (undo-tree-id6864 . -53) (undo-tree-id6865 . -53) (undo-tree-id6866 . -53) (undo-tree-id6867 . -53) (undo-tree-id6868 . -53) (undo-tree-id6869 . -53) (undo-tree-id6870 . -53) (undo-tree-id6871 . -53) (undo-tree-id6872 . -53) (undo-tree-id6873 . -53) (undo-tree-id6874 . -53) (undo-tree-id6875 . -53) (undo-tree-id6876 . -53) (undo-tree-id6877 . -53) (undo-tree-id6878 . -53) (undo-tree-id6879 . -53) (undo-tree-id6880 . -53) (undo-tree-id6881 . -53) (undo-tree-id6882 . -53) (undo-tree-id6883 . -53) (undo-tree-id6884 . -53) (undo-tree-id6885 . -53) (undo-tree-id6886 . -53) (undo-tree-id6887 . -53) (undo-tree-id6888 . -53) (undo-tree-id6889 . -53) (undo-tree-id6890 . -53) (undo-tree-id6891 . -53) (undo-tree-id6892 . -53) (undo-tree-id6893 . -53) (undo-tree-id6894 . -53) (undo-tree-id6895 . -53) (undo-tree-id6896 . -53) (undo-tree-id6897 . -53) (undo-tree-id6898 . -53) (undo-tree-id6899 . -53) (undo-tree-id6900 . -53) (undo-tree-id6901 . -53) (undo-tree-id6902 . -53) (undo-tree-id6903 . -53) (undo-tree-id6904 . -53) (undo-tree-id6905 . -53) (undo-tree-id6906 . -53) (undo-tree-id6907 . -53) (undo-tree-id6908 . -53) (undo-tree-id6909 . -53) (undo-tree-id6910 . -53) (undo-tree-id6911 . -53) (undo-tree-id6912 . -53) (undo-tree-id6913 . -53) (undo-tree-id6914 . -53) (undo-tree-id6915 . -53) (undo-tree-id6916 . -53) (undo-tree-id6917 . -53) (undo-tree-id6918 . -53) (undo-tree-id6919 . -53) (undo-tree-id6920 . -53) (undo-tree-id6921 . -53) (undo-tree-id6922 . -53) (undo-tree-id6923 . -53) (undo-tree-id6924 . -53) (undo-tree-id6925 . -53) (undo-tree-id6926 . -53) (undo-tree-id6927 . -53) (undo-tree-id6928 . -53) (undo-tree-id6929 . -53) (undo-tree-id6930 . -53) (undo-tree-id6931 . -53) (undo-tree-id6932 . -53) (undo-tree-id6933 . -53) (undo-tree-id6934 . -53) (undo-tree-id6935 . -53) (undo-tree-id6936 . -53) (undo-tree-id6937 . -53) (undo-tree-id6938 . -53) (undo-tree-id6939 . -53) (undo-tree-id6940 . -53) (undo-tree-id6941 . -53) (undo-tree-id6942 . -53) (undo-tree-id6943 . -53) (undo-tree-id6944 . -53) (undo-tree-id6945 . -53) (undo-tree-id6946 . -53) (undo-tree-id6947 . -53) (undo-tree-id6948 . -53) (undo-tree-id6949 . -53) (undo-tree-id6950 . -53) (undo-tree-id6951 . -53) (undo-tree-id6952 . -53) (undo-tree-id6953 . -53) (undo-tree-id6954 . -53) (undo-tree-id6955 . -53) (undo-tree-id6956 . -53) (undo-tree-id6957 . -53) (undo-tree-id6958 . -53) (undo-tree-id6959 . -53) (undo-tree-id6960 . -53) (undo-tree-id6961 . -53) (undo-tree-id6962 . -53) (undo-tree-id6963 . -53) (undo-tree-id6964 . -53) (undo-tree-id6965 . -53) (undo-tree-id6966 . -53) (undo-tree-id6967 . -53) (undo-tree-id6968 . -53) (undo-tree-id6969 . -53) (undo-tree-id6970 . -53) (undo-tree-id6971 . -53) (undo-tree-id6972 . -53) (undo-tree-id6973 . -53) (undo-tree-id6974 . -53) (undo-tree-id6975 . -53) (undo-tree-id6976 . -53) (undo-tree-id6977 . -53) (undo-tree-id6978 . -53) (undo-tree-id6979 . -53) (undo-tree-id6980 . -53) (undo-tree-id6981 . -53) (undo-tree-id6982 . -53) (undo-tree-id6983 . -53) (undo-tree-id6984 . -53) (undo-tree-id6985 . -53) (undo-tree-id6986 . -53) (undo-tree-id6987 . -53) (undo-tree-id6988 . -53) (undo-tree-id6989 . -53) (undo-tree-id6990 . -53) (undo-tree-id6991 . -53) (undo-tree-id6992 . -53) (undo-tree-id6993 . -53) (undo-tree-id6994 . -53) (undo-tree-id6995 . -53) (undo-tree-id6996 . -53) (undo-tree-id6997 . -53) (undo-tree-id6998 . -53) (undo-tree-id6999 . -53) (undo-tree-id7000 . -53) (undo-tree-id7001 . -53) (undo-tree-id7002 . -53) (undo-tree-id7003 . -53) (undo-tree-id7004 . -53) (undo-tree-id7005 . -53) (undo-tree-id7006 . -53) (undo-tree-id7007 . -53) (undo-tree-id7008 . -53) (undo-tree-id7009 . -53) (undo-tree-id7010 . -53) (undo-tree-id7011 . -53) (undo-tree-id7012 . -53) (undo-tree-id7013 . -53) (undo-tree-id7014 . -53) (undo-tree-id7015 . -53) (undo-tree-id7016 . -53) (undo-tree-id7017 . -53) (undo-tree-id7018 . -53) (undo-tree-id7019 . -53) (undo-tree-id7020 . -53) (undo-tree-id7021 . -53) (undo-tree-id7022 . -53) (undo-tree-id7023 . -53) (undo-tree-id7024 . -53) (undo-tree-id7025 . -53) (undo-tree-id7026 . -53) (undo-tree-id7027 . -53) (undo-tree-id7028 . -53) (undo-tree-id7029 . -53) (undo-tree-id7030 . -53) (undo-tree-id7031 . -53) (undo-tree-id7032 . -53) (undo-tree-id7033 . -53) (undo-tree-id7034 . -53) (undo-tree-id7035 . -53) (undo-tree-id7036 . -53) (undo-tree-id7037 . -53) (undo-tree-id7038 . -53) (undo-tree-id7039 . -53) (undo-tree-id7040 . -53) (undo-tree-id7041 . -53) (undo-tree-id7042 . -53) (undo-tree-id7043 . -53) (undo-tree-id7044 . -53) (undo-tree-id7045 . -53) (undo-tree-id7046 . -53) (undo-tree-id7047 . -53) (undo-tree-id7048 . -53) (undo-tree-id7049 . -53) (undo-tree-id7050 . -53) (undo-tree-id7051 . -53) (undo-tree-id7052 . -53) (undo-tree-id7053 . -53) (undo-tree-id7054 . -53) (undo-tree-id7055 . -53) (undo-tree-id7056 . -53) (undo-tree-id7057 . -53) (undo-tree-id7058 . -53) (undo-tree-id7059 . -53) (undo-tree-id7060 . -53) (undo-tree-id7061 . -53) (undo-tree-id7062 . -53) (undo-tree-id7063 . -53) (undo-tree-id7064 . -53) (undo-tree-id7065 . -53) (undo-tree-id7066 . -53) (undo-tree-id7067 . -53) (undo-tree-id7068 . -53) (undo-tree-id7069 . -53) (undo-tree-id7070 . -53) (undo-tree-id7071 . -53) (undo-tree-id7072 . -53) (undo-tree-id7073 . -53) (undo-tree-id7074 . -53) (undo-tree-id7075 . -53) (undo-tree-id7076 . -53) (undo-tree-id7077 . -53) (undo-tree-id7078 . -53) (undo-tree-id7079 . -53) (undo-tree-id7080 . -53) (undo-tree-id7081 . -53) (undo-tree-id7082 . -53) (undo-tree-id7083 . -53) (undo-tree-id7084 . -53) (undo-tree-id7085 . -53) (undo-tree-id7086 . -53) (undo-tree-id7087 . -53) (undo-tree-id7088 . -53) (undo-tree-id7089 . -53) (undo-tree-id7090 . -53) (undo-tree-id7091 . -53) (undo-tree-id7092 . -53) (undo-tree-id7093 . -53) (undo-tree-id7094 . -53) (undo-tree-id7095 . -53) (undo-tree-id7096 . -53) (undo-tree-id7097 . -53) (undo-tree-id7098 . -53) (undo-tree-id7099 . -53) (undo-tree-id7100 . -53) (undo-tree-id7101 . -53) (undo-tree-id7102 . -53) (undo-tree-id7103 . -53) (undo-tree-id7104 . -53) (undo-tree-id7105 . -53) (undo-tree-id7106 . -53) (undo-tree-id7107 . -53) (undo-tree-id7108 . -53) (undo-tree-id7109 . -53) (undo-tree-id7110 . -53) (undo-tree-id7111 . -53) (undo-tree-id7112 . -53) (undo-tree-id7113 . -53) (undo-tree-id7114 . -53) (undo-tree-id7115 . -53) (undo-tree-id7116 . -53) (undo-tree-id7117 . -53) (undo-tree-id7118 . -53) (undo-tree-id7119 . -53) (undo-tree-id7120 . -53) (undo-tree-id7121 . -53) (undo-tree-id7122 . -53) (undo-tree-id7123 . -53) (undo-tree-id7124 . -53) (undo-tree-id7125 . -53) (undo-tree-id7126 . -53) (undo-tree-id7127 . -53) (undo-tree-id7128 . -53) (undo-tree-id7129 . -53) (undo-tree-id7130 . -53) (undo-tree-id7131 . -53) (undo-tree-id7132 . 4) (undo-tree-id7133 . -49) (undo-tree-id7134 . -49) (undo-tree-id7135 . -49) (undo-tree-id7136 . -49) (undo-tree-id7137 . -49) (undo-tree-id7138 . -49) (undo-tree-id7139 . -49) (undo-tree-id7140 . -49) (undo-tree-id7141 . -49) (undo-tree-id7142 . -49) (undo-tree-id7143 . -50) (undo-tree-id7144 . -50) (undo-tree-id7145 . -50) (undo-tree-id7146 . -50) (undo-tree-id7147 . -50) (undo-tree-id7148 . -50) (undo-tree-id7149 . -50) (undo-tree-id7150 . -50) (undo-tree-id7151 . -50) (undo-tree-id7152 . -50) (undo-tree-id7153 . -50) (undo-tree-id7154 . -50) (undo-tree-id7155 . -50) (undo-tree-id7156 . -50) (undo-tree-id7157 . -50) (undo-tree-id7158 . -50) (undo-tree-id7159 . -50) (undo-tree-id7160 . -50) (undo-tree-id7161 . -50) (undo-tree-id7162 . -50) (undo-tree-id7163 . -50) (undo-tree-id7164 . -50) (undo-tree-id7165 . -50) (undo-tree-id7166 . -50) (undo-tree-id7167 . -50) (undo-tree-id7168 . -50) (undo-tree-id7169 . -50) (undo-tree-id7170 . -50) (undo-tree-id7171 . -50) (undo-tree-id7172 . -50) (undo-tree-id7173 . -50) (undo-tree-id7174 . -50) (undo-tree-id7175 . -50) (undo-tree-id7176 . -50) (undo-tree-id7177 . -50) (undo-tree-id7178 . -50) (undo-tree-id7179 . -50) (undo-tree-id7180 . -50) (undo-tree-id7181 . -50) (undo-tree-id7182 . -50) (undo-tree-id7183 . -50) (undo-tree-id7184 . -50) (undo-tree-id7185 . -50) (undo-tree-id7186 . -50) (undo-tree-id7187 . -50) (undo-tree-id7188 . -50) (undo-tree-id7189 . -50) (undo-tree-id7190 . -50) (undo-tree-id7191 . -50) (undo-tree-id7192 . -50) (undo-tree-id7193 . -50) (undo-tree-id7194 . -50) (undo-tree-id7195 . -50) (undo-tree-id7196 . -50) (undo-tree-id7197 . -50) (undo-tree-id7198 . -50) (undo-tree-id7199 . -50) (undo-tree-id7200 . -50) (undo-tree-id7201 . -50) (undo-tree-id7202 . -50) (undo-tree-id7203 . -50) (undo-tree-id7204 . -50) (undo-tree-id7205 . -50) (undo-tree-id7206 . -50) (undo-tree-id7207 . -50) (undo-tree-id7208 . -50) (undo-tree-id7209 . -50) (undo-tree-id7210 . -50) (undo-tree-id7211 . -50) (undo-tree-id7212 . -50) (undo-tree-id7213 . -50) (undo-tree-id7214 . -50) (undo-tree-id7215 . -50) (undo-tree-id7216 . -50) (undo-tree-id7217 . -50) (undo-tree-id7218 . -50) (undo-tree-id7219 . -50) (undo-tree-id7220 . -50) (undo-tree-id7221 . -50) (undo-tree-id7222 . -50) (undo-tree-id7223 . -50) (undo-tree-id7224 . -50) (undo-tree-id7225 . -50) (undo-tree-id7226 . -50) (undo-tree-id7227 . -50) (undo-tree-id7228 . -50) (undo-tree-id7229 . -50) (undo-tree-id7230 . -50) (undo-tree-id7231 . -50) (undo-tree-id7232 . -50) (undo-tree-id7233 . -50) (undo-tree-id7234 . -50) (undo-tree-id7235 . -50) (undo-tree-id7236 . -50) (undo-tree-id7237 . -50) (undo-tree-id7238 . -50) (undo-tree-id7239 . -50) (undo-tree-id7240 . -50) (undo-tree-id7241 . -50) (undo-tree-id7242 . -50) (undo-tree-id7243 . -50) (undo-tree-id7244 . -50) (undo-tree-id7245 . -50) (undo-tree-id7246 . -50) (undo-tree-id7247 . -50) (undo-tree-id7248 . -50) (undo-tree-id7249 . -50) (undo-tree-id7250 . -50) (undo-tree-id7251 . -50) (undo-tree-id7252 . -50) (undo-tree-id7253 . -50) (undo-tree-id7254 . -50) (undo-tree-id7255 . -50) (undo-tree-id7256 . -50) (undo-tree-id7257 . -50) (undo-tree-id7258 . -50) (undo-tree-id7259 . -50) (undo-tree-id7260 . -50) (undo-tree-id7261 . -51) (undo-tree-id7262 . -51) (undo-tree-id7263 . -51) (undo-tree-id7264 . -51) (undo-tree-id7265 . -51) (undo-tree-id7266 . -51) (undo-tree-id7267 . -51) (undo-tree-id7268 . -51) (undo-tree-id7269 . -51) (undo-tree-id7270 . -51) (undo-tree-id7271 . -51) (undo-tree-id7272 . -51) (undo-tree-id7273 . -51) (undo-tree-id7274 . -51) (undo-tree-id7275 . -51) (undo-tree-id7276 . -51) (undo-tree-id7277 . -51) (undo-tree-id7278 . -51) (undo-tree-id7279 . -51) (undo-tree-id7280 . -51) (undo-tree-id7281 . -51) (undo-tree-id7282 . -51) (undo-tree-id7283 . -51) (undo-tree-id7284 . -51) (undo-tree-id7285 . -51) (undo-tree-id7286 . -51) (undo-tree-id7287 . -51) (undo-tree-id7288 . -51) (undo-tree-id7289 . -51) (undo-tree-id7290 . -51) (undo-tree-id7291 . -51) (undo-tree-id7292 . -51) (undo-tree-id7293 . -52) (undo-tree-id7294 . -52) (undo-tree-id7295 . -52) (undo-tree-id7296 . -52) (undo-tree-id7297 . -52) (undo-tree-id7298 . -52) (undo-tree-id7299 . -52) (undo-tree-id7300 . -52) (undo-tree-id7301 . -52) (undo-tree-id7302 . -52) (undo-tree-id7303 . -52) (undo-tree-id7304 . -52) (undo-tree-id7305 . -52) (undo-tree-id7306 . -52) (undo-tree-id7307 . -52) (undo-tree-id7308 . -52) (undo-tree-id7309 . -52) (undo-tree-id7310 . -52) (undo-tree-id7311 . -52) (undo-tree-id7312 . -52) (undo-tree-id7313 . -52) (undo-tree-id7314 . -52) (undo-tree-id7315 . -52) (undo-tree-id7316 . -52) (undo-tree-id7317 . -52) (undo-tree-id7318 . -52) (undo-tree-id7319 . -52) (undo-tree-id7320 . -52) (undo-tree-id7321 . -52) (undo-tree-id7322 . -52) (undo-tree-id7323 . -52) (undo-tree-id7324 . -52) (undo-tree-id7325 . -52) (undo-tree-id7326 . -52) (undo-tree-id7327 . -52) (undo-tree-id7328 . -52) (undo-tree-id7329 . -52) (undo-tree-id7330 . -52) (undo-tree-id7331 . -52) (undo-tree-id7332 . -52) (undo-tree-id7333 . -52) (undo-tree-id7334 . -52) (undo-tree-id7335 . -52) (undo-tree-id7336 . -51) (undo-tree-id7337 . -51) (undo-tree-id7338 . -51) (undo-tree-id7339 . -51) (undo-tree-id7340 . -51) (undo-tree-id7341 . -51) (undo-tree-id7342 . -51) (undo-tree-id7343 . -51) (undo-tree-id7344 . -51) (undo-tree-id7345 . -51) (undo-tree-id7346 . -51) (undo-tree-id7347 . -16) (undo-tree-id7348 . -20) (undo-tree-id7349 . -51) (undo-tree-id7350 . -51) (undo-tree-id7351 . -51) (undo-tree-id7352 . -51) (undo-tree-id7353 . -51) (undo-tree-id7354 . -51) (undo-tree-id7355 . -51) (undo-tree-id7356 . -51) (undo-tree-id7357 . -51) (undo-tree-id7358 . -51) (undo-tree-id7359 . -51) (undo-tree-id7360 . -55) (undo-tree-id7361 . -55) (undo-tree-id7362 . -55) (undo-tree-id7363 . -55) (undo-tree-id7364 . -55) (undo-tree-id7365 . -55) (undo-tree-id7366 . -55) (undo-tree-id7367 . -55) (undo-tree-id7368 . -55) (undo-tree-id7369 . -55) (undo-tree-id7370 . -55) (undo-tree-id7371 . -54) (undo-tree-id7372 . -54) (undo-tree-id7373 . -54) (undo-tree-id7374 . -54) (undo-tree-id7375 . -54) (undo-tree-id7376 . -54) (undo-tree-id7377 . -54) (undo-tree-id7378 . -54) (undo-tree-id7379 . -54) (undo-tree-id7380 . -54) (undo-tree-id7381 . -54) (undo-tree-id7382 . -54) (undo-tree-id7383 . -54) (undo-tree-id7384 . -54) (undo-tree-id7385 . -54) (undo-tree-id7386 . -54) (undo-tree-id7387 . -54) (undo-tree-id7388 . -54) (undo-tree-id7389 . -54) (undo-tree-id7390 . -54) (undo-tree-id7391 . -54) (undo-tree-id7392 . -54) (undo-tree-id7393 . -54) (undo-tree-id7394 . -54) (undo-tree-id7395 . -54) (undo-tree-id7396 . -54) (undo-tree-id7397 . -54) (undo-tree-id7398 . -54) (undo-tree-id7399 . -54) (undo-tree-id7400 . -54) (undo-tree-id7401 . -54) (undo-tree-id7402 . -54) (undo-tree-id7403 . -54) (undo-tree-id7404 . -54) (undo-tree-id7405 . -54) (undo-tree-id7406 . -54) (undo-tree-id7407 . -54) (undo-tree-id7408 . -54) (undo-tree-id7409 . -54) (undo-tree-id7410 . -54) (undo-tree-id7411 . -54) (undo-tree-id7412 . -54) (undo-tree-id7413 . -54) (undo-tree-id7414 . -54) (undo-tree-id7415 . -54) (undo-tree-id7416 . -54) (undo-tree-id7417 . -54) (undo-tree-id7418 . -54) (undo-tree-id7419 . -54) (undo-tree-id7420 . -54) (undo-tree-id7421 . -54) (undo-tree-id7422 . -54) (undo-tree-id7423 . -54) (undo-tree-id7424 . -54) (undo-tree-id7425 . -54) (undo-tree-id7426 . -54) (undo-tree-id7427 . -54) (undo-tree-id7428 . -54) (undo-tree-id7429 . -54) (undo-tree-id7430 . -54) (undo-tree-id7431 . -54) (undo-tree-id7432 . -54) (undo-tree-id7433 . -54) (undo-tree-id7434 . -54) (undo-tree-id7435 . -54) (undo-tree-id7436 . -54) (undo-tree-id7437 . -54) (undo-tree-id7438 . -54) (undo-tree-id7439 . -56) 2089) nil (26236 18006 653933 869000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1970 . 1971) (#("
" 0 1 (fontified nil)) . -2022) (1966 . 2023) 1870) nil (26236 18006 652637 159000) 0 nil])
([nil nil ((2177 . 2181) (#(" " 0 1 (fontified nil)) . 2177) (undo-tree-id7866 . -1) (2176 . 2177) (t 26236 18006 708279 610000)) nil (26236 18019 416270 246000) 0 nil])
([nil nil ((2236 . 2240) (#(" " 0 1 (fontified nil)) . 2236) (2235 . 2236)) nil (26236 18019 416248 587000) 0 nil])
([nil nil ((2263 . 2267) (#(" " 0 1 (fontified nil)) . 2263) (2262 . 2263)) nil (26236 18019 416234 823000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2282) (undo-tree-id7867 . -6) (undo-tree-id7868 . -6) (undo-tree-id7869 . -6) (undo-tree-id7870 . -6) (undo-tree-id7871 . -6) (undo-tree-id7872 . -6) (undo-tree-id7873 . -6) (undo-tree-id7874 . -6) (undo-tree-id7875 . -6) (undo-tree-id7876 . -6) (undo-tree-id7877 . -6) (undo-tree-id7878 . -6) (undo-tree-id7879 . -6) (undo-tree-id7880 . -6) (undo-tree-id7881 . -6) (undo-tree-id7882 . -6) (undo-tree-id7883 . -6) (undo-tree-id7884 . -6) (undo-tree-id7885 . -6) (undo-tree-id7886 . -6) (undo-tree-id7887 . -6) (undo-tree-id7888 . -6) (undo-tree-id7889 . -6) (undo-tree-id7890 . -6) (undo-tree-id7891 . -6) (undo-tree-id7892 . -6) (undo-tree-id7893 . -6) (undo-tree-id7894 . -6) (undo-tree-id7895 . -6) (undo-tree-id7896 . -6) (undo-tree-id7897 . -6) (undo-tree-id7898 . -6) (undo-tree-id7899 . -6) (undo-tree-id7900 . -6) (undo-tree-id7901 . -6) (undo-tree-id7902 . -6) 2288 (2281 . 2288) (t 26236 18019 470042 143000)) nil (26236 18021 172624 189000) 0 nil])
([nil nil ((2366 . 2370) (#(" " 0 1 (fontified nil)) . 2366) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (2365 . 2366) (t 26236 18021 202275 153000)) nil (26236 18026 553563 110000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2315) (undo-tree-id7914 . -6) (undo-tree-id7915 . -6) (undo-tree-id7916 . -6) (undo-tree-id7917 . -6) (undo-tree-id7918 . -6) (undo-tree-id7919 . -6) (undo-tree-id7920 . -6) (undo-tree-id7921 . -6) (undo-tree-id7922 . -6) (undo-tree-id7923 . -6) (undo-tree-id7924 . -6) (undo-tree-id7925 . -6) (undo-tree-id7926 . -6) (undo-tree-id7927 . -6) (undo-tree-id7928 . -6) (undo-tree-id7929 . -6) (undo-tree-id7930 . -6) (undo-tree-id7931 . -6) (undo-tree-id7932 . -6) (undo-tree-id7933 . -6) (undo-tree-id7934 . -6) (undo-tree-id7935 . -6) (undo-tree-id7936 . -6) (undo-tree-id7937 . -6) (undo-tree-id7938 . -6) (undo-tree-id7939 . -6) (undo-tree-id7940 . -6) (undo-tree-id7941 . -6) (undo-tree-id7942 . -6) (undo-tree-id7943 . -6) (undo-tree-id7944 . -6) (undo-tree-id7945 . -6) (undo-tree-id7946 . -6) (undo-tree-id7947 . -6) (undo-tree-id7948 . -6) (undo-tree-id7949 . -6) 2321 (2314 . 2321) (t 26236 18026 582990 269000)) nil (26236 18029 764649 661000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2000) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) 2001 (2000 . 2001) (t 26236 18029 795411 376000)) nil (26236 18039 681016 566000) 0 nil])
([nil nil ((2003 . 2005) (#(" " 0 1 (fontified nil)) . 2003) (2002 . 2003)) nil (26236 18039 680899 187000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2025) (undo-tree-id8002 . -4) (undo-tree-id8003 . -4) (undo-tree-id8004 . -4) (undo-tree-id8005 . -4) (undo-tree-id8006 . -4) (undo-tree-id8007 . -4) (undo-tree-id8008 . -4) (undo-tree-id8009 . -4) (undo-tree-id8010 . -4) (undo-tree-id8011 . -4) (undo-tree-id8012 . -4) (undo-tree-id8013 . -4) (undo-tree-id8014 . -4) (undo-tree-id8015 . -4) (undo-tree-id8016 . -4) (undo-tree-id8017 . -4) (undo-tree-id8018 . -4) (undo-tree-id8019 . -4) (undo-tree-id8020 . -4) (undo-tree-id8021 . -4) (undo-tree-id8022 . -4) (undo-tree-id8023 . -4) (undo-tree-id8024 . -4) (undo-tree-id8025 . -4) (undo-tree-id8026 . -4) (undo-tree-id8027 . -4) (undo-tree-id8028 . -4) (undo-tree-id8029 . -4) (undo-tree-id8030 . -4) (undo-tree-id8031 . -4) (undo-tree-id8032 . -4) (undo-tree-id8033 . -4) (undo-tree-id8034 . -4) (undo-tree-id8035 . -4) (undo-tree-id8036 . -4) (undo-tree-id8037 . -4) 2029 (2024 . 2029) (t 26236 18039 708685 722000)) nil (26236 18040 789732 26000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1967) (undo-tree-id8038 . -4) (undo-tree-id8039 . -4) (undo-tree-id8040 . -4) (undo-tree-id8041 . -4) (undo-tree-id8042 . -4) (undo-tree-id8043 . -4) (undo-tree-id8044 . -4) (undo-tree-id8045 . -4) (undo-tree-id8046 . -4) (undo-tree-id8047 . -4) (undo-tree-id8048 . -4) (undo-tree-id8049 . -4) (undo-tree-id8050 . -4) (undo-tree-id8051 . -4) (undo-tree-id8052 . -4) (undo-tree-id8053 . -4) (undo-tree-id8054 . -4) (undo-tree-id8055 . -4) (undo-tree-id8056 . -4) (undo-tree-id8057 . -4) (undo-tree-id8058 . -4) (undo-tree-id8059 . -4) (undo-tree-id8060 . -4) (undo-tree-id8061 . -4) (undo-tree-id8062 . -4) (undo-tree-id8063 . -4) (undo-tree-id8064 . -4) (undo-tree-id8065 . -4) (undo-tree-id8066 . -4) (undo-tree-id8067 . -4) (undo-tree-id8068 . -4) (undo-tree-id8069 . -4) (undo-tree-id8070 . -4) (undo-tree-id8071 . -4) (undo-tree-id8072 . -4) (undo-tree-id8073 . -4) (undo-tree-id8074 . -4) 1971 (1966 . 1971) (t 26236 18040 816825 999000)) nil (26236 18042 429133 440000) 0 nil])
([nil nil ((2613 . 2614) (apply yas--snippet-revive 2597 2613 #s(yas--snippet nil (#s(yas--field 1 2602 2606 nil nil nil t #s(yas--field 2 2608 2612 nil nil nil t nil)) #s(yas--field 2 2608 2612 nil nil nil t nil)) nil 25 nil #s(yas--field 2 2608 2612 nil nil nil t nil) nil nil)) (2608 . 2612) (#("ar" 0 2 (fontified nil)) . 2608) (2608 . 2610) (#("argv" 0 4 (fontified nil)) . -2608) (2608 . 2612) (#("ar" 0 1 (fontified t) 1 2 (fontified t)) . -2608) (undo-tree-id8079 . -2) (undo-tree-id8080 . -2) 2610 (2609 . 2610) (#("const char *const *argv" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-type-face fontified nil) 10 12 (fontified nil) 12 17 (face font-lock-keyword-face fontified nil) 17 19 (fontified nil) 19 23 (face font-lock-variable-name-face fontified nil)) . 2609) (2608 . 2609) (2602 . 2606) (#("ar" 0 2 (fontified nil)) . 2602) (2602 . 2604) (#("argc" 0 4 (fontified nil)) . -2602) (2602 . 2606) (#("ar" 0 1 (fontified t) 1 2 (fontified t)) . -2602) (undo-tree-id8081 . -2) (undo-tree-id8082 . -2) 2604 (2603 . 2604) (#("int argc" 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 8 (face font-lock-variable-name-face fontified nil)) . 2603) (2602 . 2603) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2602 2606 nil nil nil t #s(yas--field 2 2608 2612 nil nil nil t nil)) #s(yas--field 2 2608 2612 nil nil nil t nil)) nil 25 nil #s(yas--field 2 2608 2612 nil nil nil t nil) nil nil)) (2597 . 2636) (#("init(${1:int argc}, ${2:const char *const *argv})" 0 49 (fontified nil)) . 2597) (2597 . 2646) (#("i" 0 1 (fontified nil)) . 2597) (2597 . 2598) (#("init(int argc, const char *const *argv, const InitOptions &init_options = InitOptions(), SignalHandlerOptions signal_handler_options = SignalHandlerOptions::All)" 0 161 (fontified nil)) . -2597) (2597 . 2758) (#("in" 0 1 (fontified t) 1 2 (fontified t)) . -2597) (undo-tree-id8083 . -1) (undo-tree-id8084 . -2) (undo-tree-id8085 . -2) 2599 (2598 . 2599) (2597 . 2598) (2587 . 2589) (#(" " 0 1 (fontified nil)) . 2587) (2595 . 2596) (2587 . 2588) (#("  " 0 2 (fontified nil)) . 2587) (2595 . 2596) (2589 . 2595) (#("rclc" 0 4 (fontified nil)) . 2589) (2589 . 2593) (#("rclcpp" 0 6 (fontified nil)) . -2589) (2589 . 2595) (#("rclc" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -2589) (undo-tree-id8086 . -4) (undo-tree-id8087 . -4) 2593 (2589 . 2593) (2587 . 2589) (t 26236 18042 457032 843000)) nil (26236 18075 12896 694000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2616) (undo-tree-id8075 . -2) (undo-tree-id8076 . -2) 2618 (2616 . 2618) (#("  " 0 2 (fontified nil)) . 2615) (undo-tree-id8077 . -2) (undo-tree-id8078 . -2) (2614 . 2618)) nil (26236 18075 12854 56000) 0 nil])
([nil nil ((apply yas--snippet-revive 2636 2662 #s(yas--snippet nil (#s(yas--field 1 2648 2659 nil nil nil t #s(yas--field 2 2661 2661 nil nil nil t nil)) #s(yas--field 2 2661 2661 nil nil nil t nil)) nil 26 nil #s(yas--field 2 2661 2661 nil nil nil t nil) nil nil)) (#("Args &&args..." 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 7 (fontified t) 7 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t)) . 2661) (nil fontified nil 2648 . 2659) (nil face (rainbow-delimiters-depth-3-face) 2648 . 2659) (2648 . 2659) (#("S" 0 1 (fontified nil)) . 2648) (nil fontified nil 2648 . 2649) (nil face (rainbow-delimiters-depth-3-face) 2648 . 2649) (2648 . 2649) (#("ServiceNode" 0 11 (fontified nil)) . -2648) (nil fontified nil 2648 . 2659) (nil face (rainbow-delimiters-depth-3-face) 2648 . 2659) (2648 . 2659) (#("S" 0 1 (fontified t)) . -2648) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) 2649 (#("typename Tp" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-type-face fontified nil)) . 2649) (2648 . 2649) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2648 2659 nil nil nil t #s(yas--field 2 2661 2661 nil nil nil t nil)) #s(yas--field 2 2661 2661 nil nil nil t nil)) nil 26 nil #s(yas--field 2 2661 2661 nil nil nil t nil) nil nil)) (2636 . 2676) (#("make_shared<${1:typename Tp}>(${2:Args &&args...})" 0 50 (fontified nil)) . 2636) (2636 . 2686) (#("make" 0 4 (fontified nil)) . 2636) (2636 . 2640) (#("make_shared<typename Tp>(Args &&args...)" 0 11 (fontified nil) 11 12 (fontified nil category c-<-as-paren-syntax) 12 23 (fontified nil) 23 24 (fontified nil category c->-as-paren-syntax) 24 40 (fontified nil)) . -2636) (2636 . 2676) (#("make" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -2636) (undo-tree-id8108 . -4) (undo-tree-id8109 . -4) 2640 (2636 . 2640) (2634 . 2636) (2631 . 2634) (#("*" 0 1 (fontified t)) . -2631) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) 2632 (2631 . 2632) (2630 . 2632) (2627 . 2630) (#("p" 0 1 (fontified t)) . -2627) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) 2628 (#("e" 0 1 (fontified t)) . -2628) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) 2629 (#("n" 0 1 (fontified t)) . -2629) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) 2630 (2626 . 2630) (2616 . 2618) (#(" " 0 1 (fontified nil)) . 2616) (2624 . 2625) (2616 . 2617) (#("  " 0 2 (fontified nil)) . 2616) (2624 . 2625) (2618 . 2624) (2616 . 2618) (t 26236 18075 42018 856000)) nil (26236 18122 792785 612000) 0 nil])
([nil nil ((2663 . 2664)) nil (26236 18122 792739 589000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2617) (undo-tree-id8101 . -2) (undo-tree-id8102 . -2) 2619 (2617 . 2619) (#("  " 0 2 (fontified nil)) . 2616) (undo-tree-id8103 . -2) (undo-tree-id8104 . -2) (2615 . 2619)) nil (26236 18122 792735 970000) 0 nil])
([nil nil ((2667 . 2669) (2656 . 2667) (#("N" 0 1 (fontified nil)) . 2656) (2656 . 2657) (#("NodeOptions" 0 11 (fontified nil)) . -2656) (2656 . 2667) (#("N" 0 1 (fontified t)) . -2656) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) 2657 (2656 . 2657) (2654 . 2656) (2648 . 2654) (#("r" 0 1 (fontified nil)) . 2648) (2648 . 2649) (#("rclcpp" 0 6 (fontified nil)) . -2648) (2648 . 2654) (#("r" 0 1 (fontified t)) . -2648) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) 2649 (2645 . 2649) (#(" " 0 1 (fontified t)) . -2645) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (#("=" 0 1 (fontified t)) . -2646) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) 2647 (2644 . 2647) (2638 . 2644) (#(" " 0 1 (fontified t)) . -2638) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) 2639 (2637 . 2639) (2626 . 2637) (#("Nod" 0 3 (fontified nil)) . 2626) (2626 . 2629) (#("NodeOptions" 0 11 (fontified nil)) . -2626) (2626 . 2637) (#("Node" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -2626) (undo-tree-id8099 . -4) (undo-tree-id8100 . -4) 2630 (2627 . 2630) (2626 . 2627) (2616 . 2618) (#(" " 0 1 (fontified nil)) . 2616) (2624 . 2625) (2616 . 2617) (#("  " 0 2 (fontified nil)) . 2616) (2624 . 2625) (2618 . 2624) (2616 . 2618)) nil (26236 18122 792714 896000) 0 nil])
([nil nil ((2669 . 2670)) nil (26236 18122 792648 522000) 0 nil])
([nil nil ((2717 . 2724) (#("op" 0 2 (fontified nil)) . 2717) (2717 . 2719) (#("options" 0 7 (fontified nil)) . -2717) (2717 . 2724) (#("op" 0 1 (fontified t) 1 2 (fontified t)) . -2717) (undo-tree-id8120 . -2) (undo-tree-id8121 . -2) (undo-tree-id8122 . -2) (undo-tree-id8123 . -2) (undo-tree-id8124 . -2) (undo-tree-id8125 . -2) (undo-tree-id8126 . -2) (undo-tree-id8127 . -2) (undo-tree-id8128 . -2) (undo-tree-id8129 . -2) (undo-tree-id8130 . -2) (undo-tree-id8131 . -2) (undo-tree-id8132 . -2) (undo-tree-id8133 . -2) (undo-tree-id8134 . -2) (undo-tree-id8135 . -2) (undo-tree-id8136 . -2) (undo-tree-id8137 . -2) (undo-tree-id8138 . -2) (undo-tree-id8139 . -2) (undo-tree-id8140 . -2) (undo-tree-id8141 . -2) (undo-tree-id8142 . -2) (undo-tree-id8143 . -2) (undo-tree-id8144 . -2) (undo-tree-id8145 . -2) (undo-tree-id8146 . -2) (undo-tree-id8147 . -2) (undo-tree-id8148 . -2) (undo-tree-id8149 . -2) (undo-tree-id8150 . -2) (undo-tree-id8151 . -2) (undo-tree-id8152 . -2) (undo-tree-id8153 . -2) (undo-tree-id8154 . -2) (undo-tree-id8155 . -2) (undo-tree-id8156 . -2) (undo-tree-id8157 . -2) (undo-tree-id8158 . -2) (undo-tree-id8159 . -2) (undo-tree-id8160 . -2) (undo-tree-id8161 . -2) (undo-tree-id8162 . -2) (undo-tree-id8163 . -2) (undo-tree-id8164 . -2) (undo-tree-id8165 . -2) (undo-tree-id8166 . -2) 2719 (2717 . 2719) (t 26236 18122 823675 964000)) nil (26236 18134 422554 210000) 0 nil])
([nil nil ((2749 . 2750) (apply yas--snippet-revive 2739 2749 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (2739 . 2749) (#("shutdown()" 0 10 (fontified nil)) . 2739) (2739 . 2749) (#("s" 0 1 (fontified nil)) . 2739) (2739 . 2740) (#("shutdown(rclcpp::Context::SharedPtr context = nullptr, const std::string &reason = \"user called rclcpp::shutdown()\")" 0 116 (fontified nil)) . -2739) (2739 . 2855) (#("sh" 0 1 (fontified t) 1 2 (fontified t)) . -2739) (undo-tree-id8167 . -2) (undo-tree-id8168 . -2) (undo-tree-id8169 . -2) (undo-tree-id8170 . -2) (undo-tree-id8171 . -2) (undo-tree-id8172 . -2) (undo-tree-id8173 . -2) (undo-tree-id8174 . -2) (undo-tree-id8175 . -2) (undo-tree-id8176 . -2) (undo-tree-id8177 . -2) (undo-tree-id8178 . -2) (undo-tree-id8179 . -2) (undo-tree-id8180 . -2) (undo-tree-id8181 . -2) (undo-tree-id8182 . -2) (undo-tree-id8183 . -2) (undo-tree-id8184 . -2) (undo-tree-id8185 . -2) (undo-tree-id8186 . -2) (undo-tree-id8187 . -2) (undo-tree-id8188 . -2) (undo-tree-id8189 . -2) (undo-tree-id8190 . -2) (undo-tree-id8191 . -2) (undo-tree-id8192 . -2) (undo-tree-id8193 . -2) (undo-tree-id8194 . -2) (undo-tree-id8195 . -2) (undo-tree-id8196 . -2) (undo-tree-id8197 . -2) (undo-tree-id8198 . -2) (undo-tree-id8199 . -2) (undo-tree-id8200 . -2) (undo-tree-id8201 . -2) (undo-tree-id8202 . -2) (undo-tree-id8203 . -2) (undo-tree-id8204 . -2) (undo-tree-id8205 . -2) (undo-tree-id8206 . -2) (undo-tree-id8207 . -2) (undo-tree-id8208 . -2) (undo-tree-id8209 . -2) (undo-tree-id8210 . -2) 2741 (2739 . 2741) (2729 . 2731) (#(" " 0 1 (fontified nil)) . 2729) (2737 . 2738) (2729 . 2730) (#("  " 0 2 (fontified nil)) . 2729) (2737 . 2738) (2731 . 2737) (#("rcl" 0 3 (fontified nil)) . 2731) (2731 . 2734) (#("rclcpp" 0 6 (fontified nil)) . -2731) (2731 . 2737) (#("rcl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2731) (undo-tree-id8211 . -3) (undo-tree-id8212 . -3) 2734 (2731 . 2734) (2729 . 2731) (#("  " 0 2 (fontified nil)) . 2728) (undo-tree-id8213 . -2) (undo-tree-id8214 . -2) (2727 . 2731) (t 26236 18134 452963 528000)) nil (26236 18139 835828 28000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -2283) (undo-tree-id9000 . -1) (undo-tree-id9001 . -1) 2284 (2283 . 2284) (#("." 0 1 (fontified t)) . -2283) (undo-tree-id9002 . -1) (undo-tree-id9003 . -1) 2284 (2283 . 2284) (t 26236 18139 863864 293000)) nil (26236 18270 301225 448000) 0 nil])
([nil nil ((#("future.get()" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) fontified t) 11 12 (face (rainbow-delimiters-depth-5-face) fontified t)) . 2271) (undo-tree-id8988 . -11) (undo-tree-id8989 . -11) (undo-tree-id8990 . -12) (undo-tree-id8991 . -11) (undo-tree-id8992 . -12) (undo-tree-id8993 . -12) (undo-tree-id8994 . -12) (undo-tree-id8995 . -12) (undo-tree-id8996 . -12) (undo-tree-id8997 . -1) (undo-tree-id8998 . -11) (undo-tree-id8999 . -11) 2282) nil (26236 18270 301212 783000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -2275) (undo-tree-id8932 . -1) (undo-tree-id8933 . -1) (undo-tree-id8934 . -1) (undo-tree-id8935 . -1) (undo-tree-id8936 . -1) (undo-tree-id8937 . -1) (undo-tree-id8938 . -1) (undo-tree-id8939 . -1) (undo-tree-id8940 . -1) (undo-tree-id8941 . -1) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (#("	" 0 1 (fontified nil)) . 2276) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (2268 . 2276) 2269 (#(" " 0 1 (fontified t)) . -2269) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (undo-tree-id8967 . -1) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (undo-tree-id8973 . -1) (#(" " 0 1 (fontified t)) . -2270) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) (undo-tree-id8979 . -1) (undo-tree-id8980 . -1) (undo-tree-id8981 . -1) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) 2271) nil (26236 18270 301187 347000) 0 nil])
([nil nil ((#("	       " 0 1 (fontified t) 1 8 (fontified t)) . 2267) (undo-tree-id8918 . 1) (undo-tree-id8919 . -7) (undo-tree-id8920 . -8) (undo-tree-id8921 . -8) (undo-tree-id8922 . -8) (undo-tree-id8923 . -8) (undo-tree-id8924 . -8) (undo-tree-id8925 . -8) (undo-tree-id8926 . -8) (undo-tree-id8927 . -8) (undo-tree-id8928 . -8) (undo-tree-id8929 . -8) (undo-tree-id8930 . -7) (undo-tree-id8931 . -8)) nil (26236 18270 301098 555000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2266) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) 2267) nil (26236 18270 301070 707000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2265) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1)) nil (26236 18270 300958 522000) 0 nil])
([nil nil ((#("Result " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8756 . -6) (undo-tree-id8757 . -7)) nil (26236 18270 300807 866000) 0 nil])
([nil nil ((#("From " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8754 . -4) (undo-tree-id8755 . -5)) nil (26236 18270 300802 988000) 0 nil])
([nil nil ((#("Service " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8752 . -7) (undo-tree-id8753 . -8)) nil (26236 18270 300797 730000) 0 nil])
([nil nil ((#("Success" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8750 . -6) (undo-tree-id8751 . -7)) nil (26236 18270 300792 561000) 0 nil])
([nil nil ((#(": " 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8748 . -1) (undo-tree-id8749 . -2)) nil (26236 18270 300787 257000) 0 nil])
([nil nil ((#("%" 0 1 (face font-lock-string-face fontified t)) . 2206) (undo-tree-id8747 . -1)) nil (26236 18270 300780 315000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 2205) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) (undo-tree-id8611 . -1) (undo-tree-id8612 . -1) (undo-tree-id8613 . -1) (undo-tree-id8614 . -1) (undo-tree-id8615 . -1) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (undo-tree-id8681 . -1) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) (undo-tree-id8691 . -1) (undo-tree-id8692 . -1) (undo-tree-id8693 . -1) (undo-tree-id8694 . -1) (undo-tree-id8695 . -1) (undo-tree-id8696 . -1) (undo-tree-id8697 . -1) (undo-tree-id8698 . -1) (undo-tree-id8699 . -1) (undo-tree-id8700 . -1) (undo-tree-id8701 . -1) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) (undo-tree-id8742 . -1) (undo-tree-id8743 . -1) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -1)) nil (26236 18270 300757 247000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . 2205) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1)) nil (26236 18270 300424 112000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . 2204) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1)) nil (26236 18270 300385 488000) 0 nil])
([nil nil ((nil rear-nonsticky nil 530 . 531) (#("
" 0 1 (fontified nil)) . -584) (530 . 585) 477 (t 26236 18270 329475 418000)) nil (26236 19933 818872 332000) 0 nil])
([nil nil ((#("lifetalker" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t)) . 559) (undo-tree-id9004 . -9) (undo-tree-id9005 . -10)) nil (26236 19933 818864 24000) 0 nil])
([nil nil ((559 . 565)) nil (26236 19933 818835 438000) 0 nil])
([nil nil ((543 . 551) (t 26236 19933 876164 330000)) nil (26236 19943 269299 459000) 0 nil])
([nil nil ((#("anotehr" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 7 (face font-lock-variable-name-face fontified t)) . 543) (undo-tree-id9006 . -6) (undo-tree-id9007 . -5) (undo-tree-id9008 . -5) (undo-tree-id9009 . -5) (undo-tree-id9010 . -5) (undo-tree-id9011 . -5) (undo-tree-id9012 . -7) (undo-tree-id9013 . -7) (undo-tree-id9014 . -7) (undo-tree-id9015 . -7) (undo-tree-id9016 . -7) (undo-tree-id9017 . -7) (undo-tree-id9018 . -7) (undo-tree-id9019 . -7) (undo-tree-id9020 . -7) (undo-tree-id9021 . -7) (undo-tree-id9022 . -7) (undo-tree-id9023 . -7) (undo-tree-id9024 . -7) (undo-tree-id9025 . -7) (undo-tree-id9026 . -7) (undo-tree-id9027 . -7) (undo-tree-id9028 . -7) (undo-tree-id9029 . -7) (undo-tree-id9030 . -7) (undo-tree-id9031 . -7) (undo-tree-id9032 . -7) (undo-tree-id9033 . -7) (undo-tree-id9034 . -7) (undo-tree-id9035 . -7) (undo-tree-id9036 . -7) (undo-tree-id9037 . -7) (undo-tree-id9038 . -7) (undo-tree-id9039 . -7) (undo-tree-id9040 . -7) (undo-tree-id9041 . -7) (undo-tree-id9042 . -7) (undo-tree-id9043 . -7) (undo-tree-id9044 . -7) (undo-tree-id9045 . -7) (undo-tree-id9046 . -7) (undo-tree-id9047 . -7) (undo-tree-id9048 . -7) (undo-tree-id9049 . -7) (undo-tree-id9050 . -7) (undo-tree-id9051 . -7) (undo-tree-id9052 . -7) (undo-tree-id9053 . -7) (undo-tree-id9054 . -7) (undo-tree-id9055 . -7) (undo-tree-id9056 . -7) (undo-tree-id9057 . -7) (undo-tree-id9058 . -7) (undo-tree-id9059 . -7) (undo-tree-id9060 . -7) (undo-tree-id9061 . -7) (undo-tree-id9062 . -7) (undo-tree-id9063 . -7) (undo-tree-id9064 . -7) (undo-tree-id9065 . -7)) nil (26236 19943 269289 264000) 0 nil])
([nil nil ((543 . 550)) nil (26236 19943 269157 179000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2492 . 2493) (#("
" 0 1 (fontified nil)) . -2560) (2490 . 2561) 2439 (t 26236 19943 300437 446000)) nil (26236 19956 707772 504000) 0 nil])
([nil nil ((2553 . 2561)) nil (26236 19956 707758 762000) 0 nil])
([nil nil ((nil rear-nonsticky nil 815 . 816) (#("
" 0 1 (fontified nil)) . -893) (811 . 894) 799 (t 26236 19956 764826 686000)) nil (26236 19993 724844 761000) 0 nil])
([nil nil ((816 . 830) (#("an" 0 2 (fontified nil)) . 816) (816 . 818) (#("another_client" 0 14 (fontified nil)) . -816) (816 . 830) (#("another" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -816) (undo-tree-id9071 . -2) (undo-tree-id9072 . -7) (undo-tree-id9073 . -7) (undo-tree-id9074 . -7) (undo-tree-id9075 . -7) (undo-tree-id9076 . -7) (undo-tree-id9077 . -7) (undo-tree-id9078 . -7) (undo-tree-id9079 . -7) (undo-tree-id9080 . -7) (undo-tree-id9081 . -7) (undo-tree-id9082 . -7) (undo-tree-id9083 . -7) (undo-tree-id9084 . -7) (undo-tree-id9085 . -7) (undo-tree-id9086 . -7) (undo-tree-id9087 . -7) (undo-tree-id9088 . -7) (undo-tree-id9089 . -7) (undo-tree-id9090 . -7) (undo-tree-id9091 . -7) (undo-tree-id9092 . -7) (undo-tree-id9093 . -7) (undo-tree-id9094 . -7) (undo-tree-id9095 . -7) (undo-tree-id9096 . -7) (undo-tree-id9097 . -7) (undo-tree-id9098 . -7) (undo-tree-id9099 . -7) (undo-tree-id9100 . -7) (undo-tree-id9101 . -7) (undo-tree-id9102 . -7) (undo-tree-id9103 . -7) (undo-tree-id9104 . -7) (undo-tree-id9105 . -7) 823 (816 . 823)) nil (26236 19993 724834 448000) 0 nil])
([nil nil ((#("client " 0 6 (fontified t) 6 7 (fontified t)) . 830) (undo-tree-id9066 . 7) (undo-tree-id9067 . -6) (undo-tree-id9068 . -6) (undo-tree-id9069 . -6) (undo-tree-id9070 . -7)) nil (26236 19993 724755 823000) 0 nil])
([nil nil ((830 . 831) (t 26236 19993 757891 118000)) nil (26236 19995 195803 387000) 0 nil])
([nil nil ((#("service" 0 7 (fontified t)) . 887) (undo-tree-id9290 . -6) (t 26236 19995 237933 571000)) nil (26236 20004 314559 479000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 887)) nil (26236 20004 314555 41000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . 887) (undo-tree-id9288 . -3) (undo-tree-id9289 . -4)) nil (26236 20004 314551 492000) 0 nil])
([nil nil ((887 . 907) (#("ano" 0 3 (fontified nil)) . 887) (887 . 890) (#("another_service_name" 0 20 (fontified nil)) . -887) (887 . 907) (#("ano" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -887) (undo-tree-id9106 . -3) (undo-tree-id9107 . -3) (undo-tree-id9108 . -3) (undo-tree-id9109 . -3) (undo-tree-id9110 . -3) (undo-tree-id9111 . -3) (undo-tree-id9112 . -3) (undo-tree-id9113 . -3) (undo-tree-id9114 . -3) (undo-tree-id9115 . -3) (undo-tree-id9116 . -3) (undo-tree-id9117 . -3) (undo-tree-id9118 . -3) (undo-tree-id9119 . -3) (undo-tree-id9120 . -3) (undo-tree-id9121 . -3) (undo-tree-id9122 . -3) (undo-tree-id9123 . -3) (undo-tree-id9124 . -3) (undo-tree-id9125 . -3) (undo-tree-id9126 . -3) (undo-tree-id9127 . -3) (undo-tree-id9128 . -3) (undo-tree-id9129 . -3) (undo-tree-id9130 . -3) (undo-tree-id9131 . -3) (undo-tree-id9132 . -3) (undo-tree-id9133 . -3) (undo-tree-id9134 . -3) (undo-tree-id9135 . -3) (undo-tree-id9136 . -3) (undo-tree-id9137 . -3) (undo-tree-id9138 . -3) (undo-tree-id9139 . -3) (undo-tree-id9140 . -3) (undo-tree-id9141 . -3) (undo-tree-id9142 . -3) (undo-tree-id9143 . -3) (undo-tree-id9144 . -3) (undo-tree-id9145 . -3) (undo-tree-id9146 . -3) (undo-tree-id9147 . -3) (undo-tree-id9148 . -3) (undo-tree-id9149 . -3) (undo-tree-id9150 . -3) (undo-tree-id9151 . -3) (undo-tree-id9152 . -3) (undo-tree-id9153 . -3) (undo-tree-id9154 . -3) (undo-tree-id9155 . -3) (undo-tree-id9156 . -3) (undo-tree-id9157 . -3) (undo-tree-id9158 . -3) (undo-tree-id9159 . -3) (undo-tree-id9160 . -3) (undo-tree-id9161 . -3) (undo-tree-id9162 . -3) (undo-tree-id9163 . -3) (undo-tree-id9164 . -3) (undo-tree-id9165 . -3) (undo-tree-id9166 . -3) (undo-tree-id9167 . -3) (undo-tree-id9168 . -3) (undo-tree-id9169 . -3) (undo-tree-id9170 . -3) (undo-tree-id9171 . -3) (undo-tree-id9172 . -3) (undo-tree-id9173 . -3) (undo-tree-id9174 . -3) (undo-tree-id9175 . -3) (undo-tree-id9176 . -3) (undo-tree-id9177 . -3) (undo-tree-id9178 . -3) (undo-tree-id9179 . -3) (undo-tree-id9180 . -3) (undo-tree-id9181 . -3) (undo-tree-id9182 . -3) (undo-tree-id9183 . -3) (undo-tree-id9184 . -3) (undo-tree-id9185 . -3) (undo-tree-id9186 . -3) (undo-tree-id9187 . -3) (undo-tree-id9188 . -3) (undo-tree-id9189 . -3) (undo-tree-id9190 . -3) (undo-tree-id9191 . -3) (undo-tree-id9192 . -3) (undo-tree-id9193 . -3) (undo-tree-id9194 . -3) (undo-tree-id9195 . -3) (undo-tree-id9196 . -3) (undo-tree-id9197 . -3) (undo-tree-id9198 . -3) (undo-tree-id9199 . -3) (undo-tree-id9200 . -3) (undo-tree-id9201 . -3) (undo-tree-id9202 . -3) (undo-tree-id9203 . -3) (undo-tree-id9204 . -3) (undo-tree-id9205 . -3) (undo-tree-id9206 . -3) (undo-tree-id9207 . -3) (undo-tree-id9208 . -3) (undo-tree-id9209 . -3) (undo-tree-id9210 . -3) (undo-tree-id9211 . -3) (undo-tree-id9212 . -3) (undo-tree-id9213 . -3) (undo-tree-id9214 . -3) (undo-tree-id9215 . -3) (undo-tree-id9216 . -3) (undo-tree-id9217 . -3) (undo-tree-id9218 . -3) (undo-tree-id9219 . -3) (undo-tree-id9220 . -3) (undo-tree-id9221 . -3) (undo-tree-id9222 . -3) (undo-tree-id9223 . -3) (undo-tree-id9224 . -3) (undo-tree-id9225 . -3) (undo-tree-id9226 . -3) (undo-tree-id9227 . -3) (undo-tree-id9228 . -3) (undo-tree-id9229 . -3) (undo-tree-id9230 . -3) (undo-tree-id9231 . -3) (undo-tree-id9232 . -3) (undo-tree-id9233 . -3) (undo-tree-id9234 . -3) (undo-tree-id9235 . -3) (undo-tree-id9236 . -3) (undo-tree-id9237 . -3) (undo-tree-id9238 . -3) (undo-tree-id9239 . -3) (undo-tree-id9240 . -3) (undo-tree-id9241 . -3) (undo-tree-id9242 . -3) (undo-tree-id9243 . -3) (undo-tree-id9244 . -3) (undo-tree-id9245 . -3) (undo-tree-id9246 . -3) (undo-tree-id9247 . -3) (undo-tree-id9248 . -3) (undo-tree-id9249 . -3) (undo-tree-id9250 . -3) (undo-tree-id9251 . -3) (undo-tree-id9252 . -3) (undo-tree-id9253 . -3) (undo-tree-id9254 . -3) (undo-tree-id9255 . -3) (undo-tree-id9256 . -3) (undo-tree-id9257 . -3) (undo-tree-id9258 . -3) (undo-tree-id9259 . -3) (undo-tree-id9260 . -3) (undo-tree-id9261 . -3) (undo-tree-id9262 . -3) (undo-tree-id9263 . -3) (undo-tree-id9264 . -3) (undo-tree-id9265 . -3) (undo-tree-id9266 . -3) (undo-tree-id9267 . -3) (undo-tree-id9268 . -3) (undo-tree-id9269 . -3) (undo-tree-id9270 . -3) (undo-tree-id9271 . -3) (undo-tree-id9272 . -3) (undo-tree-id9273 . -3) (undo-tree-id9274 . -3) (undo-tree-id9275 . -3) (undo-tree-id9276 . -3) (undo-tree-id9277 . -3) (undo-tree-id9278 . -3) (undo-tree-id9279 . -3) (undo-tree-id9280 . -3) (undo-tree-id9281 . -3) (undo-tree-id9282 . -3) (undo-tree-id9283 . -3) (undo-tree-id9284 . -3) (undo-tree-id9285 . -3) (undo-tree-id9286 . -3) (undo-tree-id9287 . -3) 890 (887 . 890)) nil (26236 20004 314521 528000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2021) (undo-tree-id9291 . -4) (undo-tree-id9292 . -4) 2025 (2021 . 2025) (#("    " 0 4 (fontified nil)) . 2020) (undo-tree-id9293 . -4) (undo-tree-id9294 . -4) (2019 . 2025) (t 26236 20004 346194 635000)) nil (26236 20044 471132 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2195 . 2196) (nil fontified nil 2021 . 2196) (2021 . 2196)) nil (26236 20044 471104 227000) 0 nil])
([nil nil ((2030 . 2038)) nil (26236 20044 471099 511000) 0 nil])
([nil nil ((2055 . 2063)) nil (26236 21145 182963 573000) 0 nil])
([nil nil ((2516 . 2518) (2512 . 2516) (2506 . 2512) (#("fu" 0 2 (fontified nil)) . 2506) (2506 . 2508) (#("future" 0 6 (fontified nil)) . -2506) (2506 . 2512) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -2506) (undo-tree-id12925 . -2) (undo-tree-id12926 . -2) 2508 (2505 . 2508) (#("=" 0 1 (fontified t)) . -2505) (undo-tree-id12927 . -1) (undo-tree-id12928 . -1) (#(" " 0 1 (fontified t)) . -2506) (undo-tree-id12929 . -1) (undo-tree-id12930 . -1) (#("f" 0 1 (fontified t)) . -2507) (undo-tree-id12931 . -1) (undo-tree-id12932 . -1) (#("u" 0 1 (fontified t)) . -2508) (undo-tree-id12933 . -1) (undo-tree-id12934 . -1) 2509 (2499 . 2509) (2493 . 2499) (#("      " 0 6 (fontified nil)) . 2492) (undo-tree-id12935 . -6) (undo-tree-id12936 . -6) (2491 . 2499) (t 26236 21146 612276 232000)) nil (26236 21174 72992 595000) 0 nil] [nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -2553) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) 2554 (2553 . 2554) (t 26236 20044 505541 813000)) ((#(" " 0 1 (face font-lock-string-face fontified nil)) . 2553) (2553 . 2554)) (26236 21144 428180 425000) 0 nil])
([nil nil ((2518 . 2519)) nil (26236 21174 72810 429000) 0 nil])
([nil nil ((2535 . 2537)) ((#("[]" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 2535) (undo-tree-id12789 . -2) (undo-tree-id12790 . -2) (undo-tree-id12791 . -1) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) (undo-tree-id12806 . -1) (undo-tree-id12807 . -1) (undo-tree-id12808 . -1) (undo-tree-id12809 . -1) (undo-tree-id12810 . -1) (undo-tree-id12811 . -1) (undo-tree-id12812 . -1) (undo-tree-id12813 . -1) (undo-tree-id12814 . -1) (undo-tree-id12815 . -1) (undo-tree-id12816 . -1) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) (undo-tree-id12819 . -1) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) (undo-tree-id12826 . -1) (undo-tree-id12827 . -1) (undo-tree-id12828 . -1) (undo-tree-id12829 . -1) (undo-tree-id12830 . -1) (undo-tree-id12831 . -1) (undo-tree-id12832 . -1) (undo-tree-id12833 . -1) (undo-tree-id12834 . -2) (undo-tree-id12835 . -2) (undo-tree-id12836 . -2) (undo-tree-id12837 . -2) (undo-tree-id12838 . -2) (undo-tree-id12839 . -2) (undo-tree-id12840 . -2) (undo-tree-id12841 . -2) (undo-tree-id12842 . -2) (undo-tree-id12843 . -2) (undo-tree-id12844 . -2) (undo-tree-id12845 . -2) (undo-tree-id12846 . -2) (undo-tree-id12847 . -2) (undo-tree-id12848 . -2) (undo-tree-id12849 . -2) (undo-tree-id12850 . -2) (undo-tree-id12851 . -2) (undo-tree-id12852 . -2) (undo-tree-id12853 . -2) (undo-tree-id12854 . -2) (undo-tree-id12855 . -2) (undo-tree-id12856 . -2) (undo-tree-id12857 . -2) (undo-tree-id12858 . -2) (undo-tree-id12859 . -2) (undo-tree-id12860 . -2) (undo-tree-id12861 . -2) (undo-tree-id12862 . -2) (undo-tree-id12863 . -2) (undo-tree-id12864 . -2) (undo-tree-id12865 . -2) (undo-tree-id12866 . -2) (undo-tree-id12867 . -2) (undo-tree-id12868 . -2) (undo-tree-id12869 . -2) (undo-tree-id12870 . -2) (undo-tree-id12871 . -2) (undo-tree-id12872 . -2) (undo-tree-id12873 . -2) (undo-tree-id12874 . -2) (undo-tree-id12875 . -2) (undo-tree-id12876 . -2) (undo-tree-id12877 . -2) (undo-tree-id12878 . -2) (undo-tree-id12879 . -2) (undo-tree-id12880 . -2) (undo-tree-id12881 . -2) (undo-tree-id12882 . -2) (undo-tree-id12883 . -2) (undo-tree-id12884 . -2) (undo-tree-id12885 . -2) (undo-tree-id12886 . -2) (undo-tree-id12887 . -2) (undo-tree-id12888 . -2) (undo-tree-id12889 . -2) (undo-tree-id12890 . -2) (undo-tree-id12891 . -2) (undo-tree-id12892 . -2) (undo-tree-id12893 . -2) (undo-tree-id12894 . -2) (undo-tree-id12895 . -2) (undo-tree-id12896 . -2) (undo-tree-id12897 . -2) (undo-tree-id12898 . -2) (undo-tree-id12899 . -2) (undo-tree-id12900 . -2) (undo-tree-id12901 . -2) (undo-tree-id12902 . -2) (undo-tree-id12903 . -2) (undo-tree-id12904 . -2) (undo-tree-id12905 . -2) (undo-tree-id12906 . -2) (undo-tree-id12907 . -2) (undo-tree-id12908 . -2) (undo-tree-id12909 . -2) (undo-tree-id12910 . -2) (undo-tree-id12911 . -2) (undo-tree-id12912 . -2) (undo-tree-id12913 . -2) (undo-tree-id12914 . -2) (undo-tree-id12915 . -2) (undo-tree-id12916 . -2) (undo-tree-id12917 . -2) (undo-tree-id12918 . -2) (undo-tree-id12919 . -2) (undo-tree-id12920 . -2) (undo-tree-id12921 . -2)) (26236 21143 801520 549000) 0 nil])
([nil nil ((#("future" 0 2 (fontified t) 2 6 (fontified t)) . 2588) (undo-tree-id12924 . -5)) nil (26236 21174 72808 274000) 0 nil])
([nil nil ((2537 . 2538)) ((#(" " 0 1 (face font-lock-string-face fontified t)) . 2537)) (26236 21143 518847 823000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2588)) nil (26236 21174 72803 295000) 0 nil])
([nil nil ((2544 . 2547) (2543 . 2544) (2536 . 2543) (#("N" 0 1 (face font-lock-string-face fontified t)) . -2536) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -2537) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (#("D" 0 1 (face font-lock-string-face fontified t)) . -2538) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -2539) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) 2540 (2536 . 2540)) ((#("NODE" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil) 3 4 (face font-lock-string-face fontified nil)) . 2536) (2536 . 2540) (#("Service" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil) 3 4 (face font-lock-string-face fontified nil) 4 5 (face font-lock-string-face fontified nil) 5 6 (face font-lock-string-face fontified nil) 6 7 (face font-lock-string-face fontified nil)) . 2536) (#(":" 0 1 (face font-lock-string-face fontified nil)) . 2543) (#(" %s" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . 2544)) (26236 21143 250148 537000) 0 nil])
([nil nil ((#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2588) (undo-tree-id12923 . -2)) nil (26236 21174 72800 523000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -2581) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (#("e" 0 1 (fontified t)) . -2582) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) 2583 (2574 . 2583) (2569 . 2574)) ((#("
		  " 0 1 (fontified nil) 1 5 (fontified nil)) . 2569) (undo-tree-id12782 . -5) (undo-tree-id12783 . -5) (undo-tree-id12784 . -1) (undo-tree-id12785 . -5) (#("future.ge" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 2574) (undo-tree-id12786 . -6) (undo-tree-id12787 . -6) (undo-tree-id12788 . -6) (2581 . 2583)) (26236 21142 828390 275000) 0 nil])
([nil nil ((#("()->" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2588) (undo-tree-id12922 . -3)) nil (26236 21174 72793 784000) 0 nil])
([nil nil ((#("		  future.
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 2570) (undo-tree-id9330 . 1) (undo-tree-id9331 . -11) (undo-tree-id9332 . -8) (undo-tree-id9333 . -11) (undo-tree-id9334 . -10) 2580) ((2570 . 2582)) (26236 21142 185467 670000) 0 nil])
([nil nil ((2593 . 2594) (2588 . 2593)) nil (26236 21174 72766 965000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2492) (undo-tree-id9328 . -6) (undo-tree-id9329 . -6) 2498 (2491 . 2498)) ((#("
      " 0 1 (fontified t) 1 7 (fontified nil)) . 2491) (undo-tree-id12648 . -7) (undo-tree-id12649 . -7) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1) (undo-tree-id12661 . -1) (undo-tree-id12662 . -1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1) (undo-tree-id12678 . -1) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) (undo-tree-id12692 . -1) (undo-tree-id12693 . -1) (undo-tree-id12694 . -1) (undo-tree-id12695 . -1) (undo-tree-id12696 . -1) (undo-tree-id12697 . -1) (undo-tree-id12698 . -1) (undo-tree-id12699 . -1) (undo-tree-id12700 . -1) (undo-tree-id12701 . -1) (undo-tree-id12702 . -1) (undo-tree-id12703 . -1) (undo-tree-id12704 . -1) (undo-tree-id12705 . -1) (undo-tree-id12706 . -1) (undo-tree-id12707 . -1) (undo-tree-id12708 . -1) (undo-tree-id12709 . -1) (undo-tree-id12710 . -1) (undo-tree-id12711 . -1) (undo-tree-id12712 . -1) (undo-tree-id12713 . -1) (undo-tree-id12714 . -1) (undo-tree-id12715 . -1) (undo-tree-id12716 . -1) (undo-tree-id12717 . -1) (undo-tree-id12718 . -1) (undo-tree-id12719 . -1) (undo-tree-id12720 . -1) (undo-tree-id12721 . -1) (undo-tree-id12722 . -1) (undo-tree-id12723 . -1) (undo-tree-id12724 . -1) (undo-tree-id12725 . -1) (undo-tree-id12726 . -1) (undo-tree-id12727 . -1) (undo-tree-id12728 . -1) (undo-tree-id12729 . -1) (undo-tree-id12730 . -1) (undo-tree-id12731 . -1) (undo-tree-id12732 . -1) (undo-tree-id12733 . -1) (undo-tree-id12734 . -1) (undo-tree-id12735 . -1) (undo-tree-id12736 . -1) (undo-tree-id12737 . -1) (undo-tree-id12738 . -1) (undo-tree-id12739 . -1) (undo-tree-id12740 . -1) (undo-tree-id12741 . -1) (undo-tree-id12742 . -1) (undo-tree-id12743 . -1) (undo-tree-id12744 . -1) (undo-tree-id12745 . -1) (undo-tree-id12746 . -1) (undo-tree-id12747 . -1) (undo-tree-id12748 . -1) (undo-tree-id12749 . -1) (undo-tree-id12750 . -1) (undo-tree-id12751 . -1) (undo-tree-id12752 . -1) (undo-tree-id12753 . -1) (undo-tree-id12754 . -1) (undo-tree-id12755 . -1) (undo-tree-id12756 . -1) (undo-tree-id12757 . -1) (undo-tree-id12758 . -1) (undo-tree-id12759 . -1) (undo-tree-id12760 . -1) (undo-tree-id12761 . -1) (undo-tree-id12762 . -1) (undo-tree-id12763 . -1) (undo-tree-id12764 . -1) (undo-tree-id12765 . -1) (undo-tree-id12766 . -1) (undo-tree-id12767 . -1) (undo-tree-id12768 . -1) (undo-tree-id12769 . -1) (undo-tree-id12770 . -1) (undo-tree-id12771 . -1) (undo-tree-id12772 . -1) (undo-tree-id12773 . -1) (undo-tree-id12774 . -1) (undo-tree-id12775 . -1) (undo-tree-id12776 . -1) (undo-tree-id12777 . -1) (undo-tree-id12778 . -1) (undo-tree-id12779 . -1) (undo-tree-id12780 . -1) (undo-tree-id12781 . -1) (2492 . 2498)) (26236 21141 713180 547000) 0 nil])
([nil nil ((2499 . 2504) (t 26236 21174 135421 366000)) nil (26236 21189 283743 667000) 0 nil])
([nil nil ((2492 . 2498)) ((#("      " 0 5 (fontified t) 5 6 (fontified t)) . 2492) (undo-tree-id12558 . -5) (undo-tree-id12559 . -5) (undo-tree-id12560 . -5) (undo-tree-id12561 . -5) (undo-tree-id12562 . -5) (undo-tree-id12563 . -5) (undo-tree-id12564 . -5) (undo-tree-id12565 . -5) (undo-tree-id12566 . -5) (undo-tree-id12567 . -5) (undo-tree-id12568 . -5) (undo-tree-id12569 . -5) (undo-tree-id12570 . -5) (undo-tree-id12571 . -5) (undo-tree-id12572 . -5) (undo-tree-id12573 . -5) (undo-tree-id12574 . -5) (undo-tree-id12575 . -5) (undo-tree-id12576 . -5) (undo-tree-id12577 . -5) (undo-tree-id12578 . -5) (undo-tree-id12579 . -5) (undo-tree-id12580 . -5) (undo-tree-id12581 . -5) (undo-tree-id12582 . -5) (undo-tree-id12583 . -5) (undo-tree-id12584 . -5) (undo-tree-id12585 . -5) (undo-tree-id12586 . -5) (undo-tree-id12587 . -5) (undo-tree-id12588 . -5) (undo-tree-id12589 . -5) (undo-tree-id12590 . -5) (undo-tree-id12591 . -5) (undo-tree-id12592 . -5) (undo-tree-id12593 . -5) (undo-tree-id12594 . -5) (undo-tree-id12595 . -5) (undo-tree-id12596 . -5) (undo-tree-id12597 . -5) (undo-tree-id12598 . -5) (undo-tree-id12599 . -5) (undo-tree-id12600 . -5) (undo-tree-id12601 . -5) (undo-tree-id12602 . -5) (undo-tree-id12603 . -5) (undo-tree-id12604 . -5) (undo-tree-id12605 . -5) (undo-tree-id12606 . -5) (undo-tree-id12607 . -5) (undo-tree-id12608 . -5) (undo-tree-id12609 . -5) (undo-tree-id12610 . -5) (undo-tree-id12611 . -5) (undo-tree-id12612 . -5) (undo-tree-id12613 . -5) (undo-tree-id12614 . -5) (undo-tree-id12615 . -5) (undo-tree-id12616 . -5) (undo-tree-id12617 . -5) (undo-tree-id12618 . -5) (undo-tree-id12619 . -5) (undo-tree-id12620 . -5) (undo-tree-id12621 . -5) (undo-tree-id12622 . -5) (undo-tree-id12623 . -5) (undo-tree-id12624 . -5) (undo-tree-id12625 . -5) (undo-tree-id12626 . -5) (undo-tree-id12627 . -5) (undo-tree-id12628 . -5) (undo-tree-id12629 . -5) (undo-tree-id12630 . -5) (undo-tree-id12631 . -5) (undo-tree-id12632 . -5) (undo-tree-id12633 . -5) (undo-tree-id12634 . -5) (undo-tree-id12635 . -5) (undo-tree-id12636 . -5) (undo-tree-id12637 . -5) (undo-tree-id12638 . -5) (undo-tree-id12639 . -5) (undo-tree-id12640 . -5) (undo-tree-id12641 . -5) (undo-tree-id12642 . -5) (undo-tree-id12643 . -5) (undo-tree-id12644 . -5) (undo-tree-id12645 . -5) (undo-tree-id12646 . -5) (undo-tree-id12647 . -5)) (26236 21139 28819 936000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2319) (undo-tree-id12937 . -1) (undo-tree-id12938 . -1) (undo-tree-id12939 . -1) (undo-tree-id12940 . -1) (undo-tree-id12941 . -1) (undo-tree-id12942 . -1) (undo-tree-id12943 . -1) (undo-tree-id12944 . -1) (undo-tree-id12945 . -1) (undo-tree-id12946 . -1) (undo-tree-id12947 . -1) (undo-tree-id12948 . -1) (undo-tree-id12949 . -1) (undo-tree-id12950 . -1) (undo-tree-id12951 . -1) (undo-tree-id12952 . -1) (undo-tree-id12953 . -1) (undo-tree-id12954 . -1) (undo-tree-id12955 . -1) (undo-tree-id12956 . -1) (undo-tree-id12957 . -1) (undo-tree-id12958 . -1) (undo-tree-id12959 . -1) (undo-tree-id12960 . -1) (undo-tree-id12961 . -1) (undo-tree-id12962 . -1) (undo-tree-id12963 . -1) (undo-tree-id12964 . -1) (undo-tree-id12965 . -1) (undo-tree-id12966 . -1) (undo-tree-id12967 . -1) (undo-tree-id12968 . -1) (undo-tree-id12969 . -1) (undo-tree-id12970 . -1) (undo-tree-id12971 . -1) (undo-tree-id12972 . -1) (undo-tree-id12973 . -1) (undo-tree-id12974 . -1) (undo-tree-id12975 . -1) (undo-tree-id12976 . -1) (undo-tree-id12977 . -1) (undo-tree-id12978 . -1) (undo-tree-id12979 . -1) (undo-tree-id12980 . -1) (undo-tree-id12981 . -1) (undo-tree-id12982 . -1) 2320 (2319 . 2320) (2313 . 2319) (2312 . 2313) (t 26236 21189 345566 951000)) nil (26236 21207 430707 209000) 0 nil])
([nil nil ((2494 . 2500) (#("      " 0 6 (fontified nil)) . 2493) (undo-tree-id9322 . -6) (2493 . 2500) (#("      " 0 6 (fontified nil)) . 2492) (undo-tree-id9323 . -6) (undo-tree-id9324 . -6) (2498 . 2499) (2492 . 2498) (#("     " 0 5 (fontified nil)) . -2492) (undo-tree-id9325 . -5) (undo-tree-id9326 . -5) (#(" " 0 1 (fontified t)) . 2497) (undo-tree-id9327 . -1)) ((2492 . 2498) (#("      " 0 6 (fontified nil)) . 2492) (undo-tree-id12549 . -6) (undo-tree-id12550 . -6) (undo-tree-id12551 . -6) (undo-tree-id12552 . -6) (#("
" 0 1 (fontified nil)) . 2498) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (2492 . 2498) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 2493) (undo-tree-id12557 . -6) (2493 . 2499) (#("      " 0 6 (fontified t)) . 2494)) (26236 21138 232207 133000) 0 nil])
([nil nil ((2016 . 2018) (2015 . 2016) (t 26236 21207 464251 335000)) nil (26236 21221 788254 555000) 0 nil])
([nil nil ((2521 . 2523) (2517 . 2521) (2504 . 2517) (#("f" 0 1 (face font-lock-variable-name-face fontified nil)) . -2504) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -2505) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -2506) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -2507) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) 2508 (2499 . 2508) (2493 . 2499)) ((#("      " 0 6 (fontified nil)) . 2493) (undo-tree-id12314 . -6) (undo-tree-id12315 . -6) (undo-tree-id12316 . -6) (undo-tree-id12317 . -6) (undo-tree-id12318 . -6) (undo-tree-id12319 . -6) (undo-tree-id12320 . -6) (undo-tree-id12321 . -6) (undo-tree-id12322 . -6) (undo-tree-id12323 . -6) (undo-tree-id12324 . -6) (undo-tree-id12325 . -6) (undo-tree-id12326 . -6) (undo-tree-id12327 . -6) (undo-tree-id12328 . -6) (undo-tree-id12329 . -6) (undo-tree-id12330 . -6) (undo-tree-id12331 . -6) (undo-tree-id12332 . -6) (undo-tree-id12333 . -6) (undo-tree-id12334 . -6) (undo-tree-id12335 . -6) (undo-tree-id12336 . -6) (undo-tree-id12337 . -6) (undo-tree-id12338 . -6) (undo-tree-id12339 . -6) (undo-tree-id12340 . -6) (undo-tree-id12341 . -6) (undo-tree-id12342 . -6) (undo-tree-id12343 . -6) (undo-tree-id12344 . -6) (undo-tree-id12345 . -6) (undo-tree-id12346 . -6) (undo-tree-id12347 . -6) (undo-tree-id12348 . -6) (undo-tree-id12349 . -6) (undo-tree-id12350 . -6) (undo-tree-id12351 . -6) (undo-tree-id12352 . -6) (undo-tree-id12353 . -6) (undo-tree-id12354 . -6) (undo-tree-id12355 . -6) (undo-tree-id12356 . -6) (undo-tree-id12357 . -6) (undo-tree-id12358 . -6) (undo-tree-id12359 . -6) (undo-tree-id12360 . -6) (#("auto futu" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil)) . 2499) (undo-tree-id12361 . -9) (undo-tree-id12362 . -9) (undo-tree-id12363 . -5) (undo-tree-id12364 . -5) (undo-tree-id12365 . -5) (undo-tree-id12366 . -5) (undo-tree-id12367 . -5) (undo-tree-id12368 . -5) (undo-tree-id12369 . -5) (undo-tree-id12370 . -5) (undo-tree-id12371 . -5) (undo-tree-id12372 . -5) (undo-tree-id12373 . -5) (undo-tree-id12374 . -5) (undo-tree-id12375 . -5) (undo-tree-id12376 . -5) (undo-tree-id12377 . -5) (undo-tree-id12378 . -5) (undo-tree-id12379 . -5) (undo-tree-id12380 . -5) (undo-tree-id12381 . -5) (undo-tree-id12382 . -5) (undo-tree-id12383 . -5) (undo-tree-id12384 . -5) (undo-tree-id12385 . -5) (undo-tree-id12386 . -5) (undo-tree-id12387 . -5) (undo-tree-id12388 . -5) (undo-tree-id12389 . -5) (undo-tree-id12390 . -5) (undo-tree-id12391 . -5) (undo-tree-id12392 . -5) (undo-tree-id12393 . -5) (undo-tree-id12394 . -5) (undo-tree-id12395 . -5) (undo-tree-id12396 . -5) (undo-tree-id12397 . -5) (undo-tree-id12398 . -5) (undo-tree-id12399 . -5) (undo-tree-id12400 . -5) (undo-tree-id12401 . -5) (undo-tree-id12402 . -5) (undo-tree-id12403 . -5) (undo-tree-id12404 . -5) (undo-tree-id12405 . -5) (undo-tree-id12406 . -5) (undo-tree-id12407 . -5) (2504 . 2508) (#("data = future" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil)) . 2504) (undo-tree-id12408 . -13) (undo-tree-id12409 . -13) (undo-tree-id12410 . -13) (undo-tree-id12411 . -13) (undo-tree-id12412 . -13) (undo-tree-id12413 . -13) (undo-tree-id12414 . -13) (undo-tree-id12415 . -13) (undo-tree-id12416 . -13) (undo-tree-id12417 . -13) (undo-tree-id12418 . -13) (undo-tree-id12419 . -13) (undo-tree-id12420 . -13) (undo-tree-id12421 . -13) (undo-tree-id12422 . -13) (undo-tree-id12423 . -13) (undo-tree-id12424 . -13) (undo-tree-id12425 . -13) (undo-tree-id12426 . -13) (undo-tree-id12427 . -13) (undo-tree-id12428 . -13) (undo-tree-id12429 . -13) (undo-tree-id12430 . -13) (undo-tree-id12431 . -13) (undo-tree-id12432 . -13) (undo-tree-id12433 . -13) (undo-tree-id12434 . -13) (undo-tree-id12435 . -13) (undo-tree-id12436 . -13) (undo-tree-id12437 . -13) (undo-tree-id12438 . -13) (undo-tree-id12439 . -13) (undo-tree-id12440 . -13) (undo-tree-id12441 . -13) (undo-tree-id12442 . -13) (undo-tree-id12443 . -13) (undo-tree-id12444 . -13) (undo-tree-id12445 . -13) (undo-tree-id12446 . -13) (undo-tree-id12447 . -13) (undo-tree-id12448 . -13) (undo-tree-id12449 . -13) (undo-tree-id12450 . -13) (undo-tree-id12451 . -13) (undo-tree-id12452 . -13) (undo-tree-id12453 . -13) (undo-tree-id12454 . -13) (#(".get" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 2517) (undo-tree-id12455 . -4) (undo-tree-id12456 . -4) (undo-tree-id12457 . -4) (undo-tree-id12458 . -4) (undo-tree-id12459 . -4) (undo-tree-id12460 . -4) (undo-tree-id12461 . -4) (undo-tree-id12462 . -4) (undo-tree-id12463 . -4) (undo-tree-id12464 . -4) (undo-tree-id12465 . -4) (undo-tree-id12466 . -4) (undo-tree-id12467 . -4) (undo-tree-id12468 . -4) (undo-tree-id12469 . -4) (undo-tree-id12470 . -4) (undo-tree-id12471 . -4) (undo-tree-id12472 . -4) (undo-tree-id12473 . -4) (undo-tree-id12474 . -4) (undo-tree-id12475 . -4) (undo-tree-id12476 . -4) (undo-tree-id12477 . -4) (undo-tree-id12478 . -4) (undo-tree-id12479 . -4) (undo-tree-id12480 . -4) (undo-tree-id12481 . -4) (undo-tree-id12482 . -4) (undo-tree-id12483 . -4) (undo-tree-id12484 . -4) (undo-tree-id12485 . -4) (undo-tree-id12486 . -4) (undo-tree-id12487 . -4) (undo-tree-id12488 . -4) (undo-tree-id12489 . -4) (undo-tree-id12490 . -4) (undo-tree-id12491 . -4) (undo-tree-id12492 . -4) (undo-tree-id12493 . -4) (undo-tree-id12494 . -4) (undo-tree-id12495 . -4) (undo-tree-id12496 . -4) (undo-tree-id12497 . -4) (undo-tree-id12498 . -4) (undo-tree-id12499 . -4) (undo-tree-id12500 . -4) (undo-tree-id12501 . -4) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2521) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -2) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1)) (26236 21137 725273 890000) 0 nil])
([nil nil ((apply -24 2024 2239 undo--wrap-and-run-primitive-undo 2024 2239 ((2196 . 2199) (2196 . 2197) (#("	" 0 1 (fontified t)) . 2196) (2192 . 2196) (2169 . 2172) (2169 . 2170) (#("	" 0 1 (fontified t)) . 2169) (2165 . 2169) (2109 . 2112) (2109 . 2110) (#("	" 0 1 (fontified t)) . 2109) (2105 . 2109) (2028 . 2031) 2024)) (t 26236 21221 824810 798000)) nil (26236 21226 455202 235000) 0 nil])
([nil nil ((2523 . 2524)) ((#(";" 0 1 (fontified t)) . 2523)) (26236 21137 362501 630000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2016) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -1) (undo-tree-id13098 . -1) (undo-tree-id13099 . -1) (undo-tree-id13100 . -1) (undo-tree-id13101 . -1) (undo-tree-id13102 . -1) (undo-tree-id13103 . -1) (undo-tree-id13104 . -1) (undo-tree-id13105 . -1) (undo-tree-id13106 . -1) (undo-tree-id13107 . -1) (undo-tree-id13108 . -1) (undo-tree-id13109 . -1) (undo-tree-id13110 . -1) (undo-tree-id13111 . -1) (undo-tree-id13112 . -1) (undo-tree-id13113 . -1) (undo-tree-id13114 . -1) (undo-tree-id13115 . -1) (undo-tree-id13116 . -1) (undo-tree-id13117 . -1) (undo-tree-id13118 . -1) (undo-tree-id13119 . -1) (undo-tree-id13120 . -1) (undo-tree-id13121 . -1) (undo-tree-id13122 . -1) (undo-tree-id13123 . -1) (undo-tree-id13124 . -1) (undo-tree-id13125 . -1) (undo-tree-id13126 . -1) (undo-tree-id13127 . -1) (undo-tree-id13128 . -1) (undo-tree-id13129 . -1) (undo-tree-id13130 . -1) (undo-tree-id13131 . -1) (undo-tree-id13132 . -1) (undo-tree-id13133 . -1) (undo-tree-id13134 . -1) (undo-tree-id13135 . -1) (undo-tree-id13136 . -1) (undo-tree-id13137 . -1) (undo-tree-id13138 . -1) (undo-tree-id13139 . -1) (undo-tree-id13140 . -1) (undo-tree-id13141 . -1) (undo-tree-id13142 . -1) (undo-tree-id13143 . -1) (undo-tree-id13144 . -1) (undo-tree-id13145 . -1) (undo-tree-id13146 . -1) (undo-tree-id13147 . -1) (undo-tree-id13148 . -1) (undo-tree-id13149 . -1) (undo-tree-id13150 . -1) (undo-tree-id13151 . -1) (undo-tree-id13152 . -1) (undo-tree-id13153 . -1) (undo-tree-id13154 . -1) (undo-tree-id13155 . -1) (undo-tree-id13156 . -1) (undo-tree-id13157 . -1) (undo-tree-id13158 . -1) (undo-tree-id13159 . -1) (undo-tree-id13160 . -1) (t 26236 21226 515785 586000)) nil (26236 21323 844792 521000) 0 nil])
([nil nil ((#("future" 0 2 (fontified t) 2 6 (fontified t)) . 2614) (undo-tree-id9313 . -5)) ((2614 . 2620)) (26236 21136 985567 937000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2016) (undo-tree-id12988 . -1) (undo-tree-id12989 . -1) (undo-tree-id12990 . -1) (undo-tree-id12991 . -1) (undo-tree-id12992 . -1) (undo-tree-id12993 . -1) (undo-tree-id12994 . -1) (undo-tree-id12995 . -1) (undo-tree-id12996 . -1) (undo-tree-id12997 . -1) (undo-tree-id12998 . -1) (undo-tree-id12999 . -1) (undo-tree-id13000 . -1) (undo-tree-id13001 . -1) (undo-tree-id13002 . -1) (undo-tree-id13003 . -1) (undo-tree-id13004 . -1) (undo-tree-id13005 . -1) (undo-tree-id13006 . -1) (undo-tree-id13007 . -1) (undo-tree-id13008 . -1) (undo-tree-id13009 . -1) (undo-tree-id13010 . -1) (undo-tree-id13011 . -1) (undo-tree-id13012 . -1) (undo-tree-id13013 . -1) (undo-tree-id13014 . -1) (undo-tree-id13015 . -1) (undo-tree-id13016 . -1) (undo-tree-id13017 . -1) (undo-tree-id13018 . -1) (undo-tree-id13019 . -1) (undo-tree-id13020 . -1) (undo-tree-id13021 . -1) (undo-tree-id13022 . -1) (undo-tree-id13023 . -1) (undo-tree-id13024 . -1) (undo-tree-id13025 . -1) (undo-tree-id13026 . -1) (undo-tree-id13027 . -1) (undo-tree-id13028 . -1) (undo-tree-id13029 . -1) (undo-tree-id13030 . -1) (undo-tree-id13031 . -1) (undo-tree-id13032 . -1) (undo-tree-id13033 . -1) (undo-tree-id13034 . -1) (undo-tree-id13035 . -1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) (undo-tree-id13040 . -1) (undo-tree-id13041 . -1) (undo-tree-id13042 . -1) (undo-tree-id13043 . -1) (undo-tree-id13044 . -1) (undo-tree-id13045 . -1) (undo-tree-id13046 . -1) (undo-tree-id13047 . -1) (undo-tree-id13048 . -1) (undo-tree-id13049 . -1) (undo-tree-id13050 . -1) (undo-tree-id13051 . -1) (undo-tree-id13052 . -1) (undo-tree-id13053 . -1) (undo-tree-id13054 . -1) (undo-tree-id13055 . -1) (undo-tree-id13056 . -1) (undo-tree-id13057 . -1) (undo-tree-id13058 . -1) (undo-tree-id13059 . -1) (undo-tree-id13060 . -1) (undo-tree-id13061 . -1) (undo-tree-id13062 . -1) (undo-tree-id13063 . -1) (undo-tree-id13064 . -1) (undo-tree-id13065 . -1) (undo-tree-id13066 . -1) (undo-tree-id13067 . -1) (undo-tree-id13068 . -1) (undo-tree-id13069 . -1) (undo-tree-id13070 . -1) (undo-tree-id13071 . -1) (undo-tree-id13072 . -1) (undo-tree-id13073 . -1) (undo-tree-id13074 . -1) (undo-tree-id13075 . -1) (undo-tree-id13076 . -1) (undo-tree-id13077 . -1) (undo-tree-id13078 . -1) (undo-tree-id13079 . -1) (undo-tree-id13080 . -1) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1)) nil (26236 21323 848659 595000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2614)) ((2614 . 2615)) (26236 21136 505257 49000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2015) (undo-tree-id13318 . -1) (undo-tree-id13319 . -1)) nil (26236 21341 940856 443000) 0 nil] [nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2016) (undo-tree-id12983 . 1) (undo-tree-id12984 . 1) (undo-tree-id12985 . -1) (undo-tree-id12986 . -1) (undo-tree-id12987 . -1)) ((2016 . 2017)) (26236 21323 844362 380000) 0 nil])
([nil nil ((#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2614) (undo-tree-id9312 . -2)) ((2614 . 2617)) (26236 21135 927175 970000) 0 nil])
([nil nil ((1994 . 1996) (1979 . 1994)) nil (26236 21341 940851 581000) 0 nil])
nil
([nil nil ((#("()->" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2614) (undo-tree-id9311 . -3)) ((2614 . 2618)) (26236 21132 280943 313000) 0 nil])
([nil nil ((1995 . 1996) (#("." 0 1 (fontified t)) . -1995) (undo-tree-id13317 . -1) 1996) nil (26236 21341 940848 921000) 0 nil])
([nil nil ((2619 . 2620) (2614 . 2619)) ((#("data-" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 2614) (#(">" 0 1 (fontified t)) . 2619)) (26236 21131 856972 496000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1994)) nil (26236 21341 940843 403000) 0 nil])
([nil nil ((2620 . 2623) (#("g" 0 1 (fontified t)) . -2620) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (#("e" 0 1 (fontified t)) . -2621) (undo-tree-id9307 . -1) (undo-tree-id9308 . -1) (#("t" 0 1 (fontified t)) . -2622) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) 2623 (2620 . 2623) (2619 . 2620) (2616 . 2619) (2614 . 2616) (2609 . 2614)) ((#("
		  " 0 1 (fontified nil) 1 5 (fontified nil)) . 2609) (undo-tree-id11815 . -5) (undo-tree-id11816 . -5) (undo-tree-id11817 . -5) (undo-tree-id11818 . -5) (undo-tree-id11819 . -5) (undo-tree-id11820 . -5) (undo-tree-id11821 . -5) (undo-tree-id11822 . -1) (undo-tree-id11823 . -5) (undo-tree-id11824 . -5) (undo-tree-id11825 . -5) (undo-tree-id11826 . -5) (undo-tree-id11827 . -5) (undo-tree-id11828 . -5) (undo-tree-id11829 . -5) (undo-tree-id11830 . -5) (undo-tree-id11831 . -5) (undo-tree-id11832 . -5) (undo-tree-id11833 . -5) (undo-tree-id11834 . -5) (undo-tree-id11835 . -5) (undo-tree-id11836 . -5) (undo-tree-id11837 . -5) (undo-tree-id11838 . -5) (undo-tree-id11839 . -5) (undo-tree-id11840 . -5) (undo-tree-id11841 . -5) (undo-tree-id11842 . -5) (undo-tree-id11843 . -5) (undo-tree-id11844 . -5) (undo-tree-id11845 . -5) (undo-tree-id11846 . -5) (undo-tree-id11847 . -5) (undo-tree-id11848 . -5) (undo-tree-id11849 . -5) (undo-tree-id11850 . -5) (undo-tree-id11851 . -5) (undo-tree-id11852 . -5) (undo-tree-id11853 . -5) (undo-tree-id11854 . -5) (undo-tree-id11855 . -5) (undo-tree-id11856 . -5) (undo-tree-id11857 . -5) (undo-tree-id11858 . -5) (undo-tree-id11859 . -5) (undo-tree-id11860 . -5) (undo-tree-id11861 . -5) (undo-tree-id11862 . -5) (undo-tree-id11863 . -5) (undo-tree-id11864 . -5) (undo-tree-id11865 . -5) (undo-tree-id11866 . -5) (undo-tree-id11867 . -5) (undo-tree-id11868 . -5) (undo-tree-id11869 . -5) (undo-tree-id11870 . -5) (undo-tree-id11871 . -1) (undo-tree-id11872 . -5) (undo-tree-id11873 . -5) (undo-tree-id11874 . -5) (undo-tree-id11875 . -5) (undo-tree-id11876 . -5) (undo-tree-id11877 . -5) (undo-tree-id11878 . -5) (undo-tree-id11879 . -5) (undo-tree-id11880 . -5) (undo-tree-id11881 . -5) (undo-tree-id11882 . -5) (undo-tree-id11883 . -5) (undo-tree-id11884 . -5) (undo-tree-id11885 . -5) (undo-tree-id11886 . -5) (undo-tree-id11887 . -5) (undo-tree-id11888 . -5) (undo-tree-id11889 . -5) (undo-tree-id11890 . -5) (undo-tree-id11891 . -5) (undo-tree-id11892 . -5) (undo-tree-id11893 . -5) (undo-tree-id11894 . -5) (undo-tree-id11895 . -5) (undo-tree-id11896 . -5) (undo-tree-id11897 . -5) (undo-tree-id11898 . -5) (undo-tree-id11899 . -5) (undo-tree-id11900 . -5) (undo-tree-id11901 . -5) (undo-tree-id11902 . -5) (undo-tree-id11903 . -5) (undo-tree-id11904 . -5) (undo-tree-id11905 . -5) (undo-tree-id11906 . -5) (undo-tree-id11907 . -5) (undo-tree-id11908 . -5) (undo-tree-id11909 . -5) (undo-tree-id11910 . -5) (undo-tree-id11911 . -5) (undo-tree-id11912 . -5) (undo-tree-id11913 . -5) (undo-tree-id11914 . -5) (undo-tree-id11915 . -5) (#("da" 0 1 (fontified nil) 1 2 (fontified nil)) . 2614) (undo-tree-id11916 . -2) (undo-tree-id11917 . -2) (undo-tree-id11918 . -2) (undo-tree-id11919 . -2) (undo-tree-id11920 . -2) (undo-tree-id11921 . -2) (undo-tree-id11922 . -2) (undo-tree-id11923 . -2) (undo-tree-id11924 . -2) (undo-tree-id11925 . -2) (undo-tree-id11926 . -2) (undo-tree-id11927 . -2) (undo-tree-id11928 . -2) (undo-tree-id11929 . -2) (undo-tree-id11930 . -2) (undo-tree-id11931 . -2) (undo-tree-id11932 . -2) (undo-tree-id11933 . -2) (undo-tree-id11934 . -2) (undo-tree-id11935 . -2) (undo-tree-id11936 . -2) (undo-tree-id11937 . -2) (undo-tree-id11938 . -2) (undo-tree-id11939 . -2) (undo-tree-id11940 . -2) (undo-tree-id11941 . -2) (undo-tree-id11942 . -2) (undo-tree-id11943 . -2) (undo-tree-id11944 . -2) (undo-tree-id11945 . -2) (undo-tree-id11946 . -2) (undo-tree-id11947 . -2) (undo-tree-id11948 . -2) (undo-tree-id11949 . -2) (undo-tree-id11950 . -2) (undo-tree-id11951 . -2) (undo-tree-id11952 . -2) (undo-tree-id11953 . -2) (undo-tree-id11954 . -2) (undo-tree-id11955 . -2) (undo-tree-id11956 . -2) (undo-tree-id11957 . -2) (undo-tree-id11958 . -2) (undo-tree-id11959 . -2) (undo-tree-id11960 . -2) (undo-tree-id11961 . -2) (undo-tree-id11962 . -2) (undo-tree-id11963 . -2) (undo-tree-id11964 . -2) (undo-tree-id11965 . -2) (undo-tree-id11966 . -2) (undo-tree-id11967 . -2) (undo-tree-id11968 . -2) (undo-tree-id11969 . -2) (undo-tree-id11970 . -2) (undo-tree-id11971 . -2) (undo-tree-id11972 . -2) (undo-tree-id11973 . -2) (undo-tree-id11974 . -2) (undo-tree-id11975 . -2) (undo-tree-id11976 . -2) (undo-tree-id11977 . -2) (undo-tree-id11978 . -2) (undo-tree-id11979 . -2) (undo-tree-id11980 . -2) (undo-tree-id11981 . -2) (undo-tree-id11982 . -2) (undo-tree-id11983 . -2) (undo-tree-id11984 . -2) (undo-tree-id11985 . -2) (undo-tree-id11986 . -2) (undo-tree-id11987 . -2) (undo-tree-id11988 . -2) (undo-tree-id11989 . -2) (undo-tree-id11990 . -2) (undo-tree-id11991 . -2) (undo-tree-id11992 . -2) (undo-tree-id11993 . -2) (undo-tree-id11994 . -2) (undo-tree-id11995 . -2) (undo-tree-id11996 . -2) (undo-tree-id11997 . -2) (undo-tree-id11998 . -2) (undo-tree-id11999 . -2) (undo-tree-id12000 . -2) (undo-tree-id12001 . -2) (undo-tree-id12002 . -2) (undo-tree-id12003 . -2) (undo-tree-id12004 . -2) (undo-tree-id12005 . -2) (undo-tree-id12006 . -2) (undo-tree-id12007 . -2) (undo-tree-id12008 . -2) (undo-tree-id12009 . -2) (undo-tree-id12010 . -2) (undo-tree-id12011 . -2) (undo-tree-id12012 . -2) (undo-tree-id12013 . -2) (undo-tree-id12014 . -2) (#("ta-" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2616) (undo-tree-id12015 . -3) (undo-tree-id12016 . -3) (undo-tree-id12017 . -3) (undo-tree-id12018 . -3) (undo-tree-id12019 . -3) (undo-tree-id12020 . -3) (undo-tree-id12021 . -3) (undo-tree-id12022 . -3) (undo-tree-id12023 . -3) (undo-tree-id12024 . -3) (undo-tree-id12025 . -3) (undo-tree-id12026 . -3) (undo-tree-id12027 . -3) (undo-tree-id12028 . -3) (undo-tree-id12029 . -3) (undo-tree-id12030 . -3) (undo-tree-id12031 . -3) (undo-tree-id12032 . -3) (undo-tree-id12033 . -3) (undo-tree-id12034 . -3) (undo-tree-id12035 . -3) (undo-tree-id12036 . -3) (undo-tree-id12037 . -3) (undo-tree-id12038 . -3) (undo-tree-id12039 . -3) (undo-tree-id12040 . -3) (undo-tree-id12041 . -3) (undo-tree-id12042 . -3) (undo-tree-id12043 . -3) (undo-tree-id12044 . -3) (undo-tree-id12045 . -3) (undo-tree-id12046 . -3) (undo-tree-id12047 . -3) (undo-tree-id12048 . -3) (undo-tree-id12049 . -3) (undo-tree-id12050 . -3) (undo-tree-id12051 . -3) (undo-tree-id12052 . -3) (undo-tree-id12053 . -3) (undo-tree-id12054 . -3) (undo-tree-id12055 . -3) (undo-tree-id12056 . -3) (undo-tree-id12057 . -3) (undo-tree-id12058 . -3) (undo-tree-id12059 . -3) (undo-tree-id12060 . -3) (undo-tree-id12061 . -3) (undo-tree-id12062 . -3) (undo-tree-id12063 . -3) (undo-tree-id12064 . -3) (undo-tree-id12065 . -3) (undo-tree-id12066 . -3) (undo-tree-id12067 . -3) (undo-tree-id12068 . -3) (undo-tree-id12069 . -3) (undo-tree-id12070 . -3) (undo-tree-id12071 . -3) (undo-tree-id12072 . -3) (undo-tree-id12073 . -3) (undo-tree-id12074 . -3) (undo-tree-id12075 . -3) (undo-tree-id12076 . -3) (undo-tree-id12077 . -3) (undo-tree-id12078 . -3) (undo-tree-id12079 . -3) (undo-tree-id12080 . -3) (undo-tree-id12081 . -3) (undo-tree-id12082 . -3) (undo-tree-id12083 . -3) (undo-tree-id12084 . -3) (undo-tree-id12085 . -3) (undo-tree-id12086 . -3) (undo-tree-id12087 . -3) (undo-tree-id12088 . -3) (undo-tree-id12089 . -3) (undo-tree-id12090 . -3) (undo-tree-id12091 . -3) (undo-tree-id12092 . -3) (undo-tree-id12093 . -3) (undo-tree-id12094 . -3) (undo-tree-id12095 . -3) (undo-tree-id12096 . -3) (undo-tree-id12097 . -3) (undo-tree-id12098 . -3) (undo-tree-id12099 . -3) (undo-tree-id12100 . -3) (undo-tree-id12101 . -3) (undo-tree-id12102 . -3) (undo-tree-id12103 . -3) (undo-tree-id12104 . -3) (undo-tree-id12105 . -3) (undo-tree-id12106 . -3) (undo-tree-id12107 . -3) (undo-tree-id12108 . -3) (undo-tree-id12109 . -3) (undo-tree-id12110 . -3) (undo-tree-id12111 . -3) (undo-tree-id12112 . -3) (undo-tree-id12113 . -3) (#(">" 0 1 (fontified nil)) . 2619) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -1) (undo-tree-id12140 . -1) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1) (undo-tree-id12168 . -1) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -1) (undo-tree-id12194 . -1) (undo-tree-id12195 . -1) (undo-tree-id12196 . -1) (undo-tree-id12197 . -1) (undo-tree-id12198 . -1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) (undo-tree-id12201 . -1) (undo-tree-id12202 . -1) (undo-tree-id12203 . -1) (undo-tree-id12204 . -1) (undo-tree-id12205 . -1) (undo-tree-id12206 . -1) (undo-tree-id12207 . -1) (undo-tree-id12208 . -1) (undo-tree-id12209 . -1) (undo-tree-id12210 . -1) (undo-tree-id12211 . -1) (undo-tree-id12212 . -1) (#("get" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2620) (undo-tree-id12213 . -3) (undo-tree-id12214 . -3) (2620 . 2623) (#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2620) (undo-tree-id12215 . -3) (undo-tree-id12216 . -3) (undo-tree-id12217 . -3) (undo-tree-id12218 . -3) (undo-tree-id12219 . -3) (undo-tree-id12220 . -3) (undo-tree-id12221 . -3) (undo-tree-id12222 . -2) (undo-tree-id12223 . -2) (undo-tree-id12224 . -3) (undo-tree-id12225 . -3) (undo-tree-id12226 . -3) (undo-tree-id12227 . -3) (undo-tree-id12228 . -3) (undo-tree-id12229 . -3) (undo-tree-id12230 . -3) (undo-tree-id12231 . -3) (undo-tree-id12232 . -3) (undo-tree-id12233 . -3) (undo-tree-id12234 . -3) (undo-tree-id12235 . -3) (undo-tree-id12236 . -3) (undo-tree-id12237 . -3) (undo-tree-id12238 . -3) (undo-tree-id12239 . -3) (undo-tree-id12240 . -3) (undo-tree-id12241 . -3) (undo-tree-id12242 . -3) (undo-tree-id12243 . -3) (undo-tree-id12244 . -3) (undo-tree-id12245 . -3) (undo-tree-id12246 . -3) (undo-tree-id12247 . -3) (undo-tree-id12248 . -3) (undo-tree-id12249 . -3) (undo-tree-id12250 . -3) (undo-tree-id12251 . -3) (undo-tree-id12252 . -3) (undo-tree-id12253 . -3) (undo-tree-id12254 . -3) (undo-tree-id12255 . -3) (undo-tree-id12256 . -3) (undo-tree-id12257 . -3) (undo-tree-id12258 . -3) (undo-tree-id12259 . -3) (undo-tree-id12260 . -3) (undo-tree-id12261 . -3) (undo-tree-id12262 . -3) (undo-tree-id12263 . -3) (undo-tree-id12264 . -3) (undo-tree-id12265 . -3) (undo-tree-id12266 . -3) (undo-tree-id12267 . -3) (undo-tree-id12268 . -3) (undo-tree-id12269 . -3) (undo-tree-id12270 . -2) (undo-tree-id12271 . -2) (undo-tree-id12272 . -2) (undo-tree-id12273 . -2) (undo-tree-id12274 . -2) (undo-tree-id12275 . -2) (undo-tree-id12276 . -2) (undo-tree-id12277 . -2) (undo-tree-id12278 . -2) (undo-tree-id12279 . -2) (undo-tree-id12280 . -2) (undo-tree-id12281 . -2) (undo-tree-id12282 . -2) (undo-tree-id12283 . -2) (undo-tree-id12284 . -2) (undo-tree-id12285 . -2) (undo-tree-id12286 . -2) (undo-tree-id12287 . -2) (undo-tree-id12288 . -2) (undo-tree-id12289 . -2) (undo-tree-id12290 . -2) (undo-tree-id12291 . -2) (undo-tree-id12292 . -2) (undo-tree-id12293 . -2) (undo-tree-id12294 . -2) (undo-tree-id12295 . -2) (undo-tree-id12296 . -2) (undo-tree-id12297 . -2) (undo-tree-id12298 . -2) (undo-tree-id12299 . -2) (undo-tree-id12300 . -2) (undo-tree-id12301 . -2) (undo-tree-id12302 . -2) (undo-tree-id12303 . -2) (undo-tree-id12304 . -2) (undo-tree-id12305 . -2) (undo-tree-id12306 . -2) (undo-tree-id12307 . -2) (undo-tree-id12308 . -2) (undo-tree-id12309 . -2) (undo-tree-id12310 . -2) (undo-tree-id12311 . -2) (undo-tree-id12312 . -2) (undo-tree-id12313 . -2)) (26236 21131 454022 851000) 0 nil])
([nil nil ((1857 . 1858) (1854 . 1857) (#("-" 0 1 (fontified t)) . -1854) (undo-tree-id13161 . -1) (undo-tree-id13162 . -1) (undo-tree-id13163 . -1) (undo-tree-id13164 . -1) (undo-tree-id13165 . -1) (undo-tree-id13166 . -1) (undo-tree-id13167 . -1) (undo-tree-id13168 . -1) (undo-tree-id13169 . -1) (undo-tree-id13170 . -1) (undo-tree-id13171 . -1) (undo-tree-id13172 . -1) (undo-tree-id13173 . -1) (undo-tree-id13174 . -1) (undo-tree-id13175 . -1) (undo-tree-id13176 . -1) (undo-tree-id13177 . -1) (undo-tree-id13178 . -1) (undo-tree-id13179 . -1) (undo-tree-id13180 . -1) (undo-tree-id13181 . -1) (undo-tree-id13182 . -1) (undo-tree-id13183 . -1) (undo-tree-id13184 . -1) (undo-tree-id13185 . -1) (undo-tree-id13186 . -1) (undo-tree-id13187 . -1) (undo-tree-id13188 . -1) (undo-tree-id13189 . -1) (undo-tree-id13190 . -1) (undo-tree-id13191 . -1) (undo-tree-id13192 . -1) (undo-tree-id13193 . -1) (undo-tree-id13194 . -1) (undo-tree-id13195 . -1) (undo-tree-id13196 . -1) (undo-tree-id13197 . -1) (undo-tree-id13198 . -1) (undo-tree-id13199 . -1) (undo-tree-id13200 . -1) (undo-tree-id13201 . -1) (undo-tree-id13202 . -1) (undo-tree-id13203 . -1) (undo-tree-id13204 . -1) (undo-tree-id13205 . -1) (undo-tree-id13206 . -1) (undo-tree-id13207 . -1) (undo-tree-id13208 . -1) (undo-tree-id13209 . -1) (undo-tree-id13210 . -1) (undo-tree-id13211 . -1) (undo-tree-id13212 . -1) (undo-tree-id13213 . -1) (undo-tree-id13214 . -1) (undo-tree-id13215 . -1) (undo-tree-id13216 . -1) (undo-tree-id13217 . -1) (undo-tree-id13218 . -1) (undo-tree-id13219 . -1) (undo-tree-id13220 . -1) (undo-tree-id13221 . -1) (undo-tree-id13222 . -1) (undo-tree-id13223 . -1) (undo-tree-id13224 . -1) (undo-tree-id13225 . -1) (undo-tree-id13226 . -1) (undo-tree-id13227 . -1) (undo-tree-id13228 . -1) (undo-tree-id13229 . -1) (undo-tree-id13230 . -1) (undo-tree-id13231 . -1) (undo-tree-id13232 . -1) (#("=" 0 1 (fontified t)) . -1855) (undo-tree-id13233 . -1) (undo-tree-id13234 . -1) (undo-tree-id13235 . -1) (undo-tree-id13236 . -1) (undo-tree-id13237 . -1) (undo-tree-id13238 . -1) (undo-tree-id13239 . -1) (undo-tree-id13240 . -1) (undo-tree-id13241 . -1) (undo-tree-id13242 . -1) (undo-tree-id13243 . -1) (undo-tree-id13244 . -1) (undo-tree-id13245 . -1) (undo-tree-id13246 . -1) (undo-tree-id13247 . -1) (undo-tree-id13248 . -1) (undo-tree-id13249 . -1) (undo-tree-id13250 . -1) (undo-tree-id13251 . -1) (undo-tree-id13252 . -1) (undo-tree-id13253 . -1) (undo-tree-id13254 . -1) (undo-tree-id13255 . -1) (undo-tree-id13256 . -1) (undo-tree-id13257 . -1) (undo-tree-id13258 . -1) (undo-tree-id13259 . -1) (undo-tree-id13260 . -1) (undo-tree-id13261 . -1) (undo-tree-id13262 . -1) (undo-tree-id13263 . -1) (undo-tree-id13264 . -1) (undo-tree-id13265 . -1) (undo-tree-id13266 . -1) (undo-tree-id13267 . -1) (undo-tree-id13268 . -1) (undo-tree-id13269 . -1) (undo-tree-id13270 . -1) (undo-tree-id13271 . -1) (undo-tree-id13272 . -1) (undo-tree-id13273 . -1) (undo-tree-id13274 . -1) (undo-tree-id13275 . -1) (undo-tree-id13276 . -1) (undo-tree-id13277 . -1) (undo-tree-id13278 . -1) (#(" " 0 1 (fontified t)) . -1856) (undo-tree-id13279 . -1) (undo-tree-id13280 . -1) (undo-tree-id13281 . -1) (undo-tree-id13282 . -1) (undo-tree-id13283 . -1) (undo-tree-id13284 . -1) (undo-tree-id13285 . -1) (undo-tree-id13286 . -1) (undo-tree-id13287 . -1) (undo-tree-id13288 . -1) (undo-tree-id13289 . -1) (undo-tree-id13290 . -1) (undo-tree-id13291 . -1) (undo-tree-id13292 . -1) (undo-tree-id13293 . -1) (undo-tree-id13294 . -1) (undo-tree-id13295 . -1) (undo-tree-id13296 . -1) (undo-tree-id13297 . -1) (undo-tree-id13298 . -1) (undo-tree-id13299 . -1) (undo-tree-id13300 . -1) (undo-tree-id13301 . -1) (undo-tree-id13302 . -1) (undo-tree-id13303 . -1) (undo-tree-id13304 . -1) (undo-tree-id13305 . -1) (undo-tree-id13306 . -1) (undo-tree-id13307 . -1) (undo-tree-id13308 . -1) (undo-tree-id13309 . -1) (undo-tree-id13310 . -1) (undo-tree-id13311 . -1) (undo-tree-id13312 . -1) (undo-tree-id13313 . -1) (undo-tree-id13314 . -1) (undo-tree-id13315 . -1) (undo-tree-id13316 . -1) 1857 (1848 . 1857) (1844 . 1848)) nil (26236 21341 940824 467000) 0 nil])
([nil nil ((2627 . 2628) (2624 . 2627) (2623 . 2624)) ((#("_" 0 1 (fontified nil)) . 2623) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (#("ser" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2624) (undo-tree-id11759 . -3) (undo-tree-id11760 . -2) (undo-tree-id11761 . -2) (undo-tree-id11762 . -2) (undo-tree-id11763 . -2) (undo-tree-id11764 . -2) (undo-tree-id11765 . -2) (undo-tree-id11766 . -3) (undo-tree-id11767 . -3) (undo-tree-id11768 . -2) (undo-tree-id11769 . -3) (undo-tree-id11770 . -3) (undo-tree-id11771 . -3) (undo-tree-id11772 . -3) (undo-tree-id11773 . -3) (undo-tree-id11774 . -3) (undo-tree-id11775 . -3) (undo-tree-id11776 . -3) (undo-tree-id11777 . -3) (undo-tree-id11778 . -3) (undo-tree-id11779 . -3) (undo-tree-id11780 . -3) (undo-tree-id11781 . -3) (undo-tree-id11782 . -3) (undo-tree-id11783 . -3) (undo-tree-id11784 . -3) (undo-tree-id11785 . -3) (undo-tree-id11786 . -3) (undo-tree-id11787 . -3) (undo-tree-id11788 . -3) (undo-tree-id11789 . -3) (undo-tree-id11790 . -3) (undo-tree-id11791 . -3) (undo-tree-id11792 . -3) (undo-tree-id11793 . -3) (undo-tree-id11794 . -3) (undo-tree-id11795 . -3) (undo-tree-id11796 . -3) (undo-tree-id11797 . -3) (undo-tree-id11798 . -3) (undo-tree-id11799 . -3) (undo-tree-id11800 . -3) (undo-tree-id11801 . -3) (undo-tree-id11802 . -3) (undo-tree-id11803 . -3) (undo-tree-id11804 . -3) (undo-tree-id11805 . -3) (undo-tree-id11806 . -3) (undo-tree-id11807 . -3) (undo-tree-id11808 . -3) (undo-tree-id11809 . -3) (undo-tree-id11810 . -3) (undo-tree-id11811 . -3) (undo-tree-id11812 . -3) (undo-tree-id11813 . -3) (#("j" 0 1 (fontified t)) . 2627) (undo-tree-id11814 . -1)) (26236 21131 212117 346000) 0 nil])
([nil nil ((2008 . 2009)) nil (26236 21341 940530 938000) 0 nil])
([nil nil ((2636 . 2638) (2634 . 2636) (2626 . 2634) (#("r" 0 1 (fontified t)) . -2626) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9300 . -1) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (#("j" 0 1 (fontified t)) . -2627) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) 2628) ((2626 . 2628) (#("rvice_na" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 2626) (undo-tree-id11686 . -8) (undo-tree-id11687 . -8) (undo-tree-id11688 . -8) (undo-tree-id11689 . -8) (undo-tree-id11690 . -8) (undo-tree-id11691 . -8) (#("me" 0 1 (fontified nil) 1 2 (fontified nil)) . 2634) (undo-tree-id11692 . -2) (undo-tree-id11693 . -2) (undo-tree-id11694 . -2) (undo-tree-id11695 . -2) (undo-tree-id11696 . -2) (undo-tree-id11697 . -2) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 2636) (undo-tree-id11698 . -2) (undo-tree-id11699 . -2) (undo-tree-id11700 . -1) (undo-tree-id11701 . -1) (undo-tree-id11702 . -2) (undo-tree-id11703 . -1)) (26236 21130 526827 946000) 0 nil])
([nil nil ((#("int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 2369) (undo-tree-id13357 . -3) (undo-tree-id13358 . -4) (t 26236 21341 980695 301000)) nil (26236 21356 74014 60000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2638) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) 2639 (2638 . 2639)) ((#(";" 0 1 (fontified nil)) . 2638) (2638 . 2639)) (26236 21129 763901 244000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2369) (undo-tree-id13356 . -1)) nil (26236 21356 74007 54000) 0 nil])
([nil nil ((2638 . 2639)) ((#("," 0 1 (fontified t)) . 2638)) (26236 21128 962111 773000) 0 nil])
([nil nil ((#("," 0 1 (c-type c-decl-arg-start fontified t)) . 2367) (undo-tree-id13324 . -1) (undo-tree-id13325 . -1) (undo-tree-id13326 . -1) (undo-tree-id13327 . -1) (undo-tree-id13328 . -1) (undo-tree-id13329 . -1) (undo-tree-id13330 . -1) (undo-tree-id13331 . -1) (undo-tree-id13332 . -1) (undo-tree-id13333 . -1) (undo-tree-id13334 . -1) (undo-tree-id13335 . -1) (undo-tree-id13336 . -1) (undo-tree-id13337 . -1) (undo-tree-id13338 . -1) (undo-tree-id13339 . -1) (undo-tree-id13340 . -1) (undo-tree-id13341 . -1) (undo-tree-id13342 . -1) (undo-tree-id13343 . -1) (undo-tree-id13344 . -1) (undo-tree-id13345 . -1) (undo-tree-id13346 . -1) (undo-tree-id13347 . -1) (undo-tree-id13348 . -1) (undo-tree-id13349 . -1) (undo-tree-id13350 . -1) (undo-tree-id13351 . -1) (undo-tree-id13352 . -1) (undo-tree-id13353 . -1) (undo-tree-id13354 . -1) (undo-tree-id13355 . -1)) nil (26236 21356 73999 312000) 0 nil])
([nil nil ((#("		  data->get_service_name(),
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-5-face) fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t) 28 29 (fontified t) 29 30 (fontified t)) . 2610) (undo-tree-id9349 . 1) (undo-tree-id9350 . -29) (undo-tree-id9351 . -28) (undo-tree-id9352 . -28) (undo-tree-id9354 . -16) (undo-tree-id9355 . -16) (undo-tree-id9356 . -16) (undo-tree-id9357 . -16) (undo-tree-id9358 . -16) (undo-tree-id9359 . -16) (undo-tree-id9360 . -28) (undo-tree-id9361 . -28) (undo-tree-id9362 . -14) (undo-tree-id9364 . -28) (undo-tree-id9366 . -28) (undo-tree-id9368 . -28) (undo-tree-id9370 . -28) (undo-tree-id9372 . -14) (undo-tree-id9374 . -14) (undo-tree-id9376 . -14) (undo-tree-id9378 . -14) (undo-tree-id9380 . -14) (undo-tree-id9382 . -14) (undo-tree-id9384 . -30) 2624 (t 26236 20753 349730 524000)) ((2610 . 2640)) (26236 21127 749246 411000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2367) (undo-tree-id13320 . -1) (undo-tree-id13321 . -1) (undo-tree-id13322 . -1) (undo-tree-id13323 . -1)) nil (26236 21356 73937 781000) 0 nil])
([nil nil ((2313 . 2323) (2312 . 2313) (t 26236 20796 231596 287000)) ((#("," 0 1 (c-type c-decl-arg-start fontified nil)) . 2312) (undo-tree-id11392 . -1) (undo-tree-id11393 . -1) (undo-tree-id11394 . -1) (undo-tree-id11395 . -1) (undo-tree-id11396 . -1) (undo-tree-id11397 . -1) (undo-tree-id11398 . -1) (undo-tree-id11399 . -1) (undo-tree-id11400 . -1) (undo-tree-id11401 . -1) (undo-tree-id11402 . -1) (undo-tree-id11403 . -1) (undo-tree-id11404 . -1) (undo-tree-id11405 . -1) (undo-tree-id11406 . -1) (undo-tree-id11407 . -1) (undo-tree-id11408 . -1) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) (undo-tree-id11413 . -1) (undo-tree-id11414 . -1) (undo-tree-id11415 . -1) (undo-tree-id11416 . -1) (undo-tree-id11417 . -1) (undo-tree-id11418 . -1) (undo-tree-id11419 . -1) (undo-tree-id11420 . -1) (undo-tree-id11421 . -1) (undo-tree-id11422 . -1) (undo-tree-id11423 . -1) (undo-tree-id11424 . -1) (undo-tree-id11425 . -1) (undo-tree-id11426 . -1) (undo-tree-id11427 . -1) (undo-tree-id11428 . -1) (undo-tree-id11429 . -1) (undo-tree-id11430 . -1) (undo-tree-id11431 . -1) (undo-tree-id11432 . -1) (undo-tree-id11433 . -1) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) (undo-tree-id11437 . -1) (undo-tree-id11438 . -1) (undo-tree-id11439 . -1) (undo-tree-id11440 . -1) (undo-tree-id11441 . -1) (undo-tree-id11442 . -1) (undo-tree-id11443 . -1) (undo-tree-id11444 . -1) (undo-tree-id11445 . -1) (undo-tree-id11446 . -1) (undo-tree-id11447 . -1) (undo-tree-id11448 . -1) (undo-tree-id11449 . -1) (undo-tree-id11450 . -1) (undo-tree-id11451 . -1) (undo-tree-id11452 . -1) (undo-tree-id11453 . -1) (undo-tree-id11454 . -1) (undo-tree-id11455 . -1) (undo-tree-id11456 . -1) (undo-tree-id11457 . -1) (undo-tree-id11458 . -1) (undo-tree-id11459 . -1) (undo-tree-id11460 . -1) (undo-tree-id11461 . -1) (undo-tree-id11462 . -1) (undo-tree-id11463 . -1) (undo-tree-id11464 . -1) (undo-tree-id11465 . -1) (undo-tree-id11466 . -1) (undo-tree-id11467 . -1) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) (undo-tree-id11489 . -1) (undo-tree-id11490 . -1) (undo-tree-id11491 . -1) (undo-tree-id11492 . -1) (undo-tree-id11493 . -1) (undo-tree-id11494 . -1) (undo-tree-id11495 . -1) (undo-tree-id11496 . -1) (undo-tree-id11497 . -1) (undo-tree-id11498 . -1) (undo-tree-id11499 . -1) (undo-tree-id11500 . -1) (undo-tree-id11501 . -1) (undo-tree-id11502 . -1) (undo-tree-id11503 . -1) (undo-tree-id11504 . -1) (undo-tree-id11505 . -1) (undo-tree-id11506 . -1) (undo-tree-id11507 . -1) (undo-tree-id11508 . -1) (undo-tree-id11509 . -1) (undo-tree-id11510 . -1) (undo-tree-id11511 . -1) (undo-tree-id11512 . -1) (undo-tree-id11513 . -1) (undo-tree-id11514 . -1) (undo-tree-id11515 . -1) (undo-tree-id11516 . -1) (undo-tree-id11517 . -1) (undo-tree-id11518 . -1) (undo-tree-id11519 . -1) (undo-tree-id11520 . -1) (undo-tree-id11521 . -1) (undo-tree-id11522 . -1) (undo-tree-id11523 . -1) (undo-tree-id11524 . -1) (undo-tree-id11525 . -1) (undo-tree-id11526 . -1) (undo-tree-id11527 . -1) (undo-tree-id11528 . -1) (undo-tree-id11529 . -1) (undo-tree-id11530 . -1) (undo-tree-id11531 . -1) (undo-tree-id11532 . -1) (undo-tree-id11533 . -1) (undo-tree-id11534 . -1) (undo-tree-id11535 . -1) (undo-tree-id11536 . -1) (undo-tree-id11537 . -1) (undo-tree-id11538 . -1) (#(" int index" 0 1 (fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t)) . 2313) (undo-tree-id11539 . -1) (undo-tree-id11540 . -1) (undo-tree-id11541 . -1) (undo-tree-id11542 . -1) (undo-tree-id11543 . -1) (undo-tree-id11544 . -1) (undo-tree-id11545 . -1) (undo-tree-id11546 . -1) (undo-tree-id11547 . -1) (undo-tree-id11548 . -1) (undo-tree-id11549 . -1) (undo-tree-id11550 . -1) (undo-tree-id11551 . -1) (undo-tree-id11552 . -1) (undo-tree-id11553 . -1) (undo-tree-id11554 . -1) (undo-tree-id11555 . -1) (undo-tree-id11556 . -1) (undo-tree-id11557 . -1) (undo-tree-id11558 . -1) (undo-tree-id11559 . -1) (undo-tree-id11560 . -1) (undo-tree-id11561 . -1) (undo-tree-id11562 . -1) (undo-tree-id11563 . -1) (undo-tree-id11564 . -1) (undo-tree-id11565 . -1) (undo-tree-id11566 . -1) (undo-tree-id11567 . -1) (undo-tree-id11568 . -1) (undo-tree-id11569 . -1) (undo-tree-id11570 . -1) (undo-tree-id11571 . -1) (undo-tree-id11572 . -1) (undo-tree-id11573 . -1) (undo-tree-id11574 . -1) (undo-tree-id11575 . -1) (undo-tree-id11576 . -1) (undo-tree-id11577 . -1) (undo-tree-id11578 . -1) (undo-tree-id11579 . -1) (undo-tree-id11580 . -1) (undo-tree-id11581 . -1) (undo-tree-id11582 . -1) (undo-tree-id11583 . -1) (undo-tree-id11584 . -1) (undo-tree-id11585 . -10) (undo-tree-id11586 . -1) (undo-tree-id11587 . -1) (undo-tree-id11588 . -1) (undo-tree-id11589 . -1) (undo-tree-id11590 . -1) (undo-tree-id11591 . -1) (undo-tree-id11592 . -1) (undo-tree-id11593 . -1) (undo-tree-id11594 . -1) (undo-tree-id11595 . -1) (undo-tree-id11596 . -1) (undo-tree-id11597 . -1) (undo-tree-id11598 . -1) (undo-tree-id11599 . -1) (undo-tree-id11600 . -1) (undo-tree-id11601 . -1) (undo-tree-id11602 . -1) (undo-tree-id11603 . -1) (undo-tree-id11604 . -1) (undo-tree-id11605 . -1) (undo-tree-id11606 . -1) (undo-tree-id11607 . -1) (undo-tree-id11608 . -1) (undo-tree-id11609 . -1) (undo-tree-id11610 . -1) (undo-tree-id11611 . -1) (undo-tree-id11612 . -1) (undo-tree-id11613 . -1) (undo-tree-id11614 . -1) (undo-tree-id11615 . -1) (undo-tree-id11616 . -1) (undo-tree-id11617 . -1) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1) (undo-tree-id11659 . -1) (undo-tree-id11660 . -1) (undo-tree-id11661 . -1) (undo-tree-id11662 . -1) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1) (undo-tree-id11673 . -1) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1) (undo-tree-id11676 . -1) (undo-tree-id11677 . -1) (undo-tree-id11678 . -1) (undo-tree-id11679 . -1) (undo-tree-id11680 . -1) (undo-tree-id11681 . -1) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1) (undo-tree-id11685 . -1)) (26236 21127 299494 644000) 0 nil])
([nil nil ((2304 . 2305) (2303 . 2304) (2298 . 2303)) nil (26236 21356 73905 310000) 0 nil])
([nil nil ((#("int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 2314) (undo-tree-id9387 . -3) (t 26236 20817 703259 392000)) ((2314 . 2318)) (26236 21126 473016 831000) 0 nil])
([nil nil ((2045 . 2046) (#("1" 0 1 (fontified t)) . -2045) (undo-tree-id13359 . -1) (undo-tree-id13360 . -1) (undo-tree-id13361 . -1) (undo-tree-id13362 . -1) (undo-tree-id13363 . -1) (undo-tree-id13364 . -1) (undo-tree-id13365 . -1) (undo-tree-id13366 . -1) (undo-tree-id13367 . -1) (undo-tree-id13368 . -1) (undo-tree-id13369 . -1) (undo-tree-id13370 . -1) (undo-tree-id13371 . -1) (undo-tree-id13372 . -1) (undo-tree-id13373 . -1) (undo-tree-id13374 . -1) (undo-tree-id13375 . -1) (undo-tree-id13376 . -1) (undo-tree-id13377 . -1) (undo-tree-id13378 . -1) (undo-tree-id13379 . -1) (undo-tree-id13380 . -1) (undo-tree-id13381 . -1) (undo-tree-id13382 . -1) (undo-tree-id13383 . -1) (undo-tree-id13384 . -1) (undo-tree-id13385 . -1) (undo-tree-id13386 . -1) (undo-tree-id13387 . -1) (undo-tree-id13388 . -1) (undo-tree-id13389 . -1) (undo-tree-id13390 . -1) (undo-tree-id13391 . -1) (undo-tree-id13392 . -1) 2046 (t 26236 21356 107122 179000)) nil (26236 21378 160366 983000) 0 nil])
([nil nil ((2316 . 2327) (2314 . 2316)) ((#("un" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil)) . 2314) (#("signed int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . 2316)) (26236 21125 198979 384000) 0 nil])
([nil nil ((#("							       a,
" 0 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 1994) (undo-tree-id13393 . -16) (undo-tree-id13394 . -16) (undo-tree-id13395 . -15) (undo-tree-id13396 . -15) (undo-tree-id13397 . -15) (undo-tree-id13398 . -15) (undo-tree-id13399 . -15) (undo-tree-id13400 . -15) (undo-tree-id13401 . -15) (undo-tree-id13402 . -15) (undo-tree-id13403 . -15) (undo-tree-id13404 . -15) (undo-tree-id13405 . -15) (undo-tree-id13406 . -15) (undo-tree-id13407 . -15) (undo-tree-id13408 . -15) (undo-tree-id13409 . -15) (undo-tree-id13410 . -15) (undo-tree-id13411 . -15) (undo-tree-id13412 . -15) (undo-tree-id13413 . -15) (undo-tree-id13414 . -15) (undo-tree-id13415 . -15) (undo-tree-id13416 . -15) (undo-tree-id13417 . -15) (undo-tree-id13418 . -15) (undo-tree-id13419 . -15) (undo-tree-id13420 . -15) (undo-tree-id13421 . -15) (undo-tree-id13422 . -15) (undo-tree-id13423 . -15) (undo-tree-id13424 . -15) (undo-tree-id13425 . -15) (undo-tree-id13426 . -15) (undo-tree-id13427 . -15) (undo-tree-id13428 . -15) (undo-tree-id13429 . -15) (undo-tree-id13430 . -15) (undo-tree-id13431 . -17) 2009 (t 26236 21378 224509 183000)) nil (26236 21441 443881 474000) 0 nil])
([nil nil ((2031 . 2032) (2016 . 2031) (2015 . 2016)) ((#("," 0 1 (fontified nil)) . 2015) (#("
							       " 0 1 (fontified nil) 1 15 (fontified nil)) . 2016) (#("1" 0 1 (fontified t)) . 2031)) (26236 21124 747198 875000) 0 nil])
([nil nil ((2028 . 2029) (#("2" 0 1 (fontified t)) . -2028) (undo-tree-id13432 . -1) (undo-tree-id13433 . -1) (undo-tree-id13434 . -1) 2029 (2028 . 2029) (#("2" 0 1 (fontified t)) . -2028) (undo-tree-id13435 . -1) 2029 (t 26236 21441 508413 346000)) nil (26236 21445 669082 731000) 0 nil])
([nil nil ((2240 . 2241) (2225 . 2240) (#(" " 0 1 (fontified t)) . -2225) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) 2226 (2225 . 2226) (2224 . 2225)) ((#("," 0 1 (fontified nil)) . 2224) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (#(" " 0 1 (fontified nil)) . 2225) (2225 . 2226) (#("
							       " 0 1 (fontified nil) 1 15 (fontified nil)) . 2225) (undo-tree-id11369 . -15) (undo-tree-id11370 . -15) (undo-tree-id11371 . -15) (undo-tree-id11372 . -15) (undo-tree-id11373 . -15) (undo-tree-id11374 . -15) (undo-tree-id11375 . -15) (undo-tree-id11376 . -15) (undo-tree-id11377 . -15) (undo-tree-id11378 . -15) (undo-tree-id11379 . -15) (undo-tree-id11380 . -15) (undo-tree-id11381 . -15) (undo-tree-id11382 . -15) (undo-tree-id11383 . -15) (undo-tree-id11384 . -15) (undo-tree-id11385 . -15) (undo-tree-id11386 . -15) (undo-tree-id11387 . -15) (undo-tree-id11388 . -15) (undo-tree-id11389 . -15) (undo-tree-id11390 . -15) (undo-tree-id11391 . -15) (#("2" 0 1 (fontified t)) . 2240)) (26236 21124 349480 298000) 0 nil])
([nil nil ((#("int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 2281) (undo-tree-id13439 . -3) (t 26236 21445 707855 990000)) nil (26236 21462 323849 323000) 0 nil])
([nil nil ((2640 . 2641) (#("s" 0 1 (face font-lock-string-face fontified t)) . -2640) (undo-tree-id9389 . -1) 2641 (t 26236 20833 278288 256000)) ((2640 . 2641) (#("i" 0 1 (face font-lock-string-face fontified t)) . 2640)) (26236 21123 809235 42000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2281)) nil (26236 21462 323843 275000) 0 nil])
([nil nil ((2673 . 2674) (2668 . 2673) (2663 . 2668)) ((#("
		  " 0 1 (fontified nil) 1 5 (fontified nil)) . 2663) (#("index" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 2668) (#("," 0 1 (fontified t)) . 2673)) (26236 21123 598583 742000) 0 nil])
([nil nil ((#(", " 0 1 (c-type c-decl-arg-start fontified t) 1 2 (fontified t)) . 2281) (undo-tree-id13436 . -1) (undo-tree-id13437 . -1) (undo-tree-id13438 . -2)) nil (26236 21462 323833 684000) 0 nil])
([nil nil ((2640 . 2641)) ((#("u" 0 1 (face font-lock-string-face fontified t)) . 2640)) (26236 21123 391611 670000) 0 nil])
([nil nil ((#("    int a = 1;
" 0 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 1844) (undo-tree-id13440 . -14) (undo-tree-id13441 . -13) (undo-tree-id13442 . -13) (undo-tree-id13443 . -13) (undo-tree-id13444 . -13) (undo-tree-id13445 . -13) (undo-tree-id13446 . -13) (undo-tree-id13447 . -13) (undo-tree-id13448 . -13) (undo-tree-id13449 . -13) (undo-tree-id13450 . -13) (undo-tree-id13451 . -13) (undo-tree-id13452 . -13) (undo-tree-id13453 . -13) (undo-tree-id13454 . -13) (undo-tree-id13455 . -13) (undo-tree-id13456 . -13) (undo-tree-id13457 . -13) (undo-tree-id13458 . -13) (undo-tree-id13459 . -13) (undo-tree-id13460 . -13) (undo-tree-id13461 . -13) (undo-tree-id13462 . -13) (undo-tree-id13463 . -13) (undo-tree-id13464 . -13) (undo-tree-id13465 . -13) (undo-tree-id13466 . -13) (undo-tree-id13467 . -13) (undo-tree-id13468 . -13) (undo-tree-id13469 . -13) (undo-tree-id13470 . -13) (undo-tree-id13471 . -13) (undo-tree-id13472 . -13) (undo-tree-id13473 . -15) 1857 (t 26236 21462 361630 260000)) nil (26236 21477 283620 441000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2031) (t 26236 20853 9911 182000)) ((2031 . 2032)) (26236 21123 228407 785000) 0 nil])
([nil nil ((#("auto " 0 1 (fontified t face font-lock-keyword-face) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-keyword-face) 4 5 (fontified t)) . 2522) (undo-tree-id13474 . -4) (undo-tree-id13475 . -4) (undo-tree-id13476 . -4) (undo-tree-id13477 . -5) (t 26236 21477 319613 723000)) nil (26236 21525 573424 889000) 0 nil])
([nil nil ((2050 . 2052) (2048 . 2050) (2036 . 2048) (#("p" 0 1 (fontified nil)) . 2036) (2036 . 2037) (#("placeholders" 0 12 (fontified nil)) . -2036) (2036 . 2048) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2036) (undo-tree-id9392 . -2) (undo-tree-id9393 . -3) (undo-tree-id9394 . -3) 2039 (2036 . 2039) (2034 . 2036) (2031 . 2034)) ((#("std" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 2031) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2034) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2036) (2036 . 2039) (#("placeholders" 0 12 (fontified nil)) . 2036) (2036 . 2048) (#("p" 0 1 (fontified nil)) . 2036) (2036 . 2037) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 2036) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2048) (#("_2" 0 1 (fontified t) 1 2 (fontified t)) . 2050)) (26236 21123 148971 302000) 0 nil])
([nil nil ((2522 . 2526)) nil (26236 21525 573393 88000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 2260)) ((2260 . 2261)) (26236 21122 864005 829000) 0 nil])
([nil nil ((#("int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t) 3 4 (fontified t)) . 2522) (undo-tree-id13478 . -3) (undo-tree-id13479 . -3) (undo-tree-id13480 . -3) (undo-tree-id13481 . -3) (undo-tree-id13482 . -3) (undo-tree-id13483 . -3) (undo-tree-id13484 . -3) (undo-tree-id13485 . -3) (undo-tree-id13486 . -3) (undo-tree-id13487 . -3) (undo-tree-id13488 . -3) (undo-tree-id13489 . -3) (undo-tree-id13490 . -3) (undo-tree-id13491 . -3) (undo-tree-id13492 . -3) (undo-tree-id13493 . -3) (undo-tree-id13494 . -3) (undo-tree-id13495 . -3) (undo-tree-id13496 . -3) (undo-tree-id13497 . -3) (undo-tree-id13498 . -3) (undo-tree-id13499 . -4) (t 26236 21525 635358 291000)) nil (26236 21613 605931 950000) 0 nil])
([nil nil ((2279 . 2281) (2277 . 2279) (2265 . 2277) (#("pla" 0 3 (fontified nil)) . 2265) (2265 . 2268) (#("placeholders" 0 12 (fontified nil)) . -2265) (2265 . 2277) (#("place" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -2265) (undo-tree-id9390 . -5) (undo-tree-id9391 . -5) 2270 (2265 . 2270) (2263 . 2265) (2260 . 2263)) ((#("std" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 2260) (undo-tree-id11336 . -3) (undo-tree-id11337 . -3) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2263) (undo-tree-id11338 . -2) (undo-tree-id11339 . -2) (#("place" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 2265) (2265 . 2270) (#("placeholders" 0 12 (fontified nil)) . 2265) (2265 . 2277) (#("pla" 0 3 (fontified nil)) . 2265) (2265 . 2268) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 2265) (undo-tree-id11340 . -12) (undo-tree-id11341 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2277) (undo-tree-id11342 . -2) (undo-tree-id11343 . -2) (#("_2" 0 1 (fontified t) 1 2 (fontified t)) . 2279) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1)) (26236 21122 632279 1000) 0 nil])
([nil nil ((2526 . 2527) (2524 . 2526) (2522 . 2524)) nil (26236 21613 605862 249000) 0 nil])
([nil nil ((#("std::placeholders::_2" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 17 (face font-lock-constant-face fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t)) . 2031) (undo-tree-id10178 . -20) (undo-tree-id10179 . -20) (undo-tree-id10180 . -20) (undo-tree-id10181 . -20) (undo-tree-id10183 . -20) (undo-tree-id10185 . -20) (undo-tree-id10187 . -20) (undo-tree-id10189 . -20) (undo-tree-id10191 . -20) (undo-tree-id10193 . -20) (undo-tree-id10195 . -20) (undo-tree-id10197 . -20) (undo-tree-id10199 . -20) (undo-tree-id10201 . -20) (undo-tree-id10203 . -20) (undo-tree-id10205 . -20) (undo-tree-id10207 . -20) (undo-tree-id10209 . -20) (undo-tree-id10211 . -20) (undo-tree-id10213 . -20) (undo-tree-id10215 . -20) (undo-tree-id10217 . -20) (undo-tree-id10219 . -20) (undo-tree-id10221 . -20) (undo-tree-id10223 . -20) (undo-tree-id10225 . -21) (undo-tree-id10226 . -20) (undo-tree-id10228 . -20) (undo-tree-id10230 . -20) (undo-tree-id10232 . -20) (undo-tree-id10234 . -20) (undo-tree-id10236 . -20) (undo-tree-id10238 . -17) (undo-tree-id10240 . -17) (undo-tree-id10242 . -17) (undo-tree-id10244 . -17) (undo-tree-id10246 . -17) (undo-tree-id10248 . -5) (undo-tree-id10250 . -5) (undo-tree-id10252 . -5) (undo-tree-id10254 . -5) (undo-tree-id10256 . -3) (undo-tree-id10258 . -3) (undo-tree-id10260 . -3) (undo-tree-id10262 . -3) (undo-tree-id10264 . -3) (undo-tree-id10266 . -21) (t 26236 20911 827304 649000)) ((2031 . 2052)) (26236 21122 447497 304000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2639) (undo-tree-id13595 . -1) (undo-tree-id13596 . -1) (undo-tree-id13597 . -1) (#("a" 0 1 (fontified t)) . -2640) (undo-tree-id13598 . -1) (undo-tree-id13599 . -1) (undo-tree-id13600 . -1) (#("t" 0 1 (fontified t)) . -2641) (undo-tree-id13601 . -1) (undo-tree-id13602 . -1) (undo-tree-id13603 . -1) (#("a" 0 1 (fontified t)) . -2642) (undo-tree-id13604 . -1) (undo-tree-id13605 . -1) (undo-tree-id13606 . -1) 2643 (2641 . 2643) (2639 . 2641) (2633 . 2639) (#("      " 0 6 (fontified nil)) . 2632) (undo-tree-id13607 . -6) (undo-tree-id13608 . -6) (2631 . 2639) (t 26236 21613 638935 808000)) nil (26236 21660 305041 569000) 0 nil])
([nil nil ((#("							       " 0 14 (fontified t)) . 2017) (undo-tree-id9969 . -13) (undo-tree-id9970 . -14) (undo-tree-id9971 . -14) (undo-tree-id9972 . -14) (undo-tree-id9973 . -14) (undo-tree-id9974 . -14) (undo-tree-id9976 . -14) (undo-tree-id9978 . -14) (undo-tree-id9980 . -14) (undo-tree-id9982 . -14) (undo-tree-id9984 . -14) (undo-tree-id9986 . -14) (undo-tree-id9988 . -14) (undo-tree-id9990 . -14) (undo-tree-id9992 . -14) (undo-tree-id9994 . -14) (undo-tree-id9996 . -14) (undo-tree-id9998 . -14) (undo-tree-id10000 . -14) (undo-tree-id10002 . -14) (undo-tree-id10004 . -14) (undo-tree-id10006 . -14) (undo-tree-id10008 . -14) (undo-tree-id10010 . -14) (undo-tree-id10012 . -14) (undo-tree-id10014 . -14) (undo-tree-id10016 . -14) (undo-tree-id10018 . -14) (undo-tree-id10020 . -14) (undo-tree-id10022 . -14) (undo-tree-id10024 . -14) (undo-tree-id10026 . -14) (undo-tree-id10028 . -14) (undo-tree-id10030 . -14) (undo-tree-id10032 . -14) (undo-tree-id10034 . -14) (undo-tree-id10036 . -14) (undo-tree-id10038 . -14) (undo-tree-id10040 . -14) (undo-tree-id10042 . -14) (undo-tree-id10044 . -14) (undo-tree-id10046 . -14) (undo-tree-id10048 . -14) (undo-tree-id10050 . -14) (undo-tree-id10052 . -14) (undo-tree-id10054 . -14) (undo-tree-id10056 . -14) (undo-tree-id10058 . -14) (undo-tree-id10060 . -14) (undo-tree-id10062 . -14) (undo-tree-id10064 . -14) (undo-tree-id10066 . -14) (undo-tree-id10068 . -14) (undo-tree-id10070 . -14) (undo-tree-id10072 . -14) (undo-tree-id10074 . -14) (undo-tree-id10076 . -14) (undo-tree-id10078 . -14) (undo-tree-id10080 . -14) (undo-tree-id10082 . -14) (undo-tree-id10084 . -14) (undo-tree-id10086 . -14) (undo-tree-id10088 . -14) (undo-tree-id10090 . -14) (undo-tree-id10092 . -14) (undo-tree-id10094 . -14) (undo-tree-id10096 . -14) (undo-tree-id10098 . -14) (undo-tree-id10100 . -14) (undo-tree-id10102 . -14) (undo-tree-id10104 . -14) (undo-tree-id10106 . -14) (undo-tree-id10108 . -14) (undo-tree-id10110 . -14) (undo-tree-id10112 . -14) (undo-tree-id10114 . -14) (undo-tree-id10116 . -14) (undo-tree-id10118 . -14) (undo-tree-id10120 . -14) (undo-tree-id10122 . -14) (undo-tree-id10124 . -14) (undo-tree-id10126 . -14) (undo-tree-id10128 . -14) (undo-tree-id10130 . -14) (undo-tree-id10132 . -14) (undo-tree-id10134 . -14) (undo-tree-id10136 . -14) (undo-tree-id10138 . -14) (undo-tree-id10140 . -14) (undo-tree-id10142 . -14) (undo-tree-id10144 . -14) (undo-tree-id10146 . -14) (undo-tree-id10148 . -14) (undo-tree-id10150 . -14) (undo-tree-id10152 . -14) (undo-tree-id10154 . -14) (undo-tree-id10156 . -14) (undo-tree-id10158 . -14) (undo-tree-id10160 . -14) (undo-tree-id10162 . -14) (undo-tree-id10164 . -14) (undo-tree-id10166 . -14) (undo-tree-id10168 . -14) (undo-tree-id10170 . -14) (undo-tree-id10172 . -14) (undo-tree-id10174 . -14) (undo-tree-id10176 . -14)) ((2017 . 2031)) (26236 21122 259987 529000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2597 . 2598) (nil fontified nil 2597 . 2598) (nil category c->-as-paren-syntax 2597 . 2598) (nil fontified nil 2596 . 2597) (nil fontified nil 2595 . 2596) (nil category c->-as-paren-syntax 2595 . 2596) (nil fontified nil 2594 . 2595) (nil fontified nil 2593 . 2594) (nil category c->-as-paren-syntax 2593 . 2594) (nil fontified nil 2589 . 2593) (nil fontified nil 2588 . 2589) (nil category c-<-as-paren-syntax 2588 . 2589) (nil fontified nil 2574 . 2588) (nil fontified nil 2573 . 2574) (nil category c-<-as-paren-syntax 2573 . 2574) (nil fontified nil 2531 . 2573) (nil fontified nil 2530 . 2531) (nil category c-<-as-paren-syntax 2530 . 2531) (nil fontified nil 2515 . 2530) (2515 . 2598)) nil (26236 21660 305011 872000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2016) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1) (undo-tree-id9683 . -1) (undo-tree-id9684 . -1) (undo-tree-id9685 . -1) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9689 . -1) (undo-tree-id9691 . -1) (undo-tree-id9693 . -1) (undo-tree-id9695 . -1) (undo-tree-id9697 . -1) (undo-tree-id9699 . -1) (undo-tree-id9701 . -1) (undo-tree-id9703 . -1) (undo-tree-id9705 . -1) (undo-tree-id9707 . -1) (undo-tree-id9709 . -1) (undo-tree-id9711 . -1) (undo-tree-id9713 . -1) (undo-tree-id9715 . -1) (undo-tree-id9717 . -1) (undo-tree-id9719 . -1) (undo-tree-id9721 . -1) (undo-tree-id9723 . -1) (undo-tree-id9725 . -1) (undo-tree-id9727 . -1) (undo-tree-id9729 . -1) (undo-tree-id9731 . -1) (undo-tree-id9733 . -1) (undo-tree-id9735 . -1) (undo-tree-id9737 . -1) (undo-tree-id9739 . -1) (undo-tree-id9741 . -1) (undo-tree-id9743 . -1) (undo-tree-id9745 . -1) (undo-tree-id9747 . -1) (undo-tree-id9749 . -1) (undo-tree-id9751 . -1) (undo-tree-id9753 . -1) (undo-tree-id9755 . -1) (undo-tree-id9757 . -1) (undo-tree-id9759 . -1) (undo-tree-id9761 . -1) (undo-tree-id9763 . -1) (undo-tree-id9765 . -1) (undo-tree-id9767 . -1) (undo-tree-id9769 . -1) (undo-tree-id9771 . -1) (undo-tree-id9773 . -1) (undo-tree-id9775 . -1) (undo-tree-id9777 . -1) (undo-tree-id9779 . -1) (undo-tree-id9781 . -1) (undo-tree-id9783 . -1) (undo-tree-id9785 . -1) (undo-tree-id9787 . -1) (undo-tree-id9789 . -1) (undo-tree-id9791 . -1) (undo-tree-id9793 . -1) (undo-tree-id9795 . -1) (undo-tree-id9797 . -1) (undo-tree-id9799 . -1) (undo-tree-id9801 . -1) (undo-tree-id9803 . -1) (undo-tree-id9805 . -1) (undo-tree-id9807 . -1) (undo-tree-id9809 . -1) (undo-tree-id9811 . -1) (undo-tree-id9813 . -1) (undo-tree-id9815 . -1) (undo-tree-id9817 . -1) (undo-tree-id9819 . -1) (undo-tree-id9821 . -1) (undo-tree-id9823 . -1) (undo-tree-id9825 . -1) (undo-tree-id9827 . -1) (undo-tree-id9829 . -1) (undo-tree-id9831 . -1) (undo-tree-id9833 . -1) (undo-tree-id9835 . -1) (undo-tree-id9837 . -1) (undo-tree-id9839 . -1) (undo-tree-id9841 . -1) (undo-tree-id9843 . -1) (undo-tree-id9845 . -1) (undo-tree-id9847 . -1) (undo-tree-id9849 . -1) (undo-tree-id9851 . -1) (undo-tree-id9853 . -1) (undo-tree-id9855 . -1) (undo-tree-id9857 . -1) (undo-tree-id9859 . -1) (undo-tree-id9861 . -1) (undo-tree-id9863 . -1) (undo-tree-id9865 . -1) (undo-tree-id9867 . -1) (undo-tree-id9869 . -1) (undo-tree-id9871 . -1) (undo-tree-id9873 . -1) (undo-tree-id9875 . -1) (undo-tree-id9877 . -1) (undo-tree-id9879 . -1) (undo-tree-id9881 . -1) (undo-tree-id9883 . -1) (undo-tree-id9885 . -1) (undo-tree-id9887 . -1) (undo-tree-id9889 . -1) (undo-tree-id9891 . -1) (undo-tree-id9893 . -1) (undo-tree-id9895 . -1) (undo-tree-id9897 . -1) (undo-tree-id9899 . -1) (undo-tree-id9901 . -1) (undo-tree-id9903 . -1) (undo-tree-id9905 . -1) (undo-tree-id9907 . -1) (undo-tree-id9909 . -1) (undo-tree-id9911 . -1) (undo-tree-id9913 . -1) (undo-tree-id9915 . -1) (undo-tree-id9917 . -1) (undo-tree-id9919 . -1) (undo-tree-id9921 . -1) (undo-tree-id9923 . -1) (undo-tree-id9925 . -1) (undo-tree-id9927 . -1) (undo-tree-id9929 . -1) (undo-tree-id9931 . -1) (undo-tree-id9933 . -1) (undo-tree-id9935 . -1) (undo-tree-id9937 . -1) (undo-tree-id9939 . -1) (undo-tree-id9941 . -1) (undo-tree-id9943 . -1) (undo-tree-id9945 . -1) (undo-tree-id9947 . -1) (undo-tree-id9949 . -1) (undo-tree-id9951 . -1) (undo-tree-id9953 . -1) (undo-tree-id9955 . -1) (undo-tree-id9957 . -1) (undo-tree-id9959 . -1) (undo-tree-id9961 . -1) (undo-tree-id9963 . -1) (undo-tree-id9965 . -1) (undo-tree-id9967 . -1) 2017) ((2016 . 2017)) (26236 21122 94656 902000) 0 nil])
([nil nil ((2515 . 2521) 2560) nil (26236 21660 305003 792000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2015) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9400 . -1) (undo-tree-id9402 . -1) (undo-tree-id9404 . -1) (undo-tree-id9406 . -1) (undo-tree-id9408 . -1) (undo-tree-id9410 . -1) (undo-tree-id9412 . -1) (undo-tree-id9414 . -1) (undo-tree-id9416 . -1) (undo-tree-id9418 . -1) (undo-tree-id9420 . -1) (undo-tree-id9422 . -1) (undo-tree-id9424 . -1) (undo-tree-id9426 . -1) (undo-tree-id9428 . -1) (undo-tree-id9430 . -1) (undo-tree-id9432 . -1) (undo-tree-id9434 . -1) (undo-tree-id9436 . -1) (undo-tree-id9438 . -1) (undo-tree-id9440 . -1) (undo-tree-id9442 . -1) (undo-tree-id9444 . -1) (undo-tree-id9446 . -1) (undo-tree-id9448 . -1) (undo-tree-id9450 . -1) (undo-tree-id9452 . -1) (undo-tree-id9454 . -1) (undo-tree-id9456 . -1) (undo-tree-id9458 . -1) (undo-tree-id9460 . -1) (undo-tree-id9462 . -1) (undo-tree-id9464 . -1) (undo-tree-id9466 . -1) (undo-tree-id9468 . -1) (undo-tree-id9470 . -1) (undo-tree-id9472 . -1) (undo-tree-id9474 . -1) (undo-tree-id9476 . -1) (undo-tree-id9478 . -1) (undo-tree-id9480 . -1) (undo-tree-id9482 . -1) (undo-tree-id9484 . -1) (undo-tree-id9486 . -1) (undo-tree-id9488 . -1) (undo-tree-id9490 . -1) (undo-tree-id9492 . -1) (undo-tree-id9494 . -1) (undo-tree-id9496 . -1) (undo-tree-id9498 . -1) (undo-tree-id9500 . -1) (undo-tree-id9502 . -1) (undo-tree-id9504 . -1) (undo-tree-id9506 . -1) (undo-tree-id9508 . -1) (undo-tree-id9510 . -1) (undo-tree-id9512 . -1) (undo-tree-id9514 . -1) (undo-tree-id9516 . -1) (undo-tree-id9518 . -1) (undo-tree-id9520 . -1) (undo-tree-id9522 . -1) (undo-tree-id9524 . -1) (undo-tree-id9526 . -1) (undo-tree-id9528 . -1) (undo-tree-id9530 . -1) (undo-tree-id9532 . -1) (undo-tree-id9534 . -1) (undo-tree-id9536 . -1) (undo-tree-id9538 . -1) (undo-tree-id9540 . -1) (undo-tree-id9542 . -1) (undo-tree-id9544 . -1) (undo-tree-id9546 . -1) (undo-tree-id9548 . -1) (undo-tree-id9550 . -1) (undo-tree-id9552 . -1) (undo-tree-id9554 . -1) (undo-tree-id9556 . -1) (undo-tree-id9558 . -1) (undo-tree-id9560 . -1) (undo-tree-id9562 . -1) (undo-tree-id9564 . -1) (undo-tree-id9566 . -1) (undo-tree-id9568 . -1) (undo-tree-id9570 . -1) (undo-tree-id9572 . -1) (undo-tree-id9574 . -1) (undo-tree-id9576 . -1) (undo-tree-id9578 . -1) (undo-tree-id9580 . -1) (undo-tree-id9582 . -1) (undo-tree-id9584 . -1) (undo-tree-id9586 . -1) (undo-tree-id9588 . -1) (undo-tree-id9590 . -1) (undo-tree-id9592 . -1) (undo-tree-id9594 . -1) (undo-tree-id9596 . -1) (undo-tree-id9598 . -1) (undo-tree-id9600 . -1) (undo-tree-id9602 . -1) (undo-tree-id9604 . -1) (undo-tree-id9606 . -1) (undo-tree-id9608 . -1) (undo-tree-id9610 . -1) (undo-tree-id9612 . -1) (undo-tree-id9614 . -1) (undo-tree-id9616 . -1) (undo-tree-id9618 . -1) (undo-tree-id9620 . -1) (undo-tree-id9622 . -1) (undo-tree-id9624 . -1) (undo-tree-id9626 . -1) (undo-tree-id9628 . -1) (undo-tree-id9630 . -1) (undo-tree-id9632 . -1) (undo-tree-id9634 . -1) (undo-tree-id9636 . -1) (undo-tree-id9638 . -1) (undo-tree-id9640 . -1) (undo-tree-id9642 . -1) (undo-tree-id9644 . -1) (undo-tree-id9646 . -1) (undo-tree-id9648 . -1) (undo-tree-id9650 . -1) (undo-tree-id9652 . -1) (undo-tree-id9654 . -1) (undo-tree-id9656 . -1) (undo-tree-id9658 . -1) (undo-tree-id9660 . -1) (undo-tree-id9662 . -1) (undo-tree-id9664 . -1) (undo-tree-id9666 . -1) (undo-tree-id9668 . -1) (undo-tree-id9670 . -1) (undo-tree-id9672 . -1) (undo-tree-id9674 . -1) (undo-tree-id9676 . -1) (undo-tree-id9678 . -1)) ((2015 . 2016)) (26236 21121 880093 95000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2600) (undo-tree-id13572 . -1) (undo-tree-id13573 . -1) (undo-tree-id13574 . -1) (undo-tree-id13575 . -1) (undo-tree-id13576 . -1) (undo-tree-id13577 . -1) (undo-tree-id13578 . -1) (undo-tree-id13579 . -1) (undo-tree-id13580 . -1) (undo-tree-id13581 . -1) (undo-tree-id13582 . -1) (undo-tree-id13583 . -1) (undo-tree-id13584 . -1) (undo-tree-id13585 . -1) (undo-tree-id13586 . -1) (undo-tree-id13587 . -1) (undo-tree-id13588 . -1) (undo-tree-id13589 . -1) (undo-tree-id13590 . -1) (undo-tree-id13591 . -1) (undo-tree-id13592 . -1) (undo-tree-id13593 . -1) (undo-tree-id13594 . -1)) nil (26236 21660 304999 180000) 0 nil])
([nil nil ((#("std" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t)) . 2223) (undo-tree-id10777 . -2) (t 26236 20937 617465 939000)) ((2223 . 2226)) (26236 21121 687193 450000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2601) (undo-tree-id13554 . -1) (undo-tree-id13555 . -1) (undo-tree-id13556 . -1) (undo-tree-id13557 . -1) (undo-tree-id13558 . -1) (undo-tree-id13559 . -1) (undo-tree-id13560 . -1) (undo-tree-id13561 . -1) (undo-tree-id13562 . -1) (undo-tree-id13563 . -1) (undo-tree-id13564 . -1) (undo-tree-id13565 . -1) (undo-tree-id13566 . -1) (undo-tree-id13567 . -1) (undo-tree-id13568 . -1) (undo-tree-id13569 . -1) (undo-tree-id13570 . -1) (undo-tree-id13571 . -1)) nil (26236 21660 304957 181000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 2223) (undo-tree-id10776 . -1)) ((2223 . 2225)) (26236 21121 507640 970000) 0 nil])
([nil nil ((#("      auto data = future.get();
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 31 (fontified t) 31 32 (fontified t)) . 2603) (undo-tree-id13500 . -31) (undo-tree-id13501 . -6) (undo-tree-id13502 . -6) (undo-tree-id13503 . -6) (undo-tree-id13504 . -6) (undo-tree-id13505 . -28) (undo-tree-id13506 . -28) (undo-tree-id13507 . -30) (undo-tree-id13508 . -30) (undo-tree-id13509 . -30) (undo-tree-id13510 . -30) (undo-tree-id13511 . -30) (undo-tree-id13512 . -30) (undo-tree-id13513 . -30) (undo-tree-id13514 . -30) (undo-tree-id13515 . -28) (undo-tree-id13516 . -28) (undo-tree-id13517 . -28) (undo-tree-id13518 . -28) (undo-tree-id13519 . -28) (undo-tree-id13520 . -28) (undo-tree-id13521 . -28) (undo-tree-id13522 . -28) (undo-tree-id13523 . -28) (undo-tree-id13524 . -28) (undo-tree-id13525 . -28) (undo-tree-id13526 . -28) (undo-tree-id13527 . -28) (undo-tree-id13528 . -28) (undo-tree-id13529 . -28) (undo-tree-id13530 . -28) (undo-tree-id13531 . -28) (undo-tree-id13532 . -28) (undo-tree-id13533 . -28) (undo-tree-id13534 . -28) (undo-tree-id13535 . -28) (undo-tree-id13536 . -28) (undo-tree-id13537 . -28) (undo-tree-id13538 . -28) (undo-tree-id13539 . -28) (undo-tree-id13540 . -28) (undo-tree-id13541 . -28) (undo-tree-id13542 . -28) (undo-tree-id13543 . -28) (undo-tree-id13544 . -28) (undo-tree-id13545 . -28) (undo-tree-id13546 . -28) (undo-tree-id13547 . -28) (undo-tree-id13548 . -28) (undo-tree-id13549 . -28) (undo-tree-id13550 . -28) (undo-tree-id13551 . -28) (undo-tree-id13552 . -28) (undo-tree-id13553 . -32) 2631) nil (26236 21660 304918 40000) 0 nil])
([nil nil ((#("placeholders" 0 12 (face font-lock-constant-face fontified t)) . 2223) (undo-tree-id10775 . -11)) ((2223 . 2235)) (26236 21121 273001 872000) 0 nil])
([nil nil ((2620 . 2622) (2617 . 2620) (2612 . 2617) (2608 . 2612) (2607 . 2608) (2602 . 2607)) nil (26236 21660 304809 135000) 0 nil])
([nil nil ((#("::_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2223) (undo-tree-id10769 . -2) (undo-tree-id10770 . -3) (undo-tree-id10771 . -3) (undo-tree-id10772 . -3) (undo-tree-id10774 . -3)) ((2223 . 2226)) (26236 21121 60665 53000) 0 nil])
([nil nil ((2622 . 2623)) nil (26236 21660 304797 22000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 2223)) ((2223 . 2224)) (26236 21120 847651 206000) 0 nil])
([nil nil ((2720 . 2721) (2719 . 2720) (2715 . 2719) (#("data" 0 4 (fontified nil)) . -2715) (2715 . 2719) (t 26236 21660 345987 666000)) nil (26236 21721 617904 19000) 0 nil])
([nil nil ((#("							       " 0 14 (fontified t)) . 2209) (undo-tree-id10552 . -13) (undo-tree-id10553 . -14) (undo-tree-id10554 . -14) (undo-tree-id10555 . -14) (undo-tree-id10556 . -14) (undo-tree-id10558 . -14) (undo-tree-id10560 . -14) (undo-tree-id10562 . -14) (undo-tree-id10564 . -14) (undo-tree-id10566 . -14) (undo-tree-id10568 . -14) (undo-tree-id10570 . -14) (undo-tree-id10572 . -14) (undo-tree-id10574 . -14) (undo-tree-id10576 . -14) (undo-tree-id10578 . -14) (undo-tree-id10580 . -14) (undo-tree-id10582 . -14) (undo-tree-id10584 . -14) (undo-tree-id10586 . -14) (undo-tree-id10588 . -14) (undo-tree-id10590 . -14) (undo-tree-id10592 . -14) (undo-tree-id10594 . -14) (undo-tree-id10596 . -14) (undo-tree-id10598 . -14) (undo-tree-id10600 . -14) (undo-tree-id10602 . -14) (undo-tree-id10604 . -14) (undo-tree-id10606 . -14) (undo-tree-id10608 . -14) (undo-tree-id10610 . -14) (undo-tree-id10612 . -14) (undo-tree-id10614 . -14) (undo-tree-id10616 . -14) (undo-tree-id10618 . -14) (undo-tree-id10620 . -14) (undo-tree-id10622 . -14) (undo-tree-id10624 . -14) (undo-tree-id10626 . -14) (undo-tree-id10628 . -14) (undo-tree-id10630 . -14) (undo-tree-id10632 . -14) (undo-tree-id10634 . -14) (undo-tree-id10636 . -14) (undo-tree-id10638 . -14) (undo-tree-id10640 . -14) (undo-tree-id10642 . -14) (undo-tree-id10644 . -14) (undo-tree-id10646 . -14) (undo-tree-id10648 . -14) (undo-tree-id10650 . -14) (undo-tree-id10652 . -14) (undo-tree-id10654 . -14) (undo-tree-id10656 . -14) (undo-tree-id10658 . -14) (undo-tree-id10660 . -14) (undo-tree-id10662 . -14) (undo-tree-id10664 . -14) (undo-tree-id10666 . -14) (undo-tree-id10668 . -14) (undo-tree-id10670 . -14) (undo-tree-id10672 . -14) (undo-tree-id10674 . -14) (undo-tree-id10676 . -14) (undo-tree-id10678 . -14) (undo-tree-id10680 . -14) (undo-tree-id10682 . -14) (undo-tree-id10684 . -14) (undo-tree-id10686 . -14) (undo-tree-id10688 . -14) (undo-tree-id10690 . -14) (undo-tree-id10692 . -14) (undo-tree-id10694 . -14) (undo-tree-id10696 . -14) (undo-tree-id10698 . -14) (undo-tree-id10700 . -14) (undo-tree-id10702 . -14) (undo-tree-id10704 . -14) (undo-tree-id10706 . -14) (undo-tree-id10708 . -14) (undo-tree-id10710 . -14) (undo-tree-id10712 . -14) (undo-tree-id10714 . -14) (undo-tree-id10716 . -14) (undo-tree-id10718 . -14) (undo-tree-id10720 . -14) (undo-tree-id10722 . -14) (undo-tree-id10724 . -14) (undo-tree-id10726 . -14) (undo-tree-id10728 . -14) (undo-tree-id10730 . -14) (undo-tree-id10732 . -14) (undo-tree-id10734 . -14) (undo-tree-id10736 . -14) (undo-tree-id10738 . -14) (undo-tree-id10740 . -14) (undo-tree-id10742 . -14) (undo-tree-id10744 . -14) (undo-tree-id10746 . -14) (undo-tree-id10748 . -14) (undo-tree-id10750 . -14) (undo-tree-id10752 . -14) (undo-tree-id10754 . -14) (undo-tree-id10756 . -14) (undo-tree-id10758 . -14) (undo-tree-id10760 . -14) (undo-tree-id10762 . -14) (undo-tree-id10764 . -14) (undo-tree-id10766 . -14)) ((2209 . 2223)) (26236 21120 661121 941000) 0 nil])
([nil nil ((#("      data->
" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 2709) (undo-tree-id13735 . -12) (undo-tree-id13736 . -12) (undo-tree-id13737 . -12) (undo-tree-id13738 . -13) (undo-tree-id13739 . -5) (undo-tree-id13740 . -5) (undo-tree-id13741 . -5) (undo-tree-id13742 . -11) (undo-tree-id13743 . 1) 2720) nil (26236 21721 617899 150000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2208) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10275 . -1) (undo-tree-id10277 . -1) (undo-tree-id10279 . -1) (undo-tree-id10281 . -1) (undo-tree-id10283 . -1) (undo-tree-id10285 . -1) (undo-tree-id10287 . -1) (undo-tree-id10289 . -1) (undo-tree-id10291 . -1) (undo-tree-id10293 . -1) (undo-tree-id10295 . -1) (undo-tree-id10297 . -1) (undo-tree-id10299 . -1) (undo-tree-id10301 . -1) (undo-tree-id10303 . -1) (undo-tree-id10305 . -1) (undo-tree-id10307 . -1) (undo-tree-id10309 . -1) (undo-tree-id10311 . -1) (undo-tree-id10313 . -1) (undo-tree-id10315 . -1) (undo-tree-id10317 . -1) (undo-tree-id10319 . -1) (undo-tree-id10321 . -1) (undo-tree-id10323 . -1) (undo-tree-id10325 . -1) (undo-tree-id10327 . -1) (undo-tree-id10329 . -1) (undo-tree-id10331 . -1) (undo-tree-id10333 . -1) (undo-tree-id10335 . -1) (undo-tree-id10337 . -1) (undo-tree-id10339 . -1) (undo-tree-id10341 . -1) (undo-tree-id10343 . -1) (undo-tree-id10345 . -1) (undo-tree-id10347 . -1) (undo-tree-id10349 . -1) (undo-tree-id10351 . -1) (undo-tree-id10353 . -1) (undo-tree-id10355 . -1) (undo-tree-id10357 . -1) (undo-tree-id10359 . -1) (undo-tree-id10361 . -1) (undo-tree-id10363 . -1) (undo-tree-id10365 . -1) (undo-tree-id10367 . -1) (undo-tree-id10369 . -1) (undo-tree-id10371 . -1) (undo-tree-id10373 . -1) (undo-tree-id10375 . -1) (undo-tree-id10377 . -1) (undo-tree-id10379 . -1) (undo-tree-id10381 . -1) (undo-tree-id10383 . -1) (undo-tree-id10385 . -1) (undo-tree-id10387 . -1) (undo-tree-id10389 . -1) (undo-tree-id10391 . -1) (undo-tree-id10393 . -1) (undo-tree-id10395 . -1) (undo-tree-id10397 . -1) (undo-tree-id10399 . -1) (undo-tree-id10401 . -1) (undo-tree-id10403 . -1) (undo-tree-id10405 . -1) (undo-tree-id10407 . -1) (undo-tree-id10409 . -1) (undo-tree-id10411 . -1) (undo-tree-id10413 . -1) (undo-tree-id10415 . -1) (undo-tree-id10417 . -1) (undo-tree-id10419 . -1) (undo-tree-id10421 . -1) (undo-tree-id10423 . -1) (undo-tree-id10425 . -1) (undo-tree-id10427 . -1) (undo-tree-id10429 . -1) (undo-tree-id10431 . -1) (undo-tree-id10433 . -1) (undo-tree-id10435 . -1) (undo-tree-id10437 . -1) (undo-tree-id10439 . -1) (undo-tree-id10441 . -1) (undo-tree-id10443 . -1) (undo-tree-id10445 . -1) (undo-tree-id10447 . -1) (undo-tree-id10449 . -1) (undo-tree-id10451 . -1) (undo-tree-id10453 . -1) (undo-tree-id10455 . -1) (undo-tree-id10457 . -1) (undo-tree-id10459 . -1) (undo-tree-id10461 . -1) (undo-tree-id10463 . -1) (undo-tree-id10465 . -1) (undo-tree-id10467 . -1) (undo-tree-id10469 . -1) (undo-tree-id10471 . -1) (undo-tree-id10473 . -1) (undo-tree-id10475 . -1) (undo-tree-id10477 . -1) (undo-tree-id10479 . -1) (undo-tree-id10481 . -1) (undo-tree-id10483 . -1) (undo-tree-id10485 . -1) (undo-tree-id10487 . -1) (undo-tree-id10489 . -1) (undo-tree-id10491 . -1) (undo-tree-id10493 . -1) (undo-tree-id10495 . -1) (undo-tree-id10497 . -1) (undo-tree-id10499 . -1) (undo-tree-id10501 . -1) (undo-tree-id10503 . -1) (undo-tree-id10505 . -1) (undo-tree-id10507 . -1) (undo-tree-id10509 . -1) (undo-tree-id10511 . -1) (undo-tree-id10513 . -1) (undo-tree-id10515 . -1) (undo-tree-id10517 . -1) (undo-tree-id10519 . -1) (undo-tree-id10521 . -1) (undo-tree-id10523 . -1) (undo-tree-id10525 . -1) (undo-tree-id10527 . -1) (undo-tree-id10529 . -1) (undo-tree-id10531 . -1) (undo-tree-id10533 . -1) (undo-tree-id10535 . -1) (undo-tree-id10537 . -1) (undo-tree-id10539 . -1) (undo-tree-id10541 . -1) (undo-tree-id10543 . -1) (undo-tree-id10545 . -1) (undo-tree-id10547 . -1) (undo-tree-id10549 . -1) (undo-tree-id10551 . -1) 2209) ((2208 . 2209)) (26236 21120 493185 844000) 0 nil])
([nil nil ((#("data" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2692) (undo-tree-id13733 . -3) (undo-tree-id13734 . -4)) nil (26236 21721 617882 567000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2207) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10782 . -1) (undo-tree-id10784 . -1) (undo-tree-id10786 . -1) (undo-tree-id10788 . -1) (undo-tree-id10790 . -1) (undo-tree-id10792 . -1) (undo-tree-id10794 . -1) (undo-tree-id10796 . -1) (undo-tree-id10798 . -1) (undo-tree-id10800 . -1) (undo-tree-id10802 . -1) (undo-tree-id10804 . -1) (undo-tree-id10806 . -1) (undo-tree-id10808 . -1) (undo-tree-id10810 . -1) (undo-tree-id10812 . -1) (undo-tree-id10814 . -1) (undo-tree-id10816 . -1) (undo-tree-id10818 . -1) (undo-tree-id10820 . -1) (undo-tree-id10822 . -1) (undo-tree-id10824 . -1) (undo-tree-id10826 . -1) (undo-tree-id10828 . -1) (undo-tree-id10830 . -1) (undo-tree-id10832 . -1) (undo-tree-id10834 . -1) (undo-tree-id10836 . -1) (undo-tree-id10838 . -1) (undo-tree-id10840 . -1) (undo-tree-id10842 . -1) (undo-tree-id10844 . -1) (undo-tree-id10846 . -1) (undo-tree-id10848 . -1) (undo-tree-id10850 . -1) (undo-tree-id10852 . -1) (undo-tree-id10854 . -1) (undo-tree-id10856 . -1) (undo-tree-id10858 . -1) (undo-tree-id10860 . -1) (undo-tree-id10862 . -1) (undo-tree-id10864 . -1) (undo-tree-id10866 . -1) (undo-tree-id10868 . -1) (undo-tree-id10870 . -1) (undo-tree-id10872 . -1) (undo-tree-id10874 . -1) (undo-tree-id10876 . -1) (undo-tree-id10878 . -1) (undo-tree-id10880 . -1) (undo-tree-id10882 . -1) (undo-tree-id10884 . -1) (undo-tree-id10886 . -1) (undo-tree-id10888 . -1) (undo-tree-id10890 . -1) (undo-tree-id10892 . -1) (undo-tree-id10894 . -1) (undo-tree-id10896 . -1) (undo-tree-id10898 . -1) (undo-tree-id10900 . -1) (undo-tree-id10902 . -1) (undo-tree-id10904 . -1) (undo-tree-id10906 . -1) (undo-tree-id10908 . -1) (undo-tree-id10910 . -1) (undo-tree-id10912 . -1) (undo-tree-id10914 . -1) (undo-tree-id10916 . -1) (undo-tree-id10918 . -1) (undo-tree-id10920 . -1) (undo-tree-id10922 . -1) (undo-tree-id10924 . -1) (undo-tree-id10926 . -1) (undo-tree-id10928 . -1) (undo-tree-id10930 . -1) (undo-tree-id10932 . -1) (undo-tree-id10934 . -1) (undo-tree-id10936 . -1) (undo-tree-id10938 . -1) (undo-tree-id10940 . -1) (undo-tree-id10942 . -1) (undo-tree-id10944 . -1) (undo-tree-id10946 . -1) (undo-tree-id10948 . -1) (undo-tree-id10950 . -1) (undo-tree-id10952 . -1) (undo-tree-id10954 . -1) (undo-tree-id10956 . -1) (undo-tree-id10958 . -1) (undo-tree-id10960 . -1) (undo-tree-id10962 . -1) (undo-tree-id10964 . -1) (undo-tree-id10966 . -1) (undo-tree-id10968 . -1) (undo-tree-id10970 . -1) (undo-tree-id10972 . -1) (undo-tree-id10974 . -1) (undo-tree-id10976 . -1) (undo-tree-id10978 . -1) (undo-tree-id10980 . -1) (undo-tree-id10982 . -1) (undo-tree-id10984 . -1) (undo-tree-id10986 . -1) (undo-tree-id10988 . -1) (undo-tree-id10990 . -1) (undo-tree-id10992 . -1) (undo-tree-id10994 . -1) (undo-tree-id10996 . -1) (undo-tree-id10998 . -1) (undo-tree-id11000 . -1) (undo-tree-id11002 . -1) (undo-tree-id11004 . -1) (undo-tree-id11006 . -1) (undo-tree-id11008 . -1) (undo-tree-id11010 . -1) (undo-tree-id11012 . -1) (undo-tree-id11014 . -1) (undo-tree-id11016 . -1) (undo-tree-id11018 . -1) (undo-tree-id11020 . -1) (undo-tree-id11022 . -1) (undo-tree-id11024 . -1) (undo-tree-id11026 . -1) (undo-tree-id11028 . -1) (undo-tree-id11030 . -1) (undo-tree-id11032 . -1) (undo-tree-id11034 . -1) (undo-tree-id11036 . -1) (undo-tree-id11038 . -1) (undo-tree-id11040 . -1) (undo-tree-id11042 . -1) (undo-tree-id11044 . -1) (undo-tree-id11046 . -1) (undo-tree-id11048 . -1) (undo-tree-id11050 . -1) (undo-tree-id11052 . -1) (undo-tree-id11054 . -1) (undo-tree-id11056 . -1) (undo-tree-id11058 . -1) (t 26236 20944 867101 893000)) ((2207 . 2208)) (26236 21120 283222 87000) 0 nil])
([nil nil ((#("->" 0 1 (fontified t) 1 2 (fontified t)) . 2692) (undo-tree-id13729 . -1) (undo-tree-id13730 . -1) (undo-tree-id13731 . -1) (undo-tree-id13732 . -2)) nil (26236 21721 617877 131000) 0 nil])
([nil nil ((#("unsigned " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (fontified t)) . 2314) (undo-tree-id11075 . -8) (t 26236 20946 847542 723000)) ((2314 . 2323)) (26236 21120 101955 712000) 0 nil])
([nil nil ((#("success" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 2692) (undo-tree-id13725 . -6) (undo-tree-id13726 . -7) (undo-tree-id13727 . -7) (undo-tree-id13728 . -7)) nil (26236 21721 617865 255000) 0 nil])
([nil nil ((#("int " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . 2314) (undo-tree-id11074 . -3)) ((2314 . 2318)) (26236 21119 920759 811000) 0 nil])
([nil nil ((2706 . 2707) (2705 . 2706) (2701 . 2705) (#("da" 0 2 (fontified nil)) . 2701) (2701 . 2703) (#("data" 0 4 (fontified nil)) . -2701) (2701 . 2705) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2701) (undo-tree-id13723 . -2) (undo-tree-id13724 . -2) 2703 (2701 . 2703) (2695 . 2701)) nil (26236 21721 617853 171000) 0 nil])
([nil nil ((#("index" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 2314) (undo-tree-id11072 . -4)) ((2314 . 2319)) (26236 21119 766378 430000) 0 nil])
([nil nil ((#("      data->
" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 2695) (undo-tree-id13682 . 1) (undo-tree-id13683 . -12) (undo-tree-id13684 . -13) (undo-tree-id13685 . -12) (undo-tree-id13686 . -13) (undo-tree-id13687 . -13) (undo-tree-id13688 . -13) (undo-tree-id13689 . -13) (undo-tree-id13690 . -11) (undo-tree-id13691 . -11) (undo-tree-id13692 . 1) (undo-tree-id13693 . -12) (undo-tree-id13694 . -12) (undo-tree-id13695 . -12) (undo-tree-id13696 . -12) (undo-tree-id13697 . -12) (undo-tree-id13698 . -12) (undo-tree-id13699 . -12) (undo-tree-id13700 . -12) (undo-tree-id13701 . -12) (undo-tree-id13702 . -12) (undo-tree-id13703 . -11) (undo-tree-id13704 . -11) (undo-tree-id13705 . -11) (undo-tree-id13706 . -11) (undo-tree-id13707 . -11) (undo-tree-id13708 . -11) (undo-tree-id13709 . -11) (undo-tree-id13710 . -11) (undo-tree-id13711 . -11) (undo-tree-id13712 . -11) (undo-tree-id13713 . -11) (undo-tree-id13714 . -11) (undo-tree-id13715 . -11) (undo-tree-id13716 . -11) (undo-tree-id13717 . -11) (undo-tree-id13718 . -11) (undo-tree-id13719 . -11) (undo-tree-id13720 . -11) (undo-tree-id13721 . -11) (undo-tree-id13722 . -13) 2706) nil (26236 21721 617839 75000) 0 nil])
([nil nil ((#("," 0 1 (c-type c-decl-arg-start fontified t)) . 2312) (undo-tree-id11060 . -1) (undo-tree-id11062 . -1) (undo-tree-id11064 . -1) (undo-tree-id11066 . -1) (undo-tree-id11068 . -1) (undo-tree-id11070 . -1)) ((2312 . 2313)) (26236 21119 564350 27000) 0 nil])
([nil nil ((2698 . 2705) (#("success" 0 7 (fontified nil)) . -2698) (2698 . 2705) (#("su" 0 1 (fontified t) 1 2 (fontified t)) . -2698) (undo-tree-id13609 . -2) (undo-tree-id13610 . -2) (undo-tree-id13611 . -1) (undo-tree-id13612 . -1) (undo-tree-id13613 . -1) (undo-tree-id13614 . -1) (undo-tree-id13615 . -1) (undo-tree-id13616 . -1) (undo-tree-id13617 . -1) (undo-tree-id13618 . -1) (undo-tree-id13619 . -1) (undo-tree-id13620 . -1) (undo-tree-id13621 . -1) (undo-tree-id13622 . -1) (undo-tree-id13623 . -1) (undo-tree-id13624 . -1) (undo-tree-id13625 . -1) (undo-tree-id13626 . -1) (undo-tree-id13627 . -2) (undo-tree-id13628 . -2) (undo-tree-id13629 . -2) (undo-tree-id13630 . -2) (undo-tree-id13631 . -2) (undo-tree-id13632 . -2) (undo-tree-id13633 . -2) (undo-tree-id13634 . -2) (undo-tree-id13635 . -2) (undo-tree-id13636 . -2) (undo-tree-id13637 . -2) (undo-tree-id13638 . -2) (undo-tree-id13639 . -2) (undo-tree-id13640 . -2) (undo-tree-id13641 . -2) (undo-tree-id13642 . -2) (undo-tree-id13643 . -2) (undo-tree-id13644 . -2) (undo-tree-id13645 . -2) (undo-tree-id13646 . -2) (undo-tree-id13647 . -2) (undo-tree-id13648 . -2) (undo-tree-id13649 . -2) (undo-tree-id13650 . -2) (undo-tree-id13651 . -2) (undo-tree-id13652 . -2) (undo-tree-id13653 . -2) (undo-tree-id13654 . -2) (undo-tree-id13655 . -2) (undo-tree-id13656 . -2) (undo-tree-id13657 . -2) (undo-tree-id13658 . -2) (undo-tree-id13659 . -2) (undo-tree-id13660 . -2) (undo-tree-id13661 . -2) (undo-tree-id13662 . -2) (undo-tree-id13663 . -2) (undo-tree-id13664 . -2) (undo-tree-id13665 . -2) (undo-tree-id13666 . -2) (undo-tree-id13667 . -2) (undo-tree-id13668 . -2) (undo-tree-id13669 . -2) (undo-tree-id13670 . -2) (undo-tree-id13671 . -2) (undo-tree-id13672 . -2) (undo-tree-id13673 . -2) (undo-tree-id13674 . -2) (undo-tree-id13675 . -2) (undo-tree-id13676 . -2) (undo-tree-id13677 . -2) (undo-tree-id13678 . -2) (undo-tree-id13679 . -2) 2700 (2698 . 2700) (2697 . 2698) (2696 . 2697) (2692 . 2696) (#("d" 0 1 (fontified nil)) . 2692) (2692 . 2693) (#("data" 0 4 (fontified nil)) . -2692) (2692 . 2696) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2692) (undo-tree-id13680 . -2) (undo-tree-id13681 . -2) 2694 (2692 . 2694)) nil (26236 22023 32880 500000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2312) (undo-tree-id11077 . -1) (t 26236 20966 283749 988000)) ((2312 . 2313)) (26236 21119 410777 90000) 0 nil])
([nil nil ((#("rclcpp" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face fontified t)) . 654) (undo-tree-id14104 . -5)) nil (26236 22066 413250 698000) 0 nil] [nil nil ((#("const char* service_name = \"lifetalker/change_state\";
" 0 1 (face font-lock-keyword-face fontified t c-is-sws t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face c-type c-decl-id-start fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (face font-lock-variable-name-face fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 22 (face font-lock-variable-name-face fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (face font-lock-string-face fontified t) 28 29 (face font-lock-string-face fontified t) 29 30 (face font-lock-string-face fontified t) 30 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 34 (face font-lock-string-face fontified t) 34 35 (face font-lock-string-face fontified t) 35 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (fontified t) 53 54 (rear-nonsticky t fontified t)) . 477) (undo-tree-id13845 . -53) (undo-tree-id13846 . -32) (undo-tree-id13848 . -32) (undo-tree-id13850 . -32) (undo-tree-id13852 . -32) (undo-tree-id13854 . -32) (undo-tree-id13856 . -32) (undo-tree-id13858 . -32) (undo-tree-id13860 . -32) (undo-tree-id13862 . -32) (undo-tree-id13864 . -54) 509 (t 26236 21721 654964 925000)) ((477 . 531)) (26236 22022 734868 848000) 0 nil])
([nil nil ((2050 . 2052) (2048 . 2050) (2036 . 2048) (#("p" 0 1 (fontified nil)) . 2036) (2036 . 2037) (#("placeholders" 0 12 (fontified nil)) . -2036) (2036 . 2048) (#("pla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2036) (undo-tree-id11081 . -2) (undo-tree-id11082 . -3) (undo-tree-id11083 . -3) 2039 (2037 . 2039) (#("p" 0 1 (fontified t)) . -2037) (undo-tree-id11084 . -1) (undo-tree-id11085 . -1) (undo-tree-id11086 . -1) 2038 (2036 . 2038) (2034 . 2036) (#("_" 0 1 (fontified t)) . -2034) (undo-tree-id11087 . -1) (undo-tree-id11088 . -1) (#("_" 0 1 (fontified t)) . -2035) (undo-tree-id11089 . -1) (undo-tree-id11090 . -1) 2036 (2031 . 2036) (2016 . 2031) (2015 . 2016) (t 26236 20970 956733 447000)) ((#("," 0 1 (fontified nil)) . 2015) (undo-tree-id11091 . -1) (undo-tree-id11092 . -1) (undo-tree-id11093 . -1) (undo-tree-id11094 . -1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -1) (undo-tree-id11100 . -1) (undo-tree-id11101 . -1) (undo-tree-id11102 . -1) (undo-tree-id11103 . -1) (undo-tree-id11104 . -1) (undo-tree-id11105 . -1) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (#("
							       " 0 15 (fontified nil)) . 2016) (undo-tree-id11127 . -15) (undo-tree-id11128 . -15) (undo-tree-id11129 . -1) (undo-tree-id11130 . -15) (undo-tree-id11131 . -15) (undo-tree-id11132 . -15) (undo-tree-id11133 . -15) (undo-tree-id11134 . -15) (undo-tree-id11135 . -15) (undo-tree-id11136 . -15) (undo-tree-id11137 . -15) (undo-tree-id11138 . -15) (undo-tree-id11139 . -15) (undo-tree-id11140 . -15) (undo-tree-id11141 . -15) (undo-tree-id11142 . -15) (undo-tree-id11143 . -15) (undo-tree-id11144 . -15) (undo-tree-id11145 . -15) (undo-tree-id11146 . -15) (undo-tree-id11147 . -15) (undo-tree-id11148 . -15) (undo-tree-id11149 . -15) (undo-tree-id11150 . -15) (undo-tree-id11151 . -15) (undo-tree-id11152 . -15) (undo-tree-id11153 . -15) (undo-tree-id11154 . -15) (undo-tree-id11155 . -15) (undo-tree-id11156 . -15) (undo-tree-id11157 . -15) (undo-tree-id11158 . -15) (undo-tree-id11159 . -15) (undo-tree-id11160 . -15) (undo-tree-id11161 . -15) (#("std__" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 2031) (undo-tree-id11162 . -5) (undo-tree-id11163 . -5) (undo-tree-id11164 . -3) (undo-tree-id11165 . -3) (undo-tree-id11166 . -3) (undo-tree-id11167 . -3) (undo-tree-id11168 . -3) (undo-tree-id11169 . -3) (undo-tree-id11170 . -3) (undo-tree-id11171 . -3) (undo-tree-id11172 . -3) (undo-tree-id11173 . -3) (undo-tree-id11174 . -3) (undo-tree-id11175 . -3) (undo-tree-id11176 . -3) (undo-tree-id11177 . -3) (undo-tree-id11178 . -3) (undo-tree-id11179 . -3) (undo-tree-id11180 . -3) (undo-tree-id11181 . -3) (undo-tree-id11182 . -3) (undo-tree-id11183 . -3) (undo-tree-id11184 . -3) (undo-tree-id11185 . -3) (undo-tree-id11186 . -3) (undo-tree-id11187 . -3) (undo-tree-id11188 . -3) (undo-tree-id11189 . -3) (undo-tree-id11190 . -3) (undo-tree-id11191 . -3) (undo-tree-id11192 . -3) (undo-tree-id11193 . -3) (undo-tree-id11194 . -3) (undo-tree-id11195 . -3) (2034 . 2036) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2034) (undo-tree-id11196 . -2) (undo-tree-id11197 . -2) (undo-tree-id11198 . -2) (undo-tree-id11199 . -2) (undo-tree-id11200 . -2) (undo-tree-id11201 . -2) (undo-tree-id11202 . -2) (undo-tree-id11203 . -2) (undo-tree-id11204 . -2) (undo-tree-id11205 . -2) (undo-tree-id11206 . -2) (undo-tree-id11207 . -2) (undo-tree-id11208 . -2) (undo-tree-id11209 . -2) (undo-tree-id11210 . -2) (undo-tree-id11211 . -2) (undo-tree-id11212 . -2) (undo-tree-id11213 . -2) (undo-tree-id11214 . -2) (undo-tree-id11215 . -2) (undo-tree-id11216 . -2) (undo-tree-id11217 . -2) (undo-tree-id11218 . -2) (undo-tree-id11219 . -2) (undo-tree-id11220 . -2) (undo-tree-id11221 . -2) (undo-tree-id11222 . -2) (undo-tree-id11223 . -2) (undo-tree-id11224 . -2) (undo-tree-id11225 . -2) (undo-tree-id11226 . -2) (undo-tree-id11227 . -2) (undo-tree-id11228 . -2) (undo-tree-id11229 . -2) (#("pp" 0 1 (fontified nil) 1 2 (fontified nil)) . 2036) (undo-tree-id11230 . -2) (undo-tree-id11231 . -2) (2037 . 2038) (#("la" 0 1 (fontified nil) 1 2 (fontified nil)) . 2037) (undo-tree-id11232 . -2) (undo-tree-id11233 . -2) (2036 . 2039) (#("placeholders" 0 12 (fontified nil)) . 2036) (2036 . 2048) (#("p" 0 1 (fontified nil)) . 2036) (2036 . 2037) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 2036) (undo-tree-id11234 . -12) (undo-tree-id11235 . -12) (undo-tree-id11236 . -12) (undo-tree-id11237 . -12) (undo-tree-id11238 . -12) (undo-tree-id11239 . -12) (undo-tree-id11240 . -12) (undo-tree-id11241 . -12) (undo-tree-id11242 . -12) (undo-tree-id11243 . -12) (undo-tree-id11244 . -12) (undo-tree-id11245 . -12) (undo-tree-id11246 . -12) (undo-tree-id11247 . -12) (undo-tree-id11248 . -12) (undo-tree-id11249 . -12) (undo-tree-id11250 . -12) (undo-tree-id11251 . -12) (undo-tree-id11252 . -12) (undo-tree-id11253 . -12) (undo-tree-id11254 . -12) (undo-tree-id11255 . -12) (undo-tree-id11256 . -12) (undo-tree-id11257 . -12) (undo-tree-id11258 . -12) (undo-tree-id11259 . -12) (undo-tree-id11260 . -12) (undo-tree-id11261 . -12) (undo-tree-id11262 . -12) (undo-tree-id11263 . -12) (undo-tree-id11264 . -12) (undo-tree-id11265 . -12) (undo-tree-id11266 . -12) (undo-tree-id11267 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 2048) (undo-tree-id11268 . -2) (undo-tree-id11269 . -2) (undo-tree-id11270 . -2) (undo-tree-id11271 . -2) (undo-tree-id11272 . -2) (undo-tree-id11273 . -2) (undo-tree-id11274 . -2) (undo-tree-id11275 . -2) (undo-tree-id11276 . -2) (undo-tree-id11277 . -2) (undo-tree-id11278 . -2) (undo-tree-id11279 . -2) (undo-tree-id11280 . -2) (undo-tree-id11281 . -2) (undo-tree-id11282 . -2) (undo-tree-id11283 . -2) (undo-tree-id11284 . -2) (undo-tree-id11285 . -2) (undo-tree-id11286 . -2) (undo-tree-id11287 . -2) (undo-tree-id11288 . -2) (undo-tree-id11289 . -2) (undo-tree-id11290 . -2) (undo-tree-id11291 . -2) (undo-tree-id11292 . -2) (undo-tree-id11293 . -2) (undo-tree-id11294 . -2) (undo-tree-id11295 . -2) (undo-tree-id11296 . -2) (undo-tree-id11297 . -2) (undo-tree-id11298 . -2) (undo-tree-id11299 . -2) (undo-tree-id11300 . -2) (undo-tree-id11301 . -2) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 2050) (undo-tree-id11302 . -2) (undo-tree-id11303 . -2) (undo-tree-id11304 . -2) (undo-tree-id11305 . -2) (undo-tree-id11306 . -2) (undo-tree-id11307 . -2) (undo-tree-id11308 . -2) (undo-tree-id11309 . -2) (undo-tree-id11310 . -2) (undo-tree-id11311 . -2) (undo-tree-id11312 . -2) (undo-tree-id11313 . -2) (undo-tree-id11314 . -2) (undo-tree-id11315 . -2) (undo-tree-id11316 . -2) (undo-tree-id11317 . -2) (undo-tree-id11318 . -2) (undo-tree-id11319 . -2) (undo-tree-id11320 . -2) (undo-tree-id11321 . -2) (undo-tree-id11322 . -2) (undo-tree-id11323 . -2) (undo-tree-id11324 . -2) (undo-tree-id11325 . -2) (undo-tree-id11326 . -2) (undo-tree-id11327 . -2) (undo-tree-id11328 . -2) (undo-tree-id11329 . -2) (undo-tree-id11330 . -2) (undo-tree-id11331 . -2) (undo-tree-id11332 . -2) (undo-tree-id11333 . -2) (undo-tree-id11334 . -2) (undo-tree-id11335 . -2)) (26236 21119 207229 510000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 654) (undo-tree-id14103 . -1)) nil (26236 22066 413247 307000) 0 nil])
([nil nil ((#("const char* another_service_name = \"talker/change_state\";
" 0 1 (c-is-sws t face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face c-type c-decl-id-start fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (face font-lock-variable-name-face fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 22 (face font-lock-variable-name-face fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (face font-lock-variable-name-face fontified t) 25 26 (face font-lock-variable-name-face fontified t) 26 27 (face font-lock-variable-name-face fontified t) 27 28 (face font-lock-variable-name-face fontified t) 28 29 (face font-lock-variable-name-face fontified t) 29 30 (face font-lock-variable-name-face fontified t) 30 31 (face font-lock-variable-name-face fontified t) 31 32 (face font-lock-variable-name-face fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-string-face fontified t) 42 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (fontified t) 57 58 (fontified t)) . 477) (undo-tree-id13744 . -57) (undo-tree-id13745 . -32) (undo-tree-id13746 . -32) (undo-tree-id13748 . -58) (undo-tree-id13750 . -58) (undo-tree-id13752 . -58) (undo-tree-id13754 . -32) (undo-tree-id13756 . -32) (undo-tree-id13758 . -32) (undo-tree-id13760 . -32) (undo-tree-id13762 . -32) (undo-tree-id13764 . -32) (undo-tree-id13766 . -32) (undo-tree-id13768 . -32) (undo-tree-id13770 . -32) (undo-tree-id13772 . -32) (undo-tree-id13774 . -32) (undo-tree-id13776 . -32) (undo-tree-id13778 . -32) (undo-tree-id13780 . -32) (undo-tree-id13782 . -32) (undo-tree-id13784 . -32) (undo-tree-id13786 . -32) (undo-tree-id13788 . -32) (undo-tree-id13790 . -32) (undo-tree-id13792 . -32) (undo-tree-id13794 . -32) (undo-tree-id13796 . -32) (undo-tree-id13798 . -32) (undo-tree-id13800 . -32) (undo-tree-id13802 . -32) (undo-tree-id13804 . -32) (undo-tree-id13806 . -32) (undo-tree-id13808 . -32) (undo-tree-id13810 . -32) (undo-tree-id13812 . -32) (undo-tree-id13814 . -32) (undo-tree-id13816 . -32) (undo-tree-id13818 . -32) (undo-tree-id13820 . -32) (undo-tree-id13822 . -32) (undo-tree-id13824 . -32) (undo-tree-id13826 . -32) (undo-tree-id13828 . -32) (undo-tree-id13830 . -32) (undo-tree-id13832 . -32) (undo-tree-id13834 . -32) (undo-tree-id13836 . -32) (undo-tree-id13838 . -32) (undo-tree-id13840 . -32) (undo-tree-id13842 . -32) (undo-tree-id13844 . -58) 509) ((477 . 535) (t 26236 21938 972679 100000)) (26236 22022 521911 816000) 0 nil])
([nil nil ((2051 . 2052) (#("1" 0 1 (fontified t)) . -2051) (undo-tree-id11078 . 1) (undo-tree-id11079 . -1) (undo-tree-id11080 . -1) 2052) ((2051 . 2052) (#("2" 0 1 (fontified t)) . 2051)) (26236 21119 11374 426000) 0 nil])
([nil nil ((#("NodeOptions " 0 11 (face font-lock-type-face fontified t) 11 12 (fontified t)) . 654) (undo-tree-id14102 . -11)) nil (26236 22066 413243 890000) 0 nil])
([nil nil ((#("rclcpp" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face fontified t)) . 542) (undo-tree-id13942 . -5) (t 26236 21938 972679 100000)) ((542 . 548)) (26236 22022 232257 625000) 0 nil])
([nil nil ((apply -24 2058 2273 undo--wrap-and-run-primitive-undo 2058 2273 ((2230 . 2233) (2230 . 2231) (#("	" 0 1 (fontified t)) . 2230) (2226 . 2230) (2203 . 2206) (2203 . 2204) (#("	" 0 1 (fontified t)) . 2203) (2199 . 2203) (2143 . 2146) (2143 . 2144) (#("	" 0 1 (fontified t)) . 2143) (2139 . 2143) (2062 . 2065) 2058))) ((apply 24 2058 2249 undo--wrap-and-run-primitive-undo 2058 2249 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2062) (#("    " 0 4 (fontified t c-in-sws t)) . 2139) (2143 . 2144) (#("	" 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2143) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2143) (#("    " 0 4 (fontified t c-in-sws t)) . 2199) (2203 . 2204) (#("	" 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2203) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2203) (#("    " 0 4 (fontified t c-in-sws t)) . 2226) (2230 . 2231) (#("	" 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2230) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 2230) 2372)) (t 26236 21082 294452 488000)) (26236 21082 235887 193000) 0 nil])
([nil nil ((#("& " 0 1 (fontified t) 1 2 (fontified t)) . 654) (undo-tree-id14101 . -1)) nil (26236 22066 413240 240000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 542) (undo-tree-id13941 . -1)) ((542 . 544)) (26236 22022 31730 211000) 0 nil])
nil
([nil nil ((#("options" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 654) (undo-tree-id14100 . -6)) nil (26236 22066 413236 40000) 0 nil])
([nil nil ((#("NodeOptions " 0 11 (face font-lock-type-face fontified t) 11 12 (fontified t)) . 542) (undo-tree-id13940 . -11)) ((542 . 554)) (26236 22021 724548 463000) 0 nil])
([nil nil ((apply -6 477 596 undo--wrap-and-run-primitive-undo 477 596 ((534 . 537) (477 . 480)))) nil (26236 22066 413232 765000) 0 nil])
([nil nil ((#("& " 0 1 (fontified t) 1 2 (fontified t)) . 542) (undo-tree-id13938 . -1) (undo-tree-id13939 . -2)) ((542 . 544)) (26236 22021 669967 357000) 0 nil])
([nil nil ((700 . 706) (694 . 700) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -694) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -695) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -696) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -697) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) 698 (694 . 698) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -694) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) 695 (694 . 695) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -694) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -695) (undo-tree-id14092 . -1) (undo-tree-id14093 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -696) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -697) (undo-tree-id14096 . -1) (undo-tree-id14097 . -1) 698 (687 . 698) (685 . 687) (681 . 685) (680 . 681) (#(" " 0 1 (fontified t)) . -680) (undo-tree-id14098 . -1) (undo-tree-id14099 . -1) 681 (665 . 681) (663 . 665) (660 . 663)) nil (26236 22066 413224 175000) 0 nil])
([nil nil ((#("options" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 542) (undo-tree-id13936 . -6) (undo-tree-id13937 . -7)) ((542 . 549)) (26236 22021 643710 144000) 0 nil])
([nil nil ((707 . 708)) nil (26236 22066 413042 801000) 0 nil])
([nil nil ((594 . 605) (593 . 594) (#("," 0 1 (c-type c-decl-arg-start fontified t)) . -593) (undo-tree-id13865 . -1) (undo-tree-id13866 . -1) (undo-tree-id13867 . -1) (#(" " 0 1 (fontified t)) . -594) (undo-tree-id13868 . -1) (undo-tree-id13869 . -1) (undo-tree-id13870 . -1) 595 (594 . 595) (593 . 594) (#(" " 0 1 (fontified t)) . -593) (undo-tree-id13871 . -1) (undo-tree-id13872 . -1) 594 (587 . 594) (585 . 587) (581 . 585) (580 . 581) (#(" " 0 1 (fontified t)) . -580) (undo-tree-id13873 . -1) (undo-tree-id13874 . -1) 581 (571 . 581) (475 . 493) (547 . 553) (#("s" 0 1 (fontified nil)) . 547) (547 . 548) (#("string" 0 6 (fontified nil)) . -547) (547 . 553) (#("stri" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -547) (undo-tree-id13875 . -4) (undo-tree-id13876 . -4) (undo-tree-id13877 . -4) 551 (547 . 551) (545 . 547) (542 . 545) (#("S" 0 1 (fontified t)) . -542) (undo-tree-id13878 . -1) (undo-tree-id13879 . -1) (undo-tree-id13880 . -1) (#("t" 0 1 (fontified t)) . -543) (undo-tree-id13881 . -1) (undo-tree-id13882 . -1) (undo-tree-id13883 . -1) (#("r" 0 1 (fontified t)) . -544) (undo-tree-id13884 . -1) (undo-tree-id13885 . -1) (#("i" 0 1 (fontified t)) . -545) (undo-tree-id13886 . -1) (undo-tree-id13887 . -1) (#("n" 0 1 (fontified t)) . -546) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (#("g" 0 1 (fontified t)) . -547) (undo-tree-id13890 . -1) (undo-tree-id13891 . -1) (#(" " 0 1 (fontified t)) . -548) (undo-tree-id13892 . -1) (undo-tree-id13893 . -1) 549 (542 . 549) (#("c" 0 1 (fontified t)) . -542) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (#("h" 0 1 (fontified t)) . -543) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (#("a" 0 1 (fontified t)) . -544) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -545) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) 546 (543 . 546) (#("h" 0 1 (fontified t)) . -543) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (#("a" 0 1 (fontified t)) . -544) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -545) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (#(" " 0 1 (fontified t)) . -546) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (#("*" 0 1 (fontified t)) . -547) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (#(" " 0 1 (fontified t)) . -548) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) 549 (548 . 549) (547 . 548) (542 . 547) (#("n" 0 1 (fontified t)) . -542) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (#("o" 0 1 (fontified t)) . -543) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (#("d" 0 1 (fontified t)) . -544) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (#("e" 0 1 (fontified t)) . -545) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (#("n" 0 1 (fontified t)) . -546) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (#("a" 0 1 (fontified t)) . -547) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (#("m" 0 1 (fontified t)) . -548) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (#("e" 0 1 (fontified t)) . -549) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (#(" " 0 1 (fontified t)) . -550) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) 551 (542 . 551)) ((#("nodename " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 542) (undo-tree-id13943 . -4) (undo-tree-id13944 . -9) (undo-tree-id13945 . -9) (542 . 551) (#("char " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 542) (undo-tree-id13946 . -5) (undo-tree-id13947 . -5) (#("*" 0 1 (fontified nil)) . 547) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (#(" " 0 1 (fontified nil)) . 548) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (543 . 549) (#("har" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 543) (undo-tree-id13952 . -3) (undo-tree-id13953 . -3) (542 . 546) (#("String " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 542) (undo-tree-id13954 . -2) (undo-tree-id13955 . -7) (undo-tree-id13956 . -7) (542 . 549) (#("std" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 542) (undo-tree-id13957 . -3) (undo-tree-id13958 . -3) (undo-tree-id13959 . -3) (undo-tree-id13960 . -3) (undo-tree-id13961 . -3) (undo-tree-id13962 . -3) (undo-tree-id13963 . -3) (undo-tree-id13964 . -3) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 545) (undo-tree-id13965 . -2) (undo-tree-id13966 . -2) (undo-tree-id13967 . -2) (undo-tree-id13968 . -2) (undo-tree-id13969 . -2) (undo-tree-id13970 . -2) (undo-tree-id13971 . -2) (undo-tree-id13972 . -2) (#("stri" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 547) (undo-tree-id13973 . -4) (undo-tree-id13974 . -4) (undo-tree-id13975 . -4) (547 . 551) (#("string" 0 6 (fontified nil)) . 547) (547 . 553) (#("s" 0 1 (fontified nil)) . 547) (547 . 548) (#("string" 0 6 (face font-lock-type-face fontified nil)) . 547) (undo-tree-id13976 . -6) (undo-tree-id13977 . -6) (undo-tree-id13978 . -6) (undo-tree-id13979 . -6) (undo-tree-id13980 . -6) (undo-tree-id13981 . -6) (undo-tree-id13982 . -6) (undo-tree-id13983 . -6) (#("#include <string>
" 0 1 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1 8 (face font-lock-preprocessor-face fontified t c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 10 16 (face font-lock-string-face fontified t c-in-sws t) 16 17 (category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 17 18 (fontified t c-in-sws t)) . 475) (undo-tree-id13984 . -17) (undo-tree-id13985 . 9) (undo-tree-id13986 . -17) (#(" nodename " 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil) 9 10 (fontified nil)) . 571) (undo-tree-id13987 . -9) (undo-tree-id13988 . -10) (undo-tree-id13989 . -10) (undo-tree-id13990 . -1) (undo-tree-id13991 . -9) (undo-tree-id13992 . -9) (undo-tree-id13993 . -9) (undo-tree-id13994 . -9) (580 . 581) (#("," 0 1 (c-type c-decl-arg-start fontified nil)) . 580) (undo-tree-id13995 . -1) (undo-tree-id13996 . -1) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 581) (undo-tree-id14001 . -4) (undo-tree-id14002 . -4) (undo-tree-id14003 . -4) (undo-tree-id14004 . -4) (undo-tree-id14005 . -4) (undo-tree-id14006 . -4) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 585) (undo-tree-id14007 . -2) (undo-tree-id14008 . -2) (undo-tree-id14009 . -2) (undo-tree-id14010 . -2) (undo-tree-id14011 . -2) (undo-tree-id14012 . -2) (#("string " 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (fontified nil)) . 587) (undo-tree-id14013 . -5) (undo-tree-id14014 . -7) (undo-tree-id14015 . -7) (undo-tree-id14016 . -6) (undo-tree-id14017 . -6) (undo-tree-id14018 . -6) (593 . 594) (#("," 0 1 (fontified nil)) . 593) (undo-tree-id14019 . -1) (undo-tree-id14020 . -1) (#(" " 0 1 (fontified nil)) . 594) (undo-tree-id14021 . -1) (undo-tree-id14022 . -1) (593 . 595) (#(" " 0 1 (fontified nil)) . 593) (undo-tree-id14023 . -1) (undo-tree-id14024 . -1) (undo-tree-id14025 . -1) (undo-tree-id14026 . -1) (undo-tree-id14027 . -1) (#("client_name" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t)) . 594) (undo-tree-id14028 . -10) (undo-tree-id14029 . -10) (undo-tree-id14030 . -11) (undo-tree-id14031 . -11) (undo-tree-id14032 . -10)) (26236 22021 504725 617000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -707) (undo-tree-id14033 . -1) (undo-tree-id14034 . -1) (undo-tree-id14035 . -1) (undo-tree-id14036 . -1) (undo-tree-id14037 . -1) (undo-tree-id14038 . -1) (undo-tree-id14039 . -1) (undo-tree-id14040 . -1) (undo-tree-id14041 . -1) (undo-tree-id14042 . -1) (undo-tree-id14043 . -1) (undo-tree-id14044 . -1) (undo-tree-id14045 . -1) (undo-tree-id14046 . -1) (undo-tree-id14047 . -1) (undo-tree-id14048 . -1) (undo-tree-id14049 . -1) (undo-tree-id14050 . -1) (undo-tree-id14051 . -1) (undo-tree-id14052 . -1) (undo-tree-id14053 . -1) (undo-tree-id14054 . -1) (undo-tree-id14055 . -1) (undo-tree-id14056 . -1) (undo-tree-id14057 . -1) (undo-tree-id14058 . -1) (undo-tree-id14059 . -1) (undo-tree-id14060 . -1) (undo-tree-id14061 . -1) (undo-tree-id14062 . -1) (undo-tree-id14063 . -1) (undo-tree-id14064 . -1) (undo-tree-id14065 . -1) (undo-tree-id14066 . -1) (undo-tree-id14067 . -1) (undo-tree-id14068 . -1) (undo-tree-id14069 . -1) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) 708) nil (26236 22066 413028 872000) 0 nil])
nil
([nil nil ((#("ServeNode" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 9 (face font-lock-string-face fontified t)) . 728) (undo-tree-id14406 . -8) (undo-tree-id14407 . -9) (t 26236 22066 450770 180000)) nil (26236 22078 252179 937000) 0 nil])
([nil nil ((#("\"," 0 1 (face font-lock-string-face fontified t) 1 2 (c-type c-not-decl fontified t)) . 728) (undo-tree-id14403 . -1) (undo-tree-id14404 . -2) (undo-tree-id14405 . -2)) nil (26236 22078 252174 75000) 0 nil])
([nil nil ((#("options" 0 7 (face font-lock-string-face fontified t)) . 728) (undo-tree-id14392 . -6) (undo-tree-id14393 . -7) (undo-tree-id14394 . -7) (undo-tree-id14395 . -7) (undo-tree-id14396 . -7) (undo-tree-id14397 . -7) (undo-tree-id14398 . -7) (undo-tree-id14399 . -7) (undo-tree-id14400 . -7) (undo-tree-id14401 . -7) (undo-tree-id14402 . -7) (nil syntax-table nil 736 . 737) (nil syntax-table (1) 727 . 728)) nil (26236 22078 252165 796000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-warning-face fontified t)) . 727) (undo-tree-id14246 . -1) (undo-tree-id14247 . -1) (undo-tree-id14248 . -1) (undo-tree-id14249 . -1) (undo-tree-id14250 . -1) (undo-tree-id14251 . -1) (undo-tree-id14252 . -1) (undo-tree-id14253 . -1) (undo-tree-id14254 . -1) (undo-tree-id14255 . -1) (undo-tree-id14256 . -1) (undo-tree-id14257 . -1) (undo-tree-id14258 . -1) (undo-tree-id14259 . -1) (undo-tree-id14260 . -1) (undo-tree-id14261 . -1) (undo-tree-id14262 . -1) (undo-tree-id14263 . -1) (undo-tree-id14264 . -1) (undo-tree-id14265 . -1) (undo-tree-id14266 . -1) (undo-tree-id14267 . -1) (undo-tree-id14268 . -1) (undo-tree-id14269 . -1) (undo-tree-id14270 . -1) (undo-tree-id14271 . -1) (undo-tree-id14272 . -1) (undo-tree-id14273 . -1) (undo-tree-id14274 . -1) (undo-tree-id14275 . -1) (undo-tree-id14276 . -1) (undo-tree-id14277 . -1) (undo-tree-id14278 . -1) (undo-tree-id14279 . -1) (undo-tree-id14280 . -1) (undo-tree-id14281 . -1) (undo-tree-id14282 . -1) (undo-tree-id14283 . -1) (undo-tree-id14284 . -1) (undo-tree-id14285 . -1) (undo-tree-id14286 . -1) (undo-tree-id14287 . -1) (undo-tree-id14288 . -1) (undo-tree-id14289 . -1) (undo-tree-id14290 . -1) (undo-tree-id14291 . -1) (undo-tree-id14292 . -1) (undo-tree-id14293 . -1) (undo-tree-id14294 . -1) (undo-tree-id14295 . -1) (undo-tree-id14296 . -1) (undo-tree-id14297 . -1) (undo-tree-id14298 . -1) (undo-tree-id14299 . -1) (undo-tree-id14300 . -1) (undo-tree-id14301 . -1) (undo-tree-id14302 . -1) (undo-tree-id14303 . -1) (undo-tree-id14304 . -1) (undo-tree-id14305 . -1) (undo-tree-id14306 . -1) (undo-tree-id14307 . -1) (undo-tree-id14308 . -1) (undo-tree-id14309 . -1) (undo-tree-id14310 . -1) (undo-tree-id14311 . -1) (undo-tree-id14312 . -1) (undo-tree-id14313 . -1) (undo-tree-id14314 . -1) (undo-tree-id14315 . -1) (undo-tree-id14316 . -1) (undo-tree-id14317 . -1) (undo-tree-id14318 . -1) (undo-tree-id14319 . -1) (undo-tree-id14320 . -1) (undo-tree-id14321 . -1) (undo-tree-id14322 . -1) (undo-tree-id14323 . -1) (undo-tree-id14324 . -1) (undo-tree-id14325 . -1) (undo-tree-id14326 . -1) (undo-tree-id14327 . -1) (undo-tree-id14328 . -1) (undo-tree-id14329 . -1) (undo-tree-id14330 . -1) (undo-tree-id14331 . -1) (undo-tree-id14332 . -1) (undo-tree-id14333 . -1) (undo-tree-id14334 . -1) (undo-tree-id14335 . -1) (undo-tree-id14336 . -1) (undo-tree-id14337 . -1) (undo-tree-id14338 . -1) (undo-tree-id14339 . -1) (undo-tree-id14340 . -1) (undo-tree-id14341 . -1) (undo-tree-id14342 . -1) (undo-tree-id14343 . -1) (undo-tree-id14344 . -1) (undo-tree-id14345 . -1) (undo-tree-id14346 . -1) (undo-tree-id14347 . -1) (undo-tree-id14348 . -1) (undo-tree-id14349 . -1) (undo-tree-id14350 . -1) (undo-tree-id14351 . -1) (undo-tree-id14352 . -1) (undo-tree-id14353 . -1) (undo-tree-id14354 . -1) (undo-tree-id14355 . -1) (undo-tree-id14356 . -1) (undo-tree-id14357 . -1) (undo-tree-id14358 . -1) (undo-tree-id14359 . -1) (undo-tree-id14360 . -1) (undo-tree-id14361 . -1) (undo-tree-id14362 . -1) (undo-tree-id14363 . -1) (undo-tree-id14364 . -1) (undo-tree-id14365 . -1) (undo-tree-id14366 . -1) (undo-tree-id14367 . -1) (undo-tree-id14368 . -1) (undo-tree-id14369 . -1) (undo-tree-id14370 . -1) (undo-tree-id14371 . -1) (undo-tree-id14372 . -1) (undo-tree-id14373 . -1) (undo-tree-id14374 . -1) (undo-tree-id14375 . -1) (undo-tree-id14376 . -1) (undo-tree-id14377 . -1) (undo-tree-id14378 . -1) (undo-tree-id14379 . -1) (undo-tree-id14380 . -1) (undo-tree-id14381 . -1) (undo-tree-id14382 . -1) (undo-tree-id14383 . -1) (undo-tree-id14384 . -1) (undo-tree-id14385 . -1) (undo-tree-id14386 . -1) (undo-tree-id14387 . -1) (undo-tree-id14388 . -1) (undo-tree-id14389 . -1) (undo-tree-id14390 . -1) (undo-tree-id14391 . -1) (nil syntax-table nil 729 . 730) (nil syntax-table (1) 727 . 728)) nil (26236 22078 252130 94000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -743) (undo-tree-id14105 . -1) (undo-tree-id14106 . -1) (undo-tree-id14107 . -1) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) (undo-tree-id14111 . -1) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1) (undo-tree-id14114 . -1) (undo-tree-id14115 . -1) (undo-tree-id14116 . -1) (undo-tree-id14117 . -1) (undo-tree-id14118 . -1) (undo-tree-id14119 . -1) (undo-tree-id14120 . -1) (undo-tree-id14121 . -1) (undo-tree-id14122 . -1) (undo-tree-id14123 . -1) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (undo-tree-id14138 . -1) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) (undo-tree-id14143 . -1) (undo-tree-id14144 . -1) (undo-tree-id14145 . -1) (undo-tree-id14146 . -1) (undo-tree-id14147 . -1) (undo-tree-id14148 . -1) (undo-tree-id14149 . -1) (undo-tree-id14150 . -1) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) (undo-tree-id14167 . -1) (undo-tree-id14168 . -1) (undo-tree-id14169 . -1) (undo-tree-id14170 . -1) (undo-tree-id14171 . -1) (undo-tree-id14172 . -1) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -1) (undo-tree-id14177 . -1) (undo-tree-id14178 . -1) (undo-tree-id14179 . -1) (undo-tree-id14180 . -1) (undo-tree-id14181 . -1) (undo-tree-id14182 . -1) (undo-tree-id14183 . -1) (undo-tree-id14184 . -1) (undo-tree-id14185 . -1) (undo-tree-id14186 . -1) (undo-tree-id14187 . -1) (#(" " 0 1 (fontified t)) . -744) (undo-tree-id14188 . -1) (undo-tree-id14189 . -1) (undo-tree-id14190 . -1) (undo-tree-id14191 . -1) (undo-tree-id14192 . -1) (undo-tree-id14193 . -1) (undo-tree-id14194 . -1) (undo-tree-id14195 . -1) (undo-tree-id14196 . -1) (undo-tree-id14197 . -1) (undo-tree-id14198 . -1) (undo-tree-id14199 . -1) (undo-tree-id14200 . -1) (undo-tree-id14201 . -1) (undo-tree-id14202 . -1) (undo-tree-id14203 . -1) (undo-tree-id14204 . -1) (undo-tree-id14205 . -1) (undo-tree-id14206 . -1) (undo-tree-id14207 . -1) (undo-tree-id14208 . -1) (undo-tree-id14209 . -1) (undo-tree-id14210 . -1) (undo-tree-id14211 . -1) (undo-tree-id14212 . -1) (undo-tree-id14213 . -1) (undo-tree-id14214 . -1) (undo-tree-id14215 . -1) (undo-tree-id14216 . -1) (undo-tree-id14217 . -1) (undo-tree-id14218 . -1) (undo-tree-id14219 . -1) (undo-tree-id14220 . -1) (undo-tree-id14221 . -1) (undo-tree-id14222 . -1) (undo-tree-id14223 . -1) (undo-tree-id14224 . -1) (undo-tree-id14225 . -1) (undo-tree-id14226 . -1) (#("s" 0 1 (fontified t)) . -745) (undo-tree-id14227 . -1) (undo-tree-id14228 . -1) (undo-tree-id14229 . -1) (undo-tree-id14230 . -1) (undo-tree-id14231 . -1) (undo-tree-id14232 . -1) (undo-tree-id14233 . -1) (undo-tree-id14234 . -1) (undo-tree-id14235 . -1) (undo-tree-id14236 . -1) (undo-tree-id14237 . -1) (#("e" 0 1 (fontified t)) . -746) (undo-tree-id14238 . -1) (undo-tree-id14239 . -1) (undo-tree-id14240 . -1) (undo-tree-id14241 . -1) 747 (744 . 747) (743 . 744) (apply yas--snippet-revive 736 743 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (736 . 743) (#("c_str()" 0 7 (fontified nil)) . 736) (736 . 743) (#("c_str() const" 0 13 (fontified nil)) . -736) (736 . 749) (#("c" 0 1 (fontified t)) . -736) (undo-tree-id14242 . -1) (undo-tree-id14243 . -1) 737 (736 . 737) (735 . 736) (727 . 735) (#("node" 0 4 (fontified nil)) . 727) (727 . 731) (#("nodename" 0 8 (fontified nil)) . -727) (727 . 735) (#("node" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t)) . -727) (undo-tree-id14244 . -4) (undo-tree-id14245 . -4) 731 (727 . 731)) nil (26236 22078 251768 895000) 0 nil])
([nil nil ((#("    another_client = this->create_client<lifecycle_msgs::srv::ChangeState>(another_service_name);

" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (face font-lock-keyword-face fontified t) 22 23 (face font-lock-keyword-face fontified t) 23 24 (face font-lock-keyword-face fontified t) 24 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t category c-<-as-paren-syntax) 41 55 (face font-lock-constant-face fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 60 (face font-lock-constant-face fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t category c->-as-paren-syntax) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t)) . 832) (undo-tree-id14408 . -98) (undo-tree-id14409 . -98) (undo-tree-id14410 . -98) (undo-tree-id14411 . -98) (undo-tree-id14412 . -75) (undo-tree-id14413 . -95) (undo-tree-id14414 . -34) (undo-tree-id14415 . -34) (undo-tree-id14416 . -34) (undo-tree-id14417 . -34) (undo-tree-id14418 . -34) (undo-tree-id14419 . -34) (undo-tree-id14420 . -34) (undo-tree-id14421 . -34) (undo-tree-id14422 . -34) (undo-tree-id14423 . -34) (undo-tree-id14424 . -34) (undo-tree-id14425 . -34) (undo-tree-id14426 . -34) (undo-tree-id14427 . -34) (undo-tree-id14428 . -98) (undo-tree-id14429 . -98) (undo-tree-id14430 . -98) (undo-tree-id14431 . -98) (undo-tree-id14432 . -98) (undo-tree-id14433 . -98) (undo-tree-id14434 . -98) (undo-tree-id14435 . -98) (undo-tree-id14436 . -98) (undo-tree-id14437 . -98) (undo-tree-id14438 . -98) (undo-tree-id14439 . -98) (undo-tree-id14440 . -98) (undo-tree-id14441 . -98) (undo-tree-id14442 . -98) (undo-tree-id14443 . -98) (undo-tree-id14444 . -98) (undo-tree-id14445 . -98) (undo-tree-id14446 . -98) (undo-tree-id14447 . -98) (undo-tree-id14448 . -98) (undo-tree-id14449 . -98) (undo-tree-id14450 . -98) (undo-tree-id14451 . -98) (undo-tree-id14452 . -98) (undo-tree-id14453 . -98) (undo-tree-id14454 . -98) (undo-tree-id14455 . -98) (undo-tree-id14456 . -98) (undo-tree-id14457 . -98) (undo-tree-id14458 . -98) (undo-tree-id14459 . -98) (undo-tree-id14460 . -98) (undo-tree-id14461 . -98) (undo-tree-id14462 . -98) (undo-tree-id14463 . -98) (undo-tree-id14464 . -98) (undo-tree-id14465 . -98) (undo-tree-id14466 . -98) (undo-tree-id14467 . -98) (undo-tree-id14468 . -98) (undo-tree-id14469 . -99) (undo-tree-id14470 . -98) (undo-tree-id14471 . -98) (undo-tree-id14472 . -98) (undo-tree-id14473 . -98) (undo-tree-id14474 . -98) (undo-tree-id14475 . -98) (undo-tree-id14476 . -98) (undo-tree-id14477 . -98) (undo-tree-id14478 . -98) (undo-tree-id14479 . -98) (undo-tree-id14480 . -99) (t 26236 22078 290612 931000)) nil (26236 22083 645966 925000) 0 nil])
([nil nil ((#("    // auto another_request_future = another_client->async_send_request(request,
    // 						     std::bind(&ServiceNode::request_callback,
    // 							       this,
    // 							       std::placeholders::_1));


" 0 4 (fontified t c-is-sws t c-in-sws t) 4 5 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 5 7 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 7 10 (face font-lock-comment-face fontified t c-in-sws t) 10 11 (face font-lock-comment-face fontified t c-in-sws t) 11 12 (face font-lock-comment-face fontified t c-in-sws t) 12 13 (face font-lock-comment-face fontified t c-in-sws t) 13 14 (face font-lock-comment-face fontified t c-in-sws t) 14 15 (face font-lock-comment-face fontified t c-in-sws t) 15 16 (face font-lock-comment-face fontified t c-in-sws t) 16 18 (face font-lock-comment-face fontified t c-in-sws t) 18 19 (face font-lock-comment-face fontified t c-in-sws t) 19 20 (face font-lock-comment-face fontified t c-in-sws t) 20 34 (fontified t face font-lock-comment-face c-in-sws t) 34 36 (fontified t face font-lock-comment-face c-in-sws t) 36 37 (fontified t face font-lock-comment-face c-in-sws t) 37 38 (fontified t face font-lock-comment-face c-in-sws t) 38 39 (fontified t face font-lock-comment-face c-in-sws t) 39 40 (fontified t face font-lock-comment-face c-in-sws t) 40 41 (fontified t face font-lock-comment-face c-in-sws t) 41 42 (fontified t face font-lock-comment-face c-in-sws t) 42 43 (fontified t face font-lock-comment-face c-in-sws t) 43 44 (fontified t face font-lock-comment-face c-in-sws t) 44 45 (fontified t face font-lock-comment-face c-in-sws t) 45 71 (fontified t face font-lock-comment-face c-in-sws t) 71 72 (fontified t face font-lock-comment-face c-in-sws t) 72 80 (fontified t face font-lock-comment-face c-in-sws t) 80 81 (c-in-sws t fontified t face font-lock-comment-face) 81 82 (c-in-sws t c-is-sws t fontified t) 82 85 (c-is-sws t fontified t c-in-sws t) 85 86 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 86 88 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 88 89 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 89 99 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 99 102 (face font-lock-comment-face fontified t c-in-sws t) 102 108 (face font-lock-comment-face fontified t c-in-sws t) 108 109 (face font-lock-comment-face fontified t c-in-sws t) 109 110 (face font-lock-comment-face fontified t c-in-sws t) 110 121 (face font-lock-comment-face fontified t c-in-sws t) 121 141 (face font-lock-comment-face fontified t c-in-sws t) 141 145 (fontified t c-in-sws t) 145 148 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 148 149 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 149 162 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 162 166 (face font-lock-comment-face fontified t c-in-sws t) 166 167 (face font-lock-comment-face fontified t c-in-sws t) 167 168 (face font-lock-comment-face fontified t c-in-sws t) 168 169 (fontified t c-in-sws t) 169 172 (fontified t c-in-sws t) 172 173 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 173 175 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 175 176 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 176 189 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 189 192 (face font-lock-comment-face fontified t c-in-sws t) 192 194 (face font-lock-comment-face fontified t c-in-sws t) 194 206 (face font-lock-comment-face fontified t c-in-sws t) 206 210 (face font-lock-comment-face fontified t c-in-sws t) 210 211 (face font-lock-comment-face fontified t c-in-sws t) 211 212 (face font-lock-comment-face fontified t c-in-sws t) 212 213 (face font-lock-comment-face fontified t c-in-sws t) 213 214 (face font-lock-comment-face fontified t c-in-sws t) 214 215 (fontified t c-in-sws t rear-nonsticky t) 215 216 (fontified t c-in-sws t)) . 1941) (undo-tree-id14481 . -215) (undo-tree-id14482 . -215) (undo-tree-id14483 . -215) (undo-tree-id14484 . -216) (undo-tree-id14485 . -44) (undo-tree-id14486 . -210) (undo-tree-id14487 . -214) (undo-tree-id14488 . -214) (undo-tree-id14489 . -168) (undo-tree-id14490 . -168) (undo-tree-id14491 . -168) (undo-tree-id14492 . -168) (undo-tree-id14493 . -168) (undo-tree-id14494 . -168) (undo-tree-id14495 . -168) (undo-tree-id14496 . -168) (undo-tree-id14497 . -168) (undo-tree-id14498 . -168) (undo-tree-id14499 . -168) (undo-tree-id14500 . -168) (undo-tree-id14501 . -168) (undo-tree-id14502 . -168) (undo-tree-id14503 . -168) (undo-tree-id14504 . -168) (undo-tree-id14505 . -168) (undo-tree-id14506 . -168) (undo-tree-id14507 . -168) (undo-tree-id14508 . -168) (undo-tree-id14509 . -168) (undo-tree-id14510 . -168) (undo-tree-id14511 . -168) (undo-tree-id14512 . -168) (undo-tree-id14513 . -168) (undo-tree-id14514 . -168) (undo-tree-id14515 . -168) (undo-tree-id14516 . -168) (undo-tree-id14517 . -168) (undo-tree-id14518 . -168) (undo-tree-id14519 . -168) (undo-tree-id14520 . -168) (undo-tree-id14521 . -168) (undo-tree-id14522 . -168) (undo-tree-id14523 . -168) (undo-tree-id14524 . -168) (undo-tree-id14525 . -168) (undo-tree-id14526 . -168) (undo-tree-id14527 . -168) (undo-tree-id14528 . -168) (undo-tree-id14529 . -168) (undo-tree-id14530 . -168) (undo-tree-id14531 . -168) (undo-tree-id14532 . -141) (undo-tree-id14533 . -141) (undo-tree-id14534 . -141) (undo-tree-id14535 . -141) (undo-tree-id14536 . -141) (undo-tree-id14537 . -141) (undo-tree-id14538 . -141) (undo-tree-id14539 . -168) (undo-tree-id14540 . -168) (undo-tree-id14541 . -168) (undo-tree-id14542 . -168) (undo-tree-id14543 . -168) (undo-tree-id14544 . -168) (undo-tree-id14545 . -168) (undo-tree-id14546 . -168) (undo-tree-id14547 . -168) (undo-tree-id14548 . -168) (undo-tree-id14549 . -168) (undo-tree-id14550 . -168) (undo-tree-id14551 . -168) (undo-tree-id14552 . -168) (undo-tree-id14553 . -168) (undo-tree-id14554 . -168) (undo-tree-id14555 . -168) (undo-tree-id14556 . -168) (undo-tree-id14557 . -168) (undo-tree-id14558 . -168) (undo-tree-id14559 . -168) (undo-tree-id14560 . -168) (undo-tree-id14561 . -168) (undo-tree-id14562 . -168) (undo-tree-id14563 . -168) (undo-tree-id14564 . -168) (undo-tree-id14565 . -168) (undo-tree-id14566 . -168) (undo-tree-id14567 . -168) (undo-tree-id14568 . -168) (undo-tree-id14569 . -168) (undo-tree-id14570 . -168) (undo-tree-id14571 . -168) (undo-tree-id14572 . -168) (undo-tree-id14573 . -168) (undo-tree-id14574 . -168) (undo-tree-id14575 . -168) (undo-tree-id14576 . -168) (undo-tree-id14577 . -168) (undo-tree-id14578 . -168) (undo-tree-id14579 . -168) (undo-tree-id14580 . -168) (undo-tree-id14581 . -168) (undo-tree-id14582 . -168) (undo-tree-id14583 . -168) (undo-tree-id14584 . -168) (undo-tree-id14585 . -168) (undo-tree-id14586 . -168) (undo-tree-id14587 . -168) (undo-tree-id14588 . -168) (undo-tree-id14589 . -168) (undo-tree-id14590 . -168) (undo-tree-id14591 . -168) (undo-tree-id14592 . -168) (undo-tree-id14593 . -168) (undo-tree-id14594 . -168) (undo-tree-id14595 . -168) (undo-tree-id14596 . -168) (undo-tree-id14597 . -168) (undo-tree-id14598 . -168) (undo-tree-id14599 . -168) (undo-tree-id14600 . -168) (undo-tree-id14601 . -214) (undo-tree-id14602 . -214) (undo-tree-id14603 . -214) (undo-tree-id14604 . -214) (undo-tree-id14605 . -214) (undo-tree-id14606 . -214) (undo-tree-id14607 . -214) (undo-tree-id14608 . -215) (undo-tree-id14609 . -215) (undo-tree-id14610 . -215) (undo-tree-id14611 . -215) (undo-tree-id14612 . -215) (undo-tree-id14613 . -215) (undo-tree-id14614 . -215) (undo-tree-id14615 . -215) (undo-tree-id14616 . -215) (undo-tree-id14617 . -215) (undo-tree-id14618 . -215) (undo-tree-id14619 . -215) (undo-tree-id14620 . -215) (undo-tree-id14621 . -215) (undo-tree-id14622 . -215) (undo-tree-id14623 . -215) (undo-tree-id14624 . -215) (undo-tree-id14625 . -215) (undo-tree-id14626 . -215) (undo-tree-id14627 . -215) (undo-tree-id14628 . -215) (undo-tree-id14629 . -215) (undo-tree-id14630 . -215) (undo-tree-id14631 . -215) (undo-tree-id14632 . -215) (undo-tree-id14633 . -216) (undo-tree-id14634 . -215) (undo-tree-id14635 . -215) (undo-tree-id14636 . -215) (undo-tree-id14637 . -215) (undo-tree-id14638 . -215) (undo-tree-id14639 . -215) (undo-tree-id14640 . -215) (undo-tree-id14641 . -215) (undo-tree-id14642 . -215) (undo-tree-id14643 . -215) (undo-tree-id14644 . -215) (undo-tree-id14645 . -215) (undo-tree-id14646 . -215) (undo-tree-id14647 . -215) (undo-tree-id14648 . -215) (undo-tree-id14649 . -215) (undo-tree-id14650 . -215) (undo-tree-id14651 . -215) (undo-tree-id14652 . -215) (undo-tree-id14653 . -214) (undo-tree-id14654 . -214) (undo-tree-id14655 . -214) (undo-tree-id14656 . -214) (undo-tree-id14657 . -214) (undo-tree-id14658 . -214) (undo-tree-id14659 . -214) (undo-tree-id14660 . -168) (undo-tree-id14661 . -168) (undo-tree-id14662 . -168) (undo-tree-id14663 . -168) (undo-tree-id14664 . -168) (undo-tree-id14665 . -168) (undo-tree-id14666 . -168) (undo-tree-id14667 . -168) (undo-tree-id14668 . -168) (undo-tree-id14669 . -168) (undo-tree-id14670 . -168) (undo-tree-id14671 . -168) (undo-tree-id14672 . -168) (undo-tree-id14673 . -168) (undo-tree-id14674 . -168) (undo-tree-id14675 . -168) (undo-tree-id14676 . -168) (undo-tree-id14677 . -168) (undo-tree-id14678 . -168) (undo-tree-id14679 . -168) (undo-tree-id14680 . -168) (undo-tree-id14681 . -141) (undo-tree-id14682 . -141) (undo-tree-id14683 . -141) (undo-tree-id14684 . -141) (undo-tree-id14685 . -141) (undo-tree-id14686 . -141) (undo-tree-id14687 . -141) (undo-tree-id14688 . -81) (undo-tree-id14689 . -81) (undo-tree-id14690 . -81) (undo-tree-id14691 . -81) (undo-tree-id14692 . -81) (undo-tree-id14693 . -81) (undo-tree-id14694 . -81) (undo-tree-id14695 . -81) (undo-tree-id14696 . -81) (undo-tree-id14697 . -81) (undo-tree-id14698 . -81) (undo-tree-id14699 . -81) (undo-tree-id14700 . -81) (undo-tree-id14701 . -81) (undo-tree-id14702 . -81) (undo-tree-id14703 . -81) (undo-tree-id14704 . -81) (undo-tree-id14705 . -81) (undo-tree-id14706 . -81) (undo-tree-id14707 . -81) (undo-tree-id14708 . -81) (undo-tree-id14709 . -216) (t 26236 22083 710526 771000)) nil (26236 22095 796028 192000) 0 nil])
([nil nil ((1194 . 1195) (1194 . 1196) (t 26236 22095 862302 459000)) nil (26236 22110 880406 265000) 0 nil])
([nil nil ((706 . 707) (t 26236 22110 921967 171000)) nil (26236 22213 120333 618000) 0 nil])
([nil nil ((682 . 689) (#(" " 0 1 (fontified nil)) . 682) (681 . 682)) nil (26236 22213 120331 126000) 0 nil])
([nil nil ((714 . 722)) nil (26236 22213 120328 448000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -722) (undo-tree-id15035 . -1) (undo-tree-id15036 . -1) (#("c" 0 1 (fontified t)) . -723) (undo-tree-id15037 . -1) (undo-tree-id15038 . -1) (#("l" 0 1 (fontified t)) . -724) (undo-tree-id15039 . -1) (undo-tree-id15040 . -1) 725 (722 . 725) (#("l" 0 1 (fontified t)) . -722) (undo-tree-id15041 . -1) (undo-tree-id15042 . -1) (#("i" 0 1 (fontified t)) . -723) (undo-tree-id15043 . -1) (undo-tree-id15044 . -1) 724 (722 . 724) (#("r" 0 1 (fontified t)) . -722) (undo-tree-id15045 . -1) (undo-tree-id15046 . -1) (undo-tree-id15047 . -1) (#("c" 0 1 (fontified t)) . -723) (undo-tree-id15048 . -1) (undo-tree-id15049 . -1) (undo-tree-id15050 . -1) (#("l" 0 1 (fontified t)) . -724) (undo-tree-id15051 . -1) (undo-tree-id15052 . -1) (undo-tree-id15053 . -1) (#("c" 0 1 (fontified t)) . -725) (undo-tree-id15054 . -1) (undo-tree-id15055 . -1) (undo-tree-id15056 . -1) 726 (#("p" 0 1 (fontified t)) . -726) (undo-tree-id15057 . -1) (undo-tree-id15058 . -1) (undo-tree-id15059 . -1) (#("p" 0 1 (fontified t)) . -727) (undo-tree-id15060 . -1) (undo-tree-id15061 . -1) (undo-tree-id15062 . -1) (#("_" 0 1 (fontified t)) . -728) (undo-tree-id15063 . -1) (undo-tree-id15064 . -1) (undo-tree-id15065 . -1) (#("l" 0 1 (fontified t)) . -729) (undo-tree-id15066 . -1) (undo-tree-id15067 . -1) (#("i" 0 1 (fontified t)) . -730) (undo-tree-id15068 . -1) (undo-tree-id15069 . -1) 731 (728 . 731) (722 . 728) (#("rclc" 0 4 (fontified nil)) . 722) (722 . 726) (#("rclcpp" 0 6 (fontified nil)) . -722) (722 . 728) (#("rclc" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -722) (undo-tree-id15070 . -4) (undo-tree-id15071 . -4) 726 (725 . 726) (#("`" 0 1 (fontified t)) . -725) (undo-tree-id15072 . -1) (undo-tree-id15073 . -1) 726 (725 . 726) (722 . 725)) nil (26236 22213 120316 168000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -738) (undo-tree-id15029 . -1) (undo-tree-id15030 . -1) 739 (738 . 739) (736 . 738) (722 . 736) (#("li" 0 2 (fontified nil)) . 722) (722 . 724) (#("lifecycle_msgs" 0 14 (fontified nil)) . -722) (722 . 736) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -722) (undo-tree-id15031 . -2) (undo-tree-id15032 . -2) 724 (722 . 724) (#("i" 0 1 (fontified t)) . -722) (undo-tree-id15033 . -1) (undo-tree-id15034 . -1) 723 (722 . 723)) nil (26236 22213 120238 15000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -755) (undo-tree-id14710 . -1) (undo-tree-id14711 . -1) (undo-tree-id14712 . -1) (undo-tree-id14713 . -1) (undo-tree-id14714 . -1) (undo-tree-id14715 . -1) (undo-tree-id14716 . -1) (undo-tree-id14717 . -1) (undo-tree-id14718 . -1) (undo-tree-id14719 . -1) (undo-tree-id14720 . -1) (undo-tree-id14721 . -1) (undo-tree-id14722 . -1) (undo-tree-id14723 . -1) (undo-tree-id14724 . -1) (undo-tree-id14725 . -1) (undo-tree-id14726 . -1) (undo-tree-id14727 . -1) (undo-tree-id14728 . -1) (undo-tree-id14729 . -1) (undo-tree-id14730 . -1) (undo-tree-id14731 . -1) (undo-tree-id14732 . -1) (undo-tree-id14733 . -1) (undo-tree-id14734 . -1) (undo-tree-id14735 . -1) (undo-tree-id14736 . -1) (undo-tree-id14737 . -1) (undo-tree-id14738 . -1) (undo-tree-id14739 . -1) (undo-tree-id14740 . -1) (undo-tree-id14741 . -1) (undo-tree-id14742 . -1) (undo-tree-id14743 . -1) (undo-tree-id14744 . -1) (undo-tree-id14745 . -1) (undo-tree-id14746 . -1) (undo-tree-id14747 . -1) (undo-tree-id14748 . -1) (undo-tree-id14749 . -1) (undo-tree-id14750 . -1) (undo-tree-id14751 . -1) (undo-tree-id14752 . -1) (undo-tree-id14753 . -1) (undo-tree-id14754 . -1) (undo-tree-id14755 . -1) (undo-tree-id14756 . -1) (undo-tree-id14757 . -1) (undo-tree-id14758 . -1) (undo-tree-id14759 . -1) (undo-tree-id14760 . -1) (undo-tree-id14761 . -1) (undo-tree-id14762 . -1) (undo-tree-id14763 . -1) (undo-tree-id14764 . -1) (undo-tree-id14765 . -1) (undo-tree-id14766 . -1) (undo-tree-id14767 . -1) (undo-tree-id14768 . -1) (undo-tree-id14769 . -1) (undo-tree-id14770 . -1) (undo-tree-id14771 . -1) (undo-tree-id14772 . -1) (undo-tree-id14773 . -1) (undo-tree-id14774 . -1) (undo-tree-id14775 . -1) (undo-tree-id14776 . -1) (undo-tree-id14777 . -1) (undo-tree-id14778 . -1) (undo-tree-id14779 . -1) (undo-tree-id14780 . -1) (undo-tree-id14781 . -1) (undo-tree-id14782 . -1) (undo-tree-id14783 . -1) (undo-tree-id14784 . -1) (undo-tree-id14785 . -1) (undo-tree-id14786 . -1) (undo-tree-id14787 . -1) (undo-tree-id14788 . -1) (undo-tree-id14789 . -1) (undo-tree-id14790 . -1) (undo-tree-id14791 . -1) (undo-tree-id14792 . -1) (undo-tree-id14793 . -1) (undo-tree-id14794 . -1) (undo-tree-id14795 . -1) (undo-tree-id14796 . -1) (undo-tree-id14797 . -1) (undo-tree-id14798 . -1) (undo-tree-id14799 . -1) (undo-tree-id14800 . -1) (undo-tree-id14801 . -1) (undo-tree-id14802 . -1) (undo-tree-id14803 . -1) (undo-tree-id14804 . -1) (undo-tree-id14805 . -1) (undo-tree-id14806 . -1) (undo-tree-id14807 . -1) (undo-tree-id14808 . -1) (undo-tree-id14809 . -1) (undo-tree-id14810 . -1) (undo-tree-id14811 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -756) (undo-tree-id14812 . -1) (undo-tree-id14813 . -1) (undo-tree-id14814 . -1) (undo-tree-id14815 . -1) (undo-tree-id14816 . -1) (undo-tree-id14817 . -1) (undo-tree-id14818 . -1) (undo-tree-id14819 . -1) (undo-tree-id14820 . -1) (undo-tree-id14821 . -1) (undo-tree-id14822 . -1) (undo-tree-id14823 . -1) (undo-tree-id14824 . -1) (undo-tree-id14825 . -1) (undo-tree-id14826 . -1) (undo-tree-id14827 . -1) (undo-tree-id14828 . -1) (undo-tree-id14829 . -1) (undo-tree-id14830 . -1) (undo-tree-id14831 . -1) (undo-tree-id14832 . -1) (undo-tree-id14833 . -1) (undo-tree-id14834 . -1) (undo-tree-id14835 . -1) (undo-tree-id14836 . -1) (undo-tree-id14837 . -1) (undo-tree-id14838 . -1) (undo-tree-id14839 . -1) (undo-tree-id14840 . -1) (undo-tree-id14841 . -1) (undo-tree-id14842 . -1) (undo-tree-id14843 . -1) (undo-tree-id14844 . -1) (undo-tree-id14845 . -1) (undo-tree-id14846 . -1) (undo-tree-id14847 . -1) (undo-tree-id14848 . -1) (undo-tree-id14849 . -1) (undo-tree-id14850 . -1) (undo-tree-id14851 . -1) (undo-tree-id14852 . -1) (undo-tree-id14853 . -1) (undo-tree-id14854 . -1) (undo-tree-id14855 . -1) (undo-tree-id14856 . -1) (undo-tree-id14857 . -1) (undo-tree-id14858 . -1) (undo-tree-id14859 . -1) (undo-tree-id14860 . -1) (undo-tree-id14861 . -1) (undo-tree-id14862 . -1) (undo-tree-id14863 . -1) (undo-tree-id14864 . -1) (undo-tree-id14865 . -1) (undo-tree-id14866 . -1) (undo-tree-id14867 . -1) (undo-tree-id14868 . -1) (undo-tree-id14869 . -1) (undo-tree-id14870 . -1) (undo-tree-id14871 . -1) (undo-tree-id14872 . -1) (undo-tree-id14873 . -1) (undo-tree-id14874 . -1) (undo-tree-id14875 . -1) (undo-tree-id14876 . -1) (undo-tree-id14877 . -1) (undo-tree-id14878 . -1) (undo-tree-id14879 . -1) (undo-tree-id14880 . -1) (undo-tree-id14881 . -1) (undo-tree-id14882 . -1) (undo-tree-id14883 . -1) (undo-tree-id14884 . -1) (undo-tree-id14885 . -1) (undo-tree-id14886 . -1) (undo-tree-id14887 . -1) (undo-tree-id14888 . -1) 757 (753 . 757) (#(":" 0 1 (fontified t)) . -753) (undo-tree-id14889 . -1) (undo-tree-id14890 . -1) (undo-tree-id14891 . -1) (undo-tree-id14892 . -1) (undo-tree-id14893 . -1) (undo-tree-id14894 . -1) (undo-tree-id14895 . -1) (undo-tree-id14896 . -1) (undo-tree-id14897 . -1) (undo-tree-id14898 . -1) (undo-tree-id14899 . -1) (undo-tree-id14900 . -1) (undo-tree-id14901 . -1) (undo-tree-id14902 . -1) (undo-tree-id14903 . -1) (undo-tree-id14904 . -1) (undo-tree-id14905 . -1) (undo-tree-id14906 . -1) (undo-tree-id14907 . -1) (undo-tree-id14908 . -1) (undo-tree-id14909 . -1) (undo-tree-id14910 . -1) (undo-tree-id14911 . -1) (undo-tree-id14912 . -1) (undo-tree-id14913 . -1) (undo-tree-id14914 . -1) (undo-tree-id14915 . -1) (undo-tree-id14916 . -1) (undo-tree-id14917 . -1) (undo-tree-id14918 . -1) (undo-tree-id14919 . -1) (undo-tree-id14920 . -1) (undo-tree-id14921 . -1) (undo-tree-id14922 . -1) (undo-tree-id14923 . -1) (undo-tree-id14924 . -1) (undo-tree-id14925 . -1) (undo-tree-id14926 . -1) (undo-tree-id14927 . -1) (undo-tree-id14928 . -1) (undo-tree-id14929 . -1) (undo-tree-id14930 . -1) (undo-tree-id14931 . -1) (undo-tree-id14932 . -1) (undo-tree-id14933 . -1) (undo-tree-id14934 . -1) (undo-tree-id14935 . -1) (undo-tree-id14936 . -1) (undo-tree-id14937 . -1) (undo-tree-id14938 . -1) (undo-tree-id14939 . -1) (undo-tree-id14940 . -1) (undo-tree-id14941 . -1) (undo-tree-id14942 . -1) (undo-tree-id14943 . -1) (undo-tree-id14944 . -1) (undo-tree-id14945 . -1) (undo-tree-id14946 . -1) (undo-tree-id14947 . -1) (undo-tree-id14948 . -1) (undo-tree-id14949 . -1) (undo-tree-id14950 . -1) (undo-tree-id14951 . -1) (undo-tree-id14952 . -1) (undo-tree-id14953 . -1) (undo-tree-id14954 . -1) (undo-tree-id14955 . -1) (undo-tree-id14956 . -1) (undo-tree-id14957 . -1) (undo-tree-id14958 . -1) (undo-tree-id14959 . -1) (undo-tree-id14960 . -1) (undo-tree-id14961 . -1) (undo-tree-id14962 . -1) (undo-tree-id14963 . -1) (undo-tree-id14964 . -1) (undo-tree-id14965 . -1) (undo-tree-id14966 . -1) (undo-tree-id14967 . -1) (undo-tree-id14968 . -1) (undo-tree-id14969 . -1) (#(":" 0 1 (fontified t)) . -754) (undo-tree-id14970 . -1) (undo-tree-id14971 . -1) (undo-tree-id14972 . -1) (undo-tree-id14973 . -1) (undo-tree-id14974 . -1) (undo-tree-id14975 . -1) (undo-tree-id14976 . -1) (undo-tree-id14977 . -1) (undo-tree-id14978 . -1) (undo-tree-id14979 . -1) (undo-tree-id14980 . -1) (undo-tree-id14981 . -1) (undo-tree-id14982 . -1) (undo-tree-id14983 . -1) (undo-tree-id14984 . -1) (undo-tree-id14985 . -1) (undo-tree-id14986 . -1) (undo-tree-id14987 . -1) (undo-tree-id14988 . -1) (undo-tree-id14989 . -1) (undo-tree-id14990 . -1) (undo-tree-id14991 . -1) (undo-tree-id14992 . -1) (undo-tree-id14993 . -1) (undo-tree-id14994 . -1) (undo-tree-id14995 . -1) (undo-tree-id14996 . -1) (undo-tree-id14997 . -1) (undo-tree-id14998 . -1) (undo-tree-id14999 . -1) (undo-tree-id15000 . -1) (undo-tree-id15001 . -1) (undo-tree-id15002 . -1) (undo-tree-id15003 . -1) (undo-tree-id15004 . -1) (undo-tree-id15005 . -1) (undo-tree-id15006 . -1) (undo-tree-id15007 . -1) (undo-tree-id15008 . -1) (undo-tree-id15009 . -1) (undo-tree-id15010 . -1) (undo-tree-id15011 . -1) (undo-tree-id15012 . -1) (undo-tree-id15013 . -1) (undo-tree-id15014 . -1) (undo-tree-id15015 . -1) (undo-tree-id15016 . -1) (undo-tree-id15017 . -1) (undo-tree-id15018 . -1) (undo-tree-id15019 . -1) (undo-tree-id15020 . -1) (undo-tree-id15021 . -1) (undo-tree-id15022 . -1) (undo-tree-id15023 . -1) 755 (753 . 755) (743 . 753) (#("Tr" 0 2 (fontified nil)) . 743) (743 . 745) (#("Transition" 0 10 (fontified nil)) . -743) (743 . 753) (#("Tr" 0 1 (fontified t) 1 2 (fontified t)) . -743) (undo-tree-id15024 . -2) (undo-tree-id15025 . -2) 745 (743 . 745) (741 . 743) (738 . 741) (#("msg" 0 3 (fontified nil)) . -738) (738 . 741) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -738) (undo-tree-id15026 . -2) (undo-tree-id15027 . -2) (undo-tree-id15028 . -2) 740 (738 . 740)) nil (26236 22213 120183 969000) 0 nil])
([nil nil ((#("  rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedPtr another_client;
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 6 (face font-lock-constant-face fontified t) 6 8 (face font-lock-constant-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 12 (face font-lock-constant-face fontified t) 12 13 (face font-lock-constant-face fontified t) 13 16 (face font-lock-constant-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax) 17 25 (face font-lock-constant-face fontified t) 25 27 (face font-lock-constant-face fontified t) 27 31 (face font-lock-constant-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 36 (face font-lock-constant-face fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 47 (fontified t) 47 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 50 51 (fontified t) 51 52 (fontified t) 52 53 (face font-lock-type-face fontified t) 53 54 (face font-lock-type-face fontified t) 54 55 (face font-lock-type-face fontified t) 55 56 (face font-lock-type-face fontified t) 56 57 (face font-lock-type-face fontified t) 57 58 (face font-lock-type-face fontified t) 58 59 (face font-lock-type-face fontified t) 59 60 (face font-lock-type-face fontified t) 60 61 (face font-lock-type-face c-type c-decl-id-start fontified t) 61 62 (fontified t) 62 63 (face font-lock-variable-name-face fontified t) 63 64 (face font-lock-variable-name-face fontified t) 64 65 (face font-lock-variable-name-face fontified t) 65 66 (face font-lock-variable-name-face fontified t) 66 67 (face font-lock-variable-name-face fontified t) 67 68 (face font-lock-variable-name-face fontified t) 68 69 (face font-lock-variable-name-face fontified t) 69 70 (face font-lock-variable-name-face fontified t) 70 71 (face font-lock-variable-name-face fontified t) 71 72 (face font-lock-variable-name-face fontified t) 72 73 (face font-lock-variable-name-face fontified t) 73 74 (face font-lock-variable-name-face fontified t) 74 76 (face font-lock-variable-name-face fontified t) 76 77 (fontified t) 77 78 (fontified t)) . 2663) (undo-tree-id15389 . -77) (undo-tree-id15390 . -46) 2709 (t 26236 22213 158268 327000)) nil (26236 22277 548763 788000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2664) (undo-tree-id15320 . -2) (undo-tree-id15321 . -2) (undo-tree-id15322 . -2) (undo-tree-id15323 . -2) (undo-tree-id15324 . -2) (undo-tree-id15325 . -2) (undo-tree-id15326 . -2) (undo-tree-id15327 . -2) (undo-tree-id15328 . -2) (undo-tree-id15329 . -2) (undo-tree-id15330 . -2) (undo-tree-id15331 . -2) (undo-tree-id15332 . -2) (undo-tree-id15333 . -2) (undo-tree-id15334 . -2) (undo-tree-id15335 . -2) (undo-tree-id15336 . -2) (undo-tree-id15337 . -2) (undo-tree-id15338 . -2) (undo-tree-id15339 . -2) (undo-tree-id15340 . -2) (undo-tree-id15341 . -2) (undo-tree-id15342 . -2) (undo-tree-id15343 . -2) (undo-tree-id15344 . -2) (undo-tree-id15345 . -2) (undo-tree-id15346 . -2) (undo-tree-id15347 . -2) (undo-tree-id15348 . -2) (undo-tree-id15349 . -2) (undo-tree-id15350 . -2) (undo-tree-id15351 . -2) (undo-tree-id15352 . -2) (undo-tree-id15353 . -2) (undo-tree-id15354 . -2) (undo-tree-id15355 . -2) (undo-tree-id15356 . -2) (undo-tree-id15357 . -2) (undo-tree-id15358 . -2) 2666 (2664 . 2666) (#("  " 0 2 (fontified nil)) . 2663) (undo-tree-id15359 . -2) (undo-tree-id15360 . -2) (undo-tree-id15361 . -2) (undo-tree-id15362 . -2) (undo-tree-id15363 . -2) (undo-tree-id15364 . -2) (undo-tree-id15365 . -2) (undo-tree-id15366 . -2) (undo-tree-id15367 . -2) (undo-tree-id15368 . -2) (undo-tree-id15369 . -2) (undo-tree-id15370 . -2) (undo-tree-id15371 . -2) (undo-tree-id15372 . -2) (undo-tree-id15373 . -2) (undo-tree-id15374 . -2) (undo-tree-id15375 . -2) (undo-tree-id15376 . -2) (undo-tree-id15377 . -2) (undo-tree-id15378 . -2) (undo-tree-id15379 . -2) (undo-tree-id15380 . -2) (undo-tree-id15381 . -2) (undo-tree-id15382 . -2) (undo-tree-id15383 . -2) (undo-tree-id15384 . -2) (undo-tree-id15385 . -2) (undo-tree-id15386 . -2) (undo-tree-id15387 . -2) (undo-tree-id15388 . -2) (2662 . 2666)) nil (26236 22277 548750 964000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2664) (undo-tree-id15318 . 1) (undo-tree-id15319 . -1)) nil (26236 22277 548629 878000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2663) (undo-tree-id15127 . -1) (undo-tree-id15128 . 1) (undo-tree-id15129 . -1) (undo-tree-id15130 . -1) (undo-tree-id15131 . -1) (undo-tree-id15132 . -1) (undo-tree-id15133 . -1) (undo-tree-id15134 . -1) (undo-tree-id15135 . -1) (undo-tree-id15136 . -1) (undo-tree-id15137 . -1) (undo-tree-id15138 . -1) (undo-tree-id15139 . -1) (undo-tree-id15140 . -1) (undo-tree-id15141 . -1) (undo-tree-id15142 . -1) (undo-tree-id15143 . -1) (undo-tree-id15144 . -1) (undo-tree-id15145 . -1) (undo-tree-id15146 . -1) (undo-tree-id15147 . -1) (undo-tree-id15148 . -1) (undo-tree-id15149 . -1) (undo-tree-id15150 . -1) (undo-tree-id15151 . -1) (undo-tree-id15152 . -1) (undo-tree-id15153 . -1) (undo-tree-id15154 . -1) (undo-tree-id15155 . -1) (undo-tree-id15156 . -1) (undo-tree-id15157 . -1) (undo-tree-id15158 . -1) (undo-tree-id15159 . -1) (undo-tree-id15160 . -1) (undo-tree-id15161 . -1) (undo-tree-id15162 . -1) (undo-tree-id15163 . -1) (undo-tree-id15164 . -1) (undo-tree-id15165 . -1) (undo-tree-id15166 . -1) (undo-tree-id15167 . -1) (undo-tree-id15168 . -1) (undo-tree-id15169 . -1) (undo-tree-id15170 . -1) (undo-tree-id15171 . -1) (undo-tree-id15172 . -1) (undo-tree-id15173 . -1) (undo-tree-id15174 . -1) (undo-tree-id15175 . -1) (undo-tree-id15176 . -1) (undo-tree-id15177 . -1) (undo-tree-id15178 . -1) (undo-tree-id15179 . -1) (undo-tree-id15180 . -1) (undo-tree-id15181 . -1) (undo-tree-id15182 . -1) (undo-tree-id15183 . -1) (undo-tree-id15184 . -1) (undo-tree-id15185 . -1) (undo-tree-id15186 . -1) (undo-tree-id15187 . -1) (undo-tree-id15188 . -1) (undo-tree-id15189 . -1) (undo-tree-id15190 . -1) (undo-tree-id15191 . -1) (undo-tree-id15192 . -1) (undo-tree-id15193 . -1) (undo-tree-id15194 . -1) (undo-tree-id15195 . -1) (undo-tree-id15196 . -1) (undo-tree-id15197 . -1) (undo-tree-id15198 . -1) (undo-tree-id15199 . -1) (undo-tree-id15200 . -1) (undo-tree-id15201 . -1) (undo-tree-id15202 . -1) (undo-tree-id15203 . -1) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (undo-tree-id15218 . -1) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1) (undo-tree-id15238 . -1) (undo-tree-id15239 . -1) (undo-tree-id15240 . -1) (undo-tree-id15241 . -1) (undo-tree-id15242 . -1) (undo-tree-id15243 . -1) (undo-tree-id15244 . -1) (undo-tree-id15245 . -1) (undo-tree-id15246 . -1) (undo-tree-id15247 . -1) (undo-tree-id15248 . -1) (undo-tree-id15249 . -1) (undo-tree-id15250 . -1) (undo-tree-id15251 . -1) (undo-tree-id15252 . -1) (undo-tree-id15253 . -1) (undo-tree-id15254 . -1) (undo-tree-id15255 . -1) (undo-tree-id15256 . -1) (undo-tree-id15257 . -1) (undo-tree-id15258 . -1) (undo-tree-id15259 . -1) (undo-tree-id15260 . -1) (undo-tree-id15261 . -1) (undo-tree-id15262 . -1) (undo-tree-id15263 . -1) (undo-tree-id15264 . -1) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) (undo-tree-id15280 . -1) (undo-tree-id15281 . -1) (undo-tree-id15282 . -1) (undo-tree-id15283 . -1) (undo-tree-id15284 . -1) (undo-tree-id15285 . -1) (undo-tree-id15286 . -1) (undo-tree-id15287 . -1) (undo-tree-id15288 . -1) (undo-tree-id15289 . -1) (undo-tree-id15290 . -1) (undo-tree-id15291 . -1) (undo-tree-id15292 . -1) (undo-tree-id15293 . -1) (undo-tree-id15294 . -1) (undo-tree-id15295 . -1) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) (undo-tree-id15304 . -1) (undo-tree-id15305 . -1) (undo-tree-id15306 . -1) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1)) nil (26236 22277 548607 145000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2702) (undo-tree-id15096 . -2) (undo-tree-id15097 . -2) (undo-tree-id15098 . -2) (undo-tree-id15099 . -2) (undo-tree-id15100 . -2) (undo-tree-id15101 . -2) (undo-tree-id15102 . -2) (undo-tree-id15103 . -2) (undo-tree-id15104 . -2) (undo-tree-id15105 . -2) (undo-tree-id15106 . -2) (undo-tree-id15107 . -2) (undo-tree-id15108 . -2) (undo-tree-id15109 . -2) (undo-tree-id15110 . -2) (undo-tree-id15111 . -2) (undo-tree-id15112 . -2) (undo-tree-id15113 . -2) (undo-tree-id15114 . -2) (undo-tree-id15115 . -2) (undo-tree-id15116 . -2) 2704 (2702 . 2704) (#("  " 0 2 (fontified nil)) . 2701) (undo-tree-id15117 . -2) (undo-tree-id15118 . -2) (undo-tree-id15119 . -2) (undo-tree-id15120 . -2) (undo-tree-id15121 . -2) (undo-tree-id15122 . -2) (undo-tree-id15123 . -2) (undo-tree-id15124 . -2) (undo-tree-id15125 . -2) (undo-tree-id15126 . -2) (2700 . 2704)) nil (26236 22277 548038 423000) 0 nil])
([nil nil ((2738 . 2739) (2734 . 2738) (2724 . 2734) (#("Transition" 0 10 (fontified nil)) . -2724) (2724 . 2734) (2722 . 2724) (2719 . 2722) (#("msg" 0 3 (fontified nil)) . -2719) (2719 . 2722) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -2719) (undo-tree-id15074 . -2) (undo-tree-id15075 . -2) 2721 (2719 . 2721) (2701 . 2703) (2716 . 2717) (#("  " 0 2 (fontified nil)) . 2701) (undo-tree-id15076 . -2) (2717 . 2718) (2703 . 2717) (#("li" 0 2 (fontified nil)) . 2703) (2703 . 2705) (#("lifecycle_msgs" 0 14 (fontified nil)) . -2703) (2703 . 2717) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -2703) (undo-tree-id15077 . -2) (undo-tree-id15078 . -2) 2705 (2703 . 2705) (#("r" 0 1 (fontified t)) . -2703) (undo-tree-id15079 . -1) (undo-tree-id15080 . -1) (undo-tree-id15081 . -1) (#("c" 0 1 (fontified t)) . -2704) (undo-tree-id15082 . -1) (undo-tree-id15083 . -1) (undo-tree-id15084 . -1) (#("l" 0 1 (fontified t)) . -2705) (undo-tree-id15085 . -1) (undo-tree-id15086 . -1) (undo-tree-id15087 . -1) (#("c" 0 1 (fontified t)) . -2706) (undo-tree-id15088 . -1) (undo-tree-id15089 . -1) (undo-tree-id15090 . -1) (#("p" 0 1 (fontified t)) . -2707) (undo-tree-id15091 . -1) (undo-tree-id15092 . -1) (undo-tree-id15093 . -1) (#("p" 0 1 (fontified t)) . -2708) (undo-tree-id15094 . -1) (undo-tree-id15095 . -1) 2709 (2706 . 2709) (2703 . 2706) (2701 . 2703)) nil (26236 22277 547970 793000) 0 nil])
([nil nil ((799 . 800) (apply yas--snippet-revive 795 831 #s(yas--snippet nil (#s(yas--field 0 799 830 nil nil nil nil nil)) nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 799 830 nil nil nil nil nil)) nil 29 nil nil nil nil)) (795 . 831) (#("tra(${0:Transition_<allocator<void>> &&})" 0 19 (fontified nil) 19 20 (fontified nil category c-<-as-paren-syntax) 20 29 (fontified nil) 29 30 (fontified nil category c-<-as-paren-syntax) 30 34 (fontified nil) 34 35 (fontified nil category c->-as-paren-syntax) 35 36 (fontified nil category c->-as-paren-syntax) 36 41 (fontified nil)) . 795) (795 . 836) (#("tr" 0 2 (fontified nil)) . 795) (795 . 797) (#("tra(Transition_<allocator<void>> &&)" 0 15 (fontified nil) 15 16 (fontified nil category c-<-as-paren-syntax) 16 25 (fontified nil) 25 26 (fontified nil category c-<-as-paren-syntax) 26 30 (fontified nil) 30 31 (fontified nil category c->-as-paren-syntax) 31 32 (fontified nil category c->-as-paren-syntax) 32 36 (fontified nil)) . -795) (795 . 831) (#("tra" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -795) (undo-tree-id15417 . -3) (undo-tree-id15418 . -3) 798 (797 . 798) (794 . 797) (793 . 794) (#(" " 0 1 (fontified t)) . -793) (undo-tree-id15419 . -1) (undo-tree-id15420 . -1) (#("t" 0 1 (fontified t)) . -794) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) 795 (793 . 795) (t 26236 22277 614926 735000)) nil (26236 22296 679764 978000) 0 nil])
([nil nil ((#("Transition" 0 10 (face font-lock-type-face fontified t)) . 800) (undo-tree-id15414 . 10) (undo-tree-id15415 . -9) (undo-tree-id15416 . 10)) nil (26236 22296 679745 229000) 0 nil])
([nil nil ((#("_<" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 800) (undo-tree-id15410 . 2) (undo-tree-id15411 . -1) (undo-tree-id15412 . 2) (undo-tree-id15413 . -2)) nil (26236 22296 679738 18000) 0 nil])
([nil nil ((#("allocator" 0 9 (face font-lock-type-face fontified t)) . 800) (undo-tree-id15406 . 9) (undo-tree-id15407 . -8) (undo-tree-id15408 . 9) (undo-tree-id15409 . -9)) nil (26236 22296 679730 1000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-3-face) category c-<-as-paren-syntax fontified t)) . 800) (undo-tree-id15404 . 1) (undo-tree-id15405 . 1)) nil (26236 22296 679721 534000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . 800) (undo-tree-id15401 . 4) (undo-tree-id15402 . -3) (undo-tree-id15403 . 4)) nil (26236 22296 679715 975000) 0 nil])
([nil nil ((#(">> " 0 1 (face (rainbow-delimiters-mismatched-face) category c->-as-paren-syntax fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 800) (undo-tree-id15398 . 3) (undo-tree-id15399 . -2) (undo-tree-id15400 . 3)) nil (26236 22296 679708 91000) 0 nil])
([nil nil ((#("&&)" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t)) . 800) (undo-tree-id15391 . 3) (undo-tree-id15392 . -2) (undo-tree-id15393 . -2) (undo-tree-id15394 . 3) (undo-tree-id15395 . -2) (undo-tree-id15396 . -3) (undo-tree-id15397 . -3)) nil (26236 22296 679699 4000) 0 nil])
([nil nil ((800 . 801) (#(")" 0 1 (fontified nil)) . -800) (800 . 801)) nil (26236 22296 679658 317000) 0 nil])
([nil nil ((#(" tra(t)" 0 1 (fontified t) 1 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . 794) (undo-tree-id15581 . -6) (undo-tree-id15582 . -6) (undo-tree-id15583 . -6) (undo-tree-id15584 . -6) (undo-tree-id15585 . -6) (undo-tree-id15586 . -6) (undo-tree-id15587 . -6) (undo-tree-id15588 . -6) (undo-tree-id15589 . -6) (undo-tree-id15590 . -6) (undo-tree-id15591 . -6) (undo-tree-id15592 . -6) (undo-tree-id15593 . -6) (undo-tree-id15594 . -6) (undo-tree-id15595 . -6) (undo-tree-id15596 . -6) (undo-tree-id15597 . -6) (undo-tree-id15598 . -6) (undo-tree-id15599 . -6) (undo-tree-id15600 . -6) (undo-tree-id15601 . -6) (undo-tree-id15602 . -6) (undo-tree-id15603 . -6) (undo-tree-id15604 . -6) (undo-tree-id15605 . -6) (undo-tree-id15606 . -6) (undo-tree-id15607 . -6) (undo-tree-id15608 . -6) (undo-tree-id15609 . -6) (undo-tree-id15610 . -6) (undo-tree-id15611 . -6) (undo-tree-id15612 . -6) (undo-tree-id15613 . -6) (undo-tree-id15614 . -6) (undo-tree-id15615 . -6) (undo-tree-id15616 . -6) (undo-tree-id15617 . -6) (undo-tree-id15618 . -6) (undo-tree-id15619 . -6) (undo-tree-id15620 . -6) (undo-tree-id15621 . -6) (undo-tree-id15622 . -6) (undo-tree-id15623 . -6) (undo-tree-id15624 . -6) (undo-tree-id15625 . -6) (undo-tree-id15626 . -6) (undo-tree-id15627 . -6) (undo-tree-id15628 . -6) (undo-tree-id15629 . -6) (undo-tree-id15630 . -6) (undo-tree-id15631 . -6) (undo-tree-id15632 . -6) (undo-tree-id15633 . -6) (undo-tree-id15634 . -6) (undo-tree-id15635 . -6) (undo-tree-id15636 . -6) (undo-tree-id15637 . -6) (undo-tree-id15638 . -6) (undo-tree-id15639 . -6) (undo-tree-id15640 . -6) (undo-tree-id15641 . -6) (undo-tree-id15642 . -6) (undo-tree-id15643 . -6) (undo-tree-id15644 . -6) (undo-tree-id15645 . -6) (undo-tree-id15646 . -6) (undo-tree-id15647 . -6) (undo-tree-id15648 . -6) (undo-tree-id15649 . -6) (undo-tree-id15650 . -6) (undo-tree-id15651 . -6) (undo-tree-id15652 . -6) (undo-tree-id15653 . -6) (undo-tree-id15654 . -6) (undo-tree-id15655 . -6) (undo-tree-id15656 . -6) (undo-tree-id15657 . -6) (undo-tree-id15658 . -6) (undo-tree-id15659 . -6) (undo-tree-id15660 . -6) (undo-tree-id15661 . -6) (undo-tree-id15662 . -6) (undo-tree-id15663 . -6) (undo-tree-id15664 . -6) (undo-tree-id15665 . -6) (undo-tree-id15666 . -6) (undo-tree-id15667 . -6) (undo-tree-id15668 . -6) (undo-tree-id15669 . -6) (undo-tree-id15670 . -6) (undo-tree-id15671 . -6) (undo-tree-id15672 . -6) (undo-tree-id15673 . -6) (undo-tree-id15674 . -6) (undo-tree-id15675 . -6) (undo-tree-id15676 . -5) (undo-tree-id15677 . -5) (undo-tree-id15678 . -5) (undo-tree-id15679 . -5) (undo-tree-id15680 . -5) (undo-tree-id15681 . -5) (undo-tree-id15682 . -5) (undo-tree-id15683 . -5) (undo-tree-id15684 . -5) (undo-tree-id15685 . -7) (undo-tree-id15686 . -6) (undo-tree-id15687 . -1) (undo-tree-id15688 . -1) (undo-tree-id15689 . -1) (undo-tree-id15690 . -1) (undo-tree-id15691 . -1) (undo-tree-id15692 . -1) (undo-tree-id15693 . -1) (undo-tree-id15694 . -2) (undo-tree-id15695 . -2) (undo-tree-id15696 . -2) (undo-tree-id15697 . -2) (undo-tree-id15698 . -2) (undo-tree-id15699 . -2) (undo-tree-id15700 . -2) (undo-tree-id15701 . -3) (undo-tree-id15702 . -3) (undo-tree-id15703 . -3) (undo-tree-id15704 . -3) (undo-tree-id15705 . -3) (undo-tree-id15706 . -3) (undo-tree-id15707 . -3) (undo-tree-id15708 . -4) (undo-tree-id15709 . -4) (undo-tree-id15710 . -4) (undo-tree-id15711 . -4) (undo-tree-id15712 . -4) (undo-tree-id15713 . -4) (undo-tree-id15714 . -4) (undo-tree-id15715 . -5) (undo-tree-id15716 . -5) (undo-tree-id15717 . -5) (undo-tree-id15718 . -5) (undo-tree-id15719 . -5) (undo-tree-id15720 . -5) (undo-tree-id15721 . -5) (undo-tree-id15722 . -6) (undo-tree-id15723 . -6) (undo-tree-id15724 . -6) (undo-tree-id15725 . -6) (undo-tree-id15726 . -6) (undo-tree-id15727 . -6) (undo-tree-id15728 . -6) (undo-tree-id15729 . -6) (undo-tree-id15730 . -7) (undo-tree-id15731 . -7) 800 (t 26236 22296 721819 238000)) nil (26236 22303 657679 704000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 793) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) (undo-tree-id15460 . -1) (undo-tree-id15461 . -1) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) (undo-tree-id15470 . -1) (undo-tree-id15471 . -1) (undo-tree-id15472 . -1) (undo-tree-id15473 . -1) (undo-tree-id15474 . -1) (undo-tree-id15475 . -1) (undo-tree-id15476 . -1) (undo-tree-id15477 . -1) (undo-tree-id15478 . -1) (undo-tree-id15479 . -1) (undo-tree-id15480 . -1) (undo-tree-id15481 . -1) (undo-tree-id15482 . -1) (undo-tree-id15483 . -1) (undo-tree-id15484 . -1) (undo-tree-id15485 . -1) (undo-tree-id15486 . -1) (undo-tree-id15487 . -1) (undo-tree-id15488 . -1) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) (undo-tree-id15527 . -1) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -1) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) (undo-tree-id15567 . -1) (undo-tree-id15568 . -1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1) (undo-tree-id15571 . -1) (undo-tree-id15572 . -1) (undo-tree-id15573 . -1) (undo-tree-id15574 . -1) (undo-tree-id15575 . -1) (undo-tree-id15576 . -1) (undo-tree-id15577 . -1) (undo-tree-id15578 . -1) (undo-tree-id15579 . -1) (undo-tree-id15580 . -1)) nil (26236 22303 657305 452000) 0 nil])
([nil nil ((1018 . 1019) (1016 . 1018) (#("t" 0 1 (fontified t)) . -1016) (undo-tree-id15732 . -1) (undo-tree-id15733 . -1) (undo-tree-id15734 . -1) (undo-tree-id15735 . -1) (undo-tree-id15736 . -1) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1) (undo-tree-id15739 . -1) (undo-tree-id15740 . -1) (undo-tree-id15741 . -1) (undo-tree-id15742 . -1) (undo-tree-id15743 . -1) (undo-tree-id15744 . -1) (undo-tree-id15745 . -1) (undo-tree-id15746 . -1) (undo-tree-id15747 . -1) (undo-tree-id15748 . -1) (undo-tree-id15749 . -1) (undo-tree-id15750 . -1) (undo-tree-id15751 . -1) (undo-tree-id15752 . -1) (undo-tree-id15753 . -1) (undo-tree-id15754 . -1) (undo-tree-id15755 . -1) (undo-tree-id15756 . -1) (undo-tree-id15757 . -1) (undo-tree-id15758 . -1) (undo-tree-id15759 . -1) (undo-tree-id15760 . -1) (undo-tree-id15761 . -1) (undo-tree-id15762 . -1) (undo-tree-id15763 . -1) (undo-tree-id15764 . -1) (undo-tree-id15765 . -1) (undo-tree-id15766 . -1) (undo-tree-id15767 . -1) (undo-tree-id15768 . -1) (undo-tree-id15769 . -1) (undo-tree-id15770 . -1) (undo-tree-id15771 . -1) (undo-tree-id15772 . -1) (undo-tree-id15773 . -1) (undo-tree-id15774 . -1) (undo-tree-id15775 . -1) (undo-tree-id15776 . -1) (undo-tree-id15777 . -1) (undo-tree-id15778 . -1) (undo-tree-id15779 . -1) (undo-tree-id15780 . -1) (undo-tree-id15781 . -1) (undo-tree-id15782 . -1) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1) (undo-tree-id15787 . -1) (undo-tree-id15788 . -1) (undo-tree-id15789 . -1) (undo-tree-id15790 . -1) (undo-tree-id15791 . -1) (undo-tree-id15792 . -1) (undo-tree-id15793 . -1) (undo-tree-id15794 . -1) (undo-tree-id15795 . -1) (undo-tree-id15796 . -1) (undo-tree-id15797 . -1) (undo-tree-id15798 . -1) (undo-tree-id15799 . -1) 1017 (1014 . 1017) (1011 . 1014) (#("tr" 0 2 (fontified nil)) . 1011) (1011 . 1013) (#("tra" 0 3 (fontified nil)) . -1011) (1011 . 1014) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . -1011) (undo-tree-id15800 . -2) (undo-tree-id15801 . -2) (undo-tree-id15802 . -2) 1013 (1011 . 1013) (1007 . 1011) (#("    " 0 4 (fontified nil)) . 1006) (undo-tree-id15803 . -4) (1010 . 1011) (1006 . 1010) (#("   " 0 3 (fontified nil)) . -1006) (undo-tree-id15804 . -3) (#(" " 0 1 (fontified t)) . 1009) (t 26236 22303 697403 91000)) nil (26236 22394 564853 125000) 0 nil])
([nil nil ((#("options" 0 7 (fontified t)) . 2945) (undo-tree-id15883 . -6) (undo-tree-id15884 . -7) (t 26236 22395 767400 949000)) nil (26236 22416 448546 89000) 0 nil] [nil nil ((#("lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE" 0 10 (face font-lock-constant-face fontified t) 10 11 (face font-lock-constant-face fontified t) 11 14 (face font-lock-constant-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (face font-lock-constant-face fontified t) 22 31 (face font-lock-constant-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 53 (fontified t)) . 1770) (undo-tree-id15805 . -52) (undo-tree-id15806 . -52) (undo-tree-id15807 . -52) (undo-tree-id15808 . -53) (undo-tree-id15809 . -52) (undo-tree-id15810 . -52) 1822 (t 26236 22313 304820 62000)) ((1770 . 1823)) (26236 22394 197674 959000) 0 nil])
([nil nil ((#("  rclcpp::NodeOptions options = rclcpp::NodeOptions();
" 0 2 (fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face fontified t) 6 7 (face font-lock-constant-face fontified t) 7 8 (face font-lock-constant-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 20 (face font-lock-type-face fontified t) 20 21 (face font-lock-type-face c-type c-decl-id-start fontified t) 21 22 (fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (face font-lock-variable-name-face fontified t) 25 26 (face font-lock-variable-name-face fontified t) 26 27 (face font-lock-variable-name-face fontified t) 27 28 (face font-lock-variable-name-face fontified t) 28 29 (face font-lock-variable-name-face fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 38 (face font-lock-constant-face fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (fontified t) 54 55 (fontified t)) . 2844) (undo-tree-id15821 . -54) (undo-tree-id15822 . -45) (undo-tree-id15823 . -53) (undo-tree-id15824 . -53) (undo-tree-id15825 . -53) (undo-tree-id15826 . -53) (undo-tree-id15827 . -53) (undo-tree-id15828 . -53) (undo-tree-id15829 . -53) (undo-tree-id15830 . -53) (undo-tree-id15831 . -53) (undo-tree-id15832 . -55) (undo-tree-id15833 . -55) (undo-tree-id15834 . -55) (undo-tree-id15835 . -55) (undo-tree-id15836 . -55) (undo-tree-id15837 . -55) (undo-tree-id15838 . -55) (undo-tree-id15839 . -55) (undo-tree-id15840 . -55) (undo-tree-id15841 . -55) (undo-tree-id15842 . -55) (undo-tree-id15843 . -55) (undo-tree-id15844 . -55) (undo-tree-id15845 . -55) (undo-tree-id15846 . -55) (undo-tree-id15847 . -55) (undo-tree-id15848 . -55) (undo-tree-id15849 . -55) (undo-tree-id15850 . -55) (undo-tree-id15851 . -55) (undo-tree-id15852 . -55) (undo-tree-id15853 . -55) (undo-tree-id15854 . -55) (undo-tree-id15855 . -55) (undo-tree-id15856 . -55) (undo-tree-id15857 . -55) (undo-tree-id15858 . -55) (undo-tree-id15859 . -55) (undo-tree-id15860 . -55) (undo-tree-id15861 . -45) (undo-tree-id15862 . -45) (undo-tree-id15863 . -45) (undo-tree-id15864 . -45) (undo-tree-id15865 . -45) (undo-tree-id15866 . -45) (undo-tree-id15867 . -45) (undo-tree-id15868 . -45) (undo-tree-id15869 . -45) (undo-tree-id15870 . -45) (undo-tree-id15871 . -45) (undo-tree-id15872 . -45) (undo-tree-id15873 . -45) (undo-tree-id15874 . -45) (undo-tree-id15875 . -45) (undo-tree-id15876 . -45) (undo-tree-id15877 . -45) (undo-tree-id15878 . -45) (undo-tree-id15879 . -45) (undo-tree-id15880 . -45) (undo-tree-id15881 . -45) (undo-tree-id15882 . -55) 2889) nil (26236 22416 448526 723000) 0 nil])
([nil nil ((1770 . 1773)) ((#("tra" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1770) (undo-tree-id15818 . -3) (undo-tree-id15819 . -3) (undo-tree-id15820 . -3)) (26236 22393 801965 832000) 0 nil])
([nil nil ((#("// " 0 1 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t)) . 477) (undo-tree-id15885 . -2) (undo-tree-id15886 . -3) (t 26236 22416 517936 227000)) nil (26236 22430 180410 51000) 0 nil])
([nil nil ((#("tra" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1770) (undo-tree-id15811 . -2) (undo-tree-id15812 . -3) (undo-tree-id15813 . -3) (undo-tree-id15815 . -3) (undo-tree-id15816 . -3) (t 26236 22333 843537 99000)) ((1770 . 1773)) (26236 22393 433640 937000) 0 nil])
([nil nil ((501 . 508)) nil (26236 22430 180379 868000) 0 nil])
([nil nil ((1770 . 1771)) ((#("1" 0 1 (fontified t)) . 1770) (t 26236 22369 341211 778000)) (26236 22369 299835 308000) 0 nil])
([nil nil ((2907 . 2912) (#("D" 0 1 (face font-lock-string-face fontified t)) . -2907) (undo-tree-id15887 . -1) (undo-tree-id15888 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2908) (undo-tree-id15889 . -1) (undo-tree-id15890 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2909) (undo-tree-id15891 . -1) (undo-tree-id15892 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -2910) (undo-tree-id15893 . -1) (undo-tree-id15894 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2911) (undo-tree-id15895 . -1) (undo-tree-id15896 . -1) 2912 (2907 . 2912) (2907 . 2908) (nil syntax-table nil 2911 . 2912) (nil syntax-table (1) 2906 . 2907) (2906 . 2907) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2906) (nil syntax-table nil 2911 . 2912) (nil syntax-table (1) 2906 . 2907) (2906 . 2907) (2905 . 2907) (#(" " 0 1 (fontified t)) . -2905) (undo-tree-id15897 . -1) (undo-tree-id15898 . -1) 2906 (2899 . 2906) (2897 . 2899) (2894 . 2897) (#("S" 0 1 (fontified t)) . -2894) (undo-tree-id15899 . -1) (undo-tree-id15900 . -1) 2895 (2894 . 2895) (t 26236 22430 248947 881000)) nil (26236 22457 396023 885000) 0 nil])
nil
([nil nil ((2912 . 2916)) nil (26236 22457 402861 160000) 0 nil])
([nil nil ((2960 . 2979) (#("se" 0 2 (fontified nil)) . 2960) (2960 . 2962) (#("service_name_global" 0 19 (fontified nil)) . -2960) (2960 . 2979) (#("se" 0 1 (fontified t) 1 2 (fontified t)) . -2960) (undo-tree-id15909 . -2) (undo-tree-id15910 . -2) (undo-tree-id15911 . -1) (undo-tree-id15912 . -1) (undo-tree-id15913 . -1) (undo-tree-id15914 . -1) (undo-tree-id15915 . -1) (undo-tree-id15916 . -1) (undo-tree-id15917 . -1) (undo-tree-id15918 . -1) (undo-tree-id15919 . -1) (undo-tree-id15920 . -2) (undo-tree-id15921 . -2) (undo-tree-id15922 . -2) (undo-tree-id15923 . -2) (undo-tree-id15924 . -2) (undo-tree-id15925 . -2) (undo-tree-id15926 . -2) (undo-tree-id15927 . -2) (undo-tree-id15928 . -2) (undo-tree-id15929 . -2) (undo-tree-id15930 . -2) (undo-tree-id15931 . -2) (undo-tree-id15932 . -2) (undo-tree-id15933 . -2) (undo-tree-id15934 . -2) (undo-tree-id15935 . -2) (undo-tree-id15936 . -2) (undo-tree-id15937 . -2) (undo-tree-id15938 . -2) (undo-tree-id15939 . -2) (undo-tree-id15940 . -2) (undo-tree-id15941 . -2) (undo-tree-id15942 . -2) (undo-tree-id15943 . -2) (undo-tree-id15944 . -2) (undo-tree-id15945 . -2) (undo-tree-id15946 . -2) (undo-tree-id15947 . -2) (undo-tree-id15948 . -2) (undo-tree-id15949 . -2) (undo-tree-id15950 . -2) (undo-tree-id15951 . -2) (undo-tree-id15952 . -2) (undo-tree-id15953 . -2) (undo-tree-id15954 . -2) (undo-tree-id15955 . -2) (undo-tree-id15956 . -2) (undo-tree-id15957 . -2) (undo-tree-id15958 . -2) (undo-tree-id15959 . -2) (undo-tree-id15960 . -2) (undo-tree-id15961 . -2) (undo-tree-id15962 . -2) (undo-tree-id15963 . -2) (undo-tree-id15964 . -2) (undo-tree-id15965 . -2) (undo-tree-id15966 . -2) (undo-tree-id15967 . -2) (undo-tree-id15968 . -2) (undo-tree-id15969 . -2) (undo-tree-id15970 . -2) (undo-tree-id15971 . -2) (undo-tree-id15972 . -2) (undo-tree-id15973 . -2) (undo-tree-id15974 . -2) (undo-tree-id15975 . -2) (undo-tree-id15976 . -2) (undo-tree-id15977 . -2) (undo-tree-id15978 . -2) (undo-tree-id15979 . -2) (undo-tree-id15980 . -2) (undo-tree-id15981 . -2) (undo-tree-id15982 . -2) (undo-tree-id15983 . -2) (undo-tree-id15984 . -2) (undo-tree-id15985 . -2) (undo-tree-id15986 . -2) (undo-tree-id15987 . -2) (undo-tree-id15988 . -2) (undo-tree-id15989 . -2) (undo-tree-id15990 . -2) (undo-tree-id15991 . -2) (undo-tree-id15992 . -2) (undo-tree-id15993 . -2) (undo-tree-id15994 . -2) (undo-tree-id15995 . -2) 2962 (2960 . 2962) (2959 . 2961) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2959) (undo-tree-id15996 . -1) (undo-tree-id15997 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2960) (undo-tree-id15998 . 1) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -2960) (undo-tree-id15999 . -1) (undo-tree-id16000 . -1) (nil syntax-table nil 2965 . 2966) (nil syntax-table (1) 2960 . 2961) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 2961) (undo-tree-id16001 . 1) (2961 . 2962) (nil syntax-table nil 2965 . 2966) (nil syntax-table (1) 2960 . 2961) (2960 . 2961) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2960) (nil syntax-table nil 2965 . 2966) (nil syntax-table (1) 2960 . 2961) (2960 . 2961) (2959 . 2961) (475 . 493) (2935 . 2941) (#("st" 0 2 (fontified nil)) . 2935) (2935 . 2937) (#("string" 0 6 (fontified nil)) . -2935) (2935 . 2941) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -2935) (undo-tree-id16002 . -2) (undo-tree-id16003 . -2) 2937 (2935 . 2937) (2933 . 2935) (2930 . 2933) (2919 . 2930) (2918 . 2919)) nil (26236 22471 265771 382000) 0 nil] [nil nil ((2918 . 2927) (2917 . 2918)) ((#("," 0 1 (fontified nil)) . 2917) (undo-tree-id15901 . -1) (undo-tree-id15902 . -1) (undo-tree-id15903 . -1) (undo-tree-id15904 . -1) (#("
							 " 0 9 (fontified t)) . 2918) (undo-tree-id15905 . -8) (undo-tree-id15906 . -8) (undo-tree-id15907 . -1) (undo-tree-id15908 . -8)) (26236 22457 395661 67000) 0 nil])
([nil nil ((3025 . 3045) (#("TRANSITION_CONFIGURE" 0 20 (fontified nil)) . -3025) (3025 . 3045) (#("TR" 0 1 (fontified t) 1 2 (fontified t)) . -3025) (undo-tree-id16004 . -1) (undo-tree-id16005 . -2) (undo-tree-id16006 . -2) 3027 (3026 . 3027) (#("r" 0 1 (fontified t)) . -3026) (undo-tree-id16007 . -1) (undo-tree-id16008 . -1) (undo-tree-id16009 . -1) (#("a" 0 1 (fontified t)) . -3027) (undo-tree-id16010 . -1) (undo-tree-id16011 . -1) 3028 (3026 . 3028) (#("e" 0 1 (fontified t)) . -3026) (undo-tree-id16012 . -1) (undo-tree-id16013 . -1) (undo-tree-id16014 . -1) 3027 (3025 . 3027) (3023 . 3025) (3013 . 3023) (#("Transition" 0 10 (fontified nil)) . -3013) (3013 . 3023) (#("T" 0 1 (fontified t)) . -3013) (undo-tree-id16015 . -1) (undo-tree-id16016 . -1) 3014 (3013 . 3014) (3011 . 3013) (3008 . 3011) (#("msg" 0 3 (fontified nil)) . -3008) (3008 . 3011) (3006 . 3008) (2992 . 3006) (#("li" 0 2 (fontified nil)) . 2992) (2992 . 2994) (#("lifecycle_msgs" 0 14 (fontified nil)) . -2992) (2992 . 3006) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -2992) (undo-tree-id16017 . -2) (undo-tree-id16018 . -2) 2994 (2992 . 2994) (2981 . 2992) (2980 . 2981) (t 26236 22471 309909 984000)) nil (26236 22504 97398 417000) 0 nil])
nil
([nil nil ((#("lifecycle" 0 9 (face font-lock-constant-face fontified t)) . 744) (undo-tree-id16029 . -8) (t 26236 22504 175399 37000)) nil (26236 22548 192971 373000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 744)) nil (26236 22548 192967 156000) 0 nil])
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 744) (undo-tree-id16028 . -3)) nil (26236 22548 192965 211000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 744) (undo-tree-id16027 . -1)) nil (26236 22548 192961 389000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 744) (undo-tree-id16025 . -2) (undo-tree-id16026 . -3)) nil (26236 22548 192956 899000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 744) (undo-tree-id16023 . -1) (undo-tree-id16024 . -2)) nil (26236 22548 192950 291000) 0 nil])
([nil nil ((#("Transition " 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . 744) (undo-tree-id16021 . -10) (undo-tree-id16022 . -11)) nil (26236 22548 192943 649000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 744) (undo-tree-id16019 . -1) (undo-tree-id16020 . -1)) nil (26236 22548 192934 65000) 0 nil])
([nil nil ((744 . 754)) nil (26236 22548 192904 717000) 0 nil])
([nil nil ((754 . 756) (t 26236 22548 235937 810000)) nil (26236 22549 899894 170000) 0 nil])
([nil nil ((#("lifecycle" 0 9 (face font-lock-constant-face fontified t)) . 2713) (undo-tree-id16049 . -8) (undo-tree-id16050 . -9) (t 26236 22549 943801 673000)) nil (26236 22573 963979 195000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 2713) (undo-tree-id16048 . -1)) nil (26236 22573 963969 132000) 0 nil])
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 2713) (undo-tree-id16046 . -3) (undo-tree-id16047 . -4)) nil (26236 22573 963962 803000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 2713) (undo-tree-id16044 . -1) (undo-tree-id16045 . -2)) nil (26236 22573 963955 58000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 2713) (undo-tree-id16042 . -2) (undo-tree-id16043 . -3)) nil (26236 22573 963947 386000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 2713) (undo-tree-id16040 . -1) (undo-tree-id16041 . -2)) nil (26236 22573 963939 80000) 0 nil])
([nil nil ((#("Transition " 0 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face c-type c-decl-id-start fontified t) 10 11 (fontified t)) . 2713) (undo-tree-id16038 . -10) (undo-tree-id16039 . -11)) nil (26236 22573 963928 255000) 0 nil])
([nil nil ((2722 . 2724) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2722) (undo-tree-id16030 . -1) (undo-tree-id16031 . -1) (undo-tree-id16032 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2723) (undo-tree-id16033 . -1) (undo-tree-id16034 . -1) (undo-tree-id16035 . -1) (#(" " 0 1 (fontified t)) . -2724) (undo-tree-id16036 . -1) (undo-tree-id16037 . -1) 2725 (2713 . 2725)) nil (26236 22573 963908 920000) 0 nil])
([nil nil ((#("const " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 2713) (undo-tree-id16051 . -5) (undo-tree-id16052 . -6) (t 26236 22574 29867 407000)) nil (26236 22625 575618 69000) 0 nil])
([nil nil ((#("const " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 744) (undo-tree-id16055 . -5) (undo-tree-id16056 . -6) (t 26236 22625 645640 783000)) nil (26236 22645 926442 435000) 0 nil])
([nil nil ((745 . 751)) nil (26236 22645 926434 937000) 0 nil])
([nil nil ((#("const " 0 1 (face font-lock-keyword-face fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . 744) (undo-tree-id16053 . -5) (undo-tree-id16054 . -6) (t 26236 22625 645640 783000)) nil (26236 22645 926425 771000) 0 nil])
([nil nil ((#("  bool first_take = true;
" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (face font-lock-constant-face fontified t) 23 24 (face font-lock-constant-face fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 2718) (undo-tree-id16057 . -25) (t 26236 22645 999947 77000)) nil (26236 22762 440747 794000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1022 . 1023) (#("
" 0 1 (fontified nil)) . -1046) (1020 . 1047)) nil (26236 22762 440719 376000) 0 nil])
([nil nil ((#("rclcpp" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face fontified t)) . 2815) (undo-tree-id16076 . -5) (undo-tree-id16077 . -6) (t 26236 22762 486023 528000)) nil (26236 22828 28473 871000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 2815) (undo-tree-id16074 . -1) (undo-tree-id16075 . -2)) nil (26236 22828 28468 97000) 0 nil])
([nil nil ((#("spin" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2815) (undo-tree-id16072 . -3) (undo-tree-id16073 . -4)) nil (26236 22828 28461 890000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2815) (undo-tree-id16070 . -1) (undo-tree-id16071 . -1)) nil (26236 22828 28264 113000) 0 nil])
([nil nil ((2979 . 2980) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2979) (undo-tree-id16067 . -1) (undo-tree-id16068 . -1) (undo-tree-id16069 . -1) 2980) nil (26236 22828 28257 432000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 2979) (undo-tree-id16058 . -1) (undo-tree-id16059 . -1) (undo-tree-id16060 . -1) (undo-tree-id16061 . -1) (undo-tree-id16062 . -1) (undo-tree-id16063 . -1) (undo-tree-id16064 . -1) (undo-tree-id16065 . -1) (undo-tree-id16066 . -1)) nil (26236 22828 28246 628000) 0 nil])
([nil nil ((2815 . 2827)) nil (26236 22828 28203 970000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2995) (undo-tree-id16097 . -2) (undo-tree-id16098 . -2) 2997 (2995 . 2997) (#("  " 0 2 (fontified nil)) . 2994) (undo-tree-id16099 . -2) (undo-tree-id16100 . -2) (2994 . 2997) (#("  " 0 2 (fontified nil)) . 2993) (undo-tree-id16101 . -2) (undo-tree-id16102 . -2) (2992 . 2996) (t 26236 22828 80302 256000)) nil (26236 22877 607040 897000) 0 nil])
([nil nil ((3009 . 3019) (#("first_take" 0 10 (fontified nil)) . -3009) (3009 . 3019) (3008 . 3009) (3007 . 3008) (#("." 0 1 (fontified t)) . -3007) (undo-tree-id16089 . -1) (undo-tree-id16090 . -1) (undo-tree-id16091 . -1) 3008 (3007 . 3008) (3003 . 3007) (#("n" 0 1 (fontified nil)) . 3003) (3003 . 3004) (#("node" 0 4 (fontified nil)) . -3003) (3003 . 3007) (#("no" 0 1 (fontified t) 1 2 (fontified t)) . -3003) (undo-tree-id16092 . -2) (undo-tree-id16093 . -2) 3005 (3003 . 3005) (3002 . 3004) (3001 . 3002) (#(" x" 0 2 (fontified nil)) . -3001) (3001 . 3003) (#("while" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 3001) (undo-tree-id16094 . -3) (undo-tree-id16095 . -5) (undo-tree-id16096 . -5) (2996 . 3001) 3001 (2999 . 3001) (2998 . 2999) (2996 . 2998) (2994 . 2996)) nil (26236 22877 607022 995000) 0 nil])
([nil nil ((#(" x" 0 2 (fontified nil)) . -3001) (3001 . 3003) (#("while" 0 5 (face font-lock-keyword-face fontified nil)) . 3001) (2996 . 3001) 3003) nil (26236 22877 606998 988000) 0 nil])
([nil nil ((3023 . 3027) (3022 . 3026) (3021 . 3023) (3020 . 3021)) nil (26236 22877 606995 331000) 0 nil])
([nil nil ((3077 . 3081) (apply yas--snippet-revive 3067 3078 #s(yas--snippet nil nil #s(yas--exit 3077 nil) 30 nil nil nil nil)) (247 . 279) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3077 nil) 30 nil nil nil nil)) (3035 . 3046) (#("spin_some($0)" 0 13 (fontified nil)) . 3035) (3035 . 3048) (#("sp" 0 2 (fontified nil)) . 3035) (3035 . 3037) (#("spin_some(…)" 0 12 (fontified nil)) . -3035) (3035 . 3047) (#("spin_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -3035) (undo-tree-id16078 . -5) (undo-tree-id16079 . -5) 3040 (3035 . 3040) (3023 . 3027) (#("  " 0 2 (fontified nil)) . 3023) (3032 . 3033) (3023 . 3025) (#("    " 0 4 (fontified nil)) . 3023) (undo-tree-id16080 . -4) (3033 . 3034) (3027 . 3033) (#("rclcp" 0 5 (fontified nil)) . 3027) (3027 . 3032) (#("rclcpp" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -3027) (undo-tree-id16081 . -5) (undo-tree-id16082 . -6) (undo-tree-id16083 . -6) 3033 (3032 . 3033) (3031 . 3032) (3030 . 3031) (3029 . 3030) (3027 . 3029) (#("r" 0 1 (fontified t)) . -3027) (undo-tree-id16084 . -1) (undo-tree-id16085 . -1) 3028 (3027 . 3028) (3023 . 3027) (#("   " 0 3 (fontified nil)) . -3023) (undo-tree-id16086 . -3) (undo-tree-id16087 . -3) (#(" " 0 1 (fontified t)) . 3026) (undo-tree-id16088 . -1)) nil (26236 22877 606982 258000) 0 nil])
([nil nil ((3082 . 3083)) nil (26236 22877 606928 10000) 0 nil])
([nil nil ((1101 . 1102) (1086 . 1101) (#(" " 0 1 (fontified t)) . -1086) (undo-tree-id16103 . -1) (undo-tree-id16104 . -1) (#("f" 0 1 (face font-lock-function-name-face fontified t)) . -1087) (undo-tree-id16105 . -1) (undo-tree-id16106 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1088) (undo-tree-id16107 . -1) (undo-tree-id16108 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1089) (undo-tree-id16109 . -1) (undo-tree-id16110 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -1090) (undo-tree-id16111 . -1) (undo-tree-id16112 . -1) (#("l" 0 1 (c-type c-decl-id-start face font-lock-keyword-face fontified t)) . -1091) (undo-tree-id16113 . -1) (undo-tree-id16114 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -1092) (undo-tree-id16115 . -1) (undo-tree-id16116 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -1093) (undo-tree-id16117 . -1) (undo-tree-id16118 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1094) (undo-tree-id16119 . -1) (undo-tree-id16120 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -1095) (undo-tree-id16121 . -1) (undo-tree-id16122 . -1) (#("u" 0 1 (face font-lock-function-name-face fontified t)) . -1096) (undo-tree-id16123 . -1) (undo-tree-id16124 . -1) (#("l" 0 1 (face font-lock-function-name-face fontified t)) . -1097) (undo-tree-id16125 . -1) (undo-tree-id16126 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1098) (undo-tree-id16127 . -1) (undo-tree-id16128 . -1) (#(" " 0 1 (fontified t)) . -1099) (undo-tree-id16129 . -1) (undo-tree-id16130 . -1) 1100 (1090 . 1100) (1089 . 1090) (1087 . 1089) (1086 . 1087) (1082 . 1086) (1080 . 1082) (#("  " 0 2 (fontified nil)) . 1079) (undo-tree-id16131 . -2) (undo-tree-id16132 . -2) (1078 . 1082) (t 26236 22877 651931 745000)) nil (26236 23156 237073 995000) 0 nil])
([nil nil ((1101 . 1109)) nil (26236 23156 237013 914000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2561) (undo-tree-id16230 . -6) (undo-tree-id16231 . -6) (undo-tree-id16232 . -6) (undo-tree-id16233 . -6) (undo-tree-id16234 . -6) (undo-tree-id16235 . -6) (undo-tree-id16236 . -6) (undo-tree-id16237 . -6) (undo-tree-id16238 . -6) (undo-tree-id16239 . -6) (undo-tree-id16240 . -6) (undo-tree-id16241 . -6) (undo-tree-id16242 . -6) (undo-tree-id16243 . -6) (undo-tree-id16244 . -6) (undo-tree-id16245 . -6) (undo-tree-id16246 . -6) (undo-tree-id16247 . -6) (undo-tree-id16248 . -6) (undo-tree-id16249 . -6) (undo-tree-id16250 . -6) (undo-tree-id16251 . -6) (undo-tree-id16252 . -6) (undo-tree-id16253 . -6) (undo-tree-id16254 . -6) (undo-tree-id16255 . -6) (undo-tree-id16256 . -6) (undo-tree-id16257 . -6) (undo-tree-id16258 . -6) (undo-tree-id16259 . -6) (undo-tree-id16260 . -6) (undo-tree-id16261 . -6) (undo-tree-id16262 . -6) (undo-tree-id16263 . -6) (undo-tree-id16264 . -6) (undo-tree-id16265 . -6) (undo-tree-id16266 . -6) (undo-tree-id16267 . -6) (undo-tree-id16268 . -6) (undo-tree-id16269 . -6) (undo-tree-id16270 . -6) (undo-tree-id16271 . -6) (undo-tree-id16272 . -6) (undo-tree-id16273 . -6) (undo-tree-id16274 . -6) (undo-tree-id16275 . -6) (undo-tree-id16276 . -6) (undo-tree-id16277 . -6) 2567 (2561 . 2567) (#("      " 0 6 (fontified nil)) . 2560) (undo-tree-id16278 . -6) (undo-tree-id16279 . -6) (undo-tree-id16280 . -6) (undo-tree-id16281 . -6) (undo-tree-id16282 . -6) (undo-tree-id16283 . -6) (undo-tree-id16284 . -6) (undo-tree-id16285 . -6) (undo-tree-id16286 . -6) (undo-tree-id16287 . -6) (undo-tree-id16288 . -6) (undo-tree-id16289 . -6) (undo-tree-id16290 . -6) (undo-tree-id16291 . -6) (undo-tree-id16292 . -6) (undo-tree-id16293 . -6) (undo-tree-id16294 . -6) (undo-tree-id16295 . -6) (undo-tree-id16296 . -6) (undo-tree-id16297 . -6) (undo-tree-id16298 . -6) (undo-tree-id16299 . -6) (undo-tree-id16300 . -6) (undo-tree-id16301 . -6) (undo-tree-id16302 . -6) (undo-tree-id16303 . -6) (undo-tree-id16304 . -6) (undo-tree-id16305 . -6) (undo-tree-id16306 . -6) (undo-tree-id16307 . -6) (2559 . 2567) (t 26236 23156 273985 849000)) nil (26236 23201 263075 257000) 0 nil])
([nil nil ((2586 . 2587) (2585 . 2586) (2584 . 2585) (2583 . 2584) (2576 . 2583) (#("success" 0 7 (fontified nil)) . -2576) (2576 . 2583) (#("su" 0 1 (fontified t) 1 2 (fontified t)) . -2576) (undo-tree-id16220 . -2) (undo-tree-id16221 . -2) 2578 (2577 . 2578) (2576 . 2577) (#(" " 0 1 (fontified t)) . -2576) (undo-tree-id16222 . -1) (undo-tree-id16223 . -1) 2577 (2576 . 2577) (2575 . 2576) (2574 . 2575) (#(" " 0 1 (fontified t)) . -2574) (undo-tree-id16224 . -1) (undo-tree-id16225 . -1) 2575 (#(">" 0 1 (fontified t)) . -2575) (undo-tree-id16226 . -1) (undo-tree-id16227 . -1) 2576 (2575 . 2576) (2574 . 2575) (2570 . 2574) (#("da" 0 2 (fontified nil)) . 2570) (2570 . 2572) (#("data" 0 4 (fontified nil)) . -2570) (2570 . 2574) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2570) (undo-tree-id16228 . -2) (undo-tree-id16229 . -2) 2572 (2570 . 2572) (2569 . 2571) (2566 . 2569) (2560 . 2566)) nil (26236 23201 262940 751000) 0 nil])
([nil nil ((2591 . 2592) (2590 . 2598) (2589 . 2591) (2588 . 2589)) nil (26236 23201 262909 530000) 0 nil])
([nil nil ((#("	
" 0 2 (fontified t)) . 2591) (undo-tree-id16183 . 1) (undo-tree-id16184 . -1) (undo-tree-id16185 . -1) (undo-tree-id16186 . -1) (undo-tree-id16187 . -1) (undo-tree-id16188 . -1) (undo-tree-id16189 . -1) (undo-tree-id16190 . -1) (undo-tree-id16191 . -1) (undo-tree-id16192 . -1) (undo-tree-id16193 . -1) (undo-tree-id16194 . -1) (undo-tree-id16195 . -1) (undo-tree-id16196 . -1) (undo-tree-id16197 . -1) (undo-tree-id16198 . -1) (undo-tree-id16199 . -1) (undo-tree-id16200 . -1) (undo-tree-id16201 . -1) (undo-tree-id16202 . -1) (undo-tree-id16203 . -1) (undo-tree-id16204 . -1) (undo-tree-id16205 . -1) (undo-tree-id16206 . -1) (undo-tree-id16207 . -1) (undo-tree-id16208 . -1) (undo-tree-id16209 . -1) (undo-tree-id16210 . -1) (undo-tree-id16211 . -1) (undo-tree-id16212 . -2) (undo-tree-id16213 . -2) (undo-tree-id16214 . -2) (undo-tree-id16215 . -2) (undo-tree-id16216 . -2) (undo-tree-id16217 . -2) (undo-tree-id16218 . -2) (undo-tree-id16219 . -2)) nil (26236 23201 262903 12000) 0 nil])
([nil nil ((#("      }
" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (fontified t)) . 2591) (undo-tree-id16134 . 8) (undo-tree-id16135 . -7) (undo-tree-id16136 . -8) (undo-tree-id16137 . -8) (undo-tree-id16138 . -8) (undo-tree-id16139 . -8) (undo-tree-id16140 . -8) (undo-tree-id16141 . -8) (undo-tree-id16142 . -8) (undo-tree-id16143 . -8) (undo-tree-id16144 . -8) (undo-tree-id16145 . -8) (undo-tree-id16146 . -8) (undo-tree-id16147 . -8) (undo-tree-id16148 . -8) (undo-tree-id16149 . -8) (undo-tree-id16150 . -8) (undo-tree-id16151 . -8) (undo-tree-id16152 . -8) (undo-tree-id16153 . -8) (undo-tree-id16154 . -8) (undo-tree-id16155 . -8) (undo-tree-id16156 . -8) (undo-tree-id16157 . -8) (undo-tree-id16158 . -8) (undo-tree-id16159 . -8) (undo-tree-id16160 . -8) (undo-tree-id16161 . -8) (undo-tree-id16162 . -8) (undo-tree-id16163 . -8) (undo-tree-id16164 . -8) (undo-tree-id16165 . -8) (undo-tree-id16166 . -8) (undo-tree-id16167 . -8) (undo-tree-id16168 . -8) (undo-tree-id16169 . -8) (undo-tree-id16170 . -8) (undo-tree-id16171 . -8) (undo-tree-id16172 . -8) (undo-tree-id16173 . -8) (undo-tree-id16174 . -8) (undo-tree-id16175 . -8) (undo-tree-id16176 . -8) (undo-tree-id16177 . -8) (undo-tree-id16178 . -8) (undo-tree-id16179 . -8) (undo-tree-id16180 . -8) (undo-tree-id16181 . -7) (undo-tree-id16182 . -8)) nil (26236 23201 262831 601000) 0 nil])
([nil nil ((2616 . 2617) (2609 . 2616) (2595 . 2609) (#("service_result" 0 14 (fontified nil)) . -2595) (2595 . 2609) (2594 . 2595) (2589 . 2594) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2589) (undo-tree-id16133 . -1) 2590) nil (26236 23201 262732 368000) 0 nil])
([nil nil ((2616 . 2617) (t 26236 23201 309808 576000)) nil (26236 23203 284842 129000) 0 nil])
([nil nil ((apply -3 2560 2623 undo--wrap-and-run-primitive-undo 2560 2623 ((2566 . 2569) 2560)) (t 26236 23203 330287 31000)) nil (26236 23244 944400 565000) 0 nil])
([nil nil ((2669 . 2670) (#(")" 0 1 (fontified nil)) . -2669) (2669 . 2670) (2667 . 2669) (2666 . 2667) (#(">" 0 1 (fontified t)) . -2666) (undo-tree-id16393 . -1) (undo-tree-id16394 . -1) (#(" " 0 1 (fontified t)) . -2667) (undo-tree-id16395 . -1) (undo-tree-id16396 . -1) 2668 (2667 . 2668) (2666 . 2667) (2665 . 2666) (2658 . 2665) (#("success" 0 7 (fontified nil)) . -2658) (2658 . 2665) (#("su" 0 1 (fontified t) 1 2 (fontified t)) . -2658) (undo-tree-id16397 . -2) (undo-tree-id16398 . -2) 2660 (2658 . 2660) (2657 . 2658) (2656 . 2657) (2652 . 2656) (#("da" 0 2 (fontified nil)) . 2652) (2652 . 2654) (#("data" 0 4 (fontified nil)) . -2652) (2652 . 2656) (#("da" 0 1 (fontified t) 1 2 (fontified t)) . -2652) (undo-tree-id16399 . -2) (undo-tree-id16400 . -2) 2654 (2649 . 2654) (2635 . 2649) (#("service_result" 0 14 (fontified nil)) . -2635) (2635 . 2649) (#("se" 0 1 (fontified t) 1 2 (fontified t)) . -2635) (undo-tree-id16401 . -2) (undo-tree-id16402 . -2) 2637 (2635 . 2637) (2634 . 2635) (2633 . 2634) (#("=" 0 1 (fontified t)) . -2633) (undo-tree-id16403 . -1) (undo-tree-id16404 . -1) 2634 (2629 . 2634) (2623 . 2629) (#("      " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 6 (c-in-sws t c-is-sws t fontified nil)) . 2622) (undo-tree-id16405 . -6) (undo-tree-id16406 . -6) (2621 . 2629)) nil (26236 23244 944388 654000) 0 nil])
([nil nil ((2652 . 2653)) nil (26236 23244 944348 665000) 0 nil])
([nil nil ((2686 . 2687) (#(":" 0 1 (fontified t)) . -2686) (undo-tree-id16308 . -1) (undo-tree-id16309 . -1) (undo-tree-id16310 . -1) (undo-tree-id16311 . -1) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . -1) (undo-tree-id16321 . -1) (undo-tree-id16322 . -1) (undo-tree-id16323 . -1) (undo-tree-id16324 . -1) (undo-tree-id16325 . -1) (undo-tree-id16326 . -1) (undo-tree-id16327 . -1) (undo-tree-id16328 . -1) (undo-tree-id16329 . -1) (undo-tree-id16330 . -1) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (undo-tree-id16348 . -1) (undo-tree-id16349 . -1) (undo-tree-id16350 . -1) (undo-tree-id16351 . -1) (undo-tree-id16352 . -1) (undo-tree-id16353 . -1) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1) (undo-tree-id16359 . -1) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (undo-tree-id16363 . -1) (undo-tree-id16364 . -1) (undo-tree-id16365 . -1) (undo-tree-id16366 . -1) (undo-tree-id16367 . -1) (undo-tree-id16368 . -1) (undo-tree-id16369 . -1) (undo-tree-id16370 . -1) (undo-tree-id16371 . -1) (undo-tree-id16372 . -1) (undo-tree-id16373 . -1) (undo-tree-id16374 . -1) (undo-tree-id16375 . -1) (undo-tree-id16376 . -1) (undo-tree-id16377 . -1) (undo-tree-id16378 . -1) (undo-tree-id16379 . -1) (undo-tree-id16380 . -1) (undo-tree-id16381 . -1) (undo-tree-id16382 . -1) (undo-tree-id16383 . -1) (undo-tree-id16384 . -1) (undo-tree-id16385 . -1) (undo-tree-id16386 . -1) (undo-tree-id16387 . -1) (undo-tree-id16388 . -1) (undo-tree-id16389 . -1) (undo-tree-id16390 . -1) 2687 (2686 . 2687) (2679 . 2686) (2678 . 2679) (2677 . 2678) (#(";" 0 1 (fontified t)) . -2677) (undo-tree-id16391 . -1) (undo-tree-id16392 . -1) 2678 (2677 . 2678) (2671 . 2677)) nil (26236 23244 944331 410000) 0 nil])
([nil nil ((3262 . 3276) (#("service_result" 0 14 (fontified nil)) . -3262) (3262 . 3276) (#("se" 0 1 (fontified t) 1 2 (fontified t)) . -3262) (undo-tree-id16424 . -2) (undo-tree-id16425 . -2) 3264 (3262 . 3264) (3261 . 3262) (3260 . 3261) (3256 . 3260) (#("no" 0 2 (fontified nil)) . 3256) (3256 . 3258) (#("node" 0 4 (fontified nil)) . -3256) (3256 . 3260) (#("no" 0 1 (fontified t) 1 2 (fontified t)) . -3256) (undo-tree-id16426 . -2) (undo-tree-id16427 . -2) 3258 (3256 . 3258) (3255 . 3257) (3252 . 3255) (3250 . 3252) (#("  " 0 2 (fontified nil)) . 3249) (undo-tree-id16428 . -2) (undo-tree-id16429 . -2) (3248 . 3252) (t 26236 23244 987266 278000)) nil (26236 23302 735814 359000) 0 nil])
([nil nil ((3352 . 3359) (#("A" 0 1 (face font-lock-string-face fontified t)) . -3352) (undo-tree-id16411 . -1) (undo-tree-id16412 . -1) 3353 (3348 . 3353) (3348 . 3349) (nil syntax-table nil 3349 . 3350) (nil syntax-table (1) 3347 . 3348) (3347 . 3348) (#("\"" 0 1 (fontified nil)) . -3347) (nil syntax-table nil 3349 . 3350) (nil syntax-table (1) 3347 . 3348) (3346 . 3348) (3345 . 3346) (apply yas--snippet-revive 3325 3345 #s(yas--snippet nil (#s(yas--field 1 3344 3344 nil nil nil t nil)) nil 32 nil #s(yas--field 1 3344 3344 nil nil nil t nil) #s(yas--field 1 3325 3360 nil nil nil t nil) nil)) (#("const std::string &name" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 17 (face font-lock-type-face fontified t) 17 19 (fontified t) 19 23 (face font-lock-variable-name-face fontified t)) . 3344) (279 . 308) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3344 3344 nil nil nil t nil)) nil 32 nil #s(yas--field 1 3344 3344 nil nil nil t nil) #s(yas--field 1 3325 3360 nil nil nil t nil) nil)) (3296 . 3339) (#("rclcpp::get_logger(${1:const std::string &name})" 0 48 (fontified nil)) . 3296) (3296 . 3344) (#("get" 0 3 (fontified nil)) . 3296) (3296 . 3299) (#("rclcpp::get_logger(const std::string &name)" 0 43 (fontified nil)) . -3296) (3296 . 3339) (#("get_logger" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -3296) (undo-tree-id16413 . -6) (undo-tree-id16414 . -10) (undo-tree-id16415 . -10) 3306 (3297 . 3306) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 3297) (3296 . 3297) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3325 3360 nil nil nil t nil)) nil 31 nil #s(yas--field 1 3325 3360 nil nil nil t nil) nil nil)) (3284 . 3308) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 3284) (3284 . 3313) (#("RCLCPP" 0 6 (fontified nil)) . 3284) (3284 . 3290) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -3284) (3284 . 3308) (#("RCLCPP_IN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -3284) (undo-tree-id16416 . -9) (undo-tree-id16417 . -9) 3293 (3288 . 3293) (3284 . 3288) (#("r" 0 1 (fontified t)) . -3284) (undo-tree-id16418 . -1) (undo-tree-id16419 . -1) (#("c" 0 1 (fontified t)) . -3285) (undo-tree-id16420 . -1) (undo-tree-id16421 . -1) (#("l" 0 1 (fontified t)) . -3286) (undo-tree-id16422 . -1) (undo-tree-id16423 . -1) 3287 (3284 . 3287) (3280 . 3284) (3279 . 3283) (3278 . 3280) (3277 . 3278)) nil (26236 23302 735789 968000) 0 nil])
([nil nil ((3361 . 3362) (apply yas--snippet-revive 3313 3361 #s(yas--snippet nil (#s(yas--field 1 3325 3360 nil nil nil t nil)) nil 31 nil #s(yas--field 1 3325 3360 nil nil nil t nil) nil nil))) nil (26236 23302 735756 602000) 0 nil])
([nil nil ((#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 3371) (3367 . 3371) 3378 (3374 . 3378) (3373 . 3377) (3372 . 3374) (#("P" 0 1 (fontified t)) . -3372) (undo-tree-id16407 . -1) (undo-tree-id16408 . -1) 3373 (3372 . 3373) (3371 . 3372) (#("else" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil)) . 3371) (undo-tree-id16409 . -4) (undo-tree-id16410 . -4) (3367 . 3371) 3371 (3366 . 3371)) nil (26236 23302 735751 33000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3382 . 3383) (#("
" 0 1 (fontified nil)) . -3432) (3378 . 3433) 3377) nil (26236 23302 735718 490000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 3374) (undo-tree-id16430 . -4) (undo-tree-id16431 . -3) (undo-tree-id16432 . -3) (undo-tree-id16433 . -3) (undo-tree-id16434 . -3) (undo-tree-id16435 . -3) (undo-tree-id16436 . -3) (undo-tree-id16437 . -3) (undo-tree-id16438 . -3) (undo-tree-id16439 . -3) (undo-tree-id16440 . -3) (undo-tree-id16441 . -3) (undo-tree-id16442 . -3) (undo-tree-id16443 . -3) (undo-tree-id16444 . -3) (undo-tree-id16445 . -3) (undo-tree-id16446 . -3) (undo-tree-id16447 . -3) (undo-tree-id16448 . -3) (undo-tree-id16449 . -3) (undo-tree-id16450 . -3) (undo-tree-id16451 . -3) (undo-tree-id16452 . -3) (undo-tree-id16453 . -3) (undo-tree-id16454 . -3) (undo-tree-id16455 . -3) (undo-tree-id16456 . -3) (undo-tree-id16457 . -3) (undo-tree-id16458 . -3) (undo-tree-id16459 . -3) (undo-tree-id16460 . -3) (undo-tree-id16461 . -3) (undo-tree-id16462 . -3) (undo-tree-id16463 . -3) (undo-tree-id16464 . -3) (undo-tree-id16465 . -3) (undo-tree-id16466 . -3) (undo-tree-id16467 . -3) (undo-tree-id16468 . -3) (undo-tree-id16469 . -3) (undo-tree-id16470 . -5) 3377 (t 26236 23302 801270 345000)) nil (26236 23303 777600 227000) 0 nil])
([nil nil ((3355 . 3356) (nil syntax-table nil 3373 . 3374) (nil syntax-table (1) 3370 . 3371) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -3355) (3355 . 3356) (nil syntax-table nil 3373 . 3374) (nil syntax-table (1) 3370 . 3371) (3354 . 3355) (nil syntax-table nil 3372 . 3373) (nil syntax-table (1) 3369 . 3370) (3353 . 3354) (nil syntax-table nil 3371 . 3372) (nil syntax-table (1) 3368 . 3369) (3352 . 3353) (nil syntax-table nil 3370 . 3371) (nil syntax-table (1) 3367 . 3368) (3351 . 3352) (nil syntax-table nil 3369 . 3370) (nil syntax-table (1) 3366 . 3367) (3350 . 3351) (nil syntax-table nil 3368 . 3369) (nil syntax-table (1) 3365 . 3366) (3349 . 3350) (nil syntax-table nil 3367 . 3368) (nil syntax-table (1) 3364 . 3365) (3348 . 3349) (nil syntax-table nil 3366 . 3367) (nil syntax-table (1) 3363 . 3364) (3347 . 3348) (nil syntax-table nil 3365 . 3366) (nil syntax-table (1) 3362 . 3363) (3346 . 3347) (nil syntax-table nil 3364 . 3365) (nil syntax-table (1) 3361 . 3362) (3345 . 3346) (nil syntax-table nil 3363 . 3364) (nil syntax-table (1) 3360 . 3361) (3344 . 3345) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -3344) (nil syntax-table nil 3363 . 3364) (nil syntax-table (1) 3360 . 3361) (3344 . 3345) (t 26236 23303 821424 414000)) nil (26236 23329 366424 629000) 0 nil])
([nil nil ((3422 . 3423) (nil syntax-table nil 3440 . 3441) (nil syntax-table (1) 3437 . 3438) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -3422) (3422 . 3423) (nil syntax-table nil 3440 . 3441) (nil syntax-table (1) 3437 . 3438) (3421 . 3422) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -3421) (nil syntax-table nil 3440 . 3441) (nil syntax-table (1) 3437 . 3438) (3421 . 3422) (t 26236 23329 445065 553000)) nil (26236 23337 890152 205000) 0 nil])
([nil nil ((3422 . 3432)) nil (26236 23337 890136 259000) 0 nil])
([nil nil ((#("ServerNode" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t)) . 3345) (undo-tree-id16524 . -9) (undo-tree-id16525 . -10) (t 26236 23337 934179 298000)) nil (26236 23416 190748 728000) 0 nil])
([nil nil ((3345 . 3352) (#("N" 0 1 (face font-lock-string-face fontified t)) . -3345) (undo-tree-id16522 . -1) (undo-tree-id16523 . -1) 3346 (3345 . 3346)) nil (26236 23416 190741 974000) 0 nil])
([nil nil ((#("ServerNode" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t)) . 3419) (undo-tree-id16509 . -9) (undo-tree-id16510 . -9) (undo-tree-id16511 . -9) (undo-tree-id16512 . -9) (undo-tree-id16513 . -9) (undo-tree-id16514 . -6) (undo-tree-id16515 . -6) (undo-tree-id16516 . -6) (undo-tree-id16517 . -6) (undo-tree-id16518 . -6) (undo-tree-id16519 . -6) (undo-tree-id16520 . -6) (undo-tree-id16521 . -10)) nil (26236 23416 190733 175000) 0 nil])
([nil nil ((3422 . 3426) (#("N" 0 1 (face font-lock-string-face fontified t)) . -3422) (undo-tree-id16471 . -1) (undo-tree-id16472 . -1) (undo-tree-id16473 . -1) (undo-tree-id16474 . -1) (undo-tree-id16475 . -1) (undo-tree-id16476 . -1) (undo-tree-id16477 . -1) (undo-tree-id16478 . -1) (undo-tree-id16479 . -1) (undo-tree-id16480 . -1) (undo-tree-id16481 . -1) (undo-tree-id16482 . -1) (undo-tree-id16483 . -1) (undo-tree-id16484 . -1) (undo-tree-id16485 . -1) (undo-tree-id16486 . -1) (undo-tree-id16487 . -1) (undo-tree-id16488 . -1) (undo-tree-id16489 . -1) (undo-tree-id16490 . -1) (undo-tree-id16491 . -1) (undo-tree-id16492 . -1) (undo-tree-id16493 . -1) (undo-tree-id16494 . -1) (undo-tree-id16495 . -1) (undo-tree-id16496 . -1) (undo-tree-id16497 . -1) (undo-tree-id16498 . -1) (undo-tree-id16499 . -1) (undo-tree-id16500 . -1) (undo-tree-id16501 . -1) (undo-tree-id16502 . -1) (undo-tree-id16503 . -1) (undo-tree-id16504 . -1) (undo-tree-id16505 . -1) (undo-tree-id16506 . -1) (undo-tree-id16507 . -1) (undo-tree-id16508 . -1) 3423 (3421 . 3423) (3419 . 3421)) nil (26236 23416 190694 871000) 0 nil])
([nil nil ((2216 . 2222) (2215 . 2216) (t 26236 23416 234569 798000)) nil (26236 52172 903445 493000) 0 nil])
([nil nil ((2111 . 2113) (2110 . 2111)) nil (26236 52172 903432 506000) 0 nil])
([nil nil ((2284 . 2287) (t 26236 52172 945260 276000)) nil (26236 52197 843528 432000) 0 nil])
([nil nil ((2290 . 2291) (2289 . 2290) (2288 . 2289)) nil (26236 52197 843524 561000) 0 nil])
([nil nil ((2225 . 2229)) nil (26236 52197 843521 453000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2294)) nil (26236 52197 843516 415000) 0 nil])
([nil nil ((2294 . 2299)) nil (26236 52197 843506 131000) 0 nil])
([nil nil ((1941 . 1945) (#("    " 0 4 (fontified nil)) . 1940) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (1940 . 1945) (#("    " 0 4 (fontified nil)) . 1939) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (1943 . 1944) (1939 . 1943) (t 26236 52197 917302 293000)) nil (26236 52232 718429 867000) 0 nil])
([nil nil ((1940 . 1944)) nil (26236 52232 718417 468000) 0 nil])
([nil nil ((1953 . 1954) (1952 . 1953) (#("0" 0 1 (fontified t)) . -1952) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 1953 (1944 . 1953) (1940 . 1944) (#("   " 0 3 (fontified nil)) . -1940) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (#(" " 0 1 (fontified t)) . 1943)) nil (26236 52232 718403 635000) 0 nil])
([nil nil ((2132 . 2133) (#("1" 0 1 (fontified t)) . -2132) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 2133) nil (26236 52232 717930 963000) 0 nil])
([nil nil ((#(" a" 0 1 (fontified t) 1 2 (fontified t)) . 2131) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 2132 (t 26236 52232 785361 790000)) nil (26236 52305 870372 527000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2130) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1)) nil (26236 52305 870356 558000) 0 nil])
([nil nil ((#("    int a = 1;
" 0 4 (fontified t) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 1940) (undo-tree-id133 . -14) (undo-tree-id134 . -13) 1953) nil (26236 52305 870340 760000) 0 nil])
([nil nil ((#("int " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t)) . 2222) (undo-tree-id131 . -3) (undo-tree-id132 . -4) 2226) nil (26236 52305 870334 26000) 0 nil])
([nil nil ((#("index" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 2222) (undo-tree-id130 . -4)) nil (26236 52305 870326 939000) 0 nil])
([nil nil ((#("," 0 1 (fontified t c-type c-decl-arg-start)) . 2220)) nil (26236 52305 870322 795000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2220)) nil (26236 52305 870320 499000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 2280)) nil (26236 52305 870318 277000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 2280)) nil (26236 52305 870315 977000) 0 nil])
([nil nil ((#("index" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 2283) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4)) nil (26236 52305 870313 603000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 2279)) nil (26236 52305 870305 787000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2280) (undo-tree-id125 . -1) (undo-tree-id126 . -1)) nil (26236 52305 870301 643000) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . 2280) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1)) nil (26236 52305 870288 556000) 0 nil])
nil
