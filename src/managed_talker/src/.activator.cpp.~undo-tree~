(undo-tree-save-format-version . 1)
"aec628f78ebf069270e787897ad28d028de50d7b"
[nil nil nil nil (26236 5280 747157 530000) 0 nil]
([nil nil ((apply -51 709 1369 undo--wrap-and-run-primitive-undo 709 1369 ((1363 . 1366) (1343 . 1346) (1275 . 1278) (1189 . 1192) (1131 . 1134) (1096 . 1099) (1044 . 1047) (1034 . 1037) (972 . 975) (923 . 926) (858 . 861) (853 . 856) (824 . 827) (801 . 804) (781 . 784) (759 . 762) (709 . 712) 1318)) (t 26236 3914 189852 181000)) nil (26236 5280 747146 691000) 0 nil])
([nil nil ((#("auto " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 4 5 (fontified t)) . 6710) (undo-tree-id511 . -4) (t 26236 5280 757774 309000)) nil (26236 5506 161092 754000) 0 nil])
([nil nil ((6711 . 6712) (6710 . 6711)) nil (26236 5506 161085 620000) 0 nil])
([nil nil ((apply yas--snippet-revive 6718 6758 #s(yas--snippet nil (#s(yas--field 1 6725 6757 nil nil nil t nil)) nil 0 nil #s(yas--field 1 6725 6757 nil nil nil t nil) nil nil)) (6746 . 6757) (#("ChangeState" 0 11 (fontified nil)) . -6746) (6746 . 6757) (#("Cha" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6746) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -1) 6749 (6746 . 6749) (6744 . 6746) (6741 . 6744) (#("srv" 0 3 (fontified nil)) . -6741) (6741 . 6744) (#("sr" 0 1 (fontified t) 1 2 (fontified t)) . -6741) (undo-tree-id500 . -2) (undo-tree-id501 . -2) 6743 (6741 . 6743) (6739 . 6741) (#(";" 0 1 (fontified t)) . -6739) (undo-tree-id502 . -1) (undo-tree-id503 . -1) 6740 (6739 . 6740) (nil fontified nil 6725 . 6739) (nil face (rainbow-delimiters-depth-4-face) 6725 . 6739) (6725 . 6739) (#("li" 0 2 (fontified nil)) . 6725) (nil fontified nil 6725 . 6727) (nil face (rainbow-delimiters-depth-4-face) 6725 . 6727) (6725 . 6727) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6725) (nil fontified nil 6725 . 6739) (nil face (rainbow-delimiters-depth-4-face) 6725 . 6739) (6725 . 6739) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -6725) (undo-tree-id504 . -2) (undo-tree-id505 . -2) 6727 (6726 . 6727) (#("typename ServiceT" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 17 (fontified nil face font-lock-type-face)) . 6726) (6725 . 6726) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6725 6757 nil nil nil t nil)) nil 0 nil #s(yas--field 1 6725 6757 nil nil nil t nil) nil nil)) (6718 . 6743) (#("Client<${1:typename ServiceT}>" 0 30 (fontified nil)) . 6718) (6718 . 6748) (#("Cli" 0 3 (fontified nil)) . 6718) (6718 . 6721) (#("Client<typename ServiceT>" 0 6 (fontified nil) 6 7 (category c-<-as-paren-syntax fontified nil) 7 24 (fontified nil) 24 25 (category c->-as-paren-syntax fontified nil)) . -6718) (6718 . 6743) (#("Cli" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -6718) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) 6721 (6718 . 6721) (6706 . 6710) (#("  " 0 2 (fontified nil)) . 6706) (6715 . 6716) (6706 . 6708) (#("    " 0 4 (fontified nil)) . 6706) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (6716 . 6717) (6713 . 6716) (6711 . 6713)) nil (26236 5506 161070 764000) 0 nil])
([nil nil ((6759 . 6765) (#(" " 0 1 (fontified nil)) . 6759) (undo-tree-id496 . 1) (6758 . 6759)) nil (26236 5506 161027 26000) 0 nil])
([nil nil ((6782 . 6788) (#(" " 0 1 (fontified nil)) . 6782) (6781 . 6782)) nil (26236 5506 161022 107000) 0 nil])
([nil nil ((6705 . 6709)) nil (26236 5506 161019 36000) 0 nil])
([nil nil ((apply -6 7172 7272 undo--wrap-and-run-primitive-undo 7172 7272 ((7204 . 7207) (7176 . 7179) 7172))) nil (26236 5506 161017 368000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t c-is-sws t c-in-sws t)) . -7274) (undo-tree-id493 . -4) 7278 (7274 . 7278) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 7273) (undo-tree-id494 . -4) (7273 . 7278) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 7272) (undo-tree-id495 . -4) (7271 . 7277)) nil (26236 5506 161013 900000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7322) (undo-tree-id490 . -1) 7323 (7315 . 7323) (7314 . 7316) (7310 . 7314) (7298 . 7310) (7297 . 7298) (7296 . 7297) (7282 . 7296) (#("cu" 0 2 (fontified nil)) . 7282) (7282 . 7284) (#("current_client" 0 14 (fontified nil)) . -7282) (7282 . 7296) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -7282) (undo-tree-id491 . -2) (undo-tree-id492 . -2) 7284 (7281 . 7284) (7280 . 7282) (7277 . 7280) (7273 . 7277)) nil (26236 5506 161002 932000) 0 nil])
([nil nil ((7319 . 7320)) nil (26236 5506 160988 826000) 0 nil])
([nil nil ((7328 . 7334) (7327 . 7333) (7326 . 7328) (7325 . 7326)) nil (26236 5506 160986 678000) 0 nil])
([nil nil ((7338 . 7344) (7337 . 7339) (7334 . 7337) (7328 . 7334) (#("     " 0 5 (fontified nil)) . -7328) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -5) (#(" " 0 1 (fontified t)) . 7333) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1)) nil (26236 5506 160977 983000) 0 nil])
([nil nil ((7338 . 7339)) nil (26236 5506 160946 845000) 0 nil])
([nil nil ((7349 . 7351) (7347 . 7349) (7345 . 7347)) nil (26236 5506 160944 566000) 0 nil])
([nil nil ((7355 . 7356) (7354 . 7362) (7353 . 7355) (#("P" 0 1 (fontified t)) . -7353) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 7354 (7352 . 7354)) nil (26236 5506 160939 649000) 0 nil])
([nil nil ((7357 . 7362) (7356 . 7357) (7355 . 7356) (#("	" 0 1 (fontified t)) . 7355)) nil (26236 5506 160900 196000) 0 nil])
([nil nil ((#("      }
" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-5-face)) 7 8 (fontified t)) . 7363) (undo-tree-id421 . -6) (undo-tree-id422 . -7) (undo-tree-id423 . -7) (undo-tree-id424 . -6) (undo-tree-id425 . -6) (undo-tree-id426 . -6) (undo-tree-id427 . -6) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (undo-tree-id437 . -6) (undo-tree-id438 . -6) (undo-tree-id439 . -6) (undo-tree-id440 . -6) (undo-tree-id441 . -6) (undo-tree-id442 . -6) (undo-tree-id443 . -6) (undo-tree-id444 . -6) (undo-tree-id445 . -6) (undo-tree-id446 . -6) (undo-tree-id447 . -6) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -8) 7369) nil (26236 5506 160893 182000) 0 nil])
([nil nil ((#("	RCLCPP
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 7355) (undo-tree-id274 . -7) (undo-tree-id275 . -1) (undo-tree-id276 . -7) (undo-tree-id277 . 1) (undo-tree-id278 . -1) (undo-tree-id279 . -8) (undo-tree-id280 . -6) (undo-tree-id281 . -6) (undo-tree-id282 . -6) (undo-tree-id283 . -6) (undo-tree-id284 . -6) (undo-tree-id285 . -6) (undo-tree-id286 . -6) (undo-tree-id287 . -7) (undo-tree-id288 . -7) (undo-tree-id289 . -7) (undo-tree-id290 . -7) (undo-tree-id291 . -7) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . 1) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (undo-tree-id305 . -7) (undo-tree-id306 . -7) (undo-tree-id307 . -7) (undo-tree-id308 . -7) (undo-tree-id309 . -7) (undo-tree-id310 . -7) (undo-tree-id311 . -7) (undo-tree-id312 . -7) (undo-tree-id313 . -7) (undo-tree-id314 . -7) (undo-tree-id315 . -7) (undo-tree-id316 . -7) (undo-tree-id317 . -7) (undo-tree-id318 . -7) (undo-tree-id319 . -7) (undo-tree-id320 . -7) (undo-tree-id321 . -7) (undo-tree-id322 . -7) (undo-tree-id323 . -7) (undo-tree-id324 . -7) (undo-tree-id325 . -7) (undo-tree-id326 . -7) (undo-tree-id327 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id330 . -7) (undo-tree-id331 . -7) (undo-tree-id332 . -7) (undo-tree-id333 . -7) (undo-tree-id334 . -7) (undo-tree-id335 . -7) (undo-tree-id336 . -7) (undo-tree-id337 . -7) (undo-tree-id338 . -7) (undo-tree-id339 . -7) (undo-tree-id340 . -6) (undo-tree-id341 . -6) (undo-tree-id342 . -6) (undo-tree-id343 . -6) (undo-tree-id344 . -6) (undo-tree-id345 . -6) (undo-tree-id346 . -6) (undo-tree-id347 . -6) (undo-tree-id348 . -6) (undo-tree-id349 . -8) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (undo-tree-id359 . -8) (undo-tree-id360 . -8) (undo-tree-id361 . -8) (undo-tree-id362 . -8) (undo-tree-id363 . -8) (undo-tree-id364 . -8) (undo-tree-id365 . -8) (undo-tree-id366 . -8) (undo-tree-id367 . -8) (undo-tree-id368 . -8) (undo-tree-id369 . -8) (undo-tree-id370 . -8) (undo-tree-id371 . -8) (undo-tree-id372 . -8) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -8) (undo-tree-id376 . -8) (undo-tree-id377 . -8) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -8) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -1) (undo-tree-id384 . -8) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -8) 7356) nil (26236 5506 160815 740000) 0 nil])
([nil nil ((#("      if (!rclcpp::ok()) {
" 0 6 (fontified t) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-5-face)) 10 11 (fontified t face font-lock-negation-char-face) 11 12 (fontified t face font-lock-constant-face) 12 13 (fontified t face font-lock-constant-face) 13 14 (fontified t face font-lock-constant-face) 14 15 (fontified t face font-lock-constant-face) 15 16 (fontified t face font-lock-constant-face) 16 17 (fontified t face font-lock-constant-face) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-6-face)) 22 23 (fontified t face (rainbow-delimiters-depth-6-face)) 23 24 (fontified t face (rainbow-delimiters-depth-5-face)) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-5-face)) 26 27 (fontified t)) . 7328) (undo-tree-id83 . -27) (undo-tree-id84 . -4) (undo-tree-id85 . -26) (undo-tree-id86 . -21) (undo-tree-id87 . -22) (undo-tree-id88 . -25) (undo-tree-id89 . -25) (undo-tree-id90 . -25) (undo-tree-id91 . -25) (undo-tree-id92 . -25) (undo-tree-id93 . -25) (undo-tree-id94 . -25) (undo-tree-id95 . -25) (undo-tree-id96 . -25) (undo-tree-id97 . -25) (undo-tree-id98 . -25) (undo-tree-id99 . -25) (undo-tree-id100 . -25) (undo-tree-id101 . -25) (undo-tree-id102 . -25) (undo-tree-id103 . -25) (undo-tree-id104 . -25) (undo-tree-id105 . -25) (undo-tree-id106 . -27) (undo-tree-id107 . -27) (undo-tree-id108 . -27) (undo-tree-id109 . -27) (undo-tree-id110 . -27) (undo-tree-id111 . -27) (undo-tree-id112 . -27) (undo-tree-id113 . -27) (undo-tree-id114 . -27) (undo-tree-id115 . -27) (undo-tree-id116 . -27) (undo-tree-id117 . -27) (undo-tree-id118 . -27) (undo-tree-id119 . -27) (undo-tree-id120 . -27) (undo-tree-id121 . -27) (undo-tree-id122 . -27) (undo-tree-id123 . -27) (undo-tree-id124 . -27) (undo-tree-id125 . -27) (undo-tree-id126 . -27) (undo-tree-id127 . -27) (undo-tree-id128 . -27) (undo-tree-id129 . -27) (undo-tree-id130 . -27) (undo-tree-id131 . -27) (undo-tree-id132 . -27) (undo-tree-id133 . -27) (undo-tree-id134 . -27) (undo-tree-id135 . -27) (undo-tree-id136 . -27) (undo-tree-id137 . -27) (undo-tree-id138 . -27) (undo-tree-id139 . -27) (undo-tree-id140 . -27) (undo-tree-id141 . -27) (undo-tree-id142 . -27) (undo-tree-id143 . -27) (undo-tree-id144 . -27) (undo-tree-id145 . -27) (undo-tree-id146 . -27) (undo-tree-id147 . -27) (undo-tree-id148 . -27) (undo-tree-id149 . -27) (undo-tree-id150 . -27) (undo-tree-id151 . -27) (undo-tree-id152 . -27) (undo-tree-id153 . -27) (undo-tree-id154 . -27) (undo-tree-id155 . -27) (undo-tree-id156 . -27) (undo-tree-id157 . -27) (undo-tree-id158 . -27) (undo-tree-id159 . -27) (undo-tree-id160 . -27) (undo-tree-id161 . -27) (undo-tree-id162 . -27) (undo-tree-id163 . -27) (undo-tree-id164 . -27) (undo-tree-id165 . -27) (undo-tree-id166 . -27) (undo-tree-id167 . -27) (undo-tree-id168 . -27) (undo-tree-id169 . -27) (undo-tree-id170 . -27) (undo-tree-id171 . -27) (undo-tree-id172 . -27) (undo-tree-id173 . -27) (undo-tree-id174 . -27) (undo-tree-id175 . -27) (undo-tree-id176 . -27) (undo-tree-id177 . -27) (undo-tree-id178 . -27) (undo-tree-id179 . -27) (undo-tree-id180 . -27) (undo-tree-id181 . -27) (undo-tree-id182 . -27) (undo-tree-id183 . -27) (undo-tree-id184 . -27) (undo-tree-id185 . -27) (undo-tree-id186 . -27) (undo-tree-id187 . -27) (undo-tree-id188 . -27) (undo-tree-id189 . -27) (undo-tree-id190 . -27) (undo-tree-id191 . -27) (undo-tree-id192 . -27) (undo-tree-id193 . -27) (undo-tree-id194 . -27) (undo-tree-id195 . -27) (undo-tree-id196 . -27) (undo-tree-id197 . -27) (undo-tree-id198 . -27) (undo-tree-id199 . -27) (undo-tree-id200 . -27) (undo-tree-id201 . -27) (undo-tree-id202 . -27) (undo-tree-id203 . -27) (undo-tree-id204 . -27) (undo-tree-id205 . -27) (undo-tree-id206 . -27) (undo-tree-id207 . -27) (undo-tree-id208 . -27) (undo-tree-id209 . -27) (undo-tree-id210 . -27) (undo-tree-id211 . -27) (undo-tree-id212 . -27) (undo-tree-id213 . -27) (undo-tree-id214 . -27) (undo-tree-id215 . -27) (undo-tree-id216 . -27) (undo-tree-id217 . -27) (undo-tree-id218 . -27) (undo-tree-id219 . -27) (undo-tree-id220 . -27) (undo-tree-id221 . -27) (undo-tree-id222 . -27) (undo-tree-id223 . -27) (undo-tree-id224 . -27) (undo-tree-id225 . -27) (undo-tree-id226 . -27) (undo-tree-id227 . -27) (undo-tree-id228 . -27) (undo-tree-id229 . -27) (undo-tree-id230 . -27) (undo-tree-id231 . -27) (undo-tree-id232 . -27) (undo-tree-id233 . -27) (undo-tree-id234 . -27) (undo-tree-id235 . -27) (undo-tree-id236 . -27) (undo-tree-id237 . -27) (undo-tree-id238 . -27) (undo-tree-id239 . -27) (undo-tree-id240 . -27) (undo-tree-id241 . -27) (undo-tree-id242 . -27) (undo-tree-id243 . -27) (undo-tree-id244 . -27) (undo-tree-id245 . -27) (undo-tree-id246 . -27) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -27) 7332) nil (26236 5506 160554 138000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -7329) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -6) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -6) 7335 (7329 . 7335) (#("      " 0 6 (fontified nil)) . 7328) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (undo-tree-id56 . -6) (undo-tree-id57 . -6) (undo-tree-id58 . -6) (undo-tree-id59 . -6) (undo-tree-id60 . -6) (undo-tree-id61 . -6) (undo-tree-id62 . -6) (undo-tree-id63 . -6) (undo-tree-id64 . -6) (undo-tree-id65 . -6) (undo-tree-id66 . -6) (undo-tree-id67 . -6) (undo-tree-id68 . -6) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (undo-tree-id78 . -6) (undo-tree-id79 . -6) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (7327 . 7335)) nil (26236 5506 160136 668000) 0 nil])
([nil nil ((7397 . 7407) (7376 . 7397) (7368 . 7376) (#("w" 0 1 (fontified t face font-lock-string-face)) . -7368) (undo-tree-id0 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7369) (undo-tree-id1 . -1) 7370 (7368 . 7370) (7368 . 7369) (nil syntax-table nil 7369 . 7370) (nil syntax-table (1) 7367 . 7368) (7367 . 7368) (#("\"" 0 1 (fontified nil)) . -7367) (undo-tree-id2 . -1) (nil syntax-table nil 7369 . 7370) (nil syntax-table (1) 7367 . 7368) (7366 . 7368) (7365 . 7366) (apply yas--snippet-revive 7353 7365 #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 7347 7408 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 7347 7408 nil nil nil t nil) nil)) (7353 . 7365) (#("get_logger()" 0 12 (fontified nil)) . 7353) (undo-tree-id3 . -12) (7353 . 7365) (#("get_logger() const" 0 18 (fontified nil)) . -7353) (undo-tree-id4 . -18) (7353 . 7371) (#("get_lo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -7353) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -5) (undo-tree-id8 . -6) 7359 (7353 . 7359) (#("l" 0 1 (fontified t)) . -7353) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 7354 (7353 . 7354) (7352 . 7353) (7348 . 7352) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 7348) (undo-tree-id12 . -11) (7347 . 7348) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7347 7408 nil nil nil t nil)) nil 1 nil #s(yas--field 1 7347 7408 nil nil nil t nil) nil nil)) (7335 . 7359) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 7335) (7335 . 7364) (#("RCLCPP_I" 0 8 (fontified nil)) . 7335) (7335 . 7343) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -7335) (7335 . 7359) (#("RCLCPP_I" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -7335) (undo-tree-id13 . -8) (undo-tree-id14 . -8) 7343 (7335 . 7343) (7329 . 7335) (#("      " 0 6 (fontified nil)) . 7328) (undo-tree-id15 . -6) (7334 . 7335) (7328 . 7334)) nil (26236 5506 159938 772000) 0 nil])
([nil nil ((apply yas--snippet-revive 7335 7409 #s(yas--snippet nil (#s(yas--field 1 7347 7408 nil nil nil t nil)) nil 1 nil #s(yas--field 1 7347 7408 nil nil nil t nil) nil nil))) nil (26236 5506 159836 819000) 0 nil])
([nil nil ((7409 . 7410)) nil (26236 5506 159827 96000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -7393) (7393 . 7394) (#("]" 0 1 (fontified nil face font-lock-string-face)) . -7393) (7393 . 7394) (7392 . 7394) (#("]" 0 1 (fontified t face font-lock-string-face)) . -7392) (undo-tree-id516 . -1) 7393 (7392 . 7393) (#("]" 0 1 (fontified nil face font-lock-string-face)) . -7392) (7391 . 7393) (t 26236 5506 173455 280000)) nil (26236 5572 841553 141000) 0 nil])
([nil nil ((7393 . 7395)) nil (26236 5572 841543 719000) 0 nil])
([nil nil ((7394 . 7396)) nil (26236 5572 841540 391000) 0 nil])
([nil nil ((7437 . 7442) (7436 . 7438) (7417 . 7436) (#("cha" 0 3 (fontified nil)) . 7417) (7417 . 7420) (#("change_state_topics" 0 19 (fontified nil)) . -7417) (7417 . 7436) (#("chan" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7417) (undo-tree-id514 . -4) (undo-tree-id515 . -4) 7421 (7420 . 7421) (7416 . 7420) (7415 . 7416)) nil (26236 5572 841534 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 7444 7451 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (7444 . 7451) (#("c_str()" 0 7 (fontified nil)) . 7444) (7444 . 7451) (#("c_str() const" 0 13 (fontified nil)) . -7444) (7444 . 7457) (#("c" 0 1 (fontified t)) . -7444) (undo-tree-id512 . -1) (undo-tree-id513 . -1) 7445 (7443 . 7445)) nil (26236 5572 841515 245000) 0 nil])
([nil nil ((#("    if (!current_client->wait_for_service(time_out)) {

      RCLCPP_INFO(this->get_logger(), \"Waiting for the service [ %s ] to appear......\", change_state_topics[index].c_str());

    }

" 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-in-sws t c-is-sws t) 4 5 (fontified t c-is-sws t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t face font-lock-negation-char-face) 9 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-5-face)) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-5-face)) 51 52 (fontified t face (rainbow-delimiters-depth-4-face)) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-4-face)) 54 55 (fontified t) 55 56 (fontified t) 56 62 (fontified t) 62 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-5-face)) 74 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t face font-lock-keyword-face) 77 78 (fontified t face font-lock-keyword-face) 78 79 (fontified t) 79 80 (fontified t) 80 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-6-face)) 91 92 (fontified t face (rainbow-delimiters-depth-6-face)) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t face font-lock-string-face) 95 96 (fontified t face font-lock-string-face) 96 97 (fontified t face font-lock-string-face) 97 98 (fontified t face font-lock-string-face) 98 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 101 (fontified t face font-lock-string-face) 101 102 (fontified t face font-lock-string-face) 102 103 (fontified t face font-lock-string-face) 103 104 (fontified t face font-lock-string-face) 104 105 (fontified t face font-lock-string-face) 105 106 (fontified t face font-lock-string-face) 106 107 (fontified t face font-lock-string-face) 107 108 (fontified t face font-lock-string-face) 108 109 (fontified t face font-lock-string-face) 109 110 (fontified t face font-lock-string-face) 110 111 (fontified t face font-lock-string-face) 111 112 (fontified t face font-lock-string-face) 112 113 (fontified t face font-lock-string-face) 113 114 (fontified t face font-lock-string-face) 114 115 (fontified t face font-lock-string-face) 115 116 (fontified t face font-lock-string-face) 116 117 (fontified t face font-lock-string-face) 117 118 (fontified t face font-lock-string-face) 118 119 (fontified t face font-lock-string-face) 119 120 (fontified t face font-lock-string-face) 120 121 (fontified t face font-lock-string-face) 121 122 (fontified t face font-lock-string-face) 122 123 (fontified t face font-lock-string-face) 123 124 (fontified t face font-lock-string-face) 124 125 (fontified t face font-lock-string-face) 125 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 128 (fontified t face font-lock-string-face) 128 129 (fontified t face font-lock-string-face) 129 130 (fontified t face font-lock-string-face) 130 131 (fontified t face font-lock-string-face) 131 132 (fontified t face font-lock-string-face) 132 133 (fontified t face font-lock-string-face) 133 134 (fontified t face font-lock-string-face) 134 135 (fontified t face font-lock-string-face) 135 136 (fontified t face font-lock-string-face) 136 137 (fontified t face font-lock-string-face) 137 138 (fontified t face font-lock-string-face) 138 139 (fontified t face font-lock-string-face) 139 140 (fontified t face font-lock-string-face) 140 141 (fontified t face font-lock-string-face) 141 142 (fontified t face font-lock-string-face) 142 143 (fontified t) 143 144 (fontified t) 144 163 (fontified t) 163 164 (fontified t face (rainbow-delimiters-depth-6-face)) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t face (rainbow-delimiters-depth-6-face)) 170 171 (fontified t) 171 176 (fontified t) 176 177 (fontified t face (rainbow-delimiters-depth-6-face)) 177 178 (fontified t face (rainbow-delimiters-depth-6-face)) 178 179 (fontified t face (rainbow-delimiters-depth-5-face)) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 186 (fontified t) 186 187 (fontified t face (rainbow-delimiters-depth-4-face)) 187 188 (fontified t) 188 189 (c-is-sws t c-in-sws t fontified t)) . 7273) (undo-tree-id517 . -188) (undo-tree-id518 . -188) (undo-tree-id519 . -188) (undo-tree-id520 . 11) (undo-tree-id521 . -177) (undo-tree-id522 . -182) (undo-tree-id523 . -179) (undo-tree-id524 . -179) (undo-tree-id525 . -141) (undo-tree-id526 . -177) (undo-tree-id527 . -55) (undo-tree-id528 . -55) (undo-tree-id529 . -55) (undo-tree-id530 . -55) (undo-tree-id531 . -55) (undo-tree-id532 . -55) (undo-tree-id533 . -55) (undo-tree-id534 . -56) (undo-tree-id535 . -56) (undo-tree-id536 . -56) (undo-tree-id537 . -56) (undo-tree-id538 . -56) (undo-tree-id539 . -56) (undo-tree-id540 . -56) (undo-tree-id541 . -56) (undo-tree-id542 . -56) (undo-tree-id543 . -56) (undo-tree-id544 . -56) (undo-tree-id545 . -56) (undo-tree-id546 . -56) (undo-tree-id547 . -56) (undo-tree-id548 . -181) (undo-tree-id549 . -181) (undo-tree-id550 . -181) (undo-tree-id551 . -181) (undo-tree-id552 . -181) (undo-tree-id553 . -181) (undo-tree-id554 . -181) (undo-tree-id555 . -182) (undo-tree-id556 . -182) (undo-tree-id557 . -182) (undo-tree-id558 . -182) (undo-tree-id559 . -182) (undo-tree-id560 . -182) (undo-tree-id561 . -182) (undo-tree-id562 . -188) (undo-tree-id563 . -188) (undo-tree-id564 . -188) (undo-tree-id565 . -188) (undo-tree-id566 . -188) (undo-tree-id567 . -188) (undo-tree-id568 . -188) (undo-tree-id569 . -189) (undo-tree-id570 . -189) (undo-tree-id571 . -189) (undo-tree-id572 . -189) (undo-tree-id573 . -189) (undo-tree-id574 . -189) (undo-tree-id575 . -189) (undo-tree-id576 . -189) (undo-tree-id577 . -189) (undo-tree-id578 . -189) (undo-tree-id579 . -189) (undo-tree-id580 . -189) (undo-tree-id581 . -189) (undo-tree-id582 . -189) (undo-tree-id583 . -188) (undo-tree-id584 . -188) (undo-tree-id585 . -188) (undo-tree-id586 . -188) (undo-tree-id587 . -188) (undo-tree-id588 . -188) (undo-tree-id589 . -188) (undo-tree-id590 . -188) (undo-tree-id591 . -188) (undo-tree-id592 . -188) (undo-tree-id593 . -188) (undo-tree-id594 . -188) (undo-tree-id595 . -188) (undo-tree-id596 . -188) (undo-tree-id597 . -188) (undo-tree-id598 . -188) (undo-tree-id599 . -188) (undo-tree-id600 . -188) (undo-tree-id601 . -188) (undo-tree-id602 . -188) (undo-tree-id603 . -188) (undo-tree-id604 . -188) (undo-tree-id605 . -188) (undo-tree-id606 . -188) (undo-tree-id607 . -188) (undo-tree-id608 . -188) (undo-tree-id609 . -188) (undo-tree-id610 . -188) (undo-tree-id611 . -188) (undo-tree-id612 . -188) (undo-tree-id613 . -188) (undo-tree-id614 . -188) (undo-tree-id615 . -188) (undo-tree-id616 . -188) (undo-tree-id617 . -189) (undo-tree-id618 . -189) (undo-tree-id619 . -189) (undo-tree-id620 . -189) (undo-tree-id621 . -189) (undo-tree-id622 . -189) (undo-tree-id623 . -189) (undo-tree-id624 . -188) (undo-tree-id625 . -188) (undo-tree-id626 . -188) (undo-tree-id627 . -188) (undo-tree-id628 . -188) (undo-tree-id629 . -188) (undo-tree-id630 . -188) (undo-tree-id631 . -189) (undo-tree-id632 . -188) (undo-tree-id633 . -188) (undo-tree-id634 . -188) (undo-tree-id635 . -188) (undo-tree-id636 . -188) (undo-tree-id637 . -188) (undo-tree-id638 . -188) (undo-tree-id639 . -188) (undo-tree-id640 . -188) (undo-tree-id641 . -188) (undo-tree-id642 . -182) (undo-tree-id643 . -182) (undo-tree-id644 . -182) (undo-tree-id645 . -182) (undo-tree-id646 . -182) (undo-tree-id647 . -182) (undo-tree-id648 . -182) (undo-tree-id649 . -181) (undo-tree-id650 . -181) (undo-tree-id651 . -181) (undo-tree-id652 . -181) (undo-tree-id653 . -181) (undo-tree-id654 . -181) (undo-tree-id655 . -181) (undo-tree-id656 . -56) (undo-tree-id657 . -56) (undo-tree-id658 . -56) (undo-tree-id659 . -56) (undo-tree-id660 . -56) (undo-tree-id661 . -56) (undo-tree-id662 . -56) (undo-tree-id663 . -56) (undo-tree-id664 . -56) (undo-tree-id665 . -56) (undo-tree-id666 . -56) (undo-tree-id667 . -56) (undo-tree-id668 . -56) (undo-tree-id669 . -56) (undo-tree-id670 . -56) (undo-tree-id671 . -56) (undo-tree-id672 . -56) (undo-tree-id673 . -56) (undo-tree-id674 . -56) (undo-tree-id675 . -56) (undo-tree-id676 . -56) (undo-tree-id677 . -55) (undo-tree-id678 . -55) (undo-tree-id679 . -55) (undo-tree-id680 . -55) (undo-tree-id681 . -55) (undo-tree-id682 . -55) (undo-tree-id683 . -55) (undo-tree-id684 . -189) (t 26236 5572 854583 409000)) nil (26236 5623 499918 107000) 0 nil])
([nil nil ((#("    // We send the request with the transition we want to invoke.
    // auto future_result =
    //     current_client->async_send_request(request).future.share();


    // Let's wait until we have the answer from the node.
    // If the request times out, we return an unknown state.
    auto future_status = wait_for_result(future_result, time_out);

    if (future_status != std::future_status::ready) {
      RCLCPP_ERROR(get_logger(),
                   \"Server time out while getting current state for node: %s\", current_client->get_service_name());
      return false;
    }

    // We have an answer, let's print our success.
    if (future_result.get()->success) {
      RCLCPP_INFO(get_logger(), \"Transition %d successfully triggered.\",
                  static_cast<int>(transition));
      return true;
    } else {
      RCLCPP_WARN(get_logger(), \"Failed to trigger transition %u\",
                  static_cast<unsigned int>(transition));
      return false;
    }
" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 65 (c-in-sws t fontified t face font-lock-comment-face) 65 66 (fontified t face font-lock-comment-face c-in-sws t) 66 67 (fontified t c-in-sws t) 67 70 (fontified t c-in-sws t) 70 71 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 71 73 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 73 74 (fontified t c-in-sws t face font-lock-comment-face) 74 76 (fontified t c-in-sws t face font-lock-comment-face) 76 77 (fontified t c-in-sws t face font-lock-comment-face) 77 78 (fontified t c-in-sws t face font-lock-comment-face) 78 91 (fontified t c-in-sws t face font-lock-comment-face) 91 94 (fontified t c-in-sws t face font-lock-comment-face) 94 98 (fontified t c-in-sws t) 98 99 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 99 101 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 101 105 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 105 110 (fontified t c-in-sws t face font-lock-comment-face) 110 122 (fontified t c-in-sws t face font-lock-comment-face) 122 139 (fontified t c-in-sws t face font-lock-comment-face) 139 140 (fontified t c-in-sws t face font-lock-comment-face) 140 147 (fontified t c-in-sws t face font-lock-comment-face) 147 148 (fontified t c-in-sws t face font-lock-comment-face) 148 149 (fontified t c-in-sws t face font-lock-comment-face) 149 161 (fontified t c-in-sws t face font-lock-comment-face) 161 162 (fontified t c-in-sws t face font-lock-comment-face) 162 163 (fontified t c-in-sws t face font-lock-comment-face) 163 164 (fontified t c-in-sws t face font-lock-comment-face) 164 165 (fontified t face font-lock-comment-face c-in-sws t) 165 166 (fontified t c-in-sws t) 166 167 (fontified t c-in-sws t) 167 168 (c-in-sws t fontified t) 168 171 (c-in-sws t fontified t) 171 172 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 172 174 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 174 175 (c-in-sws t fontified t face font-lock-comment-face) 175 177 (c-in-sws t fontified t face font-lock-comment-face) 177 178 (c-in-sws t fontified t face font-lock-comment-face) 178 192 (c-in-sws t fontified t face font-lock-comment-face) 192 224 (c-in-sws t fontified t face font-lock-comment-face) 224 225 (fontified t face font-lock-comment-face c-in-sws t) 225 226 (fontified t c-is-sws t c-in-sws t) 226 229 (c-in-sws t fontified t c-is-sws t) 229 230 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 230 232 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 232 284 (c-in-sws t fontified t face font-lock-comment-face) 284 285 (c-in-sws t fontified t face font-lock-comment-face) 285 286 (c-in-sws t fontified t face font-lock-comment-face) 286 287 (c-in-sws t fontified t) 287 290 (c-in-sws t fontified t) 290 291 (c-is-sws t fontified t face font-lock-keyword-face) 291 293 (fontified t face font-lock-keyword-face) 293 294 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 310 (fontified t) 310 326 (fontified t) 326 327 (fontified t face (rainbow-delimiters-depth-4-face)) 327 350 (fontified t) 350 351 (fontified t face (rainbow-delimiters-depth-4-face)) 351 358 (fontified t) 358 360 (fontified t face font-lock-keyword-face) 360 361 (fontified t) 361 362 (fontified t face (rainbow-delimiters-depth-4-face)) 362 379 (fontified t) 379 382 (fontified t face font-lock-constant-face) 382 384 (fontified t) 384 397 (fontified t face font-lock-constant-face) 397 404 (fontified t) 404 405 (fontified t face (rainbow-delimiters-depth-4-face)) 405 406 (fontified t) 406 407 (fontified t face (rainbow-delimiters-depth-4-face)) 407 426 (fontified t) 426 427 (fontified t face (rainbow-delimiters-depth-5-face)) 427 437 (fontified t) 437 438 (fontified t face (rainbow-delimiters-depth-6-face)) 438 439 (fontified t face (rainbow-delimiters-depth-6-face)) 439 460 (fontified t) 460 518 (fontified t face font-lock-string-face) 518 552 (fontified t) 552 553 (fontified t face (rainbow-delimiters-depth-6-face)) 553 554 (fontified t face (rainbow-delimiters-depth-6-face)) 554 555 (fontified t face (rainbow-delimiters-depth-5-face)) 555 563 (fontified t) 563 569 (fontified t face font-lock-keyword-face) 569 570 (fontified t) 570 575 (fontified t face font-lock-constant-face) 575 581 (fontified t) 581 582 (fontified t face (rainbow-delimiters-depth-4-face)) 582 584 (fontified t) 584 588 (c-in-sws t c-is-sws t fontified t) 588 589 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 589 591 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 591 613 (c-in-sws t fontified t face font-lock-comment-face) 613 614 (c-in-sws t fontified t face font-lock-comment-face) 614 634 (c-in-sws t fontified t face font-lock-comment-face) 634 635 (c-in-sws t fontified t face font-lock-comment-face) 635 636 (c-is-sws t c-in-sws t fontified t) 636 639 (c-is-sws t c-in-sws t fontified t) 639 640 (c-is-sws t fontified t face font-lock-keyword-face) 640 641 (fontified t face font-lock-keyword-face) 641 642 (fontified t) 642 643 (fontified t face (rainbow-delimiters-depth-4-face)) 643 650 (fontified t) 650 652 (fontified t) 652 657 (fontified t) 657 658 (fontified t) 658 659 (fontified t) 659 660 (fontified t) 660 661 (fontified t face (rainbow-delimiters-depth-5-face)) 661 662 (fontified t face (rainbow-delimiters-depth-5-face)) 662 664 (fontified t) 664 665 (fontified t) 665 666 (fontified t) 666 667 (fontified t) 667 671 (fontified t) 671 672 (fontified t face (rainbow-delimiters-depth-4-face)) 672 673 (fontified t) 673 674 (fontified t face (rainbow-delimiters-depth-4-face)) 674 692 (fontified t) 692 693 (fontified t face (rainbow-delimiters-depth-5-face)) 693 703 (fontified t) 703 704 (fontified t face (rainbow-delimiters-depth-6-face)) 704 705 (fontified t face (rainbow-delimiters-depth-6-face)) 705 707 (fontified t) 707 725 (fontified t face font-lock-string-face) 725 746 (fontified t face font-lock-string-face) 746 748 (fontified t) 748 766 (fontified t) 766 777 (fontified t face font-lock-keyword-face) 777 778 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 778 781 (fontified t face font-lock-type-face) 781 782 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 782 783 (fontified t face (rainbow-delimiters-depth-6-face)) 783 786 (fontified t) 786 793 (fontified t) 793 794 (fontified t face (rainbow-delimiters-depth-6-face)) 794 795 (fontified t face (rainbow-delimiters-depth-5-face)) 795 803 (fontified t) 803 809 (fontified t face font-lock-keyword-face) 809 810 (fontified t) 810 814 (fontified t face font-lock-constant-face) 814 820 (fontified t) 820 821 (fontified t face (rainbow-delimiters-depth-4-face)) 821 822 (fontified t) 822 826 (fontified t face font-lock-keyword-face) 826 827 (fontified t) 827 828 (fontified t face (rainbow-delimiters-depth-4-face)) 828 846 (fontified t) 846 847 (fontified t face (rainbow-delimiters-depth-5-face)) 847 857 (fontified t) 857 858 (fontified t face (rainbow-delimiters-depth-6-face)) 858 859 (fontified t face (rainbow-delimiters-depth-6-face)) 859 861 (fontified t) 861 894 (fontified t face font-lock-string-face) 894 914 (fontified t) 914 925 (fontified t face font-lock-keyword-face) 925 926 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 926 934 (fontified t face font-lock-type-face) 934 935 (fontified t) 935 938 (fontified t face font-lock-type-face) 938 939 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 939 940 (fontified t face (rainbow-delimiters-depth-6-face)) 940 950 (fontified t) 950 951 (fontified t face (rainbow-delimiters-depth-6-face)) 951 952 (fontified t face (rainbow-delimiters-depth-5-face)) 952 960 (fontified t) 960 966 (fontified t face font-lock-keyword-face) 966 967 (fontified t) 967 972 (fontified t face font-lock-constant-face) 972 978 (fontified t) 978 979 (fontified t face (rainbow-delimiters-depth-4-face)) 979 980 (fontified t)) . 7106) (undo-tree-id706 . -979) (undo-tree-id707 . -979) (undo-tree-id708 . -979) (undo-tree-id709 . 813) (undo-tree-id710 . -167) (undo-tree-id711 . -167) (undo-tree-id712 . -167) (undo-tree-id713 . -167) (undo-tree-id714 . -167) (undo-tree-id715 . -167) (undo-tree-id716 . -167) (undo-tree-id717 . -979) (undo-tree-id718 . -979) 8085 (t 26236 5623 536322 436000)) nil (26236 5748 729866 322000) 0 nil])
([nil nil ((7169 . 7177) (#("time" 0 4 (fontified nil)) . 7169) (7169 . 7173) (#("time_out" 0 8 (fontified nil)) . -7169) (7169 . 7177) (#("time" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7169) (undo-tree-id699 . -4) (undo-tree-id700 . -4) 7173 (7168 . 7173) (7167 . 7168) (7160 . 7167) (#("re" 0 2 (fontified nil)) . 7160) (7160 . 7162) (#("request" 0 7 (fontified nil)) . -7160) (7160 . 7167) (#("re" 0 1 (fontified t) 1 2 (fontified t)) . -7160) (undo-tree-id701 . -2) (undo-tree-id702 . -2) 7162 (7160 . 7162) (7159 . 7161) (7153 . 7159) (7152 . 7153) (7151 . 7152) (7137 . 7151) (#("cu" 0 2 (fontified nil)) . 7137) (7137 . 7139) (#("current_client" 0 14 (fontified nil)) . -7137) (7137 . 7151) (#("cur" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7137) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) 7140 (7137 . 7140) (7116 . 7137) (7110 . 7116) (7109 . 7115) (7108 . 7110) (7104 . 7108) (7100 . 7104)) nil (26236 5748 729836 436000) 0 nil])
([nil nil ((7178 . 7179)) nil (26236 5748 729811 8000) 0 nil])
([nil nil ((7215 . 7216) (7213 . 7215) (7208 . 7213) (7207 . 7208) (7206 . 7207) (7193 . 7206) (#("fu" 0 2 (fontified nil)) . 7193) (7193 . 7195) (#("future_result" 0 13 (fontified nil)) . -7193) (7193 . 7206) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -7193) (undo-tree-id697 . -2) (undo-tree-id698 . -2) 7195 (7186 . 7195) (7179 . 7186)) nil (26236 5748 729807 136000) 0 nil])
([nil nil ((7269 . 7271) (586 . 607) (7235 . 7248) (#("ru" 0 2 (fontified nil)) . 7235) (7235 . 7237) (#("runtime_error" 0 13 (fontified nil)) . -7235) (7235 . 7248) (#("run" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7235) (undo-tree-id693 . -2) (undo-tree-id694 . -3) (undo-tree-id695 . -3) 7238 (7235 . 7238) (7233 . 7235) (7230 . 7233) (7229 . 7231) (7228 . 7229) (#("catch" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 7228) (undo-tree-id696 . -5) (7223 . 7228) 7228 (7222 . 7228)) nil (26236 5748 729793 617000) 0 nil])
([nil nil ((7281 . 7293) (7275 . 7281) (7274 . 7280) (7273 . 7275) (7272 . 7273)) nil (26236 5748 729776 154000) 0 nil])
([nil nil ((7293 . 7294)) nil (26236 5748 729772 220000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -7275) (undo-tree-id692 . -6) 7281 (7274 . 7281)) nil (26236 5748 729769 559000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7281 . 7282) (#("
" 0 1 (fontified nil)) . -7349) (7275 . 7350)) nil (26236 5748 729764 764000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7275)) nil (26236 5748 729761 752000) 0 nil])
([nil nil ((#("ERROR" 0 5 (fontified t)) . 7288) (undo-tree-id691 . -4)) nil (26236 5748 729758 770000) 0 nil])
([nil nil ((7288 . 7292) (#("i" 0 1 (fontified t)) . -7288) (undo-tree-id689 . -1) (#("n" 0 1 (fontified t)) . -7289) (undo-tree-id690 . -1) 7290 (7288 . 7290)) nil (26236 5748 729753 275000) 0 nil])
([nil nil ((6988 . 6989) (6987 . 6988) (6983 . 6987)) nil (26236 5748 729744 738000) 0 nil])
([nil nil ((7353 . 7354) (#(")" 0 1 (fontified nil)) . -7353) (7353 . 7354)) nil (26236 5748 729740 729000) 0 nil])
([nil nil ((7354 . 7355)) nil (26236 5748 729735 998000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 7352) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1)) nil (26236 5748 729726 139000) 0 nil])
([nil nil ((#("[ERROR]: Service %s is not available." 0 37 (fontified t face font-lock-string-face)) . 7314) (undo-tree-id725 . -36) (undo-tree-id726 . -36) (undo-tree-id727 . -36) (undo-tree-id728 . -36) (undo-tree-id729 . -36) 7350 (t 26236 5748 734525 113000)) nil (26236 5776 20282 486000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -7318) (undo-tree-id724 . -6) 7324 (7317 . 7324) 7314) nil (26236 5776 20266 664000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7318) (undo-tree-id723 . 1)) nil (26236 5776 20259 195000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-string-face)) . -7330) (undo-tree-id722 . -1) 7331 (7330 . 7331) (7315 . 7330) (7314 . 7316)) nil (26236 5776 20253 252000) 0 nil])
([nil nil ((7351 . 7355) (#("W" 0 1 (fontified t face font-lock-string-face)) . -7351) (undo-tree-id719 . -1) 7352 (7341 . 7352) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7341) (undo-tree-id720 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7342) (undo-tree-id721 . -1) 7343 (7332 . 7343) (7331 . 7332)) nil (26236 5776 20241 430000) 0 nil])
([nil nil ((7355 . 7366)) nil (26236 5776 20201 626000) 0 nil])
([nil nil ((6785 . 6794) (6783 . 6785) (t 26236 5776 61228 996000)) nil (26236 6137 915028 189000) 0 nil])
([nil nil ((#("->invoke(request, time_out)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-5-face))) . 7189) (undo-tree-id861 . -26) (undo-tree-id862 . -26) (undo-tree-id863 . -26) (undo-tree-id864 . -26) (undo-tree-id865 . -27) (undo-tree-id866 . -26) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (undo-tree-id871 . -2) (undo-tree-id872 . -2) (undo-tree-id873 . -2) (undo-tree-id874 . -2) (undo-tree-id875 . -2) (undo-tree-id876 . -2) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -2) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -3) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -3) (undo-tree-id928 . -3) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5) (undo-tree-id940 . -5) (undo-tree-id941 . -5) (undo-tree-id942 . -5) (undo-tree-id943 . -6) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -7) (undo-tree-id951 . -7) (undo-tree-id952 . -7) (undo-tree-id953 . -7) (undo-tree-id954 . -7) (undo-tree-id955 . -7) (undo-tree-id956 . -7) (undo-tree-id957 . -8) (undo-tree-id958 . -8) (undo-tree-id959 . -8) (undo-tree-id960 . -8) (undo-tree-id961 . -8) (undo-tree-id962 . -8) (undo-tree-id963 . -8) (undo-tree-id964 . -9) (undo-tree-id965 . -9) (undo-tree-id966 . -9) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -10) (undo-tree-id972 . -10) (undo-tree-id973 . -10) (undo-tree-id974 . -10) (undo-tree-id975 . -10) (undo-tree-id976 . -10) (undo-tree-id977 . -10) (undo-tree-id978 . -11) (undo-tree-id979 . -11) (undo-tree-id980 . -11) (undo-tree-id981 . -11) (undo-tree-id982 . -11) (undo-tree-id983 . -11) (undo-tree-id984 . -11) (undo-tree-id985 . -12) (undo-tree-id986 . -12) (undo-tree-id987 . -12) (undo-tree-id988 . -12) (undo-tree-id989 . -12) (undo-tree-id990 . -12) (undo-tree-id991 . -12) (undo-tree-id992 . -13) (undo-tree-id993 . -13) (undo-tree-id994 . -13) (undo-tree-id995 . -13) (undo-tree-id996 . -13) (undo-tree-id997 . -13) (undo-tree-id998 . -13) (undo-tree-id999 . -14) (undo-tree-id1000 . -14) (undo-tree-id1001 . -14) (undo-tree-id1002 . -14) (undo-tree-id1003 . -14) (undo-tree-id1004 . -14) (undo-tree-id1005 . -14) (undo-tree-id1006 . -15) (undo-tree-id1007 . -15) (undo-tree-id1008 . -15) (undo-tree-id1009 . -15) (undo-tree-id1010 . -15) (undo-tree-id1011 . -15) (undo-tree-id1012 . -15) (undo-tree-id1013 . -16) (undo-tree-id1014 . -16) (undo-tree-id1015 . -16) (undo-tree-id1016 . -16) (undo-tree-id1017 . -16) (undo-tree-id1018 . -16) (undo-tree-id1019 . -16) (undo-tree-id1020 . -17) (undo-tree-id1021 . -17) (undo-tree-id1022 . -17) (undo-tree-id1023 . -17) (undo-tree-id1024 . -17) (undo-tree-id1025 . -17) (undo-tree-id1026 . -17) (undo-tree-id1027 . -18) (undo-tree-id1028 . -18) (undo-tree-id1029 . -18) (undo-tree-id1030 . -18) (undo-tree-id1031 . -18) (undo-tree-id1032 . -18) (undo-tree-id1033 . -18) (undo-tree-id1034 . -19) (undo-tree-id1035 . -19) (undo-tree-id1036 . -19) (undo-tree-id1037 . -19) (undo-tree-id1038 . -19) (undo-tree-id1039 . -19) (undo-tree-id1040 . -19) (undo-tree-id1041 . -20) (undo-tree-id1042 . -20) (undo-tree-id1043 . -20) (undo-tree-id1044 . -20) (undo-tree-id1045 . -20) (undo-tree-id1046 . -20) (undo-tree-id1047 . -20) (undo-tree-id1048 . -21) (undo-tree-id1049 . -21) (undo-tree-id1050 . -21) (undo-tree-id1051 . -21) (undo-tree-id1052 . -21) (undo-tree-id1053 . -21) (undo-tree-id1054 . -21) (undo-tree-id1055 . -22) (undo-tree-id1056 . -22) (undo-tree-id1057 . -22) (undo-tree-id1058 . -22) (undo-tree-id1059 . -22) (undo-tree-id1060 . -22) (undo-tree-id1061 . -22) (undo-tree-id1062 . -23) (undo-tree-id1063 . -23) (undo-tree-id1064 . -23) (undo-tree-id1065 . -23) (undo-tree-id1066 . -23) (undo-tree-id1067 . -23) (undo-tree-id1068 . -23) (undo-tree-id1069 . -24) (undo-tree-id1070 . -24) (undo-tree-id1071 . -24) (undo-tree-id1072 . -24) (undo-tree-id1073 . -24) (undo-tree-id1074 . -24) (undo-tree-id1075 . -24) (undo-tree-id1076 . -25) (undo-tree-id1077 . -25) (undo-tree-id1078 . -25) (undo-tree-id1079 . -25) (undo-tree-id1080 . -25) (undo-tree-id1081 . -25) (undo-tree-id1082 . -25) (undo-tree-id1083 . -26) (undo-tree-id1084 . -26) (undo-tree-id1085 . -26) (undo-tree-id1086 . -26) (undo-tree-id1087 . -26) (undo-tree-id1088 . -26) (undo-tree-id1089 . -26) (undo-tree-id1090 . -26) (undo-tree-id1091 . -27) (undo-tree-id1092 . -27) 7215 (t 26236 6137 955460 55000)) nil (26236 6260 607791 484000) 0 nil])
([nil nil ((7209 . 7216) (#("re" 0 2 (fontified nil)) . 7209) (7209 . 7211) (#("request" 0 7 (fontified nil)) . -7209) (7209 . 7216) (#("re" 0 2 (fontified t)) . -7209) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) 7211 (7209 . 7211) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7209) (undo-tree-id853 . -1) (nil syntax-table nil 7212 . 7213) (nil syntax-table (1) 7209 . 7210) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 7210) (undo-tree-id854 . 1) (7210 . 7211) (nil syntax-table nil 7212 . 7213) (nil syntax-table (1) 7209 . 7210) (7209 . 7210) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -7209) (nil syntax-table nil 7212 . 7213) (nil syntax-table (1) 7209 . 7210) (7209 . 7210) (7208 . 7210) (7207 . 7208) (#("e" 0 1 (fontified t)) . -7207) (undo-tree-id855 . -1) 7208 (7203 . 7208) (#("e" 0 1 (fontified t)) . -7203) (undo-tree-id856 . -1) (#("y" 0 1 (fontified t)) . -7204) (undo-tree-id857 . -1) 7205 (7196 . 7205) (7193 . 7196) (#("u" 0 1 (fontified t)) . -7193) (undo-tree-id858 . -1) 7194 (7191 . 7194) (7190 . 7191) (#("?" 0 1 (fontified t)) . -7190) (undo-tree-id859 . -1) 7191 (7189 . 7191) (#("." 0 1 (fontified t)) . -7189) (undo-tree-id860 . -1) 7190 (7189 . 7190)) nil (26236 6260 606833 330000) 0 nil])
([nil nil ((7222 . 7224) (7217 . 7222) (t 26236 6260 647902 901000)) nil (26236 6277 631619 277000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -7226) (undo-tree-id1156 . -6) (undo-tree-id1157 . -6) (undo-tree-id1158 . -6) (undo-tree-id1159 . -6) (undo-tree-id1160 . -6) (undo-tree-id1161 . -6) (undo-tree-id1162 . -6) (undo-tree-id1163 . -6) (undo-tree-id1164 . -6) (undo-tree-id1165 . -6) (undo-tree-id1166 . -6) (undo-tree-id1167 . -6) (undo-tree-id1168 . -6) (undo-tree-id1169 . -6) (undo-tree-id1170 . -6) (undo-tree-id1171 . -6) (undo-tree-id1172 . -6) (undo-tree-id1173 . -6) (undo-tree-id1174 . -6) (undo-tree-id1175 . -6) (undo-tree-id1176 . -6) (undo-tree-id1177 . -6) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) (undo-tree-id1182 . -6) (undo-tree-id1183 . -6) (undo-tree-id1184 . -6) (undo-tree-id1185 . -6) (undo-tree-id1186 . -6) (undo-tree-id1187 . -6) (undo-tree-id1188 . -6) (undo-tree-id1189 . -6) (undo-tree-id1190 . -6) (undo-tree-id1191 . -6) (undo-tree-id1192 . -6) (undo-tree-id1193 . -6) 7232 (7225 . 7232)) nil (26236 6277 631611 591000) 0 nil])
([nil nil ((7228 . 7234) (#("      " 0 6 (fontified nil)) . 7227) (undo-tree-id1093 . -6) (undo-tree-id1094 . -6) (undo-tree-id1095 . -6) (undo-tree-id1096 . -6) (undo-tree-id1097 . -6) (undo-tree-id1098 . -6) (undo-tree-id1099 . -6) (undo-tree-id1100 . -6) (undo-tree-id1101 . -6) (undo-tree-id1102 . -6) (undo-tree-id1103 . -6) (undo-tree-id1104 . -6) (undo-tree-id1105 . -6) (undo-tree-id1106 . -6) (undo-tree-id1107 . -6) (undo-tree-id1108 . -6) (undo-tree-id1109 . -6) (undo-tree-id1110 . -6) (undo-tree-id1111 . -6) (undo-tree-id1112 . -6) (undo-tree-id1113 . -6) (undo-tree-id1114 . -6) (undo-tree-id1115 . -6) (undo-tree-id1116 . -6) (undo-tree-id1117 . -6) (undo-tree-id1118 . -6) (undo-tree-id1119 . -6) (undo-tree-id1120 . -6) (undo-tree-id1121 . -6) (7227 . 7234) (#("      " 0 6 (fontified nil)) . 7226) (undo-tree-id1122 . -6) (undo-tree-id1123 . -6) (undo-tree-id1124 . -6) (undo-tree-id1125 . -6) (undo-tree-id1126 . -6) (undo-tree-id1127 . -6) (undo-tree-id1128 . -6) (undo-tree-id1129 . -6) (undo-tree-id1130 . -6) (undo-tree-id1131 . -6) (undo-tree-id1132 . -6) (undo-tree-id1133 . -6) (undo-tree-id1134 . -6) (undo-tree-id1135 . -6) (undo-tree-id1136 . -6) (undo-tree-id1137 . -6) (undo-tree-id1138 . -6) (undo-tree-id1139 . -6) (undo-tree-id1140 . -6) (undo-tree-id1141 . -6) (undo-tree-id1142 . -6) (undo-tree-id1143 . -6) (undo-tree-id1144 . -6) (undo-tree-id1145 . -6) (undo-tree-id1146 . -6) (undo-tree-id1147 . -6) (undo-tree-id1148 . -6) (undo-tree-id1149 . -6) (undo-tree-id1150 . -6) (undo-tree-id1151 . -6) (undo-tree-id1152 . -6) (undo-tree-id1153 . -6) (undo-tree-id1154 . -6) (undo-tree-id1155 . -6) (7232 . 7233) (7226 . 7232)) nil (26236 6277 631534 267000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7217) (t 26236 6277 672292 168000)) nil (26236 6298 731020 34000) 0 nil])
([nil nil ((#("wait" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 7217) (undo-tree-id1198 . -3)) nil (26236 6298 731016 947000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 7217)) nil (26236 6298 731012 75000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7217)) nil (26236 6298 731009 115000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 7165) (undo-tree-id1197 . -1)) nil (26236 6298 731006 275000) 0 nil])
([nil nil ((#("result " 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t)) . 7165) (undo-tree-id1194 . -6) (undo-tree-id1195 . -6) (undo-tree-id1196 . -7)) nil (26236 6298 730999 86000) 0 nil])
([nil nil ((7165 . 7172)) nil (26236 6298 730969 724000) 0 nil])
([nil nil ((7236 . 7237) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -7236) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -7237) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -7238) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -7239) (undo-tree-id1337 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7240) (undo-tree-id1338 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7241) (undo-tree-id1339 . -1) (#(" " 0 1 (fontified t)) . -7242) (undo-tree-id1340 . -1) 7243 (7242 . 7243) (7225 . 7242) (7219 . 7225) (#("      " 0 6 (fontified nil)) . 7218) (undo-tree-id1341 . -6) (7224 . 7225) (7218 . 7224) (t 26236 6298 744712 248000)) nil (26236 6308 752713 498000) 0 nil])
([nil nil ((#("      return future_result->success;
" 0 6 (fontified t) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 7246) (undo-tree-id1199 . -36) (undo-tree-id1200 . -17) (undo-tree-id1201 . -36) (undo-tree-id1202 . -17) (undo-tree-id1203 . -17) (undo-tree-id1204 . -17) (undo-tree-id1205 . -17) (undo-tree-id1206 . -17) (undo-tree-id1207 . -17) (undo-tree-id1208 . -17) (undo-tree-id1209 . -17) (undo-tree-id1210 . -17) (undo-tree-id1211 . -17) (undo-tree-id1212 . -17) (undo-tree-id1213 . -17) (undo-tree-id1214 . -17) (undo-tree-id1215 . -17) (undo-tree-id1216 . -17) (undo-tree-id1217 . -17) (undo-tree-id1218 . -17) (undo-tree-id1219 . -37) 7263) nil (26236 6308 752495 92000) 0 nil])
([nil nil ((7251 . 7252) (7239 . 7251) (#("fu" 0 2 (fontified nil)) . 7239) (7239 . 7241) (#("future_thing" 0 12 (fontified nil)) . -7239) (7239 . 7251) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -7239) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) 7241 (7237 . 7241) (t 26236 6308 768889 575000)) nil (26236 6342 560725 953000) 0 nil])
([nil nil ((#("auto " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 4 5 (fontified t)) . 7154) (undo-tree-id1351 . -4)) nil (26236 6342 560716 930000) 0 nil])
([nil nil ((7153 . 7154)) nil (26236 6342 560713 43000) 0 nil])
([nil nil ((7160 . 7172) (7159 . 7160) (7148 . 7154) (#("    " 0 4 (fontified nil)) . 7148) (7156 . 7157) (7148 . 7152) (#("      " 0 6 (fontified nil)) . 7148) (7157 . 7158) (7154 . 7157) (7148 . 7154) (#("       " 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 7148) (undo-tree-id1347 . -7) (undo-tree-id1348 . -7) (undo-tree-id1349 . 1) (undo-tree-id1350 . -5) 7153) nil (26236 6342 560708 15000) 0 nil])
([nil nil ((#("SharedFuture " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (fontified t)) . 7159) (undo-tree-id1344 . -12) (undo-tree-id1345 . -1) (undo-tree-id1346 . -11)) nil (26236 6342 560695 694000) 0 nil])
([nil nil ((7192 . 7195) (#("typename Res" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 12 (fontified nil face font-lock-type-face)) . 7192) (7191 . 7192) (60 . 78) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7191 7195 nil nil nil t nil)) nil 4 nil #s(yas--field 1 7191 7195 nil nil nil t nil) nil nil)) (7159 . 7186) (#("shared_future<${1:typename Res}>" 0 32 (fontified nil)) . 7159) (7159 . 7191) (#("sha" 0 3 (fontified nil)) . 7159) (7159 . 7162) (#("shared_future<typename Res>" 0 13 (fontified nil) 13 14 (category c-<-as-paren-syntax fontified nil) 14 26 (fontified nil) 26 27 (category c->-as-paren-syntax fontified nil)) . -7159) (7159 . 7186) (#("sha" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7159) (undo-tree-id1342 . -3) (undo-tree-id1343 . -3) 7162 (7161 . 7162) (7159 . 7161)) nil (26236 6342 560683 361000) 0 nil])
([nil nil ((7196 . 7197) (apply yas--snippet-revive 7177 7196 #s(yas--snippet nil (#s(yas--field 1 7191 7195 nil nil nil t nil)) nil 4 nil #s(yas--field 1 7191 7195 nil nil nil t nil) nil nil))) nil (26236 6342 560650 401000) 0 nil])
([nil nil ((#("      auto future = future_thing.

" 0 6 (fontified t) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 10 11 (fontified t) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t)) . 7257) (undo-tree-id1354 . -34) (undo-tree-id1355 . -34) (undo-tree-id1356 . -34) (undo-tree-id1357 . -30) (undo-tree-id1358 . -30) (undo-tree-id1359 . -30) (undo-tree-id1360 . -30) (undo-tree-id1361 . -30) (undo-tree-id1362 . -30) (undo-tree-id1363 . -30) (undo-tree-id1364 . -34) (undo-tree-id1365 . -34) (undo-tree-id1366 . -34) (undo-tree-id1367 . -34) (undo-tree-id1368 . -34) (undo-tree-id1369 . -34) (undo-tree-id1370 . -34) (undo-tree-id1371 . -35) (undo-tree-id1372 . -34) (undo-tree-id1373 . -34) (undo-tree-id1374 . -34) (undo-tree-id1375 . -34) (undo-tree-id1376 . -34) (undo-tree-id1377 . -34) (undo-tree-id1378 . -34) (undo-tree-id1379 . -34) (undo-tree-id1380 . -34) (undo-tree-id1381 . -34) (undo-tree-id1382 . -35) (t 26236 6342 577389 275000)) nil (26236 6346 833564 548000) 0 nil])
([nil nil ((7258 . 7264) (#("      " 0 6 (fontified nil)) . 7257) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) (undo-tree-id1392 . -6) (undo-tree-id1393 . -6) (undo-tree-id1394 . -6) (undo-tree-id1395 . -6) (undo-tree-id1396 . -6) (undo-tree-id1397 . -6) (undo-tree-id1398 . -6) (undo-tree-id1399 . -6) (undo-tree-id1400 . -6) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (undo-tree-id1403 . -6) (undo-tree-id1404 . -6) (undo-tree-id1405 . -6) (undo-tree-id1406 . -6) (undo-tree-id1407 . -6) (undo-tree-id1408 . -6) (undo-tree-id1409 . -6) (undo-tree-id1410 . -6) (undo-tree-id1411 . -6) (undo-tree-id1412 . -6) (undo-tree-id1413 . -6) (7263 . 7264) (7257 . 7263) (#("      " 0 6 (fontified t)) . 7257) (undo-tree-id1414 . 6) (t 26236 6346 877442 627000)) nil (26236 6353 62959 924000) 0 nil])
([nil nil ((7274 . 7275) (7271 . 7274) (7268 . 7271) (#("r" 0 1 (fontified t)) . -7268) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) 7269 (7268 . 7269) (7264 . 7268) (7258 . 7264) (#("     " 0 5 (fontified nil)) . -7258) (undo-tree-id1385 . -5) (#(" " 0 1 (fontified t)) . 7263)) nil (26236 6353 62901 201000) 0 nil])
([nil nil ((7275 . 7276)) nil (26236 6353 62868 543000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7245 . 7246) (nil fontified nil 7228 . 7246) (7228 . 7246) (#("async_send_rquest" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 7228) (undo-tree-id1415 . -17) (undo-tree-id1416 . -16) (undo-tree-id1417 . -16) (undo-tree-id1418 . -16) (undo-tree-id1419 . -16) 7245 (t 26236 6353 77515 714000)) nil (26236 6384 239097 590000) 0 nil])
([nil nil ((#("std::shared_future<void>" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 18 (fontified t face font-lock-type-face) 18 19 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-5-face)) 19 20 (fontified t face font-lock-type-face) 20 21 (fontified t face font-lock-type-face) 21 22 (fontified t face font-lock-type-face) 22 23 (fontified t face font-lock-type-face) 23 24 (fontified t category c->-as-paren-syntax c-type c-decl-id-start face (rainbow-delimiters-depth-5-face))) . 7172) (undo-tree-id1423 . -23) (undo-tree-id1424 . -23) (undo-tree-id1425 . -23) (undo-tree-id1426 . -19) (undo-tree-id1427 . -23) (undo-tree-id1428 . -23) 7195 (t 26236 6384 281818 524000)) nil (26236 6501 183710 634000) 0 nil])
([nil nil ((7172 . 7176)) nil (26236 6501 183696 854000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 7183) (undo-tree-id1422 . -1)) nil (26236 6501 183693 879000) 0 nil])
([nil nil ((#("thing " 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t)) . 7183) (undo-tree-id1420 . -5) (undo-tree-id1421 . -6)) nil (26236 6501 183687 367000) 0 nil])
([nil nil ((7228 . 7235)) nil (26236 6501 183658 424000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -7238) (undo-tree-id1456 . -6) (undo-tree-id1457 . -6) (undo-tree-id1458 . -6) (undo-tree-id1459 . -6) (undo-tree-id1460 . -6) (undo-tree-id1461 . -6) (undo-tree-id1462 . -6) (undo-tree-id1463 . -6) (undo-tree-id1464 . -6) (undo-tree-id1465 . -6) (undo-tree-id1466 . -6) (undo-tree-id1467 . -6) (undo-tree-id1468 . -6) (undo-tree-id1469 . -6) (undo-tree-id1470 . -6) (undo-tree-id1471 . -6) (undo-tree-id1472 . -6) (undo-tree-id1473 . -6) (undo-tree-id1474 . -6) (undo-tree-id1475 . -6) (undo-tree-id1476 . -6) (undo-tree-id1477 . -6) (undo-tree-id1478 . -6) (undo-tree-id1479 . -6) (undo-tree-id1480 . -6) (undo-tree-id1481 . -6) (undo-tree-id1482 . -6) (undo-tree-id1483 . -6) (undo-tree-id1484 . -6) (undo-tree-id1485 . -6) (undo-tree-id1486 . -6) (undo-tree-id1487 . -6) (undo-tree-id1488 . -6) (undo-tree-id1489 . -6) (undo-tree-id1490 . -6) (undo-tree-id1491 . -6) (undo-tree-id1492 . -6) (undo-tree-id1493 . -6) 7244 (7238 . 7244) (#("      " 0 6 (fontified nil)) . 7237) (undo-tree-id1494 . -6) (undo-tree-id1495 . -6) (undo-tree-id1496 . -6) (undo-tree-id1497 . -6) (undo-tree-id1498 . -6) (undo-tree-id1499 . -6) (undo-tree-id1500 . -6) (undo-tree-id1501 . -6) (undo-tree-id1502 . -6) (undo-tree-id1503 . -6) (undo-tree-id1504 . -6) (undo-tree-id1505 . -6) (undo-tree-id1506 . -6) (undo-tree-id1507 . -6) (undo-tree-id1508 . -6) (undo-tree-id1509 . -6) (undo-tree-id1510 . -6) (undo-tree-id1511 . -6) (undo-tree-id1512 . -6) (undo-tree-id1513 . -6) (undo-tree-id1514 . -6) (undo-tree-id1515 . -6) (undo-tree-id1516 . -6) (undo-tree-id1517 . -6) (undo-tree-id1518 . -6) (undo-tree-id1519 . -6) (undo-tree-id1520 . -6) (undo-tree-id1521 . -6) (undo-tree-id1522 . -6) (undo-tree-id1523 . -6) (undo-tree-id1524 . -6) (undo-tree-id1525 . -6) (undo-tree-id1526 . -6) (undo-tree-id1527 . -6) (undo-tree-id1528 . -6) (undo-tree-id1529 . -6) (undo-tree-id1530 . -6) (undo-tree-id1531 . -6) (7236 . 7244) (t 26236 6501 226158 628000)) nil (26236 6714 633479 133000) 0 nil])
([nil nil ((7238 . 7244)) nil (26236 6714 633336 353000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -7244) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("t" 0 1 (fontified t)) . -7245) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (#("d" 0 1 (fontified t)) . -7246) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#(":" 0 1 (fontified t c-type c-decl-end)) . -7247) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (#(":" 0 1 (fontified t)) . -7248) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (#("t" 0 1 (fontified nil)) . -7249) (undo-tree-id1444 . -1) (#("h" 0 1 (fontified nil)) . -7250) (undo-tree-id1445 . -1) (#("r" 0 1 (fontified nil)) . -7251) (undo-tree-id1446 . -1) (#("e" 0 1 (fontified nil)) . -7252) (undo-tree-id1447 . -1) (#("a" 0 1 (fontified t)) . -7253) (undo-tree-id1448 . -1) (#("d" 0 1 (fontified t)) . -7254) (undo-tree-id1449 . -1) 7255 (7249 . 7255) (#("thr" 0 3 (fontified nil)) . 7249) (7249 . 7252) (#("thread" 0 6 (fontified nil)) . -7249) (7249 . 7255) (#("thre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7249) (undo-tree-id1450 . -3) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) 7253 (7249 . 7253) (7238 . 7244) (#("    " 0 4 (fontified nil)) . 7238) (7246 . 7247) (7238 . 7242) (#("      " 0 6 (fontified nil)) . 7238) (7247 . 7248) (7245 . 7247) (7244 . 7245) (7238 . 7244) (#("     " 0 5 (fontified nil)) . -7238) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (#(" " 0 1 (fontified t)) . 7243) (undo-tree-id1455 . -1)) nil (26236 6714 633322 416000) 0 nil])
([nil nil ((7183 . 7184)) nil (26236 6714 633243 551000) 0 nil])
([nil nil ((7239 . 7245) (#("     " 0 5 (fontified nil)) . -7239) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) (undo-tree-id1544 . -5) (undo-tree-id1545 . -5) (undo-tree-id1546 . -5) (undo-tree-id1547 . -5) (undo-tree-id1548 . -5) (undo-tree-id1549 . -5) (undo-tree-id1550 . -5) (undo-tree-id1551 . -5) (undo-tree-id1552 . -5) (undo-tree-id1553 . -5) (undo-tree-id1554 . -5) (undo-tree-id1555 . -5) (undo-tree-id1556 . -5) (undo-tree-id1557 . -5) (undo-tree-id1558 . -5) (undo-tree-id1559 . -5) (undo-tree-id1560 . -5) (undo-tree-id1561 . -5) (undo-tree-id1562 . -5) (undo-tree-id1563 . -5) (undo-tree-id1564 . -5) (undo-tree-id1565 . -5) (undo-tree-id1566 . -5) (undo-tree-id1567 . -5) (#(" " 0 1 (fontified t)) . 7244) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (t 26236 6714 676705 316000)) nil (26236 6736 17248 393000) 0 nil])
([nil nil ((7276 . 7278) (7272 . 7276) (#("-" 0 1 (fontified t)) . -7272) (undo-tree-id1532 . -1) (#(">" 0 1 (fontified t)) . -7273) (undo-tree-id1533 . -1) 7274 (7273 . 7274) (7272 . 7273) (7266 . 7272) (#("fu" 0 2 (fontified nil)) . 7266) (7266 . 7268) (#("future" 0 6 (fontified nil)) . -7266) (7266 . 7272) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -7266) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) 7268 (7266 . 7268) (7245 . 7266) (7239 . 7245) (#("     " 0 5 (fontified nil)) . -7239) (undo-tree-id1536 . -5) (#(" " 0 1 (fontified t)) . 7244)) nil (26236 6736 17170 379000) 0 nil])
([nil nil ((7278 . 7279)) nil (26236 6736 17130 600000) 0 nil])
([nil nil ((#("true" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face)) . 7295) (undo-tree-id1582 . -3) (undo-tree-id1583 . 1) (undo-tree-id1584 . -4) (undo-tree-id1585 . -4) (undo-tree-id1586 . -3) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2) (undo-tree-id1634 . -2) (undo-tree-id1635 . -2) (undo-tree-id1636 . -2) (undo-tree-id1637 . -2) (undo-tree-id1638 . -2) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -2) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -4) (t 26236 6736 60467 553000)) nil (26236 7315 527846 506000) 0 nil])
([nil nil ((7314 . 7316) (7310 . 7314) (7309 . 7310) (7308 . 7309) (7295 . 7308) (#("future" 0 6 (fontified nil)) . 7295) (7295 . 7301) (#("future_result" 0 13 (fontified nil)) . -7295) (7295 . 7308) (#("future" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -7295) (undo-tree-id1579 . -6) (undo-tree-id1580 . -6) (undo-tree-id1581 . -6) 7301 (7295 . 7301)) nil (26236 7315 527689 670000) 0 nil])
([nil nil ((#("sucess" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 7310) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -5) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -5) (undo-tree-id1678 . -5) (undo-tree-id1679 . -5) (undo-tree-id1680 . -5) (undo-tree-id1681 . -5) (undo-tree-id1682 . -5) (undo-tree-id1683 . -5) (undo-tree-id1684 . -5) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) (undo-tree-id1705 . -5) (undo-tree-id1706 . -5) (undo-tree-id1707 . -5) (undo-tree-id1708 . -5) (undo-tree-id1709 . -5) (undo-tree-id1710 . -5) (undo-tree-id1711 . -5) (undo-tree-id1712 . -5) (undo-tree-id1713 . -5) (undo-tree-id1714 . -5) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5) (undo-tree-id1717 . -5) (undo-tree-id1718 . -5) (undo-tree-id1719 . -5) (undo-tree-id1720 . -5) (undo-tree-id1721 . -5) (undo-tree-id1722 . -5) (undo-tree-id1723 . -5) (undo-tree-id1724 . -5) (undo-tree-id1725 . -5) (undo-tree-id1726 . -5) (undo-tree-id1727 . -5) (undo-tree-id1728 . -5) (undo-tree-id1729 . -5) (undo-tree-id1730 . -5) (undo-tree-id1731 . -5) (undo-tree-id1732 . -5) (undo-tree-id1733 . -5) (undo-tree-id1734 . -5) (undo-tree-id1735 . -5) (undo-tree-id1736 . -5) (undo-tree-id1737 . -5) (undo-tree-id1738 . -5) (undo-tree-id1739 . -5) (undo-tree-id1740 . -5) (undo-tree-id1741 . -5) (undo-tree-id1742 . -5) (undo-tree-id1743 . -5) (undo-tree-id1744 . -5) (undo-tree-id1745 . -5) (undo-tree-id1746 . -5) (undo-tree-id1747 . -5) (undo-tree-id1748 . -5) (undo-tree-id1749 . -5) (undo-tree-id1750 . -5) (undo-tree-id1751 . -5) (undo-tree-id1752 . -5) (undo-tree-id1753 . -5) (undo-tree-id1754 . -5) (undo-tree-id1755 . -5) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (undo-tree-id1758 . -5) (undo-tree-id1759 . -5) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) (undo-tree-id1767 . -5) (undo-tree-id1768 . -5) (undo-tree-id1769 . -5) (undo-tree-id1770 . -5) (undo-tree-id1771 . -5) (undo-tree-id1772 . -5) (undo-tree-id1773 . -5) (undo-tree-id1774 . -5) (undo-tree-id1775 . -5) (undo-tree-id1776 . -5) (undo-tree-id1777 . -5) (undo-tree-id1778 . -5) (undo-tree-id1779 . -5) (undo-tree-id1780 . -5) (undo-tree-id1781 . -5) (undo-tree-id1782 . -5) (undo-tree-id1783 . -5) (undo-tree-id1784 . -5) (undo-tree-id1785 . -5) (undo-tree-id1786 . -5) (undo-tree-id1787 . -5) (undo-tree-id1788 . -5) (undo-tree-id1789 . -6) (t 26236 7315 546555 754000)) nil (26236 7328 791796 640000) 0 nil])
([nil nil ((7310 . 7317)) nil (26236 7328 791571 701000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t c-is-sws t c-in-sws t)) . -6495) (undo-tree-id1916 . -2) 6497 (6495 . 6497) (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 6494) (undo-tree-id1917 . -2) (6494 . 6497) (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-is-sws t c-in-sws t)) . 6493) (undo-tree-id1918 . -2) (6492 . 6496) (t 26236 7328 810666 495000)) nil (26236 8632 270462 941000) 0 nil])
([nil nil ((6518 . 6520) (6501 . 6518) (6498 . 6501) (6497 . 6498) (6496 . 6497) (#("v" 0 1 (fontified t c-is-sws t)) . -6496) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("o" 0 1 (fontified t)) . -6497) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) 6498 (6496 . 6498) (6494 . 6496)) nil (26236 8632 270450 992000) 0 nil])
([nil nil ((6523 . 6527) (6522 . 6526) (6521 . 6523) (6520 . 6521)) nil (26236 8632 270362 993000) 0 nil])
([nil nil ((6531 . 6532)) nil (26236 8632 270360 420000) 0 nil])
([nil nil ((#("			 " 0 4 (fontified t)) . -6520) (undo-tree-id1908 . -4) (undo-tree-id1909 . -4) 6524 (6520 . 6524) (6519 . 6521)) nil (26236 8632 270357 754000) 0 nil])
([nil nil ((6520 . 6524)) nil (26236 8632 270351 527000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6524) (undo-tree-id1907 . -1) 6525) nil (26236 8632 270348 397000) 0 nil])
([nil nil ((#("			 " 0 4 (fontified t)) . 6520) (undo-tree-id1906 . -3)) nil (26236 8632 270343 984000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6519) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) 6520) nil (26236 8632 270338 993000) 0 nil])
([nil nil ((apply yas--snippet-revive 6527 6567 #s(yas--snippet nil (#s(yas--field 1 6534 6566 nil nil nil t nil)) nil 5 nil #s(yas--field 1 6534 6566 nil nil nil t nil) nil nil)) (#("_" 0 1 (fontified t)) . -6566) (undo-tree-id1866 . -1) (#("R" 0 1 (fontified t)) . -6567) (undo-tree-id1867 . -1) (#("e" 0 1 (fontified t)) . -6568) (undo-tree-id1868 . -1) (#("s" 0 1 (fontified t)) . -6569) (undo-tree-id1869 . -1) (#("p" 0 1 (fontified t)) . -6570) (undo-tree-id1870 . -1) (#("o" 0 1 (fontified t)) . -6571) (undo-tree-id1871 . -1) (#("n" 0 1 (fontified t)) . -6572) (undo-tree-id1872 . -1) (#("s" 0 1 (fontified t)) . -6573) (undo-tree-id1873 . -1) (#("e" 0 1 (fontified t)) . -6574) (undo-tree-id1874 . -1) 6575 (6555 . 6575) (#("ChangeState_Response" 0 20 (fontified nil)) . -6555) (6555 . 6575) (#("Cha" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6555) (undo-tree-id1875 . -3) (undo-tree-id1876 . -3) 6558 (6555 . 6558) (6553 . 6555) (6550 . 6553) (#("s" 0 1 (fontified nil)) . 6550) (6550 . 6551) (#("srv" 0 3 (fontified nil)) . -6550) (6550 . 6553) (#("sr" 0 1 (fontified t) 1 2 (fontified t)) . -6550) (undo-tree-id1877 . -1) (undo-tree-id1878 . -2) (undo-tree-id1879 . -2) 6552 (6550 . 6552) (6548 . 6550) (nil fontified nil 6534 . 6548) (nil face (rainbow-delimiters-depth-4-face) 6534 . 6548) (6534 . 6548) (#("li" 0 2 (fontified nil)) . 6534) (nil fontified nil 6534 . 6536) (nil face (rainbow-delimiters-depth-4-face) 6534 . 6536) (6534 . 6536) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6534) (nil fontified nil 6534 . 6548) (nil face (rainbow-delimiters-depth-4-face) 6534 . 6548) (6534 . 6548) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -6534) (undo-tree-id1880 . -2) (undo-tree-id1881 . -2) 6536 (6535 . 6536) (#("o" 0 1 (fontified t)) . -6535) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) 6536 (6534 . 6536) (#("s" 0 1 (fontified t)) . -6534) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("t" 0 1 (fontified t)) . -6535) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (#("d" 0 1 (fontified t)) . -6536) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) 6537 (#("_" 0 1 (fontified t)) . -6537) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (#("s" 0 1 (fontified t)) . -6538) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (#("r" 0 1 (fontified t)) . -6539) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) 6540 (6538 . 6540) (6537 . 6538) (6535 . 6537) (#("typename ServiceT" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 17 (fontified nil face font-lock-type-face)) . 6535) (6534 . 6535) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6534 6566 nil nil nil t nil)) nil 5 nil #s(yas--field 1 6534 6566 nil nil nil t nil) nil nil)) (6527 . 6552) (#("Client<${1:typename ServiceT}>" 0 30 (fontified nil)) . 6527) (6527 . 6557) (#("C" 0 1 (fontified nil)) . 6527) (6527 . 6528) (#("Client<typename ServiceT>" 0 6 (fontified nil) 6 7 (category c-<-as-paren-syntax fontified nil) 7 24 (fontified nil) 24 25 (category c->-as-paren-syntax fontified nil)) . -6527) (6527 . 6552) (#("Clie" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -6527) (undo-tree-id1899 . -3) (undo-tree-id1900 . -4) (undo-tree-id1901 . -4) 6531 (6528 . 6531) (6527 . 6528) (6525 . 6527) (6519 . 6525)) nil (26236 8632 270312 177000) 0 nil])
([nil nil ((6569 . 6588) (6567 . 6569) (#("\"" 0 1 (fontified t face font-lock-warning-face)) . -6567) (undo-tree-id1864 . -1) (nil syntax-table nil 6571 . 6572) (nil syntax-table (1) 6567 . 6568) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -6568) (undo-tree-id1865 . -1) 6569 (#("\"" 0 1 (fontified nil)) . -6568) (nil syntax-table nil 6573 . 6574) (nil syntax-table (1) 6569 . 6570) (6568 . 6569) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6568) (nil syntax-table nil 6573 . 6574) (nil syntax-table (1) 6569 . 6570) (6568 . 6569) (6568 . 6569) (nil syntax-table nil 6571 . 6572) (nil syntax-table (1) 6567 . 6568) (nil fontified nil 6567 . 6568) (nil face (rainbow-delimiters-depth-4-face) 6567 . 6568) (6567 . 6568) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6567) (nil syntax-table nil 6571 . 6572) (nil syntax-table (1) 6567 . 6568) (6567 . 6568)) nil (26236 8632 270215 624000) 0 nil])
([nil nil ((6653 . 6657) (6652 . 6654) (6640 . 6652) (#("m" 0 1 (fontified nil)) . 6640) (6640 . 6641) (#("milliseconds" 0 12 (fontified nil)) . -6640) (6640 . 6652) (#("mill" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -6640) (undo-tree-id1850 . -3) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) 6644 (6640 . 6644) (6639 . 6640) (6638 . 6639) (6632 . 6638) (#("ch" 0 2 (fontified nil)) . 6632) (6632 . 6634) (#("chrono" 0 6 (fontified nil)) . -6632) (6632 . 6638) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -6632) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) 6634 (6632 . 6634) (#("C" 0 1 (fontified t)) . -6632) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (#("h" 0 1 (fontified t)) . -6633) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) 6634 (6632 . 6634) (6630 . 6632) (6627 . 6630) (6626 . 6628) (6624 . 6626) (#("o" 0 1 (fontified t)) . -6624) (undo-tree-id1860 . -1) (#("i" 0 1 (fontified t)) . -6625) (undo-tree-id1861 . -1) (#("r" 0 1 (fontified t)) . -6626) (undo-tree-id1862 . -1) 6627 (6623 . 6627) (6618 . 6623) (6597 . 6618) (6593 . 6597) (#("    " 0 4 (fontified nil)) . 6592) (undo-tree-id1863 . -4) (6596 . 6597) (6591 . 6596)) nil (26236 8632 270193 415000) 0 nil])
([nil nil ((6659 . 6660) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6659) (undo-tree-id1848 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6660) (6659 . 6661) (#(" " 0 1 (fontified t)) . -6659) (undo-tree-id1849 . -1) 6660 (6659 . 6660)) nil (26236 8632 270148 655000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6662) (undo-tree-id1846 . -4) 6666 (6662 . 6666) (#("    " 0 4 (fontified nil)) . 6661) (undo-tree-id1847 . -4) (6660 . 6666)) nil (26236 8632 270140 149000) 0 nil])
([nil nil ((6699 . 6704) (#("ready" 0 5 (fontified nil)) . -6699) (6699 . 6704) (#("read" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -6699) (undo-tree-id1834 . -4) (undo-tree-id1835 . -4) 6703 (6699 . 6703) (6697 . 6699) (6684 . 6697) (#("f" 0 1 (fontified nil)) . 6684) (6684 . 6685) (#("future_status" 0 13 (fontified nil)) . -6684) (6684 . 6697) (#("future" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -6684) (undo-tree-id1836 . -2) (undo-tree-id1837 . -6) (undo-tree-id1838 . -6) 6690 (6688 . 6690) (6686 . 6688) (#("f" 0 1 (fontified t)) . -6686) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (#("u" 0 1 (fontified t)) . -6687) (undo-tree-id1842 . -1) 6688 (6686 . 6688) (#("g" 0 1 (fontified t)) . -6686) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 6687 (6684 . 6687) (6682 . 6684) (6670 . 6682) (6669 . 6671) (6666 . 6669) (6662 . 6666)) nil (26236 8632 270127 267000) 0 nil])
([nil nil ((6706 . 6708) (6705 . 6706)) nil (26236 8632 270095 42000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6708) (undo-tree-id1833 . -6) 6714 (6708 . 6714) (6707 . 6713)) nil (26236 8632 270091 945000) 0 nil])
([nil nil ((6759 . 6762) (#("S" 0 1 (fontified t face font-lock-string-face)) . -6759) (undo-tree-id1819 . -1) 6760 (6755 . 6760) (6747 . 6762) (6747 . 6748) (nil syntax-table nil 6748 . 6749) (nil syntax-table (1) 6746 . 6747) (6746 . 6747) (#("\"" 0 1 (fontified nil)) . -6746) (nil syntax-table nil 6748 . 6749) (nil syntax-table (1) 6746 . 6747) (6746 . 6747) (6745 . 6746) (6744 . 6745) (apply yas--snippet-revive 6732 6744 #s(yas--snippet nil nil nil 7 nil nil #s(yas--field 1 6726 6770 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil #s(yas--field 1 6726 6770 nil nil nil t nil) nil)) (6732 . 6744) (#("get_logger()" 0 12 (fontified nil)) . 6732) (6732 . 6744) (#("get_logger() const" 0 18 (fontified nil)) . -6732) (6732 . 6750) (#("get_logg" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -6732) (undo-tree-id1820 . -5) (undo-tree-id1821 . -8) (undo-tree-id1822 . -8) 6740 (6732 . 6740) (6731 . 6732) (6729 . 6731) (6727 . 6729) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 6727) (6726 . 6727) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6726 6770 nil nil nil t nil)) nil 6 nil #s(yas--field 1 6726 6770 nil nil nil t nil) nil nil)) (6714 . 6738) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 6714) (6714 . 6743) (#("RCLCPP_I" 0 8 (fontified nil)) . 6714) (6714 . 6722) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -6714) (6714 . 6738) (#("RCLCPP_I" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -6714) (undo-tree-id1823 . -4) (undo-tree-id1824 . -8) (undo-tree-id1825 . -8) 6722 (6721 . 6722) (#("T" 0 1 (fontified t)) . -6721) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) 6722 (6718 . 6722) (#("L" 0 1 (fontified t)) . -6718) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) 6719 (6716 . 6719) (6714 . 6716) (#("R" 0 1 (fontified t)) . -6714) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) 6715 (6714 . 6715) (6708 . 6714)) nil (26236 8632 270077 147000) 0 nil])
([nil nil ((6771 . 6772) (apply yas--snippet-revive 6714 6771 #s(yas--snippet nil (#s(yas--field 1 6726 6770 nil nil nil t nil)) nil 6 nil #s(yas--field 1 6726 6770 nil nil nil t nil) nil nil))) nil (26236 8632 270032 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6778 . 6779) (#("
" 0 1 (fontified nil)) . -6837) (6772 . 6838) 6771) nil (26236 8632 270029 315000) 0 nil])
([nil nil ((#("\"********" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face)) . 6811) (undo-tree-id1818 . -8)) nil (26236 8632 270025 935000) 0 nil])
([nil nil ((#("READYYY" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 6811) (undo-tree-id1817 . -6) (nil syntax-table nil 6828 . 6829) (nil syntax-table (1) 6825 . 6826)) nil (26236 8632 270021 848000) 0 nil])
([nil nil ((#("*******\");" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face font-lock-warning-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face)) . 6811) (undo-tree-id1816 . -9) (nil syntax-table nil 6821 . 6822) (nil syntax-table (1) 6818 . 6819)) nil (26236 8632 270017 265000) 0 nil])
([nil nil ((6812 . 6813) (6811 . 6812) (#(")" 0 1 (fontified nil)) . -6811) (6811 . 6812)) nil (26236 8632 270012 261000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . -6822) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6823) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) 6824 (6823 . 6824) (6822 . 6823) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6822) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) 6823 (6820 . 6823) (6819 . 6820) (6818 . 6819) (6812 . 6818) (#("%" 0 1 (fontified t face font-lock-string-face)) . -6812) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6813) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -6814) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) 6815 (6814 . 6815) (6812 . 6814) (#("s" 0 1 (fontified t face font-lock-string-face)) . -6812) (undo-tree-id1811 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -6813) (undo-tree-id1812 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -6814) (undo-tree-id1813 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -6815) (undo-tree-id1814 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -6816) (undo-tree-id1815 . -1) 6817 (6815 . 6817) (6814 . 6815) (6812 . 6814) (6812 . 6813) (nil syntax-table nil 6814 . 6815) (nil syntax-table (1) 6811 . 6812) (6811 . 6812) (#("\"" 0 1 (fontified nil)) . -6811) (nil syntax-table nil 6814 . 6815) (nil syntax-table (1) 6811 . 6812) (6811 . 6812)) nil (26236 8632 270000 509000) 0 nil])
([nil nil ((6835 . 6837) (6831 . 6835) (6824 . 6831) (6823 . 6824)) nil (26236 8632 269955 919000) 0 nil])
([nil nil ((6839 . 6845) (6838 . 6839) (6837 . 6838)) nil (26236 8632 269952 197000) 0 nil])
([nil nil ((#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7645) (undo-tree-id1790 . -2) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) (undo-tree-id1793 . -3) (undo-tree-id1794 . -3) (undo-tree-id1795 . -3) (undo-tree-id1796 . -3) (undo-tree-id1797 . -3) (undo-tree-id1798 . -3)) nil (26236 8632 269945 623000) 0 nil])
([nil nil ((7645 . 7649)) nil (26236 8632 269901 906000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6849) (undo-tree-id2091 . -6) (undo-tree-id2092 . -6) (undo-tree-id2093 . -6) (undo-tree-id2094 . -6) (undo-tree-id2095 . -6) (undo-tree-id2096 . -6) (undo-tree-id2097 . -6) (undo-tree-id2098 . -6) (undo-tree-id2099 . -6) (undo-tree-id2100 . -6) (undo-tree-id2101 . -6) (undo-tree-id2102 . -6) (undo-tree-id2103 . -6) (undo-tree-id2104 . -6) (undo-tree-id2105 . -6) (undo-tree-id2106 . -6) (undo-tree-id2107 . -6) (undo-tree-id2108 . -6) (undo-tree-id2109 . -6) (undo-tree-id2110 . -6) (undo-tree-id2111 . -6) (undo-tree-id2112 . -6) (undo-tree-id2113 . -6) (undo-tree-id2114 . -6) (undo-tree-id2115 . -6) (undo-tree-id2116 . -6) (undo-tree-id2117 . -6) (undo-tree-id2118 . -6) (undo-tree-id2119 . -6) (undo-tree-id2120 . -6) (undo-tree-id2121 . -6) (undo-tree-id2122 . -6) (undo-tree-id2123 . -6) (undo-tree-id2124 . -6) (undo-tree-id2125 . -6) (undo-tree-id2126 . -6) (undo-tree-id2127 . -6) (undo-tree-id2128 . -6) 6855 (6849 . 6855) (#("      " 0 6 (fontified nil)) . 6848) (undo-tree-id2129 . -6) (undo-tree-id2130 . -6) (undo-tree-id2131 . -6) (undo-tree-id2132 . -6) (undo-tree-id2133 . -6) (undo-tree-id2134 . -6) (undo-tree-id2135 . -6) (undo-tree-id2136 . -6) (undo-tree-id2137 . -6) (undo-tree-id2138 . -6) (undo-tree-id2139 . -6) (undo-tree-id2140 . -6) (undo-tree-id2141 . -6) (undo-tree-id2142 . -6) (undo-tree-id2143 . -6) (undo-tree-id2144 . -6) (undo-tree-id2145 . -6) (undo-tree-id2146 . -6) (undo-tree-id2147 . -6) (undo-tree-id2148 . -6) (undo-tree-id2149 . -6) (undo-tree-id2150 . -6) (undo-tree-id2151 . -6) (undo-tree-id2152 . -6) (undo-tree-id2153 . -6) (undo-tree-id2154 . -6) (undo-tree-id2155 . -6) (undo-tree-id2156 . -6) (undo-tree-id2157 . -6) (6847 . 6855) (t 26236 8632 289015 665000)) nil (26236 8644 814092 60000) 0 nil])
([nil nil ((6848 . 6854)) nil (26236 8644 813638 930000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 6848) (undo-tree-id1988 . -6) (undo-tree-id1989 . 1) (undo-tree-id1990 . -5) (undo-tree-id1991 . -7) (undo-tree-id1992 . -7) (undo-tree-id1993 . -7) (undo-tree-id1994 . -7) (undo-tree-id1995 . -7) (undo-tree-id1996 . -7) (undo-tree-id1997 . -7) (undo-tree-id1998 . -7) (undo-tree-id1999 . -7) (undo-tree-id2000 . -7) (undo-tree-id2001 . -7) (undo-tree-id2002 . -7) (undo-tree-id2003 . -7) (undo-tree-id2004 . -7) (undo-tree-id2005 . -7) (undo-tree-id2006 . -7) (undo-tree-id2007 . -7) (undo-tree-id2008 . -7) (undo-tree-id2009 . -7) (undo-tree-id2010 . -7) (undo-tree-id2011 . -7) (undo-tree-id2012 . -7) (undo-tree-id2013 . -7) (undo-tree-id2014 . -7) (undo-tree-id2015 . -7) (undo-tree-id2016 . -7) (undo-tree-id2017 . -7) (undo-tree-id2018 . -7) (undo-tree-id2019 . -7) (undo-tree-id2020 . -7) (undo-tree-id2021 . -7) (undo-tree-id2022 . -7) (undo-tree-id2023 . -7) (undo-tree-id2024 . -7) (undo-tree-id2025 . -7) (undo-tree-id2026 . -7) (undo-tree-id2027 . -6) (undo-tree-id2028 . -6) (undo-tree-id2029 . -6) (undo-tree-id2030 . -6) (undo-tree-id2031 . -6) (undo-tree-id2032 . -6) (undo-tree-id2033 . -6) (undo-tree-id2034 . -6) (undo-tree-id2035 . -6) (undo-tree-id2036 . -6) (undo-tree-id2037 . -6) (undo-tree-id2038 . -6) (undo-tree-id2039 . -6) (undo-tree-id2040 . -6) (undo-tree-id2041 . -6) (undo-tree-id2042 . -6) (undo-tree-id2043 . -6) (undo-tree-id2044 . -6) (undo-tree-id2045 . -6) (undo-tree-id2046 . -6) (undo-tree-id2047 . -6) (undo-tree-id2048 . -6) (undo-tree-id2049 . -6) (undo-tree-id2050 . -6) (undo-tree-id2051 . -6) (undo-tree-id2052 . -6) (undo-tree-id2053 . -6) (undo-tree-id2054 . -6) (undo-tree-id2055 . -6) (undo-tree-id2056 . -6) (undo-tree-id2057 . -6) (undo-tree-id2058 . -6) (undo-tree-id2059 . -6) (undo-tree-id2060 . -6) (undo-tree-id2061 . -6) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (undo-tree-id2064 . -5) (undo-tree-id2065 . -5) (undo-tree-id2066 . -5) (undo-tree-id2067 . -5) (undo-tree-id2068 . -5) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -5) (undo-tree-id2085 . -5) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -7) 6853) nil (26236 8644 813627 600000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6848) (undo-tree-id1986 . 1) (undo-tree-id1987 . -1)) nil (26236 8644 813451 664000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6855) (undo-tree-id1919 . -4) (undo-tree-id1920 . -4) (undo-tree-id1921 . -4) (undo-tree-id1922 . -4) (undo-tree-id1923 . -4) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) (undo-tree-id1927 . -4) (undo-tree-id1928 . -4) (undo-tree-id1929 . -4) (undo-tree-id1930 . -4) (undo-tree-id1931 . -4) (undo-tree-id1932 . -4) (undo-tree-id1933 . -4) (undo-tree-id1934 . -4) (undo-tree-id1935 . -4) (undo-tree-id1936 . -4) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) 6859 (6855 . 6859) (#("    " 0 4 (fontified nil)) . 6854) (undo-tree-id1957 . -4) (undo-tree-id1958 . -4) (undo-tree-id1959 . -4) (undo-tree-id1960 . -4) (undo-tree-id1961 . -4) (undo-tree-id1962 . -4) (undo-tree-id1963 . -4) (undo-tree-id1964 . -4) (undo-tree-id1965 . -4) (undo-tree-id1966 . -4) (undo-tree-id1967 . -4) (undo-tree-id1968 . -4) (undo-tree-id1969 . -4) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) (undo-tree-id1972 . -4) (undo-tree-id1973 . -4) (undo-tree-id1974 . -4) (undo-tree-id1975 . -4) (undo-tree-id1976 . -4) (undo-tree-id1977 . -4) (undo-tree-id1978 . -4) (undo-tree-id1979 . -4) (undo-tree-id1980 . -4) (undo-tree-id1981 . -4) (undo-tree-id1982 . -4) (undo-tree-id1983 . -4) (undo-tree-id1984 . -4) (undo-tree-id1985 . -4) (6853 . 6859)) nil (26236 8644 813433 151000) 0 nil])
([nil nil ((6855 . 6859) (#("    " 0 4 (fontified nil)) . 6854) (undo-tree-id2189 . -4) (6858 . 6859) (6854 . 6858) (t 26236 8644 860891 524000)) nil (26236 8729 68987 712000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6859) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (#("e" 0 1 (fontified t)) . -6860) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (#("r" 0 1 (fontified t)) . -6861) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (#("v" 0 1 (fontified t)) . -6862) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (#("i" 0 1 (fontified t)) . -6863) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (#("c" 0 1 (fontified t)) . -6864) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (#("e" 0 1 (fontified t)) . -6865) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) 6866 (6859 . 6866) (6855 . 6859) (#("   " 0 3 (fontified nil)) . -6855) (undo-tree-id2186 . -3) (undo-tree-id2187 . -3) (#(" " 0 1 (fontified t)) . 6858) (undo-tree-id2188 . -1)) nil (26236 8729 68978 50000) 0 nil])
([nil nil ((6495 . 6497) (#("  " 0 2 (fontified nil c-is-sws t c-in-sws t)) . 6494) (undo-tree-id2170 . -2) (6494 . 6497) (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-is-sws t c-in-sws t)) . 6493) (undo-tree-id2171 . -2) (6495 . 6496) (6493 . 6495)) nil (26236 8729 68943 608000) 0 nil])
([nil nil ((6529 . 6530) (6516 . 6529) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6516) (undo-tree-id2162 . -1) 6517 (6516 . 6517) (#(")" 0 1 (fontified nil face font-lock-function-name-face)) . -6516) (6516 . 6517) (6496 . 6516) (#("i" 0 1 (fontified t c-is-sws t)) . -6496) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (#("n" 0 1 (fontified t)) . -6497) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -6498) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (#(" " 0 1 (fontified t)) . -6499) (undo-tree-id2169 . -1) 6500 (6498 . 6500) (6496 . 6498) (6494 . 6496)) nil (26236 8729 68931 499000) 0 nil])
([nil nil ((7187 . 7195) (7167 . 7187) (#("cu" 0 2 (fontified nil)) . 7167) (7167 . 7169) (#("current_service_done" 0 20 (fontified nil)) . -7167) (7167 . 7187) (#("curr" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7167) (undo-tree-id2158 . -3) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) 7171 (7170 . 7171) (7168 . 7170) (7167 . 7168) (7163 . 7167) (#("   " 0 3 (fontified nil)) . -7163) (undo-tree-id2161 . -3) (#(" " 0 1 (fontified t)) . 7166)) nil (26236 8729 68903 627000) 0 nil])
([nil nil ((7195 . 7196)) nil (26236 8729 68867 144000) 0 nil])
([nil nil ((#("    current_service_done = false;
" 0 4 (fontified t) 4 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t face font-lock-constant-face) 28 29 (fontified t face font-lock-constant-face) 29 30 (fontified t face font-lock-constant-face) 30 31 (fontified t face font-lock-constant-face) 31 32 (fontified t face font-lock-constant-face) 32 33 (fontified t) 33 34 (fontified t)) . 7163) (undo-tree-id2191 . -33) (undo-tree-id2192 . 1) (undo-tree-id2193 . -4) (undo-tree-id2194 . 1) (undo-tree-id2195 . -32) (undo-tree-id2196 . -32) 7195 (t 26236 8729 84048 540000)) nil (26236 8737 892273 951000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7573 . 7574) (#("
" 0 1 (fontified nil)) . -7603) (7569 . 7604)) nil (26236 8737 892255 744000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7604) (undo-tree-id2190 . -4) 7608 (7603 . 7608)) nil (26236 8737 892244 993000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7678) (undo-tree-id2313 . -1) (t 26236 8737 935958 869000)) nil (26236 8822 250590 199000) 0 nil])
([nil nil ((#("future" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 7678) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -6)) nil (26236 8822 250585 738000) 0 nil])
([nil nil ((7678 . 7679) (7677 . 7678)) nil (26236 8822 250577 246000) 0 nil])
([nil nil ((#("      return future_result->success;
" 0 6 (fontified t) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 7727) (undo-tree-id2207 . -36) (undo-tree-id2208 . 22) (undo-tree-id2209 . -15) (undo-tree-id2210 . -13) (undo-tree-id2211 . -13) (undo-tree-id2212 . -28) (undo-tree-id2213 . -28) (undo-tree-id2214 . -28) (undo-tree-id2215 . -34) (undo-tree-id2216 . -34) (undo-tree-id2217 . -14) (undo-tree-id2218 . -15) (undo-tree-id2219 . -15) (undo-tree-id2220 . -15) (undo-tree-id2221 . -15) (undo-tree-id2222 . -15) (undo-tree-id2223 . -15) (undo-tree-id2224 . -15) (undo-tree-id2225 . -15) (undo-tree-id2226 . -15) (undo-tree-id2227 . -15) (undo-tree-id2228 . -15) (undo-tree-id2229 . -15) (undo-tree-id2230 . -15) (undo-tree-id2231 . -15) (undo-tree-id2232 . -15) (undo-tree-id2233 . -15) (undo-tree-id2234 . -15) (undo-tree-id2235 . -15) (undo-tree-id2236 . -15) (undo-tree-id2237 . -15) (undo-tree-id2238 . -15) (undo-tree-id2239 . -15) (undo-tree-id2240 . -15) (undo-tree-id2241 . -15) (undo-tree-id2242 . -15) (undo-tree-id2243 . -15) (undo-tree-id2244 . -15) (undo-tree-id2245 . -15) (undo-tree-id2246 . -15) (undo-tree-id2247 . -15) (undo-tree-id2248 . -15) (undo-tree-id2249 . -15) (undo-tree-id2250 . -15) (undo-tree-id2251 . -15) (undo-tree-id2252 . -15) (undo-tree-id2253 . -15) (undo-tree-id2254 . -15) (undo-tree-id2255 . -15) (undo-tree-id2256 . -15) (undo-tree-id2257 . -15) (undo-tree-id2258 . -15) (undo-tree-id2259 . -15) (undo-tree-id2260 . -15) (undo-tree-id2261 . -15) (undo-tree-id2262 . -15) (undo-tree-id2263 . -15) (undo-tree-id2264 . -15) (undo-tree-id2265 . -15) (undo-tree-id2266 . -15) (undo-tree-id2267 . -15) (undo-tree-id2268 . -15) (undo-tree-id2269 . -15) (undo-tree-id2270 . -15) (undo-tree-id2271 . -15) (undo-tree-id2272 . -15) (undo-tree-id2273 . -15) (undo-tree-id2274 . -15) (undo-tree-id2275 . -15) (undo-tree-id2276 . -15) (undo-tree-id2277 . -15) (undo-tree-id2278 . -15) (undo-tree-id2279 . -15) (undo-tree-id2280 . -15) (undo-tree-id2281 . -15) (undo-tree-id2282 . -15) (undo-tree-id2283 . -15) (undo-tree-id2284 . -15) (undo-tree-id2285 . -15) (undo-tree-id2286 . -15) (undo-tree-id2287 . -15) (undo-tree-id2288 . -15) (undo-tree-id2289 . -14) (undo-tree-id2290 . -14) (undo-tree-id2291 . -14) (undo-tree-id2292 . -14) (undo-tree-id2293 . -14) (undo-tree-id2294 . -14) (undo-tree-id2295 . -14) (undo-tree-id2296 . -14) (undo-tree-id2297 . -14) (undo-tree-id2298 . -14) (undo-tree-id2299 . -14) (undo-tree-id2300 . -14) (undo-tree-id2301 . -14) (undo-tree-id2302 . -14) (undo-tree-id2303 . -14) (undo-tree-id2304 . -14) (undo-tree-id2305 . -14) (undo-tree-id2306 . -14) (undo-tree-id2307 . -14) (undo-tree-id2308 . -37) 7741) nil (26236 8822 250565 194000) 0 nil])
([nil nil ((7744 . 7745) (7739 . 7744) (#("f" 0 1 (fontified t)) . -7739) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) 7740 (7739 . 7740) (7735 . 7739) (7732 . 7735) (#("t" 0 1 (fontified t)) . -7732) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (#("e" 0 1 (fontified t)) . -7733) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) 7734 (7732 . 7734) (7726 . 7732) (#("      " 0 6 (fontified nil)) . 7725) (undo-tree-id2206 . -6) (7731 . 7732) (7725 . 7731)) nil (26236 8822 250385 228000) 0 nil])
([nil nil ((7744 . 7745) (7743 . 7744) (#("3" 0 1 (fontified t)) . -7743) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (#(";" 0 1 (fontified t)) . -7744) (undo-tree-id2199 . -1) 7745) nil (26236 8822 250359 12000) 0 nil])
([nil nil ((apply -3 7683 7729 undo--wrap-and-run-primitive-undo 7683 7729 ((7689 . 7692) 7683)) (t 26236 8822 267095 602000)) nil (26236 8910 963823 131000) 0 nil])
([nil nil ((7678 . 7679)) nil (26236 8910 963820 813000) 0 nil])
([nil nil ((7679 . 7692) (#(" " 0 1 (fontified nil)) . 7679) (undo-tree-id2431 . 1) (#(" " 0 1 (fontified nil)) . 7678) (undo-tree-id2432 . -1) (7679 . 7680)) nil (26236 8910 963817 495000) 0 nil])
([nil nil ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . -7761) (7761 . 7763) (#("_" 0 1 (fontified t)) . -7761) 7762 (7761 . 7762) (7759 . 7761) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . -7747) (7747 . 7759) (#("placeholder" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -7747) 7758 (7756 . 7758) (7752 . 7756) (7750 . 7752) (7747 . 7750) (7745 . 7747) (7741 . 7745) (7740 . 7741) (7735 . 7740) (7734 . 7735) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-7-face))) . -7734) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-7-face))) . 7735) (#("int future" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-variable-name-face)) . 7735) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7734 7763 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil)) (7717 . 7746) (#("response_callback(${1:int future})" 0 34 (fontified nil)) . 7717) (7717 . 7751) (#("r" 0 1 (fontified nil)) . 7717) (7717 . 7718) (#("response_callback(int future)" 0 29 (fontified nil)) . -7717) (7717 . 7746) (#("res" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7717) 7720 (7718 . 7720) (#("e" 0 1 (fontified t)) . -7718) (#("t" 0 1 (fontified t)) . -7719) (#("u" 0 1 (fontified t)) . -7720) (#("r" 0 1 (fontified t)) . -7721) 7722 (7718 . 7722) (7717 . 7718) (7715 . 7717) (7702 . 7715) (#("L" 0 1 (fontified nil)) . 7702) (7702 . 7703) (#("LifeActivator" 0 13 (fontified nil)) . -7702) (7702 . 7715) (#("L" 0 1 (fontified t)) . -7702) 7703 (7702 . 7703) (apply yas--snippet-revive 7697 7703 #s(yas--snippet nil nil #s(yas--exit 7702 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7702 nil) 8 nil nil nil nil)) (7697 . 7703) (#("bind($0)" 0 8 (fontified nil)) . 7697) (7697 . 7705) (#("bi" 0 2 (fontified nil)) . 7697) (7697 . 7699) (#("bind(…)" 0 7 (fontified nil)) . -7697) (7697 . 7704) (#("bind" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7697) 7701 (7697 . 7701) (#("v" 0 1 (fontified t)) . -7697) (#("i" 0 1 (fontified t)) . -7698) 7699 (7697 . 7699) (7696 . 7697) (7695 . 7696) (7694 . 7695) (7692 . 7694)) nil (26236 24794 617460 833000) 0 nil])
([nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (#("," 0 1 (fontified nil)) . 7740) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (#("::" 0 2 (fontified nil)) . 7745) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) 7734) nil (26236 24814 413991 314000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2919 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2920 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2921 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2922 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2923 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2924 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2925 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2926 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24794 560459 233000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2909 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2910 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2911 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2912 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2913 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2914 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2915 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2916 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24794 200420 720000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2899 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2900 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2901 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2902 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2903 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2904 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2905 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2906 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24793 863578 470000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2889 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2890 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2891 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2892 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2893 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2894 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2895 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2896 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24793 525406 262000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2879 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2880 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2881 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2882 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2883 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2884 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2885 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2886 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24793 203428 360000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2869 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2870 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2871 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2872 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2873 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2874 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2875 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2876 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24792 898489 488000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2859 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2860 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2861 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2862 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2863 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2864 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2865 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2866 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24792 582467 357000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2849 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2850 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2851 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2852 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2853 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2854 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2855 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id2856 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24792 259793 841000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id2839 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id2840 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id2841 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id2842 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id2843 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id2844 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id2845 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified nil) 1 2 (fontified nil)) . 7761) (undo-tree-id2846 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 24791 923006 724000) 0 nil] [nil nil ((apply yas--snippet-revive 7717 7763 #s(yas--snippet nil (#s(yas--field 1 7734 7734 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7734 7734 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil))) (26236 24791 636539 441000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id785 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id786 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id787 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id788 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id789 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id790 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id791 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id792 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20714 625310 805000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id774 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id775 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id776 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id777 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id778 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id779 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id780 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id781 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20714 290552 53000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id763 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id764 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id765 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id766 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id767 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id768 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id769 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id770 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20713 888755 224000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id753 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id754 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id755 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id756 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id757 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id758 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id759 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id760 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20713 551999 920000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id742 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id743 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id744 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id745 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id746 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id747 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id748 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id749 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20713 236050 104000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id731 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id732 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id733 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id734 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id735 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id736 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id737 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id738 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20712 884380 989000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id720 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id721 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id722 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id723 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id724 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id725 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id726 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id727 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20712 552191 934000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id709 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id710 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id711 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id712 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id713 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id714 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id715 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id716 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20711 845100 577000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id699 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id700 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id701 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id702 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id703 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id704 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id705 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id706 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20711 208079 332000) 0 nil] [nil nil ((7735 . 7745) (7734 . 7736) (#("," 0 1 (fontified nil)) . 7734) (undo-tree-id688 . -1) (#(" this" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 7735) (undo-tree-id689 . -5) (#("," 0 1 (fontified nil)) . 7740) (undo-tree-id690 . -1) (#(" std" 0 1 (fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil) 3 4 (face font-lock-constant-face fontified nil)) . 7741) (undo-tree-id691 . -4) (#("::" 0 2 (fontified nil)) . 7745) (undo-tree-id692 . -2) (#("pla" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7747) (#("ce" 0 1 (fontified nil) 1 2 (fontified nil)) . 7750) (#("hold" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7752) (#("er" 0 1 (fontified nil) 1 2 (fontified nil)) . 7756) (7747 . 7758) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7747) (undo-tree-id693 . -12) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 7759) (undo-tree-id694 . -2) (#("_" 0 1 (fontified nil)) . 7761) (7761 . 7762) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_1" 0 1 (fontified t) 1 2 (fontified t)) . 7761) (undo-tree-id695 . -2) 7734) ((7761 . 7763) (#("_1" 0 2 (fontified nil)) . 7761) (7761 . 7763) (#("_" 0 1 (fontified nil)) . 7761) (7747 . 7762) (#("place" 0 5 (fontified nil)) . 7747) (7747 . 7752) (#("placeholders" 0 12 (fontified nil)) . 7747) (7747 . 7759) (#("placeholder" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 7747) (7734 . 7758) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 7734) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("int future" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t)) . 7735)) (26236 20710 896067 231000) 0 nil] [nil nil ((apply yas--snippet-revive 7717 7763 #s(yas--snippet nil (#s(yas--field 1 7734 7734 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7734 7734 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil))) (26236 20710 573095 601000) 0 nil])
([nil nil ((apply yas--snippet-revive 7717 7746 #s(yas--snippet nil (#s(yas--field 1 7734 7734 nil nil nil t nil)) nil 9 nil #s(yas--field 1 7734 7763 nil nil nil t nil) nil nil))) nil (26236 24814 419412 668000) 0 nil])
nil
nil
nil
nil
nil
nil
nil
nil
nil
([nil nil ((#("  bool change_state(std::uint8_t transition,  unsigned int index = 0,
                    std::chrono::seconds time_out=4s) {
    auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
    request->transition.id = transition;

    rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedPtr
      current_client =
      this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[index].c_str());
    
    if (!current_client->wait_for_service(time_out)) {
      RCLCPP_ERROR(this->get_logger(), \"[ERROR]: Service %s is not available.\",
                   current_client->get_service_name());
      return false;
    }

    current_service_done = false;

    try {
      auto future = current_client->async_send_request(request,
						       std::bind(LifeActivator::response_callback, this, std::placeholders::_1));

      // auto future_result = future.wait();

      return false;

    } catch (std::runtime_error &) {
      RCLCPP_INFO(get_logger(), \"[EMERGENCY ERROR]: Cought a Runtime ERROR***********\");
      return false;
    }
    
  }


" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 19 (face font-lock-function-name-face fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 20 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 43 (face font-lock-variable-name-face fontified t) 43 44 (c-type c-decl-arg-start fontified t) 44 46 (fontified t) 46 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 58 (face font-lock-type-face fontified t) 58 59 (fontified t) 59 64 (face font-lock-variable-name-face fontified t) 64 68 (fontified t) 68 69 (c-type c-decl-arg-start fontified t) 69 90 (fontified t) 90 93 (face font-lock-constant-face fontified t) 93 95 (fontified t) 95 101 (face font-lock-constant-face fontified t) 101 103 (fontified t) 103 110 (face font-lock-type-face fontified t) 110 111 (fontified t) 111 119 (face font-lock-variable-name-face fontified t) 119 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t) 125 126 (fontified t) 126 130 (fontified t) 130 133 (face font-lock-keyword-face fontified t) 133 134 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 134 135 (fontified t) 135 142 (face font-lock-variable-name-face fontified t) 142 145 (fontified t) 145 148 (face font-lock-constant-face fontified t) 148 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 162 176 (face font-lock-constant-face fontified t) 176 178 (fontified t) 178 181 (face font-lock-constant-face fontified t) 181 183 (fontified t) 183 194 (face font-lock-constant-face fontified t) 194 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 204 205 (face (rainbow-delimiters-depth-4-face) fontified t) 205 206 (face (rainbow-delimiters-depth-4-face) fontified t) 206 254 (fontified t) 254 260 (face font-lock-constant-face fontified t) 260 262 (fontified t) 262 268 (face font-lock-constant-face fontified t) 268 269 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 269 283 (face font-lock-constant-face fontified t) 283 285 (fontified t) 285 288 (face font-lock-constant-face fontified t) 288 301 (fontified t) 301 302 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 302 304 (fontified t) 304 312 (face font-lock-type-face fontified t) 312 313 (face font-lock-type-face c-type c-decl-id-start fontified t) 313 320 (fontified t) 320 334 (face font-lock-variable-name-face fontified t) 334 343 (fontified t) 343 347 (face font-lock-keyword-face fontified t) 347 352 (fontified t) 352 362 (fontified t) 362 363 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 363 377 (face font-lock-constant-face fontified t) 377 379 (fontified t) 379 382 (face font-lock-constant-face fontified t) 382 395 (fontified t) 395 396 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 396 397 (face (rainbow-delimiters-depth-4-face) fontified t) 397 416 (fontified t) 416 417 (face (rainbow-delimiters-depth-5-face) fontified t) 417 422 (fontified t) 422 423 (face (rainbow-delimiters-depth-5-face) fontified t) 423 429 (fontified t) 429 430 (face (rainbow-delimiters-depth-5-face) fontified t) 430 431 (face (rainbow-delimiters-depth-5-face) fontified t) 431 432 (face (rainbow-delimiters-depth-4-face) fontified t) 432 433 (fontified t) 433 443 (fontified t) 443 445 (face font-lock-keyword-face fontified t) 445 446 (fontified t) 446 447 (face (rainbow-delimiters-depth-4-face) fontified t) 447 448 (face font-lock-negation-char-face fontified t) 448 480 (fontified t) 480 481 (face (rainbow-delimiters-depth-5-face) fontified t) 481 486 (fontified t) 486 489 (fontified t) 489 490 (face (rainbow-delimiters-depth-5-face) fontified t) 490 491 (face (rainbow-delimiters-depth-4-face) fontified t) 491 492 (fontified t) 492 493 (face (rainbow-delimiters-depth-4-face) fontified t) 493 500 (fontified t) 500 512 (fontified t) 512 513 (face (rainbow-delimiters-depth-5-face) fontified t) 513 517 (face font-lock-keyword-face fontified t) 517 529 (fontified t) 529 530 (face (rainbow-delimiters-depth-6-face) fontified t) 530 531 (face (rainbow-delimiters-depth-6-face) fontified t) 531 533 (fontified t) 533 572 (face font-lock-string-face fontified t) 572 574 (fontified t) 574 625 (fontified t) 625 626 (face (rainbow-delimiters-depth-6-face) fontified t) 626 627 (face (rainbow-delimiters-depth-6-face) fontified t) 627 628 (face (rainbow-delimiters-depth-5-face) fontified t) 628 630 (fontified t) 630 636 (fontified t) 636 642 (face font-lock-keyword-face fontified t) 642 643 (fontified t) 643 648 (face font-lock-constant-face fontified t) 648 654 (fontified t) 654 655 (face (rainbow-delimiters-depth-4-face) fontified t) 655 684 (fontified t) 684 689 (face font-lock-constant-face fontified t) 689 691 (fontified t) 691 696 (fontified t) 696 699 (face font-lock-keyword-face fontified t) 699 700 (fontified t) 700 701 (face (rainbow-delimiters-depth-4-face) fontified t) 701 708 (fontified t) 708 711 (face font-lock-keyword-face fontified t) 711 712 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 712 713 (fontified t) 713 719 (face font-lock-variable-name-face fontified t) 719 756 (fontified t) 756 757 (face (rainbow-delimiters-depth-5-face) fontified t) 757 779 (fontified t) 779 782 (face font-lock-constant-face fontified t) 782 788 (fontified t) 788 789 (face (rainbow-delimiters-depth-6-face) fontified t) 789 802 (face font-lock-constant-face fontified t) 802 821 (fontified t) 821 822 (fontified t) 822 823 (fontified t) 823 827 (face font-lock-keyword-face fontified t) 827 828 (fontified t) 828 829 (fontified t) 829 830 (face font-lock-constant-face fontified t) 830 831 (face font-lock-constant-face fontified t) 831 832 (face font-lock-constant-face fontified t) 832 834 (fontified t) 834 846 (face font-lock-constant-face fontified t) 846 847 (fontified t) 847 848 (fontified t) 848 849 (fontified t) 849 850 (fontified t) 850 851 (face (rainbow-delimiters-depth-6-face) fontified t) 851 852 (face (rainbow-delimiters-depth-5-face) fontified t) 852 854 (fontified t) 854 855 (fontified t) 855 861 (fontified t c-is-sws t c-in-sws t) 861 862 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 862 864 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 864 865 (face font-lock-comment-face fontified t c-in-sws t) 865 866 (face font-lock-comment-face fontified t c-in-sws t) 866 867 (face font-lock-comment-face fontified t c-in-sws t) 867 868 (face font-lock-comment-face fontified t c-in-sws t) 868 869 (face font-lock-comment-face fontified t c-in-sws t) 869 870 (face font-lock-comment-face fontified t c-in-sws t) 870 871 (face font-lock-comment-face fontified t c-in-sws t) 871 872 (face font-lock-comment-face fontified t c-in-sws t) 872 873 (face font-lock-comment-face fontified t c-in-sws t) 873 874 (face font-lock-comment-face fontified t c-in-sws t) 874 875 (face font-lock-comment-face fontified t c-in-sws t) 875 876 (face font-lock-comment-face fontified t c-in-sws t) 876 877 (face font-lock-comment-face fontified t c-in-sws t) 877 878 (face font-lock-comment-face fontified t c-in-sws t) 878 879 (face font-lock-comment-face fontified t c-in-sws t) 879 880 (face font-lock-comment-face fontified t c-in-sws t) 880 881 (face font-lock-comment-face fontified t c-in-sws t) 881 882 (face font-lock-comment-face fontified t c-in-sws t) 882 883 (face font-lock-comment-face fontified t c-in-sws t) 883 884 (face font-lock-comment-face fontified t c-in-sws t) 884 885 (face font-lock-comment-face fontified t c-in-sws t) 885 891 (face font-lock-comment-face fontified t c-in-sws t) 891 892 (face font-lock-comment-face fontified t c-in-sws t) 892 893 (face font-lock-comment-face fontified t c-in-sws t) 893 894 (face font-lock-comment-face fontified t c-in-sws t) 894 895 (face font-lock-comment-face fontified t c-in-sws t) 895 896 (face font-lock-comment-face fontified t c-in-sws t) 896 897 (face font-lock-comment-face fontified t c-in-sws t) 897 898 (face font-lock-comment-face fontified t c-in-sws t) 898 899 (face font-lock-comment-face fontified t c-in-sws t) 899 900 (face font-lock-comment-face fontified t c-in-sws t) 900 901 (fontified t c-in-sws t c-is-sws t) 901 907 (fontified t c-is-sws t c-in-sws t) 907 908 (face font-lock-keyword-face fontified t c-is-sws t) 908 913 (face font-lock-keyword-face fontified t) 913 914 (fontified t) 914 915 (face font-lock-constant-face fontified t) 915 916 (face font-lock-constant-face fontified t) 916 917 (face font-lock-constant-face fontified t) 917 918 (face font-lock-constant-face fontified t) 918 919 (face font-lock-constant-face fontified t) 919 920 (fontified t) 920 921 (fontified t) 921 922 (fontified t) 922 926 (fontified t) 926 927 (face (rainbow-delimiters-depth-4-face) fontified t) 927 928 (fontified t) 928 933 (face font-lock-keyword-face fontified t) 933 934 (fontified t) 934 935 (face (rainbow-delimiters-depth-4-face) fontified t) 935 938 (face font-lock-constant-face fontified t) 938 952 (fontified t) 952 955 (fontified t) 955 956 (face (rainbow-delimiters-depth-4-face) fontified t) 956 957 (fontified t) 957 958 (face (rainbow-delimiters-depth-4-face) fontified t) 958 976 (fontified t) 976 977 (face (rainbow-delimiters-depth-5-face) fontified t) 977 987 (fontified t) 987 988 (face (rainbow-delimiters-depth-6-face) fontified t) 988 989 (face (rainbow-delimiters-depth-6-face) fontified t) 989 991 (fontified t) 991 1045 (face font-lock-string-face fontified t) 1045 1046 (face (rainbow-delimiters-depth-5-face) fontified t) 1046 1054 (fontified t) 1054 1060 (face font-lock-keyword-face fontified t) 1060 1061 (fontified t) 1061 1066 (face font-lock-constant-face fontified t) 1066 1072 (fontified t) 1072 1073 (face (rainbow-delimiters-depth-4-face) fontified t) 1073 1074 (fontified t) 1074 1077 (fontified t) 1077 1078 (fontified t) 1078 1079 (fontified t) 1079 1081 (fontified t) 1081 1082 (face (rainbow-delimiters-depth-3-face) fontified t) 1082 1085 (fontified t)) . 6913) (undo-tree-id796 . -618) (undo-tree-id797 . -1084) (undo-tree-id798 . -574) (undo-tree-id800 . -1084) (undo-tree-id802 . -618) (undo-tree-id804 . -1084) (undo-tree-id806 . -494) (undo-tree-id808 . -250) (undo-tree-id810 . -250) (undo-tree-id812 . -250) (undo-tree-id814 . -250) (undo-tree-id816 . -249) (undo-tree-id818 . -249) (undo-tree-id820 . -249) (undo-tree-id822 . -208) (undo-tree-id824 . -208) (undo-tree-id826 . -208) (undo-tree-id828 . -208) (undo-tree-id830 . -126) (undo-tree-id832 . -126) (undo-tree-id834 . -126) (undo-tree-id836 . -70) (undo-tree-id838 . -70) (undo-tree-id840 . -70) (undo-tree-id842 . -70) (undo-tree-id844 . -1084)) ((6913 . 7998)) (26236 24791 621232 702000) 0 nil])
nil
nil
nil
nil
nil
nil
nil
nil
nil
nil
([nil nil ((#("      // auto future_result = future.wait();
" 0 6 (c-in-sws t c-is-sws t fontified t) 6 7 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 13 (c-in-sws t fontified t face font-lock-comment-face) 13 14 (c-in-sws t fontified t face font-lock-comment-face) 14 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 25 (c-in-sws t fontified t face font-lock-comment-face) 25 26 (c-in-sws t fontified t face font-lock-comment-face) 26 27 (c-in-sws t fontified t face font-lock-comment-face) 27 28 (c-in-sws t fontified t face font-lock-comment-face) 28 29 (c-in-sws t fontified t face font-lock-comment-face) 29 30 (c-in-sws t fontified t face font-lock-comment-face) 30 36 (c-in-sws t fontified t face font-lock-comment-face) 36 37 (c-in-sws t fontified t face font-lock-comment-face) 37 38 (c-in-sws t fontified t face font-lock-comment-face) 38 39 (c-in-sws t fontified t face font-lock-comment-face) 39 40 (c-in-sws t fontified t face font-lock-comment-face) 40 41 (c-in-sws t fontified t face font-lock-comment-face) 41 42 (c-in-sws t fontified t face font-lock-comment-face) 42 43 (c-in-sws t fontified t face font-lock-comment-face) 43 44 (c-in-sws t fontified t face font-lock-comment-face) 44 45 (c-in-sws t fontified t face font-lock-comment-face)) . 7768) (undo-tree-id2508 . -45) (undo-tree-id2510 . -45) 7811 (t 26236 8911 14217 623000)) ((7768 . 7813)) (26236 20710 530534 242000) 0 nil])
([nil nil ((#("    auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
    request->transition.id = transition;

    rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedPtr
      current_client =
      this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[index].c_str());
    
    if (!current_client->wait_for_service(time_out)) {
      RCLCPP_ERROR(this->get_logger(), \"[ERROR]: Service %s is not available.\",
                   current_client->get_service_name());
      return false;
    }

    current_service_done = false;

    try {
      auto future = current_client->async_send_request(request,
						       std::bind(LifeActivator::response_callback(int future)));

      // auto future_result = future.wait();

      return false;

    } catch (std::runtime_error &) {
      RCLCPP_INFO(get_logger(), \"[EMERGENCY ERROR]: Cought a Runtime ERROR***********\");
      return false;
    }
    
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 22 (face font-lock-constant-face fontified t) 22 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified t) 36 50 (face font-lock-constant-face fontified t) 50 52 (fontified t) 52 55 (face font-lock-constant-face fontified t) 55 57 (fontified t) 57 68 (face font-lock-constant-face fontified t) 68 75 (fontified t) 75 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t) 80 128 (fontified t) 128 134 (face font-lock-constant-face fontified t) 134 136 (fontified t) 136 142 (face font-lock-constant-face fontified t) 142 143 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified t) 143 157 (face font-lock-constant-face fontified t) 157 159 (fontified t) 159 162 (face font-lock-constant-face fontified t) 162 175 (fontified t) 175 176 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified t) 176 178 (fontified t) 178 186 (face font-lock-type-face fontified t) 186 187 (face font-lock-type-face c-type c-decl-id-start fontified t) 187 194 (fontified t) 194 208 (face font-lock-variable-name-face fontified t) 208 217 (fontified t) 217 221 (face font-lock-keyword-face fontified t) 221 226 (fontified t) 226 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified t) 237 251 (face font-lock-constant-face fontified t) 251 253 (fontified t) 253 256 (face font-lock-constant-face fontified t) 256 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified t) 270 271 (face (rainbow-delimiters-depth-4-face) fontified t) 271 290 (fontified t) 290 291 (face (rainbow-delimiters-depth-5-face) fontified t) 291 296 (fontified t) 296 297 (face (rainbow-delimiters-depth-5-face) fontified t) 297 303 (fontified t) 303 304 (face (rainbow-delimiters-depth-5-face) fontified t) 304 305 (face (rainbow-delimiters-depth-5-face) fontified t) 305 306 (face (rainbow-delimiters-depth-4-face) fontified t) 306 307 (fontified t) 307 317 (fontified t) 317 319 (face font-lock-keyword-face fontified t) 319 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-4-face) fontified t) 321 322 (face font-lock-negation-char-face fontified t) 322 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-5-face) fontified t) 355 360 (fontified t) 360 363 (fontified t) 363 364 (face (rainbow-delimiters-depth-5-face) fontified t) 364 365 (face (rainbow-delimiters-depth-4-face) fontified t) 365 366 (fontified t) 366 367 (face (rainbow-delimiters-depth-4-face) fontified t) 367 374 (fontified t) 374 376 (fontified t) 376 386 (fontified t) 386 387 (face (rainbow-delimiters-depth-5-face) fontified t) 387 391 (face font-lock-keyword-face fontified t) 391 403 (fontified t) 403 404 (face (rainbow-delimiters-depth-6-face) fontified t) 404 405 (face (rainbow-delimiters-depth-6-face) fontified t) 405 407 (fontified t) 407 444 (face font-lock-string-face fontified t) 444 446 (face font-lock-string-face fontified t) 446 448 (fontified t) 448 499 (fontified t) 499 500 (face (rainbow-delimiters-depth-6-face) fontified t) 500 501 (face (rainbow-delimiters-depth-6-face) fontified t) 501 502 (face (rainbow-delimiters-depth-5-face) fontified t) 502 503 (fontified t) 503 504 (fontified t) 504 510 (fontified t) 510 516 (face font-lock-keyword-face fontified t) 516 517 (fontified t) 517 522 (face font-lock-constant-face fontified t) 522 528 (fontified t) 528 529 (face (rainbow-delimiters-depth-4-face) fontified t) 529 558 (fontified t) 558 563 (face font-lock-constant-face fontified t) 563 565 (fontified t) 565 570 (fontified t) 570 573 (face font-lock-keyword-face fontified t) 573 574 (fontified t) 574 575 (face (rainbow-delimiters-depth-4-face) fontified t) 575 576 (fontified t) 576 582 (fontified t) 582 585 (face font-lock-keyword-face fontified t) 585 586 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 586 587 (fontified t) 587 593 (face font-lock-variable-name-face fontified t) 593 630 (fontified t) 630 631 (face (rainbow-delimiters-depth-5-face) fontified t) 631 653 (fontified t) 653 656 (face font-lock-constant-face fontified t) 656 662 (fontified t) 662 663 (face (rainbow-delimiters-depth-6-face) fontified t) 663 676 (face font-lock-constant-face fontified t) 676 695 (fontified t) 695 696 (face (rainbow-delimiters-depth-7-face) fontified t) 696 699 (face font-lock-type-face fontified t) 699 700 (fontified t) 700 706 (face font-lock-variable-name-face fontified t) 706 707 (face (rainbow-delimiters-depth-7-face) fontified t) 707 708 (face (rainbow-delimiters-depth-6-face) fontified t) 708 709 (face (rainbow-delimiters-depth-5-face) fontified t) 709 711 (fontified t) 711 712 (fontified t) 712 718 (fontified t) 718 719 (face font-lock-comment-delimiter-face fontified t) 719 721 (face font-lock-comment-delimiter-face fontified t) 721 722 (face font-lock-comment-face fontified t) 722 723 (face font-lock-comment-face fontified t) 723 724 (face font-lock-comment-face fontified t) 724 725 (face font-lock-comment-face fontified t) 725 726 (face font-lock-comment-face fontified t) 726 727 (face font-lock-comment-face fontified t) 727 728 (face font-lock-comment-face fontified t) 728 729 (face font-lock-comment-face fontified t) 729 730 (face font-lock-comment-face fontified t) 730 731 (face font-lock-comment-face fontified t) 731 732 (face font-lock-comment-face fontified t) 732 733 (face font-lock-comment-face fontified t) 733 734 (face font-lock-comment-face fontified t) 734 735 (face font-lock-comment-face fontified t) 735 736 (face font-lock-comment-face fontified t) 736 737 (face font-lock-comment-face fontified t) 737 738 (face font-lock-comment-face fontified t) 738 739 (face font-lock-comment-face fontified t) 739 740 (face font-lock-comment-face fontified t) 740 741 (face font-lock-comment-face fontified t) 741 742 (face font-lock-comment-face fontified t) 742 748 (face font-lock-comment-face fontified t) 748 749 (face font-lock-comment-face fontified t) 749 750 (face font-lock-comment-face fontified t) 750 751 (face font-lock-comment-face fontified t) 751 752 (face font-lock-comment-face fontified t) 752 753 (face font-lock-comment-face fontified t) 753 754 (face font-lock-comment-face fontified t) 754 755 (face font-lock-comment-face fontified t) 755 756 (face font-lock-comment-face fontified t) 756 757 (face font-lock-comment-face fontified t) 757 758 (fontified t) 758 764 (fontified t) 764 765 (face font-lock-keyword-face fontified t) 765 770 (face font-lock-keyword-face fontified t) 770 771 (fontified t) 771 772 (face font-lock-constant-face fontified t) 772 773 (face font-lock-constant-face fontified t) 773 774 (face font-lock-constant-face fontified t) 774 775 (face font-lock-constant-face fontified t) 775 776 (face font-lock-constant-face fontified t) 776 777 (fontified t) 777 778 (fontified t) 778 779 (fontified t) 779 783 (fontified t) 783 784 (face (rainbow-delimiters-depth-4-face) fontified t) 784 785 (fontified t) 785 790 (face font-lock-keyword-face fontified t) 790 791 (fontified t) 791 792 (face (rainbow-delimiters-depth-4-face) fontified t) 792 795 (face font-lock-constant-face fontified t) 795 809 (fontified t) 809 812 (fontified t) 812 813 (face (rainbow-delimiters-depth-4-face) fontified t) 813 814 (fontified t) 814 815 (face (rainbow-delimiters-depth-4-face) fontified t) 815 833 (fontified t) 833 834 (face (rainbow-delimiters-depth-5-face) fontified t) 834 844 (fontified t) 844 845 (face (rainbow-delimiters-depth-6-face) fontified t) 845 846 (face (rainbow-delimiters-depth-6-face) fontified t) 846 848 (fontified t) 848 902 (face font-lock-string-face fontified t) 902 903 (face (rainbow-delimiters-depth-5-face) fontified t) 903 911 (fontified t) 911 917 (face font-lock-keyword-face fontified t) 917 918 (fontified t) 918 923 (face font-lock-constant-face fontified t) 923 929 (fontified t) 929 930 (face (rainbow-delimiters-depth-4-face) fontified t) 930 931 (fontified t) 931 934 (fontified t) 934 935 (fontified t) 935 936 (fontified t)) . 7039) (undo-tree-id2936 . -935) (undo-tree-id2937 . -448) (undo-tree-id2938 . -935) (undo-tree-id2939 . -492) (undo-tree-id2940 . -935) (undo-tree-id2941 . -935) (undo-tree-id2942 . -935) (undo-tree-id2943 . -448) (undo-tree-id2944 . -935) 7974) nil (26236 24844 768541 514000) 0 nil] [nil nil ((#("                std::chrono::seconds time_out=4s) {
    auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
    request->transition.id = transition;

    rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedPtr
      current_client =
      this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[index].c_str());
    
    if (!current_client->wait_for_service(time_out)) {
      RCLCPP_ERROR(this->get_logger(), \"[ERROR]: Service %s is not available.\",
                   current_client->get_service_name());
      return false;
    }

    current_service_done = false;

    try {
      auto future = current_client->async_send_request(request,
						       std::bind(LifeActivator::response_callback(int future)));

      // auto future_result = future.wait();

      return false;

    } catch (std::runtime_error &) {
      RCLCPP_INFO(get_logger(), \"[EMERGENCY ERROR]: Cought a Runtime ERROR***********\");
      return false;
    }" 0 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 27 (face font-lock-constant-face fontified t) 27 29 (fontified t) 29 36 (face font-lock-type-face fontified t) 36 37 (fontified t) 37 45 (face font-lock-variable-name-face fontified t) 45 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 52 (fontified t) 52 56 (fontified t) 56 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t c-type c-decl-id-start face font-lock-keyword-face) 60 61 (fontified t) 61 68 (fontified t face font-lock-variable-name-face) 68 71 (fontified t) 71 74 (fontified t face font-lock-constant-face) 74 87 (fontified t) 87 88 (fontified t face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax) 88 102 (fontified t face font-lock-constant-face) 102 104 (fontified t) 104 107 (fontified t face font-lock-constant-face) 107 109 (fontified t) 109 120 (fontified t face font-lock-constant-face) 120 127 (fontified t) 127 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 130 131 (face (rainbow-delimiters-depth-4-face) fontified t) 131 132 (face (rainbow-delimiters-depth-4-face) fontified t) 132 180 (fontified t) 180 186 (face font-lock-constant-face fontified t) 186 188 (fontified t) 188 194 (face font-lock-constant-face fontified t) 194 195 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 195 209 (face font-lock-constant-face fontified t) 209 211 (fontified t) 211 214 (face font-lock-constant-face fontified t) 214 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 228 230 (fontified t) 230 238 (face font-lock-type-face fontified t) 238 239 (face font-lock-type-face c-type c-decl-id-start fontified t) 239 246 (fontified t) 246 260 (face font-lock-variable-name-face fontified t) 260 269 (fontified t) 269 273 (face font-lock-keyword-face fontified t) 273 278 (fontified t) 278 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 289 303 (face font-lock-constant-face fontified t) 303 305 (fontified t) 305 308 (face font-lock-constant-face fontified t) 308 321 (fontified t) 321 322 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 322 323 (face (rainbow-delimiters-depth-4-face) fontified t) 323 342 (fontified t) 342 343 (face (rainbow-delimiters-depth-5-face) fontified t) 343 348 (fontified t) 348 349 (face (rainbow-delimiters-depth-5-face) fontified t) 349 355 (fontified t) 355 356 (face (rainbow-delimiters-depth-5-face) fontified t) 356 357 (face (rainbow-delimiters-depth-5-face) fontified t) 357 358 (face (rainbow-delimiters-depth-4-face) fontified t) 358 359 (fontified t) 359 369 (fontified t) 369 371 (face font-lock-keyword-face fontified t) 371 372 (fontified t) 372 373 (face (rainbow-delimiters-depth-4-face) fontified t) 373 374 (face font-lock-negation-char-face fontified t) 374 406 (fontified t) 406 407 (face (rainbow-delimiters-depth-5-face) fontified t) 407 412 (fontified t) 412 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-5-face) fontified t) 416 417 (face (rainbow-delimiters-depth-4-face) fontified t) 417 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-4-face) fontified t) 419 426 (fontified t) 426 438 (fontified t) 438 439 (face (rainbow-delimiters-depth-5-face) fontified t) 439 443 (face font-lock-keyword-face fontified t) 443 455 (fontified t) 455 456 (face (rainbow-delimiters-depth-6-face) fontified t) 456 457 (face (rainbow-delimiters-depth-6-face) fontified t) 457 459 (fontified t) 459 496 (face font-lock-string-face fontified t) 496 498 (face font-lock-string-face fontified t) 498 500 (fontified t) 500 551 (fontified t) 551 552 (face (rainbow-delimiters-depth-6-face) fontified t) 552 553 (face (rainbow-delimiters-depth-6-face) fontified t) 553 554 (face (rainbow-delimiters-depth-5-face) fontified t) 554 556 (fontified t) 556 562 (fontified t) 562 568 (face font-lock-keyword-face fontified t) 568 569 (fontified t) 569 574 (face font-lock-constant-face fontified t) 574 580 (fontified t) 580 581 (face (rainbow-delimiters-depth-4-face) fontified t) 581 610 (fontified t) 610 615 (face font-lock-constant-face fontified t) 615 617 (fontified t) 617 622 (fontified t) 622 625 (face font-lock-keyword-face fontified t) 625 626 (fontified t) 626 627 (face (rainbow-delimiters-depth-4-face) fontified t) 627 628 (fontified t) 628 634 (fontified t) 634 637 (face font-lock-keyword-face fontified t) 637 638 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 638 639 (fontified t) 639 645 (face font-lock-variable-name-face fontified t) 645 682 (fontified t) 682 683 (face (rainbow-delimiters-depth-5-face) fontified t) 683 705 (fontified t) 705 708 (face font-lock-constant-face fontified t) 708 714 (fontified t) 714 715 (face (rainbow-delimiters-depth-6-face) fontified t) 715 728 (face font-lock-constant-face fontified t) 728 747 (fontified t) 747 748 (face (rainbow-delimiters-depth-7-face) fontified t) 748 751 (face font-lock-type-face fontified t) 751 752 (fontified t) 752 758 (face font-lock-variable-name-face fontified t) 758 759 (face (rainbow-delimiters-depth-7-face) fontified t) 759 760 (face (rainbow-delimiters-depth-6-face) fontified t) 760 761 (face (rainbow-delimiters-depth-5-face) fontified t) 761 763 (fontified t) 763 764 (fontified t) 764 770 (fontified t) 770 771 (face font-lock-comment-delimiter-face fontified t) 771 773 (face font-lock-comment-delimiter-face fontified t) 773 774 (face font-lock-comment-face fontified t) 774 775 (face font-lock-comment-face fontified t) 775 776 (face font-lock-comment-face fontified t) 776 777 (face font-lock-comment-face fontified t) 777 778 (face font-lock-comment-face fontified t) 778 779 (face font-lock-comment-face fontified t) 779 780 (face font-lock-comment-face fontified t) 780 781 (face font-lock-comment-face fontified t) 781 782 (face font-lock-comment-face fontified t) 782 783 (face font-lock-comment-face fontified t) 783 784 (face font-lock-comment-face fontified t) 784 785 (face font-lock-comment-face fontified t) 785 786 (face font-lock-comment-face fontified t) 786 787 (face font-lock-comment-face fontified t) 787 788 (face font-lock-comment-face fontified t) 788 789 (face font-lock-comment-face fontified t) 789 790 (face font-lock-comment-face fontified t) 790 791 (face font-lock-comment-face fontified t) 791 792 (face font-lock-comment-face fontified t) 792 793 (face font-lock-comment-face fontified t) 793 794 (face font-lock-comment-face fontified t) 794 800 (face font-lock-comment-face fontified t) 800 801 (face font-lock-comment-face fontified t) 801 802 (face font-lock-comment-face fontified t) 802 803 (face font-lock-comment-face fontified t) 803 804 (face font-lock-comment-face fontified t) 804 805 (face font-lock-comment-face fontified t) 805 806 (face font-lock-comment-face fontified t) 806 807 (face font-lock-comment-face fontified t) 807 808 (face font-lock-comment-face fontified t) 808 809 (face font-lock-comment-face fontified t) 809 810 (fontified t) 810 816 (fontified t) 816 817 (face font-lock-keyword-face fontified t) 817 822 (face font-lock-keyword-face fontified t) 822 823 (fontified t) 823 824 (face font-lock-constant-face fontified t) 824 825 (face font-lock-constant-face fontified t) 825 826 (face font-lock-constant-face fontified t) 826 827 (face font-lock-constant-face fontified t) 827 828 (face font-lock-constant-face fontified t) 828 829 (fontified t) 829 830 (fontified t) 830 831 (fontified t) 831 835 (fontified t) 835 836 (face (rainbow-delimiters-depth-4-face) fontified t) 836 837 (fontified t) 837 842 (face font-lock-keyword-face fontified t) 842 843 (fontified t) 843 844 (face (rainbow-delimiters-depth-4-face) fontified t) 844 847 (face font-lock-constant-face fontified t) 847 861 (fontified t) 861 864 (fontified t) 864 865 (face (rainbow-delimiters-depth-4-face) fontified t) 865 866 (fontified t) 866 867 (face (rainbow-delimiters-depth-4-face) fontified t) 867 885 (fontified t) 885 886 (face (rainbow-delimiters-depth-5-face) fontified t) 886 896 (fontified t) 896 897 (face (rainbow-delimiters-depth-6-face) fontified t) 897 898 (face (rainbow-delimiters-depth-6-face) fontified t) 898 900 (fontified t) 900 954 (face font-lock-string-face fontified t) 954 955 (face (rainbow-delimiters-depth-5-face) fontified t) 955 963 (fontified t) 963 969 (face font-lock-keyword-face fontified t) 969 970 (fontified t) 970 975 (face font-lock-constant-face fontified t) 975 981 (fontified t) 981 982 (face (rainbow-delimiters-depth-4-face) fontified t)) . 6987) (undo-tree-id2929 . -981) (undo-tree-id2930 . -500) (undo-tree-id2931 . -981) (undo-tree-id2932 . -544) (undo-tree-id2933 . -981) (undo-tree-id2934 . -961) (undo-tree-id2935 . -981)) ((6987 . 7969)) (26236 24814 413969 126000) 0 nil])
([nil nil ((#("// template<typename FutureT, typename WaitTimeT>
// std::future_status
// wait_for_result(
//   FutureT & future,
//   WaitTimeT time_to_wait)
// {
//   auto end = std::chrono::steady_clock::now() + time_to_wait;
//   std::chrono::milliseconds wait_period(100);
//   std::future_status status = std::future_status::timeout;
//   do {
//     auto now = std::chrono::steady_clock::now();
//     auto time_left = end - now;
//     if (time_left <= std::chrono::seconds(0)) {break;}
//     status = future.wait_for((time_left < wait_period) ? time_left : wait_period);
//   } while (rclcpp::ok() && status != std::future_status::ready);
//   return status;
// }

" 0 1 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 50 (c-in-sws t face font-lock-comment-face fontified t) 50 53 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 53 72 (c-in-sws t face font-lock-comment-face fontified t) 72 75 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 75 92 (c-in-sws t face font-lock-comment-face fontified t) 92 97 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 97 115 (c-in-sws t face font-lock-comment-face fontified t) 115 120 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 120 144 (c-in-sws t face font-lock-comment-face fontified t) 144 147 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 147 149 (c-in-sws t face font-lock-comment-face fontified t) 149 154 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 154 214 (c-in-sws t face font-lock-comment-face fontified t) 214 219 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 219 263 (c-in-sws t face font-lock-comment-face fontified t) 263 267 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 267 268 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 268 325 (c-in-sws t face font-lock-comment-face fontified t) 325 326 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 326 330 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 330 335 (face font-lock-comment-face c-in-sws t fontified t) 335 342 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 342 387 (face font-lock-comment-face c-in-sws t fontified t) 387 394 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 394 422 (face font-lock-comment-face c-in-sws t fontified t) 422 429 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 429 480 (face font-lock-comment-face c-in-sws t fontified t) 480 487 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 487 566 (face font-lock-comment-face c-in-sws t fontified t) 566 571 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 571 634 (face font-lock-comment-face c-in-sws t fontified t) 634 639 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 639 654 (face font-lock-comment-face c-in-sws t fontified t) 654 655 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 655 657 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 657 658 (face font-lock-comment-face c-in-sws t fontified t) 658 659 (c-in-sws t face font-lock-comment-face fontified t) 659 660 (c-in-sws t fontified t)) . 748) (undo-tree-id845 . -659) (undo-tree-id846 . -659) (undo-tree-id847 . -659) (undo-tree-id848 . -659) (undo-tree-id849 . -659) (undo-tree-id851 . -659) (undo-tree-id853 . -50) (undo-tree-id855 . -50) (undo-tree-id857 . -50) (undo-tree-id859 . -72) (undo-tree-id861 . -72) (undo-tree-id863 . -72) (undo-tree-id865 . -72) (undo-tree-id867 . -92) (undo-tree-id869 . -92) (undo-tree-id871 . -92) (undo-tree-id873 . -115) (undo-tree-id875 . -115) (undo-tree-id877 . -115) (undo-tree-id879 . -115) (undo-tree-id881 . -144) (undo-tree-id883 . -144) (undo-tree-id885 . -144) (undo-tree-id887 . -149) (undo-tree-id889 . -149) (undo-tree-id891 . -149) (undo-tree-id893 . -149) (undo-tree-id895 . -214) (undo-tree-id897 . -214) (undo-tree-id899 . -214) (undo-tree-id901 . -263) (undo-tree-id903 . -263) (undo-tree-id905 . -263) (undo-tree-id907 . -263) (undo-tree-id909 . -325) (undo-tree-id911 . -325) (undo-tree-id913 . -325) (undo-tree-id915 . -335) (undo-tree-id917 . -335) (undo-tree-id919 . -335) (undo-tree-id921 . -335) (undo-tree-id923 . -387) (undo-tree-id925 . -387) (undo-tree-id927 . -387) (undo-tree-id929 . -422) (undo-tree-id931 . -422) (undo-tree-id933 . -422) (undo-tree-id935 . -422) (undo-tree-id937 . -480) (undo-tree-id939 . -480) (undo-tree-id941 . -480) (undo-tree-id943 . -480) (undo-tree-id945 . -566) (undo-tree-id947 . -566) (undo-tree-id949 . -566) (undo-tree-id951 . -634) (undo-tree-id953 . -634) (undo-tree-id955 . -634) (undo-tree-id957 . -634) (undo-tree-id959 . -654) (undo-tree-id961 . -654) (undo-tree-id963 . -654) (undo-tree-id965 . -659) (undo-tree-id967 . -659) (undo-tree-id969 . -659) (undo-tree-id971 . -659) (undo-tree-id973 . -660) (undo-tree-id975 . -660) (undo-tree-id977 . -660) (undo-tree-id979 . -660) (undo-tree-id981 . -660) (undo-tree-id983 . -660) (undo-tree-id985 . -660) (undo-tree-id987 . -660) (undo-tree-id989 . -660) (undo-tree-id991 . -660) (undo-tree-id993 . -660) (undo-tree-id995 . -659) (undo-tree-id997 . -659) (undo-tree-id999 . -659) (undo-tree-id1001 . -659) (undo-tree-id1003 . -659) (undo-tree-id1005 . -659) (undo-tree-id1007 . -659) (undo-tree-id1009 . -659) (undo-tree-id1011 . -659) (undo-tree-id1013 . -659) (undo-tree-id1015 . -659) (undo-tree-id1017 . -659) (undo-tree-id1019 . -659) (undo-tree-id1021 . -659) (undo-tree-id1023 . -659) (undo-tree-id1025 . -659) (undo-tree-id1027 . -659) (undo-tree-id1029 . -659) (undo-tree-id1031 . -660) 1407 (t 26236 23447 801128 392000)) ((748 . 1408)) (26236 24791 610590 496000) 0 nil])
([nil nil ((7769 . 7775) (#("      " 0 6 (fontified nil)) . 7768) (undo-tree-id2442 . -6) (undo-tree-id2444 . -6) (undo-tree-id2446 . -6) (undo-tree-id2448 . -6) (undo-tree-id2450 . -6) (undo-tree-id2452 . -6) (undo-tree-id2454 . -6) (undo-tree-id2456 . -6) (undo-tree-id2458 . -6) (undo-tree-id2460 . -6) (undo-tree-id2462 . -6) (undo-tree-id2464 . -6) (undo-tree-id2466 . -6) (undo-tree-id2468 . -6) (7768 . 7775) (#("      " 0 6 (fontified nil)) . 7767) (undo-tree-id2471 . -6) (undo-tree-id2473 . -6) (undo-tree-id2475 . -6) (undo-tree-id2477 . -6) (undo-tree-id2479 . -6) (undo-tree-id2481 . -6) (undo-tree-id2483 . -6) (undo-tree-id2485 . -6) (undo-tree-id2487 . -6) (undo-tree-id2489 . -6) (undo-tree-id2491 . -6) (undo-tree-id2493 . -6) (undo-tree-id2495 . -6) (undo-tree-id2497 . -6) (undo-tree-id2499 . -6) (undo-tree-id2501 . -6) (undo-tree-id2503 . -6) (undo-tree-id2505 . -6) (7773 . 7774) (7767 . 7773)) ((#("      " 0 6 (fontified nil)) . 7767) (undo-tree-id626 . -6) (undo-tree-id627 . -6) (undo-tree-id628 . -6) (undo-tree-id629 . -6) (undo-tree-id630 . -6) (undo-tree-id631 . -6) (undo-tree-id632 . -6) (undo-tree-id633 . -6) (undo-tree-id634 . -6) (undo-tree-id635 . -6) (undo-tree-id636 . -6) (undo-tree-id637 . -6) (undo-tree-id638 . -6) (undo-tree-id639 . -6) (undo-tree-id640 . -6) (undo-tree-id641 . -6) (undo-tree-id642 . -6) (undo-tree-id643 . -6) (undo-tree-id644 . -6) (undo-tree-id645 . -6) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -6) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (#("
" 0 1 (fontified nil)) . 7773) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (7767 . 7773) (#("      
" 0 6 (fontified nil) 6 7 (fontified nil)) . 7768) (7768 . 7774) (#("      " 0 6 (fontified t)) . 7769)) (26236 20710 504026 711000) 0 nil])
([nil nil ((apply 51 748 1357 undo--wrap-and-run-primitive-undo 748 1357 ((#("// " 0 1 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1354) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1337) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1272) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1189) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1134) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1102) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1053) (#("// " 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -1046) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -987) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -941) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -879) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -877) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -851) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -831) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -814) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -795) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -748) 1408))) nil (26236 24844 768500 735000) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified t)) . -7005) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) 7007 (7005 . 7007) (#("  " 0 2 (fontified nil)) . 7004) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (7004 . 7007) (#("  " 0 2 (fontified nil)) . 7003) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (7002 . 7006) (t 26236 23455 33657 613000)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 7002) (undo-tree-id2810 . -4) (undo-tree-id2811 . -4) (undo-tree-id2812 . -4) (undo-tree-id2813 . -4) (undo-tree-id2814 . -4) (undo-tree-id2815 . -4) (undo-tree-id2816 . -4) (undo-tree-id2817 . -4) (undo-tree-id2818 . -4) (undo-tree-id2819 . -4) (undo-tree-id2820 . -4) (undo-tree-id2821 . -4) (undo-tree-id2822 . -4) (undo-tree-id2823 . -4) (undo-tree-id2824 . -4) (undo-tree-id2825 . -4) (undo-tree-id2826 . -4) (undo-tree-id2827 . -4) (undo-tree-id2828 . -4) (undo-tree-id2829 . -4) (undo-tree-id2830 . -4) (undo-tree-id2831 . -4) (undo-tree-id2832 . -4) (undo-tree-id2833 . -4) (undo-tree-id2834 . -4) (undo-tree-id2835 . -4) (7003 . 7005) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 7004) (undo-tree-id2836 . -3) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (7004 . 7006) (#("  " 0 2 (fontified nil)) . 7005) (7005 . 7007)) (26236 24791 592018 407000) 0 nil])
([nil nil ((7785 . 7787) (7781 . 7785) (7777 . 7781) (7774 . 7777) (#("t" 0 1 (fontified t)) . -7774) (undo-tree-id2434 . -1) (#("u" 0 1 (fontified t)) . -7775) (undo-tree-id2437 . -1) 7776 (#("t" 0 1 (fontified t)) . -7776) (undo-tree-id2440 . -1) 7777 (7775 . 7777) (7774 . 7775) (7768 . 7774)) ((#("      " 0 6 (fontified nil)) . 7768) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (undo-tree-id533 . -6) (undo-tree-id534 . -6) (undo-tree-id535 . -6) (undo-tree-id536 . -6) (undo-tree-id537 . -6) (undo-tree-id538 . -6) (undo-tree-id539 . -6) (undo-tree-id540 . -6) (undo-tree-id541 . -6) (#("t" 0 1 (fontified nil)) . 7774) (#("ut" 0 1 (fontified nil) 1 2 (fontified nil)) . 7775) (7774 . 7777) (#("fut" 0 3 (fontified nil)) . 7774) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (#("ure." 0 4 (fontified nil)) . 7777) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (#("wait" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7781) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7785) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -2) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1)) (26236 20710 435060 616000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1359) (undo-tree-id2945 . -2) (undo-tree-id2946 . -2) 1361 (1359 . 1361) (#("  " 0 2 (fontified nil)) . 1358) (undo-tree-id2947 . -2) (undo-tree-id2948 . -2) (1358 . 1361) (#("  " 0 2 (fontified nil)) . 1357) (undo-tree-id2949 . -2) (undo-tree-id2950 . -2) (1356 . 1360) (t 26236 24844 808619 483000)) nil (26236 24848 354656 189000) 0 nil])
([nil nil ((7006 . 7024) (7004 . 7006) (t 26236 23495 536266 749000)) ((#("  " 0 2 (fontified nil)) . 7004) (undo-tree-id2770 . -2) (undo-tree-id2771 . -2) (undo-tree-id2772 . -2) (undo-tree-id2773 . -2) (undo-tree-id2774 . -2) (undo-tree-id2775 . -2) (undo-tree-id2776 . -2) (undo-tree-id2777 . -2) (undo-tree-id2778 . -2) (undo-tree-id2779 . -2) (undo-tree-id2780 . -2) (undo-tree-id2781 . -2) (undo-tree-id2782 . -2) (undo-tree-id2783 . -2) (undo-tree-id2784 . -2) (undo-tree-id2785 . -2) (undo-tree-id2786 . -2) (undo-tree-id2787 . -2) (undo-tree-id2788 . -2) (undo-tree-id2789 . -2) (#("voidn change_state" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (face font-lock-variable-name-face fontified nil) 9 10 (face font-lock-variable-name-face fontified nil) 10 12 (face font-lock-variable-name-face fontified nil) 12 13 (face font-lock-variable-name-face fontified nil) 13 14 (face font-lock-variable-name-face fontified nil) 14 15 (face font-lock-variable-name-face fontified nil) 15 16 (face font-lock-variable-name-face fontified nil) 16 17 (face font-lock-variable-name-face fontified nil) 17 18 (face font-lock-variable-name-face fontified nil)) . 7006) (undo-tree-id2790 . -18) (undo-tree-id2791 . -18) (undo-tree-id2792 . -18) (undo-tree-id2793 . -18) (undo-tree-id2794 . -18) (undo-tree-id2795 . -18) (undo-tree-id2796 . -18) (undo-tree-id2797 . -18) (undo-tree-id2798 . -18) (undo-tree-id2799 . -18) (undo-tree-id2800 . -18) (undo-tree-id2801 . -18) (undo-tree-id2802 . -18) (undo-tree-id2803 . -18) (undo-tree-id2804 . -18) (undo-tree-id2805 . -18) (undo-tree-id2806 . -18) (undo-tree-id2807 . -18) (undo-tree-id2808 . -18) (undo-tree-id2809 . -4)) (26236 24791 586835 314000) 0 nil])
([nil nil ((7787 . 7788)) ((#(";" 0 1 (fontified t)) . 7787)) (26236 20710 391928 307000) 0 nil])
([nil nil ((#("    // for (long unsigned int i; i < get_state_topics.size(); i++) {
    //   auto topush = this->create_client<lifecycle_msgs::srv::GetState>(get_state_topics[i].c_str());

    //   state_clients.push_back(topush);
    // }

    // for (long unsigned int i; i < change_state_topics.size(); i++) {
    //   auto topush = this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[i].c_str());

    //   change_clients.push_back(topush);
    // }

" 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-is-sws t c-in-sws t) 4 5 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 5 7 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 7 11 (face font-lock-comment-face fontified t c-in-sws t) 11 17 (face font-lock-comment-face fontified t c-in-sws t) 17 30 (face font-lock-comment-face fontified t c-in-sws t) 30 68 (face font-lock-comment-face fontified t c-in-sws t) 68 69 (face font-lock-comment-face fontified t c-in-sws t) 69 70 (fontified t c-in-sws t) 70 73 (fontified t c-in-sws t) 73 74 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 74 78 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 78 90 (face font-lock-comment-face fontified t c-in-sws t) 90 91 (face font-lock-comment-face fontified t c-in-sws t) 91 92 (face font-lock-comment-face fontified t c-in-sws t) 92 173 (face font-lock-comment-face fontified t c-in-sws t) 173 174 (fontified t c-in-sws t) 174 176 (fontified t c-in-sws t) 176 177 (fontified t c-in-sws t) 177 178 (fontified t c-in-sws t) 178 183 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 183 209 (face font-lock-comment-face fontified t c-in-sws t) 209 215 (face font-lock-comment-face fontified t c-in-sws t) 215 216 (face font-lock-comment-face fontified t c-in-sws t) 216 217 (fontified t c-in-sws t) 217 220 (fontified t c-in-sws t) 220 221 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 221 223 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 223 225 (face font-lock-comment-face fontified t c-in-sws t) 225 230 (fontified t c-in-sws t) 230 233 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 233 298 (face font-lock-comment-face fontified t c-in-sws t) 298 302 (fontified t c-in-sws t) 302 303 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 303 307 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 307 319 (face font-lock-comment-face fontified t c-in-sws t) 319 320 (face font-lock-comment-face fontified t c-in-sws t) 320 321 (face font-lock-comment-face fontified t c-in-sws t) 321 408 (face font-lock-comment-face fontified t c-in-sws t) 408 409 (fontified t c-in-sws t) 409 411 (fontified t c-in-sws t) 411 412 (fontified t c-in-sws t) 412 413 (fontified t c-in-sws t) 413 414 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 414 418 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 418 452 (face font-lock-comment-face fontified t c-in-sws t) 452 456 (fontified t c-in-sws t) 456 457 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 457 459 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 459 460 (face font-lock-comment-face fontified t c-in-sws t) 460 461 (face font-lock-comment-face fontified t c-in-sws t) 461 462 (fontified t c-in-sws t)) . 2918) (undo-tree-id3000 . -461) (undo-tree-id3001 . -461) (undo-tree-id3002 . -461) (undo-tree-id3003 . -461) (undo-tree-id3004 . -461) (undo-tree-id3005 . -462) (undo-tree-id3006 . -461) (undo-tree-id3007 . -452) (undo-tree-id3008 . -452) (undo-tree-id3009 . -452) (undo-tree-id3010 . -452) (undo-tree-id3011 . -452) (undo-tree-id3012 . -409) (undo-tree-id3013 . -409) (undo-tree-id3014 . -409) (undo-tree-id3015 . -409) (undo-tree-id3016 . -409) (undo-tree-id3017 . -408) (undo-tree-id3018 . -408) (undo-tree-id3019 . -408) (undo-tree-id3020 . -408) (undo-tree-id3021 . -408) (undo-tree-id3022 . -298) (undo-tree-id3023 . -298) (undo-tree-id3024 . -298) (undo-tree-id3025 . -298) (undo-tree-id3026 . -298) (undo-tree-id3027 . -298) (undo-tree-id3028 . -298) (undo-tree-id3029 . -298) (undo-tree-id3030 . -298) (undo-tree-id3031 . -298) (undo-tree-id3032 . -226) (undo-tree-id3033 . -226) (undo-tree-id3034 . -226) (undo-tree-id3035 . -226) (undo-tree-id3036 . -226) (undo-tree-id3037 . -225) (undo-tree-id3038 . -225) (undo-tree-id3039 . -225) (undo-tree-id3040 . -225) (undo-tree-id3041 . -225) (undo-tree-id3042 . -216) (undo-tree-id3043 . -216) (undo-tree-id3044 . -216) (undo-tree-id3045 . -216) (undo-tree-id3046 . -216) (undo-tree-id3047 . -174) (undo-tree-id3048 . -174) (undo-tree-id3049 . -174) (undo-tree-id3050 . -174) (undo-tree-id3051 . -174) (undo-tree-id3052 . -173) (undo-tree-id3053 . -173) (undo-tree-id3054 . -173) (undo-tree-id3055 . -173) (undo-tree-id3056 . -173) (undo-tree-id3057 . -69) (undo-tree-id3058 . -69) (undo-tree-id3059 . -69) (undo-tree-id3060 . -69) (undo-tree-id3061 . -69) (undo-tree-id3062 . -69) (undo-tree-id3063 . -69) (undo-tree-id3064 . -69) (undo-tree-id3065 . -69) (undo-tree-id3066 . -69) (undo-tree-id3067 . -69) (undo-tree-id3068 . -69) (undo-tree-id3069 . -69) (undo-tree-id3070 . -69) (undo-tree-id3071 . -69) (undo-tree-id3072 . -462) (t 26236 24848 420696 807000)) nil (26236 24938 672528 306000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 7010) (undo-tree-id1039 . -1)) ((7010 . 7011)) (26236 24791 576539 867000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6638 . 6639) (#("
" 0 1 (fontified nil)) . -6697) (6632 . 6698) (t 26236 8927 811541 480000)) ((#("
      RCLCPP_INFO(this->get_logger(), \"********READYYY*******\");
" 0 1 (fontified t) 1 6 (fontified nil) 6 7 (fontified nil rear-nonsticky nil) 7 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil) 19 23 (face font-lock-keyword-face fontified nil) 23 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-5-face) fontified nil) 36 37 (face (rainbow-delimiters-depth-5-face) fontified nil) 37 38 (fontified nil) 38 39 (fontified nil) 39 40 (face font-lock-string-face fontified nil) 40 41 (face font-lock-string-face fontified nil) 41 42 (face font-lock-string-face fontified nil) 42 43 (face font-lock-string-face fontified nil) 43 44 (face font-lock-string-face fontified nil) 44 45 (face font-lock-string-face fontified nil) 45 46 (face font-lock-string-face fontified nil) 46 47 (face font-lock-string-face fontified nil) 47 48 (face font-lock-string-face fontified nil) 48 49 (face font-lock-string-face fontified nil) 49 50 (face font-lock-string-face fontified nil) 50 51 (face font-lock-string-face fontified nil) 51 52 (face font-lock-string-face fontified nil) 52 53 (face font-lock-string-face fontified nil) 53 54 (face font-lock-string-face fontified nil) 54 55 (face font-lock-string-face fontified nil) 55 56 (face font-lock-string-face fontified nil) 56 57 (face font-lock-string-face fontified nil) 57 58 (face font-lock-string-face fontified nil) 58 59 (face font-lock-string-face fontified nil) 59 60 (face font-lock-string-face fontified nil) 60 61 (face font-lock-string-face fontified nil) 61 62 (face font-lock-string-face fontified nil) 62 63 (face font-lock-string-face fontified nil) 63 64 (face (rainbow-delimiters-depth-4-face) fontified nil) 64 65 (fontified nil) 65 66 (fontified nil)) . 6632) (undo-tree-id496 . -7) (undo-tree-id497 . -38) (undo-tree-id498 . -1) (undo-tree-id499 . -38) (undo-tree-id500 . -38) (undo-tree-id501 . -38) (undo-tree-id502 . -38) (undo-tree-id503 . -38) (undo-tree-id504 . -38) (undo-tree-id505 . -38) (undo-tree-id506 . -38) (undo-tree-id507 . -38) (undo-tree-id508 . -1) (undo-tree-id509 . -38) (undo-tree-id510 . -1) (undo-tree-id511 . -7) (undo-tree-id512 . -7) (undo-tree-id513 . -7) (undo-tree-id514 . -7) (undo-tree-id515 . -7) (undo-tree-id516 . -7) (undo-tree-id517 . -7) (undo-tree-id518 . -7) (undo-tree-id519 . -7) (undo-tree-id520 . -7) (6697 . 6698) (nil rear-nonsticky t 6638 . 6639)) (26236 20710 370246 246000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2451) (undo-tree-id2951 . -4) (undo-tree-id2952 . -4) (undo-tree-id2953 . -4) (undo-tree-id2954 . -4) (undo-tree-id2955 . -4) (undo-tree-id2956 . -4) (undo-tree-id2957 . -4) (undo-tree-id2958 . -4) (undo-tree-id2959 . -4) (undo-tree-id2960 . -4) (undo-tree-id2961 . -4) (undo-tree-id2962 . -4) (undo-tree-id2963 . -4) (undo-tree-id2964 . -4) (undo-tree-id2965 . -4) (undo-tree-id2966 . -4) (undo-tree-id2967 . -4) (undo-tree-id2968 . -4) (undo-tree-id2969 . -4) (undo-tree-id2970 . -4) (undo-tree-id2971 . -4) (undo-tree-id2972 . -4) (undo-tree-id2973 . -4) (undo-tree-id2974 . -4) 2455 (2451 . 2455) (#("    " 0 4 (fontified nil)) . 2450) (undo-tree-id2975 . -4) (undo-tree-id2976 . -4) (undo-tree-id2977 . -4) (undo-tree-id2978 . -4) (undo-tree-id2979 . -4) (undo-tree-id2980 . -4) (undo-tree-id2981 . -4) (undo-tree-id2982 . -4) (undo-tree-id2983 . -4) (undo-tree-id2984 . -4) (undo-tree-id2985 . -4) (undo-tree-id2986 . -4) (undo-tree-id2987 . -4) (undo-tree-id2988 . -4) (undo-tree-id2989 . -4) (undo-tree-id2990 . -4) (undo-tree-id2991 . -4) (2450 . 2455) (#("    " 0 4 (fontified nil)) . 2449) (undo-tree-id2992 . -4) (undo-tree-id2993 . -4) (undo-tree-id2994 . -4) (undo-tree-id2995 . -4) (undo-tree-id2996 . -4) (undo-tree-id2997 . -4) (undo-tree-id2998 . -4) (undo-tree-id2999 . -4) (2448 . 2454)) nil (26236 24938 672389 133000) 0 nil])
([nil nil ((7023 . 7025)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 7023) (undo-tree-id2751 . -2) (undo-tree-id2752 . -2) (undo-tree-id2753 . -2) (undo-tree-id2754 . -2) (undo-tree-id2755 . -2) (undo-tree-id2756 . -2) (undo-tree-id2757 . -2) (undo-tree-id2758 . -2) (undo-tree-id2759 . -2) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -2) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) (undo-tree-id2767 . -1) (undo-tree-id2768 . -2) (undo-tree-id2769 . -1)) (26236 24791 390464 892000) 0 nil])
([nil nil ((6633 . 6637) (#("      " 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -6633) (undo-tree-id3148 . -6) (undo-tree-id3150 . -6) (undo-tree-id3152 . -6) (undo-tree-id3154 . -6) (undo-tree-id3156 . -6) (undo-tree-id3158 . -6) (undo-tree-id3160 . -6) (undo-tree-id3162 . -6) (undo-tree-id3164 . -6) (undo-tree-id3166 . -6) (undo-tree-id3168 . -6) (undo-tree-id3170 . -6) (undo-tree-id3172 . -6) (undo-tree-id3174 . -6) (undo-tree-id3176 . -6) (undo-tree-id3178 . -6) (undo-tree-id3180 . -6) (undo-tree-id3182 . -6) (undo-tree-id3184 . -6) (undo-tree-id3186 . -6) (undo-tree-id3188 . -6) (undo-tree-id3190 . -6) (undo-tree-id3192 . -6) (undo-tree-id3194 . -6) (undo-tree-id3196 . -6) (undo-tree-id3198 . -6) (undo-tree-id3200 . -6) (undo-tree-id3202 . -6) (undo-tree-id3204 . -6) (undo-tree-id3206 . -6) (undo-tree-id3208 . -6) (undo-tree-id3210 . -6) (undo-tree-id3212 . -6) (undo-tree-id3214 . -6) (undo-tree-id3216 . -6) (undo-tree-id3218 . -6) (undo-tree-id3220 . -6) (undo-tree-id3222 . -6) 6639) ((6633 . 6639) (#("    " 0 3 (fontified nil) 3 4 (fontified nil)) . 6633)) (26236 20710 366457 56000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2912 . 2913) (nil fontified nil 2456 . 2913) (nil fontified nil 2455 . 2456) (nil fontified nil 2451 . 2455) (2451 . 2913)) nil (26236 24938 672158 697000) 0 nil])
([nil nil ((7028 . 7032) (7027 . 7031) (7026 . 7028) (7025 . 7026)) ((#(" " 0 1 (fontified nil)) . 7025) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (#("{}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 7026) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (#("

  " 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified t)) . 7027) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (#("    " 0 4 (fontified t)) . 7028) (undo-tree-id2749 . -3) (undo-tree-id2750 . -3)) (26236 24791 376310 417000) 0 nil])
([nil nil ((#("\"********" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face)) . 6669) (undo-tree-id3146 . -9)) ((6669 . 6678) (nil syntax-table nil 6686 . 6687) (nil syntax-table (1) 6683 . 6684)) (26236 20710 363602 199000) 0 nil])
([nil nil ((#("  bool current_service_done = false;
  
  void response_callback(rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedFuture future) {

    auto status = future.wait_for(std::chrono::milliseconds(1000));

    if (status = std::future_status::ready) {
      RCLCPP_INFO(this->get_logger(), \"********READYYY*******\");
      RCLCPP_INFO(this->get_logger(), \"SUCESS: %i\", future.get()->sucess);
    }

    

    
  };

" 0 2 (fontified t c-in-sws t c-is-sws t) 2 3 (face font-lock-type-face fontified t c-is-sws t) 3 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 27 (face font-lock-variable-name-face fontified t) 27 30 (fontified t) 30 35 (face font-lock-constant-face fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 39 (fontified t) 39 40 (fontified t) 40 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face c-type c-decl-id-start fontified t) 46 47 (fontified t) 47 64 (face font-lock-function-name-face fontified t) 64 65 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 65 71 (face font-lock-constant-face fontified t) 71 73 (fontified t) 73 79 (face font-lock-constant-face fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 80 94 (face font-lock-constant-face fontified t) 94 96 (fontified t) 96 99 (face font-lock-constant-face fontified t) 99 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 113 115 (fontified t) 115 127 (face font-lock-type-face fontified t) 127 128 (fontified t) 128 134 (face font-lock-variable-name-face fontified t) 134 135 (face (rainbow-delimiters-depth-3-face) fontified t) 135 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-3-face) fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 147 148 (fontified t) 148 154 (face font-lock-variable-name-face fontified t) 154 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-4-face) fontified t) 173 174 (face font-lock-constant-face fontified t) 174 175 (face font-lock-constant-face fontified t) 175 176 (face font-lock-constant-face fontified t) 176 177 (fontified t) 177 178 (fontified t) 178 184 (face font-lock-constant-face fontified t) 184 185 (fontified t) 185 186 (fontified t) 186 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-5-face) fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 202 (fontified t) 202 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-5-face) fontified t) 204 205 (face (rainbow-delimiters-depth-4-face) fontified t) 205 207 (fontified t) 207 208 (fontified t) 208 212 (fontified t) 212 214 (face font-lock-keyword-face fontified t) 214 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-4-face) fontified t) 216 224 (fontified t) 224 225 (fontified t) 225 228 (face font-lock-constant-face fontified t) 228 230 (fontified t) 230 243 (face font-lock-constant-face fontified t) 243 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-4-face) fontified t) 251 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-4-face) fontified t) 253 254 (fontified t) 254 258 (fontified t) 258 260 (fontified t) 260 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-5-face) fontified t) 272 276 (face font-lock-keyword-face fontified t) 276 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-6-face) fontified t) 289 290 (face (rainbow-delimiters-depth-6-face) fontified t) 290 292 (fontified t) 292 297 (face font-lock-string-face fontified t) 297 316 (face font-lock-string-face fontified t) 316 317 (face (rainbow-delimiters-depth-5-face) fontified t) 317 319 (fontified t) 319 323 (fontified t) 323 325 (fontified t) 325 328 (fontified t) 328 333 (fontified t) 333 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-5-face) fontified t) 337 341 (face font-lock-keyword-face fontified t) 341 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-6-face) fontified t) 354 355 (face (rainbow-delimiters-depth-6-face) fontified t) 355 357 (fontified t) 357 369 (face font-lock-string-face fontified t) 369 381 (fontified t) 381 382 (face (rainbow-delimiters-depth-6-face) fontified t) 382 383 (face (rainbow-delimiters-depth-6-face) fontified t) 383 388 (fontified t) 388 391 (fontified t) 391 392 (face (rainbow-delimiters-depth-5-face) fontified t) 392 393 (fontified t) 393 394 (fontified t) 394 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-4-face) fontified t) 399 400 (fontified t) 400 401 (fontified t) 401 402 (fontified t) 402 404 (fontified t) 404 405 (fontified t) 405 406 (fontified t) 406 407 (fontified t) 407 411 (fontified t) 411 412 (fontified t) 412 414 (fontified t) 414 415 (face (rainbow-delimiters-depth-3-face) fontified t) 415 416 (fontified t) 416 417 (fontified t) 417 418 (fontified t)) . 6449) (undo-tree-id3073 . -417) (undo-tree-id3074 . -417) (undo-tree-id3075 . -417) (undo-tree-id3076 . -418) (undo-tree-id3077 . -417) (undo-tree-id3078 . -417) 6866 (t 26236 24938 710447 579000)) nil (26236 24978 631245 931000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -751) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) 753 (751 . 753) (#("  " 0 2 (fontified nil)) . 750) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (750 . 753) (#("  " 0 2 (fontified nil)) . 749) (undo-tree-id1126 . -2) (749 . 752) (#("  " 0 2 (fontified nil)) . 748) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (748 . 751) (#("  " 0 2 (fontified nil)) . 747) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (746 . 750) (t 26236 23509 953061 644000)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 746) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (undo-tree-id2699 . -4) (undo-tree-id2700 . -4) (undo-tree-id2701 . -4) (undo-tree-id2702 . -4) (undo-tree-id2703 . -4) (undo-tree-id2704 . -4) (undo-tree-id2705 . -4) (undo-tree-id2706 . -4) (747 . 749) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 748) (undo-tree-id2707 . -3) (undo-tree-id2708 . -3) (undo-tree-id2709 . -3) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) (undo-tree-id2714 . -3) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) (748 . 750) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 749) (749 . 751) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 750) (750 . 752) (#("  " 0 2 (fontified nil)) . 751) (751 . 753)) (26236 24791 322579 147000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6668) (undo-tree-id3081 . -1) (undo-tree-id3083 . -1) (undo-tree-id3085 . -1) (undo-tree-id3087 . -1) (undo-tree-id3089 . -1) (undo-tree-id3091 . -1) (undo-tree-id3093 . -1) (undo-tree-id3095 . -1) (undo-tree-id3097 . -1) (undo-tree-id3099 . -1) (undo-tree-id3101 . -1) (undo-tree-id3103 . -1) (undo-tree-id3105 . -1) (undo-tree-id3107 . -1) (undo-tree-id3109 . -1) (undo-tree-id3111 . -1) (undo-tree-id3113 . -1) (undo-tree-id3115 . -1) (undo-tree-id3117 . -1) (undo-tree-id3119 . -1) (undo-tree-id3121 . -1) (undo-tree-id3123 . -1) (undo-tree-id3125 . -1) (undo-tree-id3127 . -1) (undo-tree-id3129 . -1) (undo-tree-id3131 . -1) (undo-tree-id3133 . -1) (undo-tree-id3135 . -1) (undo-tree-id3137 . -1) (undo-tree-id3139 . -1) (undo-tree-id3141 . -1) (undo-tree-id3143 . -1) (nil syntax-table nil 6686 . 6687) (nil syntax-table (1) 6683 . 6684)) ((nil syntax-table (1) 6683 . 6684) (nil syntax-table nil 6686 . 6687) (6668 . 6669) (nil syntax-table nil 6685 . 6686) (nil syntax-table (1) 6682 . 6683)) (26236 20710 360121 239000) 0 nil])
([nil nil ((apply -21 6582 6898 undo--wrap-and-run-primitive-undo 6582 6898 ((6892 . 6895) (6882 . 6885) (6797 . 6800) (6697 . 6700) (6621 . 6624) (6603 . 6606) (6584 . 6587) 6877))) nil (26236 24978 631212 872000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3040 . 3041) (nil fontified nil 2966 . 3041) (nil fontified nil 2965 . 2966) (nil category c->-as-paren-syntax 2965 . 2966) (nil fontified nil 2933 . 2965) (nil fontified nil 2932 . 2933) (nil category c-<-as-paren-syntax 2932 . 2933) (nil fontified nil 2553 . 2932) (nil fontified nil 2552 . 2553) (nil category c->-as-paren-syntax 2552 . 2553) (nil fontified nil 2551 . 2552) (nil category c->-as-paren-syntax 2551 . 2552) (nil fontified nil 2550 . 2551) (nil category c->-as-paren-syntax 2550 . 2551) (nil fontified nil 2546 . 2550) (nil fontified nil 2545 . 2546) (nil category c-<-as-paren-syntax 2545 . 2546) (nil fontified nil 2531 . 2545) (nil fontified nil 2530 . 2531) (nil category c-<-as-paren-syntax 2530 . 2531) (nil fontified nil 2488 . 2530) (nil fontified nil 2487 . 2488) (nil category c-<-as-paren-syntax 2487 . 2488) (nil fontified nil 2265 . 2487) (nil fontified nil 2264 . 2265) (nil category c->-as-paren-syntax 2264 . 2265) (nil fontified nil 2232 . 2264) (nil fontified nil 2231 . 2232) (nil category c-<-as-paren-syntax 2231 . 2232) (nil fontified nil 1921 . 2231) (nil fontified nil 1920 . 1921) (nil category c->-as-paren-syntax 1920 . 1921) (nil fontified nil 1879 . 1920) (nil fontified nil 1878 . 1879) (nil category c-<-as-paren-syntax 1878 . 1879) (nil fontified nil 992 . 1878) (nil fontified nil 991 . 992) (nil category c->-as-paren-syntax 991 . 992) (nil fontified nil 959 . 991) (nil fontified nil 958 . 959) (nil category c-<-as-paren-syntax 958 . 959) (nil fontified nil 749 . 958) (749 . 3041)) ((#("
class ServiceNode: public rclcpp::Node {

public:
  ServiceNode(std::string nodename,
	      std::string service_name,
	      char t)
    : rclcpp::Node(nodename.c_str())
  {

    client = this->create_client<lifecycle_msgs::srv::ChangeState>(service_name);
    timer = this->create_wall_timer(std::chrono::milliseconds(1000),
				    std::bind(&ServiceNode::timer_callback, this));

    tra = t;
  }


  bool first_take = true;

  bool service_result = false;
private:

  void timer_callback() {
 
    RCLCPP_INFO(
		this->get_logger(),
		\"*********HITMAN********\");
    
    if (!first_take) {
        RCLCPP_INFO(
		    this->get_logger(),
		    \"*********SHUTTING DOWN********\");
	

	//      rclcpp::shutdown();
      return;
    }


    while (!client->wait_for_service(std::chrono::milliseconds(1000))) {
      if (rclcpp::ok()) {
        RCLCPP_INFO(
		     this->get_logger(),
		     \"Client interrupted while waiting for service. Terminating...\");
        return;
      }
      RCLCPP_INFO(this->get_logger(),
                  \"Service Unavailable. Waiting for Service...\");
    }


    auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();

    request->transition.id = lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE;

    auto request_future = client->async_send_request(request,
						     std::bind(&ServiceNode::request_callback,
							       this,
							       std::placeholders::_1));


  }


  void request_callback(rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedFuture future) {

    RCLCPP_INFO(this->get_logger(),
		\"CALLBACK CALLED\");

    auto status = future.wait_for(std::chrono::milliseconds(1000));

    if (status == std::future_status::ready) {
      std::shared_ptr<lifecycle_msgs::srv::ChangeState_Response_<std::allocator<void>>> data = future.get();
      RCLCPP_INFO(this->get_logger(),
		  \"Result Success: %i\",
		  data->success);

      // if (data->success > 0) this->service_result = true ;

      this->service_result = (data->success > 0)? true : false ;

      this->first_take = false;

    } else {
      RCLCPP_INFO(this->get_logger(),
		  \"Service In-Progress...\");

    }
  }

  rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedPtr client;
  rclcpp::TimerBase::SharedPtr timer;
  char tra;

};

" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 6 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 18 (face font-lock-type-face fontified nil) 18 20 (fontified nil) 20 26 (face font-lock-keyword-face fontified nil) 26 27 (fontified nil) 27 33 (face font-lock-constant-face fontified nil) 33 35 (fontified nil) 35 39 (face font-lock-type-face fontified nil) 39 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-2-face) fontified nil) 41 42 (fontified nil) 42 43 (fontified nil) 43 49 (face font-lock-keyword-face fontified nil) 49 50 (c-type c-decl-id-start fontified nil) 50 53 (fontified nil) 53 64 (face font-lock-function-name-face fontified nil) 64 65 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified nil) 65 68 (face font-lock-constant-face fontified nil) 68 70 (fontified nil) 70 76 (face font-lock-type-face fontified nil) 76 77 (fontified nil) 77 85 (face font-lock-variable-name-face fontified nil) 85 86 (c-type c-decl-arg-start fontified nil) 86 93 (fontified nil) 93 94 (fontified nil) 94 97 (face font-lock-constant-face fontified nil) 97 99 (fontified nil) 99 105 (face font-lock-type-face fontified nil) 105 106 (fontified nil) 106 118 (face font-lock-variable-name-face fontified nil) 118 119 (c-type c-decl-arg-start fontified nil) 119 126 (fontified nil) 126 127 (fontified nil) 127 131 (face font-lock-type-face fontified nil) 131 132 (fontified nil) 132 133 (face font-lock-variable-name-face fontified nil) 133 134 (face (rainbow-delimiters-depth-3-face) fontified nil) 134 135 (fontified nil) 135 139 (fontified nil) 139 141 (fontified nil) 141 147 (face font-lock-constant-face fontified nil) 147 153 (fontified nil) 153 154 (face (rainbow-delimiters-depth-3-face) fontified nil) 154 168 (fontified nil) 168 169 (face (rainbow-delimiters-depth-4-face) fontified nil) 169 170 (face (rainbow-delimiters-depth-4-face) fontified nil) 170 171 (face (rainbow-delimiters-depth-3-face) fontified nil) 171 173 (fontified nil) 173 174 (fontified nil) 174 175 (face (rainbow-delimiters-depth-3-face) fontified nil) 175 176 (fontified nil) 176 177 (fontified nil) 177 189 (fontified nil) 189 190 (fontified nil) 190 194 (face font-lock-keyword-face fontified nil) 194 209 (fontified nil) 209 210 (face (rainbow-delimiters-depth-4-face) fontified nil category c-<-as-paren-syntax) 210 224 (face font-lock-constant-face fontified nil) 224 226 (fontified nil) 226 229 (face font-lock-constant-face fontified nil) 229 242 (fontified nil) 242 243 (face (rainbow-delimiters-depth-4-face) fontified nil category c->-as-paren-syntax) 243 244 (face (rainbow-delimiters-depth-4-face) fontified nil) 244 256 (fontified nil) 256 257 (face (rainbow-delimiters-depth-4-face) fontified nil) 257 259 (fontified nil) 259 270 (fontified nil) 270 271 (fontified nil) 271 275 (face font-lock-keyword-face fontified nil) 275 294 (fontified nil) 294 295 (face (rainbow-delimiters-depth-4-face) fontified nil) 295 298 (face font-lock-constant-face fontified nil) 298 300 (fontified nil) 300 306 (face font-lock-constant-face fontified nil) 306 320 (fontified nil) 320 321 (face (rainbow-delimiters-depth-5-face) fontified nil) 321 325 (fontified nil) 325 326 (face (rainbow-delimiters-depth-5-face) fontified nil) 326 327 (fontified nil) 327 328 (fontified nil) 328 332 (fontified nil) 332 336 (fontified nil) 336 339 (face font-lock-constant-face fontified nil) 339 345 (fontified nil) 345 346 (face (rainbow-delimiters-depth-5-face) fontified nil) 346 347 (fontified nil) 347 358 (face font-lock-constant-face fontified nil) 358 376 (fontified nil) 376 380 (face font-lock-keyword-face fontified nil) 380 381 (face (rainbow-delimiters-depth-5-face) fontified nil) 381 382 (face (rainbow-delimiters-depth-4-face) fontified nil) 382 383 (fontified nil) 383 384 (fontified nil) 384 398 (fontified nil) 398 400 (fontified nil) 400 401 (face (rainbow-delimiters-depth-3-face) fontified nil) 401 402 (fontified nil) 402 403 (fontified nil) 403 404 (fontified nil) 404 406 (fontified nil) 406 409 (face font-lock-type-face fontified nil) 409 410 (face font-lock-type-face c-type c-decl-id-start fontified nil) 410 411 (fontified nil) 411 421 (face font-lock-variable-name-face fontified nil) 421 424 (fontified nil) 424 428 (face font-lock-constant-face fontified nil) 428 430 (fontified nil) 430 431 (fontified nil) 431 433 (fontified nil) 433 436 (face font-lock-type-face fontified nil) 436 437 (face font-lock-type-face c-type c-decl-id-start fontified nil) 437 438 (fontified nil) 438 452 (face font-lock-variable-name-face fontified nil) 452 455 (fontified nil) 455 460 (face font-lock-constant-face fontified nil) 460 461 (fontified nil) 461 462 (fontified nil) 462 469 (face font-lock-keyword-face fontified nil) 469 470 (c-type c-decl-end fontified nil) 470 471 (fontified nil) 471 472 (fontified nil) 472 474 (fontified nil) 474 477 (face font-lock-type-face fontified nil) 477 478 (face font-lock-type-face c-type c-decl-id-start fontified nil) 478 479 (fontified nil) 479 493 (face font-lock-function-name-face fontified nil) 493 494 (face (rainbow-delimiters-depth-3-face) fontified nil) 494 495 (face (rainbow-delimiters-depth-3-face) fontified nil) 495 496 (fontified nil) 496 497 (face (rainbow-delimiters-depth-3-face) fontified nil) 497 498 (fontified nil) 498 499 (fontified nil) 499 500 (fontified nil) 500 504 (fontified nil) 504 515 (fontified nil) 515 516 (face (rainbow-delimiters-depth-4-face) fontified nil) 516 519 (fontified nil) 519 521 (face font-lock-keyword-face fontified nil) 521 523 (face font-lock-keyword-face fontified nil) 523 535 (fontified nil) 535 536 (face (rainbow-delimiters-depth-5-face) fontified nil) 536 537 (face (rainbow-delimiters-depth-5-face) fontified nil) 537 538 (fontified nil) 538 541 (fontified nil) 541 566 (face font-lock-string-face fontified nil) 566 567 (face (rainbow-delimiters-depth-4-face) fontified nil) 567 568 (fontified nil) 568 569 (fontified nil) 569 573 (fontified nil) 573 574 (fontified nil) 574 578 (fontified nil) 578 580 (face font-lock-keyword-face fontified nil) 580 581 (fontified nil) 581 582 (face (rainbow-delimiters-depth-4-face) fontified nil) 582 583 (face font-lock-negation-char-face fontified nil) 583 593 (fontified nil) 593 594 (face (rainbow-delimiters-depth-4-face) fontified nil) 594 595 (fontified nil) 595 596 (face (rainbow-delimiters-depth-4-face) fontified nil) 596 597 (fontified nil) 597 603 (fontified nil) 603 605 (fontified nil) 605 616 (fontified nil) 616 617 (face (rainbow-delimiters-depth-5-face) fontified nil) 617 624 (fontified nil) 624 628 (face font-lock-keyword-face fontified nil) 628 640 (fontified nil) 640 641 (face (rainbow-delimiters-depth-6-face) fontified nil) 641 642 (face (rainbow-delimiters-depth-6-face) fontified nil) 642 643 (fontified nil) 643 649 (fontified nil) 649 650 (fontified nil) 650 682 (face font-lock-string-face fontified nil) 682 683 (face (rainbow-delimiters-depth-5-face) fontified nil) 683 684 (fontified nil) 684 685 (fontified nil) 685 687 (fontified nil) 687 688 (fontified nil) 688 689 (fontified nil) 689 690 (face font-lock-comment-delimiter-face fontified nil c-in-sws t c-is-sws t) 690 697 (face font-lock-comment-delimiter-face fontified nil c-in-sws t) 697 717 (face font-lock-comment-face fontified nil c-in-sws t) 717 723 (fontified nil c-in-sws t) 723 724 (face font-lock-keyword-face fontified nil c-is-sws t) 724 729 (face font-lock-keyword-face fontified nil) 729 731 (fontified nil) 731 735 (fontified nil) 735 736 (face (rainbow-delimiters-depth-4-face) fontified nil) 736 738 (fontified nil) 738 739 (fontified nil) 739 743 (fontified nil) 743 748 (face font-lock-keyword-face fontified nil) 748 749 (fontified nil) 749 750 (face (rainbow-delimiters-depth-4-face) fontified nil) 750 751 (face font-lock-negation-char-face fontified nil) 751 775 (fontified nil) 775 776 (face (rainbow-delimiters-depth-5-face) fontified nil) 776 779 (face font-lock-constant-face fontified nil) 779 781 (fontified nil) 781 787 (face font-lock-constant-face fontified nil) 787 801 (fontified nil) 801 802 (face (rainbow-delimiters-depth-6-face) fontified nil) 802 806 (fontified nil) 806 807 (face (rainbow-delimiters-depth-6-face) fontified nil) 807 808 (face (rainbow-delimiters-depth-5-face) fontified nil) 808 809 (face (rainbow-delimiters-depth-4-face) fontified nil) 809 810 (fontified nil) 810 811 (face (rainbow-delimiters-depth-4-face) fontified nil) 811 812 (fontified nil) 812 818 (fontified nil) 818 820 (face font-lock-keyword-face fontified nil) 820 821 (fontified nil) 821 822 (face (rainbow-delimiters-depth-5-face) fontified nil) 822 828 (face font-lock-constant-face fontified nil) 828 832 (fontified nil) 832 833 (face (rainbow-delimiters-depth-6-face) fontified nil) 833 834 (face (rainbow-delimiters-depth-6-face) fontified nil) 834 835 (face (rainbow-delimiters-depth-5-face) fontified nil) 835 836 (fontified nil) 836 837 (face (rainbow-delimiters-depth-5-face) fontified nil) 837 838 (fontified nil) 838 846 (fontified nil) 846 857 (fontified nil) 857 858 (face (rainbow-delimiters-depth-6-face) fontified nil) 858 859 (fontified nil) 859 861 (fontified nil) 861 866 (fontified nil) 866 870 (fontified nil face font-lock-keyword-face) 870 882 (fontified nil) 882 883 (fontified nil face (rainbow-delimiters-depth-7-face)) 883 884 (fontified nil face (rainbow-delimiters-depth-7-face)) 884 885 (fontified nil) 885 886 (fontified nil) 886 888 (fontified nil) 888 893 (fontified nil) 893 955 (face font-lock-string-face fontified nil) 955 956 (face (rainbow-delimiters-depth-6-face) fontified nil) 956 958 (fontified nil) 958 966 (fontified nil) 966 972 (face font-lock-keyword-face fontified nil) 972 980 (fontified nil) 980 981 (face (rainbow-delimiters-depth-5-face) fontified nil) 981 999 (fontified nil) 999 1000 (face (rainbow-delimiters-depth-5-face) fontified nil) 1000 1004 (face font-lock-keyword-face fontified nil) 1004 1016 (fontified nil) 1016 1017 (face (rainbow-delimiters-depth-6-face) fontified nil) 1017 1018 (face (rainbow-delimiters-depth-6-face) fontified nil) 1018 1038 (fontified nil) 1038 1076 (face font-lock-string-face fontified nil) 1076 1083 (face font-lock-string-face fontified nil) 1083 1084 (face (rainbow-delimiters-depth-5-face) fontified nil) 1084 1086 (fontified nil) 1086 1090 (fontified nil) 1090 1091 (face (rainbow-delimiters-depth-4-face) fontified nil) 1091 1093 (fontified nil) 1093 1094 (fontified nil) 1094 1098 (fontified nil) 1098 1101 (face font-lock-keyword-face fontified nil) 1101 1102 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 1102 1103 (fontified nil) 1103 1110 (face font-lock-variable-name-face fontified nil) 1110 1112 (fontified nil) 1112 1113 (fontified nil) 1113 1116 (face font-lock-constant-face fontified nil) 1116 1129 (fontified nil) 1129 1130 (face (rainbow-delimiters-depth-4-face) fontified nil category c-<-as-paren-syntax) 1130 1144 (face font-lock-constant-face fontified nil) 1144 1146 (fontified nil) 1146 1149 (face font-lock-constant-face fontified nil) 1149 1151 (fontified nil) 1151 1162 (face font-lock-constant-face fontified nil) 1162 1171 (fontified nil) 1171 1172 (face (rainbow-delimiters-depth-4-face) fontified nil category c->-as-paren-syntax) 1172 1173 (face (rainbow-delimiters-depth-4-face) fontified nil) 1173 1174 (face (rainbow-delimiters-depth-4-face) fontified nil) 1174 1176 (fontified nil) 1176 1177 (fontified nil) 1177 1205 (fontified nil) 1205 1206 (fontified nil) 1206 1220 (face font-lock-constant-face fontified nil) 1220 1222 (fontified nil) 1222 1225 (face font-lock-constant-face fontified nil) 1225 1227 (fontified nil) 1227 1237 (face font-lock-constant-face fontified nil) 1237 1261 (fontified nil) 1261 1262 (fontified nil) 1262 1266 (fontified nil) 1266 1269 (face font-lock-keyword-face fontified nil) 1269 1270 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 1270 1271 (fontified nil) 1271 1285 (face font-lock-variable-name-face fontified nil) 1285 1314 (fontified nil) 1314 1315 (face (rainbow-delimiters-depth-4-face) fontified nil) 1315 1323 (fontified nil) 1323 1324 (fontified nil) 1324 1330 (fontified nil) 1330 1335 (fontified nil) 1335 1338 (face font-lock-constant-face fontified nil) 1338 1344 (fontified nil) 1344 1345 (face (rainbow-delimiters-depth-5-face) fontified nil) 1345 1346 (fontified nil) 1346 1357 (face font-lock-constant-face fontified nil) 1357 1376 (fontified nil) 1376 1390 (fontified nil) 1390 1391 (fontified nil) 1391 1395 (face font-lock-keyword-face fontified nil) 1395 1396 (fontified nil) 1396 1410 (fontified nil) 1410 1411 (fontified nil) 1411 1414 (face font-lock-constant-face fontified nil) 1414 1416 (fontified nil) 1416 1428 (face font-lock-constant-face fontified nil) 1428 1432 (fontified nil) 1432 1433 (face (rainbow-delimiters-depth-5-face) fontified nil) 1433 1434 (face (rainbow-delimiters-depth-4-face) fontified nil) 1434 1435 (fontified nil) 1435 1436 (fontified nil) 1436 1438 (fontified nil) 1438 1440 (fontified nil) 1440 1441 (face (rainbow-delimiters-depth-3-face) fontified nil) 1441 1442 (fontified nil) 1442 1443 (fontified nil) 1443 1444 (fontified nil) 1444 1446 (fontified nil) 1446 1449 (face font-lock-type-face fontified nil) 1449 1450 (face font-lock-type-face c-type c-decl-id-start fontified nil) 1450 1451 (fontified nil) 1451 1467 (face font-lock-function-name-face fontified nil) 1467 1468 (face (rainbow-delimiters-depth-3-face) fontified nil) 1468 1474 (face font-lock-constant-face fontified nil) 1474 1476 (fontified nil) 1476 1482 (face font-lock-constant-face fontified nil) 1482 1483 (face (rainbow-delimiters-depth-4-face) fontified nil category c-<-as-paren-syntax) 1483 1497 (face font-lock-constant-face fontified nil) 1497 1499 (fontified nil) 1499 1502 (face font-lock-constant-face fontified nil) 1502 1515 (fontified nil) 1515 1516 (face (rainbow-delimiters-depth-4-face) fontified nil category c->-as-paren-syntax) 1516 1518 (fontified nil) 1518 1530 (face font-lock-type-face fontified nil) 1530 1531 (fontified nil) 1531 1537 (face font-lock-variable-name-face fontified nil) 1537 1538 (face (rainbow-delimiters-depth-3-face) fontified nil) 1538 1539 (fontified nil) 1539 1540 (face (rainbow-delimiters-depth-3-face) fontified nil) 1540 1541 (fontified nil) 1541 1542 (fontified nil) 1542 1557 (fontified nil) 1557 1558 (face (rainbow-delimiters-depth-4-face) fontified nil) 1558 1562 (face font-lock-keyword-face fontified nil) 1562 1574 (fontified nil) 1574 1575 (face (rainbow-delimiters-depth-5-face) fontified nil) 1575 1576 (face (rainbow-delimiters-depth-5-face) fontified nil) 1576 1577 (fontified nil) 1577 1580 (fontified nil) 1580 1591 (face font-lock-string-face fontified nil) 1591 1597 (face font-lock-string-face fontified nil) 1597 1598 (face (rainbow-delimiters-depth-4-face) fontified nil) 1598 1600 (fontified nil) 1600 1601 (fontified nil) 1601 1605 (fontified nil) 1605 1608 (face font-lock-keyword-face fontified nil) 1608 1609 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 1609 1610 (fontified nil) 1610 1616 (face font-lock-variable-name-face fontified nil) 1616 1634 (fontified nil) 1634 1635 (face (rainbow-delimiters-depth-4-face) fontified nil) 1635 1638 (face font-lock-constant-face fontified nil) 1638 1640 (fontified nil) 1640 1646 (face font-lock-constant-face fontified nil) 1646 1660 (fontified nil) 1660 1661 (face (rainbow-delimiters-depth-5-face) fontified nil) 1661 1665 (fontified nil) 1665 1666 (face (rainbow-delimiters-depth-5-face) fontified nil) 1666 1667 (face (rainbow-delimiters-depth-4-face) fontified nil) 1667 1674 (fontified nil) 1674 1676 (face font-lock-keyword-face fontified nil) 1676 1677 (fontified nil) 1677 1678 (face (rainbow-delimiters-depth-4-face) fontified nil) 1678 1688 (fontified nil) 1688 1691 (face font-lock-constant-face fontified nil) 1691 1693 (fontified nil) 1693 1706 (face font-lock-constant-face fontified nil) 1706 1713 (fontified nil) 1713 1714 (face (rainbow-delimiters-depth-4-face) fontified nil) 1714 1715 (fontified nil) 1715 1716 (face (rainbow-delimiters-depth-4-face) fontified nil) 1716 1717 (fontified nil) 1717 1723 (fontified nil) 1723 1726 (face font-lock-constant-face fontified nil) 1726 1728 (fontified nil) 1728 1738 (face font-lock-type-face fontified nil) 1738 1739 (category c-<-as-paren-syntax face (rainbow-delimiters-depth-5-face) fontified nil) 1739 1753 (face font-lock-constant-face fontified nil) 1753 1755 (fontified nil) 1755 1758 (face font-lock-constant-face fontified nil) 1758 1760 (fontified nil) 1760 1781 (face font-lock-type-face fontified nil) 1781 1782 (face (rainbow-delimiters-depth-6-face) fontified nil category c-<-as-paren-syntax) 1782 1785 (face font-lock-constant-face fontified nil) 1785 1787 (fontified nil) 1787 1796 (face font-lock-type-face fontified nil) 1796 1797 (face (rainbow-delimiters-depth-7-face) fontified nil category c-<-as-paren-syntax) 1797 1801 (face font-lock-type-face fontified nil) 1801 1802 (face (rainbow-delimiters-depth-7-face) fontified nil category c->-as-paren-syntax) 1802 1803 (face (rainbow-delimiters-depth-6-face) fontified nil category c->-as-paren-syntax) 1803 1804 (category c->-as-paren-syntax face (rainbow-delimiters-depth-5-face) c-type c-decl-id-start fontified nil) 1804 1805 (fontified nil) 1805 1809 (face font-lock-variable-name-face fontified nil) 1809 1811 (fontified nil) 1811 1822 (fontified nil) 1822 1823 (face (rainbow-delimiters-depth-5-face) fontified nil) 1823 1824 (face (rainbow-delimiters-depth-5-face) fontified nil) 1824 1826 (fontified nil) 1826 1832 (fontified nil) 1832 1843 (fontified nil) 1843 1844 (face (rainbow-delimiters-depth-5-face) fontified nil) 1844 1848 (face font-lock-keyword-face fontified nil) 1848 1860 (fontified nil) 1860 1861 (face (rainbow-delimiters-depth-6-face) fontified nil) 1861 1862 (face (rainbow-delimiters-depth-6-face) fontified nil) 1862 1863 (fontified nil) 1863 1867 (fontified nil) 1867 1868 (fontified nil) 1868 1888 (face font-lock-string-face fontified nil) 1888 1889 (fontified nil) 1889 1890 (fontified nil) 1890 1893 (fontified nil) 1893 1894 (fontified nil) 1894 1907 (fontified nil) 1907 1908 (face (rainbow-delimiters-depth-5-face) fontified nil) 1908 1910 (fontified nil) 1910 1911 (fontified nil) 1911 1917 (fontified nil c-is-sws t c-in-sws t) 1917 1918 (face font-lock-comment-delimiter-face fontified nil c-in-sws t c-is-sws t) 1918 1920 (face font-lock-comment-delimiter-face fontified nil c-in-sws t) 1920 1973 (face font-lock-comment-face fontified nil c-in-sws t) 1973 1974 (fontified nil c-in-sws t) 1974 1975 (fontified nil c-in-sws t c-is-sws t) 1975 1980 (fontified nil c-is-sws t c-in-sws t) 1980 1981 (face font-lock-keyword-face fontified nil c-is-sws t) 1981 1984 (face font-lock-keyword-face fontified nil) 1984 2003 (fontified nil) 2003 2004 (face (rainbow-delimiters-depth-5-face) fontified nil) 2004 2021 (fontified nil) 2021 2022 (face (rainbow-delimiters-depth-5-face) fontified nil) 2022 2024 (fontified nil) 2024 2028 (face font-lock-constant-face fontified nil) 2028 2031 (fontified nil) 2031 2036 (face font-lock-constant-face fontified nil) 2036 2037 (fontified nil) 2037 2039 (fontified nil) 2039 2046 (fontified nil) 2046 2050 (face font-lock-keyword-face fontified nil) 2050 2065 (fontified nil) 2065 2070 (face font-lock-constant-face fontified nil) 2070 2077 (fontified nil) 2077 2078 (face (rainbow-delimiters-depth-4-face) fontified nil) 2078 2079 (fontified nil) 2079 2083 (face font-lock-keyword-face fontified nil) 2083 2084 (fontified nil) 2084 2085 (face (rainbow-delimiters-depth-4-face) fontified nil) 2085 2086 (fontified nil) 2086 2087 (fontified nil) 2087 2088 (fontified nil) 2088 2092 (fontified nil) 2092 2103 (fontified nil) 2103 2104 (fontified nil face (rainbow-delimiters-depth-5-face)) 2104 2108 (fontified nil face font-lock-keyword-face) 2108 2120 (fontified nil) 2120 2121 (fontified nil face (rainbow-delimiters-depth-6-face)) 2121 2122 (fontified nil face (rainbow-delimiters-depth-6-face)) 2122 2123 (fontified nil) 2123 2127 (fontified nil) 2127 2128 (fontified nil) 2128 2152 (fontified nil face font-lock-string-face) 2152 2153 (fontified nil face (rainbow-delimiters-depth-5-face)) 2153 2154 (fontified nil) 2154 2155 (fontified nil) 2155 2156 (fontified nil) 2156 2160 (fontified nil) 2160 2161 (face (rainbow-delimiters-depth-4-face) fontified nil) 2161 2162 (fontified nil) 2162 2164 (fontified nil) 2164 2165 (face (rainbow-delimiters-depth-3-face) fontified nil) 2165 2169 (fontified nil) 2169 2175 (face font-lock-constant-face fontified nil) 2175 2177 (fontified nil) 2177 2183 (face font-lock-constant-face fontified nil) 2183 2184 (face (rainbow-delimiters-depth-3-face) fontified nil category c-<-as-paren-syntax) 2184 2198 (face font-lock-constant-face fontified nil) 2198 2200 (fontified nil) 2200 2203 (face font-lock-constant-face fontified nil) 2203 2216 (fontified nil) 2216 2217 (face (rainbow-delimiters-depth-3-face) fontified nil category c->-as-paren-syntax) 2217 2219 (fontified nil) 2219 2227 (face font-lock-type-face fontified nil) 2227 2228 (face font-lock-type-face c-type c-decl-id-start fontified nil) 2228 2229 (fontified nil) 2229 2235 (face font-lock-variable-name-face fontified nil) 2235 2237 (fontified nil) 2237 2239 (fontified nil) 2239 2245 (face font-lock-constant-face fontified nil) 2245 2247 (fontified nil) 2247 2256 (face font-lock-constant-face fontified nil) 2256 2258 (fontified nil) 2258 2266 (face font-lock-type-face fontified nil) 2266 2267 (face font-lock-type-face c-type c-decl-id-start fontified nil) 2267 2268 (fontified nil) 2268 2273 (face font-lock-variable-name-face fontified nil) 2273 2275 (fontified nil) 2275 2277 (fontified nil) 2277 2280 (face font-lock-type-face fontified nil) 2280 2281 (face font-lock-type-face c-type c-decl-id-start fontified nil) 2281 2282 (fontified nil) 2282 2285 (face font-lock-variable-name-face fontified nil) 2285 2286 (fontified nil) 2286 2287 (fontified nil) 2287 2288 (fontified nil) 2288 2289 (face (rainbow-delimiters-depth-2-face) fontified nil) 2289 2290 (fontified nil) 2290 2291 (fontified nil) 2291 2292 (fontified nil rear-nonsticky nil)) . 749) (undo-tree-id2671 . -1086) (undo-tree-id2672 . -1442) (undo-tree-id2673 . -1442) (undo-tree-id2674 . -2292) (undo-tree-id2675 . -2290) (undo-tree-id2676 . -1442) (undo-tree-id2677 . -2287) (undo-tree-id2678 . -2290) (undo-tree-id2679 . -128) (undo-tree-id2680 . -134) (undo-tree-id2681 . -175) (undo-tree-id2682 . -176) (undo-tree-id2683 . -470) (undo-tree-id2684 . -471) (undo-tree-id2685 . -499) (undo-tree-id2686 . -500) (undo-tree-id2687 . -609) (undo-tree-id2688 . -617) (undo-tree-id2689 . -686) (undo-tree-id2690 . -687) (undo-tree-id2691 . -736) (undo-tree-id2692 . -737) (undo-tree-id2693 . -1261) (undo-tree-id2694 . -1262) (undo-tree-id2695 . -1442) (undo-tree-id2696 . -1443) (nil fontified t 925 . 926) (nil fontified t 791 . 792) (nil fontified t 1840 . 1842) (nil fontified t 1839 . 1840) (nil fontified t 1835 . 1839) (nil fontified t 1833 . 1835) (nil fontified t 1832 . 1833) (nil fontified t 1825 . 1832) (nil fontified t 1787 . 1825) (nil fontified t 1767 . 1787) (nil fontified t 1766 . 1767) (nil fontified t 1765 . 1766) (nil fontified t 1753 . 1765) (nil fontified t 1749 . 1753) (nil fontified t 1748 . 1749) (nil fontified t 1730 . 1748) (nil fontified t 1729 . 1730) (nil fontified t 1721 . 1729) (nil fontified t 1715 . 1721) (nil fontified t 1707 . 1715) (nil fontified t 1587 . 1595) (nil fontified t 1586 . 1587) (nil fontified t 1585 . 1586) (nil fontified t 1584 . 1585) (nil fontified t 1583 . 1584) (nil fontified t 1582 . 1583) (nil fontified t 1581 . 1582) (nil fontified t 1577 . 1581) (nil fontified t 1571 . 1577) (nil fontified t 1570 . 1571) (nil fontified t 1569 . 1570) (nil fontified t 1567 . 1569) (nil fontified t 1561 . 1567) (nil fontified t 1485 . 1487) (nil fontified t 1484 . 1485) (nil fontified t 1480 . 1484) (nil fontified t 1478 . 1480) (nil fontified t 1473 . 1478) (nil fontified t 1472 . 1473) (nil fontified t 1466 . 1472) (nil fontified t 1345 . 1346) (nil fontified t 1344 . 1345) (nil fontified t 1343 . 1344) (nil fontified t 1342 . 1343) (nil fontified t 1332 . 1342) (nil fontified t 1331 . 1332) (nil fontified t 1330 . 1331) (nil fontified t 1329 . 1330) (nil fontified t 1327 . 1329) (nil fontified t 1323 . 1327) (nil fontified t 1210 . 1211) (nil fontified t 1209 . 1210) (nil fontified t 1204 . 1209) (nil fontified t 1201 . 1204) (nil fontified t 1187 . 1201) (nil fontified t 1186 . 1187) (nil fontified t 1185 . 1186) (nil fontified t 1182 . 1185) (nil fontified t 1180 . 1182) (nil fontified t 1179 . 1180) (nil fontified t 1151 . 1152) (nil fontified t 1150 . 1151) (nil fontified t 1149 . 1150) (nil fontified t 1147 . 1149) (nil fontified t 1133 . 1147) (nil fontified t 2191 . 2192) (nil fontified t 2010 . 2011) (nil fontified t 1925 . 1926) (nil fontified t 2465 . 2466) (nil fontified t 2464 . 2465) (nil fontified t 2463 . 2464) (nil fontified t 2462 . 2463) (nil fontified t 2455 . 2462) (nil fontified t 2442 . 2455) (nil fontified t 2440 . 2442) (nil fontified t 2437 . 2440) (nil fontified t 2427 . 2437) (nil fontified t 2426 . 2427) (nil fontified t 2425 . 2426) (nil fontified t 2423 . 2425) (nil fontified t 2416 . 2423) (nil fontified t 2415 . 2416) (nil fontified t 2414 . 2415) (nil fontified t 2410 . 2414) (nil fontified t 2409 . 2410) (nil fontified t 2395 . 2409) (nil fontified t 2389 . 2395) (nil fontified t 2387 . 2389) (nil fontified t 2384 . 2387) (nil fontified t 2383 . 2384) (nil fontified t 2365 . 2383) (nil fontified t 2359 . 2365) (nil fontified t 2358 . 2359) (nil fontified t 2357 . 2358) (nil fontified t 2354 . 2357) (nil fontified t 2350 . 2354) (nil fontified t 2349 . 2350) (nil fontified t 2290 . 2291) (nil fontified t 2926 . 2932) (nil fontified t 2924 . 2926) (nil fontified t 2918 . 2924) (nil fontified t 2914 . 2918) (nil fontified t 2913 . 2914) (nil fontified t 2911 . 2913) (nil fontified t 2834 . 2835) (nil fontified t 2833 . 2834) (nil fontified t 2832 . 2833) (nil fontified t 2828 . 2832) (nil fontified t 2827 . 2828) (nil fontified t 2826 . 2827) (nil fontified t 2819 . 2826) (nil fontified t 2814 . 2819) (nil fontified t 2799 . 2814) (nil fontified t 2795 . 2799) (nil fontified t 2788 . 2795) (nil fontified t 2722 . 2723) (nil fontified t 2669 . 2722) (nil fontified t 2667 . 2669) (nil fontified t 2666 . 2667) (nil fontified t 2660 . 2666) (nil fontified t 2659 . 2660) (nil fontified t 2932 . 2933) (nil fontified t 2952 . 2965) (nil fontified t 2949 . 2952) (nil fontified t 2947 . 2949) (nil fontified t 2933 . 2947) (nil fontified t 2965 . 2966) (nil fontified t 3035 . 3036) (nil fontified t 3034 . 3035) (nil fontified t 3031 . 3034) (nil fontified t 3030 . 3031) (nil fontified t 3029 . 3030) (nil fontified t 3026 . 3029) (nil fontified t 3024 . 3026) (nil fontified t 3022 . 3024) (nil fontified t 3017 . 3022) (nil fontified t 3016 . 3017) (nil fontified t 3015 . 3016) (nil fontified t 3007 . 3015) (nil fontified t 3005 . 3007) (nil fontified t 2996 . 3005) (nil fontified t 2994 . 2996) (nil fontified t 2988 . 2994) (nil fontified t 2986 . 2988) (nil fontified t 2984 . 2986) (nil fontified t 2978 . 2984) (nil fontified t 2977 . 2978) (nil fontified t 2976 . 2977) (nil fontified t 2968 . 2976) (nil fontified t 2966 . 2968) (nil rear-nonsticky t 3040 . 3041)) (26236 24791 300075 480000) 0 nil])
([nil nil ((#("READYYY" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 6668) (undo-tree-id3078 . 7) (nil syntax-table nil 6685 . 6686) (nil syntax-table (1) 6682 . 6683)) ((nil syntax-table (1) 6682 . 6683) (nil syntax-table nil 6685 . 6686) (6668 . 6675) (nil syntax-table nil 6678 . 6679) (nil syntax-table (1) 6675 . 6676)) (26236 20710 356406 298000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6578) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) 6582 (6578 . 6582) (#("    " 0 4 (fontified nil)) . 6577) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (6577 . 6582) (#("    " 0 4 (fontified nil)) . 6576) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (6575 . 6581) (t 26236 24978 691128 672000)) nil (26236 24994 866231 766000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 747) (undo-tree-id1101 . -2) 745 (767 . 768) (#("
	     " 0 7 (fontified nil)) . 835) (#("
	     " 0 7 (fontified nil)) . 868) (888 . 890) 883 (#("
 " 0 2 (fontified t)) . 920) (938 . 946) (1019 . 1027) (1077 . 1105) (#("				" 0 4 (fontified t)) . 1077) 1076 (#("
" 0 1 (fontified t)) . 1152) 1150 (1211 . 1212) 1210 (#("
" 0 1 (fontified nil)) . 1220) 1219 (#(" " 0 1 (fontified t)) . 1247) 1246 (#("
		" 0 3 (fontified nil)) . 1265) (1287 . 1288) (#("
		" 0 3 (fontified nil)) . 1287) ("    " . 1318) 1317 (#("  " 0 2 (fontified nil)) . 1352) 1345 (#("
		    " 0 7 (fontified nil)) . 1366) (#("
		   " 0 6 (fontified nil)) . 1392) ("	
" . 1434) (1437 . 1443) ("	" . 1437) 1433 ("
" . 1487) 1485 (1608 . 1615) (#("		" 0 2 (fontified nil)) . 1608) 1607 (1635 . 1642) ("		" . 1635) 1634 ("
" . 1842) 1840 (1861 . 1869) (1954 . 1962) (2064 . 2073) (2073 . 2076) (#("						" 0 6 (fontified nil)) . 2073) 2072 (#("
							      " 0 14 (fontified nil)) . 2125) (#("
							      " 0 14 (fontified nil)) . 2145) ("

" . 2185) 2184 ("
" . 2192) 2190 (2217 . 2224) (2326 . 2327) ("
		" . 2326) (2488 . 2499) (2553 . 2563) (#("
		 " 0 4 (fontified nil)) . 2612) (#("
		 " 0 1 (fontified t) 1 4 (fontified t)) . 2638) (2771 . 2772) (#(" " 0 1 (fontified t)) . 2785) (#("
		 " 0 4 (fontified nil)) . 2872) (#("
" 0 1 (fontified t)) . 2904) 2903 (#("
" 0 1 (fontified t)) . 3036) 3035 (#("



" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 3041) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) (undo-tree-id1105 . -4) (undo-tree-id1107 . 2) 3039 (#(" 
  " 0 4 (fontified t)) . 4136) 4133 (#(" " 0 1 (fontified t)) . 4193) ("
" . 4259) 4258 (#(" " 0 1 (fontified nil)) . 4434) (#("
    " 1 5 (fontified nil)) . 4449) 4443 (4485 . 4501) (4545 . 4561) (#("
 " 1 2 (c-is-sws t c-in-sws t)) . 4602) 4599 (4694 . 4703) (4923 . 4932) (#("
    
    
" 0 11 (c-in-sws t)) . 5065) 5063 (5213 . 5221) (#("
    " 1 5 (fontified nil)) . 5289) 5283 (5325 . 5341) (5385 . 5401) ("

    " . 5397) 5391 (5938 . 5949) (5979 . 5987) ("
" . 6050) 6048 (6086 . 6102) (6561 . 6569) (6710 . 6726) (7132 . 7140) (7720 . 7729) ("  " . 8168) 8167 (nil face (rainbow-delimiters-depth-3-face) 8196 . 8203) (8196 . 8203) (#("
    

    
" 6 7 (c-in-sws t) 7 11 (c-is-sws t c-in-sws t) 11 12 (c-in-sws t c-is-sws t)) . 8531) 8530 ("
" . 8549) (undo-tree-id1108 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) 8547 (8679 . 8690) (8816 . 8817) (#(" " 0 1 (fontified nil)) . 8822) (#("  
    " 3 7 (fontified nil)) . 8830) 8825 ("
" . 8839) 8838 ("
  " . 8847) 8843 (9004 . 9020) ("      " . 9212) 9211 (9241 . 9249) ("	" . 9241) 9240 (#("
    
  " 6 8 (fontified nil)) . 9324) (undo-tree-id1116 . -4) (undo-tree-id1118 . -4) (undo-tree-id1119 . -4) ("
" . 9335) 9333 (#("
" 0 1 (c-in-sws t)) . 9816) (undo-tree-id1121 . -1) 9814 ("

" . 9935) 9933) ((9935 . 9937) (9816 . 9817) (9335 . 9336) (9324 . 9332) (9241 . 9242) (#("        " 0 8 (fontified t)) . 9241) (9212 . 9218) (#("
               " 0 1 (fontified t) 1 7 (fontified t) 7 16 (fontified t)) . 9004) (8847 . 8850) (8839 . 8840) (8830 . 8837) (8822 . 8823) (#(" " 0 1 (fontified t)) . 8816) (#("
          " 0 11 (fontified t)) . 8679) (8549 . 8550) (8531 . 8543) (#("
      " 0 7 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 8196) (nil face nil 8196 . 8203) (8168 . 8170) (#("
        " 0 9 (fontified t)) . 7720) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . 7132) (#("
               " 0 1 (fontified t) 1 16 (fontified t)) . 6710) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . 6561) (#("
               " 0 1 (fontified nil) 1 16 (fontified t)) . 6086) (6050 . 6051) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . 5979) (#("
    //    " 0 1 (face font-lock-comment-face fontified t c-in-sws t) 1 2 (fontified t c-in-sws t) 2 5 (fontified t c-in-sws t) 5 6 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 6 11 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 5938) (5397 . 5403) (#("
               " 0 1 (fontified nil) 1 16 (fontified t)) . 5385) (#("
               " 0 1 (fontified nil) 1 16 (fontified t)) . 5325) (5289 . 5294) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . 5213) (5065 . 5076) (#("
    //  " 0 1 (face font-lock-comment-face fontified t c-in-sws t) 1 5 (fontified t c-in-sws t) 5 9 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 4923) (#("
    //  " 0 1 (face font-lock-comment-face fontified t c-in-sws t) 1 5 (fontified t c-in-sws t) 5 9 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 4694) (4602 . 4604) (#("
               " 0 1 (fontified nil) 1 16 (fontified t)) . 4545) (#("
               " 0 1 (fontified nil) 1 4 (fontified t) 4 16 (fontified t)) . 4485) (4449 . 4454) (4434 . 4435) (4259 . 4260) (4193 . 4194) (4136 . 4140) (3041 . 3045) (3036 . 3037) (2904 . 2905) (2872 . 2876) (2785 . 2786) (#(" " 0 1 (fontified t)) . 2771) (2638 . 2642) (2612 . 2616) (#("
         " 0 1 (fontified nil) 1 10 (fontified t)) . 2553) (#("
          " 0 11 (fontified t)) . 2488) (2326 . 2329) (#(" " 0 1 (fontified t)) . 2326) (#("
      " 0 1 (fontified nil) 1 7 (fontified t)) . 2217) (2192 . 2193) (2185 . 2187) (2145 . 2159) (2125 . 2139) (2073 . 2079) (#("   " 0 3 (fontified t)) . 2073) (#("
        " 0 9 (fontified t)) . 2064) (#("
       " 0 8 (fontified t)) . 1954) (#("
       " 0 1 (fontified nil) 1 8 (fontified t)) . 1861) (1842 . 1843) (1635 . 1637) (#("       " 0 7 (fontified t)) . 1635) (1608 . 1610) (#("       " 0 7 (fontified t)) . 1608) (1487 . 1488) (1437 . 1438) (#("      " 0 6 (fontified t)) . 1437) (1434 . 1436) (1392 . 1398) (1366 . 1373) (1352 . 1354) (1318 . 1322) (1287 . 1290) (#(" " 0 1 (fontified nil)) . 1287) (1265 . 1268) (1247 . 1248) (1220 . 1221) (#("
" 0 1 (fontified t)) . 1211) (1152 . 1153) (1077 . 1081) (#("                            " 0 28 (fontified nil)) . 1077) (undo-tree-id2670 . -8) (#("
       " 0 8 (fontified t)) . 1019) (#("
       " 0 8 (fontified t)) . 938) (920 . 922) (#("  " 0 2 (fontified t)) . 888) (868 . 875) (835 . 842) (#(" " 0 1 (fontified nil)) . 767) (747 . 750)) (26236 24791 106310 797000) 0 nil])
([nil nil ((#("*******\");" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face font-lock-warning-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face)) . 6668) (undo-tree-id3075 . 10) (nil syntax-table nil 6678 . 6679) (nil syntax-table (1) 6675 . 6676)) ((nil syntax-table (1) 6675 . 6676) (nil syntax-table nil 6678 . 6679) (6668 . 6678)) (26236 20710 349590 220000) 0 nil])
([nil nil ((6574 . 6576) (#(" " 0 1 (fontified nil)) . 6573) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (6574 . 6575) (t 26236 24994 931391 770000)) nil (26236 25000 602823 254000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -3053) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1044 . -2) (undo-tree-id1046 . -2) (undo-tree-id1048 . -2) (undo-tree-id1050 . -2) (undo-tree-id1052 . -2) (undo-tree-id1054 . -2) (undo-tree-id1056 . -2) (undo-tree-id1058 . -2) (undo-tree-id1060 . -2) 3055 (3053 . 3055) (#("  " 0 2 (fontified nil)) . 3052) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1065 . -2) (undo-tree-id1067 . -2) (undo-tree-id1069 . -2) (undo-tree-id1071 . -2) (undo-tree-id1073 . -2) (undo-tree-id1075 . -2) (undo-tree-id1077 . -2) (undo-tree-id1079 . -2) (undo-tree-id1081 . -2) (undo-tree-id1083 . -2) (undo-tree-id1085 . -2) (undo-tree-id1087 . -2) (undo-tree-id1089 . -2) (undo-tree-id1091 . -2) (undo-tree-id1093 . -2) (undo-tree-id1095 . -2) (undo-tree-id1097 . -2) (undo-tree-id1099 . -2) (3051 . 3055)) ((#("
  
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (fontified nil)) . 3051) (undo-tree-id2669 . -4) (3052 . 3054) (#("  " 0 2 (fontified nil)) . 3053) (3053 . 3055)) (26236 24791 82694 915000) 0 nil])
([nil nil ((6669 . 6670) (6668 . 6669) (#(")" 0 1 (fontified nil)) . -6668) (6668 . 6669)) ((#(")" 0 1 (fontified nil)) . 6668) (6668 . 6669) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 6668) (#(";" 0 1 (fontified t)) . 6669)) (26236 20710 310077 160000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7845 . 7846) (nil fontified nil 7805 . 7846) (nil fontified nil 7804 . 7805) (nil category c->-as-paren-syntax 7804 . 7805) (nil fontified nil 7792 . 7804) (nil fontified nil 7791 . 7792) (nil category c-<-as-paren-syntax 7791 . 7792) (nil fontified nil 7657 . 7791) (nil fontified nil 7656 . 7657) (nil category c->-as-paren-syntax 7656 . 7657) (nil fontified nil 7653 . 7656) (nil fontified nil 7652 . 7653) (nil category c-<-as-paren-syntax 7652 . 7653) (nil fontified nil 7498 . 7652) (nil fontified nil 7497 . 7498) (nil fontified nil 7093 . 7497) (nil fontified nil 7092 . 7093) (nil fontified nil 6657 . 7092) (nil fontified nil 6656 . 6657) (nil category c->-as-paren-syntax 6656 . 6657) (nil fontified nil 6615 . 6656) (nil fontified nil 6614 . 6615) (nil category c-<-as-paren-syntax 6614 . 6615) (nil fontified nil 6579 . 6614) (6579 . 7846) (t 26236 25000 639482 522000)) nil (26236 25918 395802 661000) 0 nil])
([nil nil ((#("  void response_callback(
      rclcpp::Client<lifecycle_msgs::srv::ChangeState>::SharedFuture future) {

    auto status = future.wait_for(std::chrono::milliseconds(1000));

    if (status = std::future_status::ready) {
      RCLCPP_INFO(this->get_logger(), \"********READYYY*******\");
      RCLCPP_INFO(this->get_logger(), \"SUCESS: %i\", future.get()->sucess);
    }
  };

" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 24 (face font-lock-function-name-face fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 25 32 (fontified t) 32 38 (face font-lock-constant-face fontified t) 38 40 (fontified t) 40 46 (face font-lock-constant-face fontified t) 46 47 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 47 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 66 (face font-lock-constant-face fontified t) 66 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 80 82 (fontified t) 82 94 (face font-lock-type-face fontified t) 94 95 (fontified t) 95 101 (face font-lock-variable-name-face fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t) 102 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-3-face) fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 110 (fontified t) 110 113 (face font-lock-keyword-face fontified t) 113 114 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 114 115 (fontified t) 115 121 (face font-lock-variable-name-face fontified t) 121 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-4-face) fontified t) 140 141 (face font-lock-constant-face fontified t) 141 142 (face font-lock-constant-face fontified t) 142 143 (face font-lock-constant-face fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 151 (face font-lock-constant-face fontified t) 151 152 (fontified t) 152 153 (fontified t) 153 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-5-face) fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-5-face) fontified t) 171 172 (face (rainbow-delimiters-depth-4-face) fontified t) 172 174 (fontified t) 174 175 (fontified t) 175 179 (fontified t) 179 181 (face font-lock-keyword-face fontified t) 181 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-4-face) fontified t) 183 191 (fontified t) 191 192 (fontified t) 192 195 (face font-lock-constant-face fontified t) 195 197 (fontified t) 197 210 (face font-lock-constant-face fontified t) 210 217 (fontified t) 217 218 (face (rainbow-delimiters-depth-4-face) fontified t) 218 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-4-face) fontified t) 220 221 (fontified t) 221 225 (fontified t) 225 227 (fontified t) 227 238 (fontified t) 238 239 (face (rainbow-delimiters-depth-5-face) fontified t) 239 243 (face font-lock-keyword-face fontified t) 243 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-6-face) fontified t) 256 257 (face (rainbow-delimiters-depth-6-face) fontified t) 257 259 (fontified t) 259 264 (face font-lock-string-face fontified t) 264 283 (face font-lock-string-face fontified t) 283 284 (face (rainbow-delimiters-depth-5-face) fontified t) 284 286 (fontified t) 286 290 (fontified t) 290 292 (fontified t) 292 295 (fontified t) 295 303 (fontified t) 303 304 (face (rainbow-delimiters-depth-5-face) fontified t) 304 308 (face font-lock-keyword-face fontified t) 308 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-6-face) fontified t) 321 322 (face (rainbow-delimiters-depth-6-face) fontified t) 322 324 (fontified t) 324 336 (face font-lock-string-face fontified t) 336 348 (fontified t) 348 349 (face (rainbow-delimiters-depth-6-face) fontified t) 349 350 (face (rainbow-delimiters-depth-6-face) fontified t) 350 355 (fontified t) 355 358 (fontified t) 358 359 (face (rainbow-delimiters-depth-5-face) fontified t) 359 360 (fontified t) 360 361 (fontified t) 361 365 (fontified t) 365 366 (face (rainbow-delimiters-depth-4-face) fontified t) 366 367 (fontified t) 367 369 (fontified t) 369 370 (face (rainbow-delimiters-depth-3-face) fontified t c-is-sws t) 370 371 (fontified t) 371 372 (fontified t) 372 373 (fontified t)) . 8308) (undo-tree-id1229 . -372) (undo-tree-id1230 . -373) (undo-tree-id1232 . -372) (undo-tree-id1234 . -373) (undo-tree-id1235 . -372) (undo-tree-id1237 . -373) (undo-tree-id1238 . -373) (undo-tree-id1240 . -26) (undo-tree-id1241 . -372) (undo-tree-id1242 . -372) 8680 (t 26236 23552 895062 708000)) ((8308 . 8681)) (26236 24791 78266 926000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -6684) (undo-tree-id2513 . -1) (undo-tree-id2515 . -1) (undo-tree-id2517 . -1) (undo-tree-id2519 . -1) (undo-tree-id2521 . -1) (undo-tree-id2523 . -1) (undo-tree-id2525 . -1) (undo-tree-id2527 . -1) (undo-tree-id2529 . -1) (undo-tree-id2531 . -1) (undo-tree-id2533 . -1) (undo-tree-id2535 . -1) (undo-tree-id2537 . -1) (undo-tree-id2539 . -1) 6685 (6675 . 6685) (#("V" 0 1 (fontified t face font-lock-string-face)) . -6675) (undo-tree-id2541 . -1) (undo-tree-id2543 . -1) (undo-tree-id2545 . -1) (undo-tree-id2547 . -1) (undo-tree-id2549 . -1) (undo-tree-id2551 . -1) (undo-tree-id2553 . -1) (undo-tree-id2555 . -1) (undo-tree-id2557 . -1) (undo-tree-id2559 . -1) (undo-tree-id2561 . -1) (undo-tree-id2563 . -1) (undo-tree-id2565 . -1) (undo-tree-id2567 . -1) (undo-tree-id2569 . -1) (undo-tree-id2571 . -1) (undo-tree-id2573 . -1) (undo-tree-id2575 . -1) (undo-tree-id2577 . -1) (undo-tree-id2579 . -1) (undo-tree-id2581 . -1) (undo-tree-id2583 . -1) (undo-tree-id2585 . -1) (undo-tree-id2587 . -1) (undo-tree-id2589 . -1) (undo-tree-id2591 . -1) (undo-tree-id2593 . -1) (undo-tree-id2595 . -1) (undo-tree-id2597 . -1) (undo-tree-id2599 . -1) (undo-tree-id2601 . -1) (undo-tree-id2603 . -1) (undo-tree-id2605 . -1) (undo-tree-id2607 . -1) (undo-tree-id2609 . -1) (undo-tree-id2611 . -1) (undo-tree-id2613 . -1) (undo-tree-id2615 . -1) (undo-tree-id2617 . -1) (undo-tree-id2619 . -1) (undo-tree-id2621 . -1) (undo-tree-id2623 . -1) (undo-tree-id2625 . -1) (undo-tree-id2627 . -1) (undo-tree-id2629 . -1) (undo-tree-id2631 . -1) (undo-tree-id2633 . -1) (undo-tree-id2635 . -1) (undo-tree-id2637 . -1) (undo-tree-id2639 . -1) (undo-tree-id2641 . -1) (undo-tree-id2643 . -1) (undo-tree-id2645 . -1) (undo-tree-id2647 . -1) (undo-tree-id2649 . -1) (undo-tree-id2651 . -1) (undo-tree-id2653 . -1) (undo-tree-id2655 . -1) (undo-tree-id2657 . -1) (undo-tree-id2659 . -1) (undo-tree-id2661 . -1) (undo-tree-id2663 . -1) (undo-tree-id2665 . -1) (undo-tree-id2667 . -1) (undo-tree-id2669 . -1) (undo-tree-id2671 . -1) (undo-tree-id2673 . -1) (undo-tree-id2675 . -1) (undo-tree-id2677 . -1) (undo-tree-id2679 . -1) (undo-tree-id2681 . -1) (undo-tree-id2683 . -1) (undo-tree-id2685 . -1) (undo-tree-id2687 . -1) (undo-tree-id2689 . -1) (undo-tree-id2691 . -1) (undo-tree-id2693 . -1) (undo-tree-id2695 . -1) (undo-tree-id2697 . -1) (undo-tree-id2699 . -1) (undo-tree-id2701 . -1) (undo-tree-id2703 . -1) (undo-tree-id2705 . -1) (undo-tree-id2707 . -1) (undo-tree-id2709 . -1) (undo-tree-id2711 . -1) (undo-tree-id2713 . -1) (undo-tree-id2715 . -1) (undo-tree-id2717 . -1) (undo-tree-id2719 . -1) (undo-tree-id2721 . -1) (undo-tree-id2723 . -1) (undo-tree-id2725 . -1) (undo-tree-id2727 . -1) (undo-tree-id2729 . -1) (undo-tree-id2731 . -1) (undo-tree-id2733 . -1) (undo-tree-id2735 . -1) (undo-tree-id2737 . -1) (undo-tree-id2739 . -1) (undo-tree-id2741 . -1) (undo-tree-id2743 . -1) (undo-tree-id2745 . -1) (undo-tree-id2747 . -1) (undo-tree-id2749 . -1) (undo-tree-id2751 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -6676) (undo-tree-id2753 . -1) (undo-tree-id2755 . -1) (undo-tree-id2757 . -1) (undo-tree-id2759 . -1) (undo-tree-id2761 . -1) (undo-tree-id2763 . -1) (undo-tree-id2765 . -1) (undo-tree-id2767 . -1) (undo-tree-id2769 . -1) (undo-tree-id2771 . -1) (undo-tree-id2773 . -1) (undo-tree-id2775 . -1) (undo-tree-id2777 . -1) (undo-tree-id2779 . -1) (undo-tree-id2781 . -1) (undo-tree-id2783 . -1) (undo-tree-id2785 . -1) (undo-tree-id2787 . -1) (undo-tree-id2789 . -1) (undo-tree-id2791 . -1) (undo-tree-id2793 . -1) (undo-tree-id2795 . -1) (undo-tree-id2797 . -1) (undo-tree-id2799 . -1) (undo-tree-id2801 . -1) (undo-tree-id2803 . -1) (undo-tree-id2805 . -1) (undo-tree-id2807 . -1) (undo-tree-id2809 . -1) (undo-tree-id2811 . -1) (undo-tree-id2813 . -1) (undo-tree-id2815 . -1) (undo-tree-id2817 . -1) (undo-tree-id2819 . -1) (undo-tree-id2821 . -1) (undo-tree-id2823 . -1) (undo-tree-id2825 . -1) (undo-tree-id2827 . -1) (undo-tree-id2829 . -1) (undo-tree-id2831 . -1) (undo-tree-id2833 . -1) (undo-tree-id2835 . -1) (undo-tree-id2837 . -1) (undo-tree-id2839 . -1) (undo-tree-id2841 . -1) (undo-tree-id2843 . -1) (undo-tree-id2845 . -1) (undo-tree-id2847 . -1) (undo-tree-id2849 . -1) (undo-tree-id2851 . -1) (undo-tree-id2853 . -1) (undo-tree-id2855 . -1) (undo-tree-id2857 . -1) (undo-tree-id2859 . -1) (undo-tree-id2861 . -1) (undo-tree-id2863 . -1) (undo-tree-id2865 . -1) (undo-tree-id2867 . -1) (undo-tree-id2869 . -1) (undo-tree-id2871 . -1) (undo-tree-id2873 . -1) (undo-tree-id2875 . -1) (undo-tree-id2877 . -1) (undo-tree-id2879 . -1) (undo-tree-id2881 . -1) (undo-tree-id2883 . -1) (undo-tree-id2885 . -1) (undo-tree-id2887 . -1) (undo-tree-id2889 . -1) (undo-tree-id2891 . -1) (undo-tree-id2893 . -1) (undo-tree-id2895 . -1) (undo-tree-id2897 . -1) (undo-tree-id2899 . -1) (undo-tree-id2901 . -1) (undo-tree-id2903 . -1) (undo-tree-id2905 . -1) (undo-tree-id2907 . -1) (undo-tree-id2909 . -1) (undo-tree-id2911 . -1) (undo-tree-id2913 . -1) (undo-tree-id2915 . -1) (undo-tree-id2917 . -1) (undo-tree-id2919 . -1) (#("K" 0 1 (fontified t face font-lock-string-face)) . -6677) (undo-tree-id2921 . -1) (undo-tree-id2923 . -1) (undo-tree-id2925 . -1) (undo-tree-id2927 . -1) (undo-tree-id2929 . -1) (undo-tree-id2931 . -1) (undo-tree-id2933 . -1) (undo-tree-id2935 . -1) (undo-tree-id2937 . -1) (undo-tree-id2939 . -1) (undo-tree-id2941 . -1) (undo-tree-id2943 . -1) (undo-tree-id2945 . -1) (undo-tree-id2947 . -1) (undo-tree-id2949 . -1) (undo-tree-id2951 . -1) (undo-tree-id2953 . -1) (undo-tree-id2955 . -1) (undo-tree-id2957 . -1) (undo-tree-id2959 . -1) (undo-tree-id2961 . -1) (undo-tree-id2963 . -1) (undo-tree-id2965 . -1) (undo-tree-id2967 . -1) (undo-tree-id2969 . -1) (undo-tree-id2971 . -1) (undo-tree-id2973 . -1) (undo-tree-id2975 . -1) (undo-tree-id2977 . -1) (undo-tree-id2979 . -1) (undo-tree-id2981 . -1) (undo-tree-id2983 . -1) (undo-tree-id2985 . -1) (undo-tree-id2987 . -1) (undo-tree-id2989 . -1) (undo-tree-id2991 . -1) (undo-tree-id2993 . -1) (undo-tree-id2995 . -1) (undo-tree-id2997 . -1) (undo-tree-id2999 . -1) (undo-tree-id3001 . -1) (undo-tree-id3003 . -1) (undo-tree-id3005 . -1) (undo-tree-id3007 . -1) (undo-tree-id3009 . -1) (undo-tree-id3011 . -1) (undo-tree-id3013 . -1) (undo-tree-id3015 . -1) (undo-tree-id3017 . -1) (undo-tree-id3019 . -1) (undo-tree-id3021 . -1) (undo-tree-id3023 . -1) (undo-tree-id3025 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6678) (undo-tree-id3028 . -1) (undo-tree-id3030 . -1) (undo-tree-id3032 . -1) (undo-tree-id3034 . -1) (undo-tree-id3036 . -1) (undo-tree-id3038 . -1) (undo-tree-id3040 . -1) (undo-tree-id3042 . -1) (undo-tree-id3044 . -1) (undo-tree-id3046 . -1) (undo-tree-id3048 . -1) (undo-tree-id3050 . -1) (undo-tree-id3052 . -1) (undo-tree-id3054 . -1) (undo-tree-id3056 . -1) (undo-tree-id3058 . -1) (undo-tree-id3060 . -1) (undo-tree-id3062 . -1) (undo-tree-id3064 . -1) (undo-tree-id3066 . -1) (undo-tree-id3068 . -1) (undo-tree-id3070 . -1) (undo-tree-id3072 . -1) 6679 (6674 . 6679) (6669 . 6674) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6669) 6670 (6669 . 6670) (6669 . 6670) (nil syntax-table nil 6671 . 6672) (nil syntax-table (1) 6668 . 6669) (6668 . 6669) (#("\"" 0 1 (fontified nil)) . -6668) (nil syntax-table nil 6671 . 6672) (nil syntax-table (1) 6668 . 6669) (6668 . 6669)) ((#("\"" 0 1 (fontified nil)) . 6668) (nil syntax-table nil 6671 . 6672) (nil syntax-table (1) 6668 . 6669) (nil syntax-table (1) 6668 . 6669) (nil syntax-table nil 6671 . 6672) (6668 . 6669) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6668) (nil syntax-table nil 6671 . 6672) (nil syntax-table (1) 6668 . 6669) (nil syntax-table (1) 6668 . 6669) (nil syntax-table nil 6671 . 6672) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6669) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 6669) (6669 . 6670) (#("CALLB" 0 5 (fontified nil face font-lock-string-face)) . 6669) (#("AVCK " 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face)) . 6674) (6675 . 6679) (#("CK CALLED " 0 9 (fontified nil face font-lock-string-face) 9 10 (fontified nil face font-lock-string-face)) . 6675) (6684 . 6685)) (26236 20710 77173 541000) 0 nil])
([nil nil ((6578 . 6582)) nil (26236 25918 395793 189000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9101) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) 9105 (9101 . 9105) (#("    " 0 4 (fontified nil)) . 9100) (undo-tree-id1227 . -4) (undo-tree-id1228 . -4) (9100 . 9105) (9099 . 9103)) ((#("

  " 0 1 (fontified t) 1 2 (fontified nil) 2 4 (fontified t)) . 9099) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 9100) (9100 . 9104) (#("    " 0 4 (fontified nil)) . 9101) (9101 . 9105)) (26236 24790 864149 207000) 0 nil])
([nil nil ((8025 . 8029) (#("   " 0 3 (fontified nil)) . -8025) (#(" " 0 1 (fontified t)) . 8028) (t 26236 8979 639376 377000)) ((8025 . 8029) (#("    " 0 4 (fontified t)) . 8025)) (26236 20710 30272 22000) 0 nil])
([nil nil ((6706 . 6710)) nil (26236 25918 395791 830000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -9114) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("t" 0 1 (fontified t)) . -9115) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#("d" 0 1 (fontified t)) . -9116) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#(":" 0 1 (fontified t)) . -9117) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#(":" 0 1 (fontified t)) . -9118) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("a" 0 1 (fontified t)) . -9119) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("t" 0 1 (fontified t)) . -9120) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("o" 0 1 (fontified t)) . -9121) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("m" 0 1 (fontified t)) . -9122) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("i" 0 1 (fontified t)) . -9123) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("c" 0 1 (fontified t)) . -9124) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (#("_" 0 1 (fontified t)) . -9125) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("u" 0 1 (fontified t)) . -9126) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("i" 0 1 (fontified t)) . -9127) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("n" 0 1 (fontified t)) . -9128) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (#("t" 0 1 (fontified t)) . -9129) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("3" 0 1 (fontified t)) . -9130) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("2" 0 1 (fontified t)) . -9131) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#("_" 0 1 (fontified t)) . -9132) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) 9133 (#("t" 0 1 (fontified t)) . -9133) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) 9134 (1 . 19) (9101 . 9116) (#("u" 0 1 (fontified nil)) . 9101) (9101 . 9102) (#("atomic_uint32_t" 0 15 (fontified nil)) . -9101) (9101 . 9116) (#("uint23" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -9101) (undo-tree-id1222 . -5) (undo-tree-id1223 . -6) (undo-tree-id1224 . -6) 9107 (9101 . 9107) (9099 . 9101) (9096 . 9099)) ((#("std" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 9096) (undo-tree-id2661 . -3) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 9099) (undo-tree-id2662 . -2) (#("uint23" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 9101) (undo-tree-id2663 . -6) (9101 . 9107) (#("atomic_uint32_t" 0 15 (fontified nil)) . 9101) (9101 . 9116) (#("u" 0 1 (fontified nil)) . 9101) (9101 . 9102) (#("atomic_uint32_t" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil)) . 9101) (undo-tree-id2664 . -15) (#("#include <atomic>
" 0 1 (face font-lock-preprocessor-face fontified t c-is-sws t c-in-sws t) 1 8 (face font-lock-preprocessor-face fontified t c-in-sws t) 8 9 (fontified t c-in-sws t) 9 10 (category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 10 16 (face font-lock-string-face fontified t c-in-sws t) 16 17 (category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t c-in-sws t) 17 18 (fontified t c-in-sws t)) . 1) (undo-tree-id2665 . 9) (undo-tree-id2666 . -17) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (9114 . 9134)) (26236 24790 788659 547000) 0 nil])
([nil nil ((7872 . 7878)) ((#("      " 0 6 (fontified t)) . 7872)) (26236 20709 987968 293000) 0 nil])
([nil nil ((6709 . 6713) (#("    " 0 4 (fontified nil)) . 6708) (undo-tree-id3146 . -4) (undo-tree-id3147 . -4) (6708 . 6713) (#("    " 0 4 (fontified nil)) . 6707) (undo-tree-id3148 . -4) (undo-tree-id3149 . -4) (6707 . 6712) (#("    " 0 4 (fontified nil)) . 6706) (undo-tree-id3150 . -4) (undo-tree-id3151 . -4) (6710 . 6711) (6706 . 6710) (#("   " 0 3 (fontified nil)) . -6706) (undo-tree-id3152 . -3) (#(" " 0 1 (fontified t)) . 6709)) nil (26236 25918 395787 529000) 0 nil])
([nil nil ((9141 . 9154) (9137 . 9141) (9135 . 9137) (9134 . 9135) (#(" " 0 1 (fontified t)) . -9134) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) 9135 (9126 . 9135) (9119 . 9126) (#("uin" 0 3 (fontified nil)) . 9119) (9119 . 9122) (#("uint8_t" 0 7 (fontified nil)) . -9119) (9119 . 9126) (#("uint" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -9119) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) 9123 (9119 . 9123) (9117 . 9119) (9114 . 9117)) ((#("std" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 9114) (undo-tree-id2647 . -3) (undo-tree-id2648 . -3) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 9117) (undo-tree-id2649 . -2) (undo-tree-id2650 . -2) (#("uint" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 9119) (9119 . 9123) (#("uint8_t" 0 7 (fontified nil)) . 9119) (9119 . 9126) (#("uin" 0 3 (fontified nil)) . 9119) (9119 . 9122) (#("uint8_t" 0 7 (face font-lock-type-face fontified nil)) . 9119) (undo-tree-id2651 . -7) (undo-tree-id2652 . -7) (#(" transit " 0 1 (fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil) 4 5 (face font-lock-variable-name-face fontified nil) 5 6 (face font-lock-variable-name-face fontified nil) 6 7 (face font-lock-variable-name-face fontified nil) 7 8 (face font-lock-variable-name-face fontified nil) 8 9 (fontified nil)) . 9126) (undo-tree-id2653 . -8) (undo-tree-id2654 . -8) (9134 . 9135) (#("," 0 1 (c-type c-decl-arg-start fontified nil)) . 9134) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (#(" u" 0 1 (fontified nil) 1 2 (fontified nil)) . 9135) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) (#("nsig" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 9137) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (#("hed int index" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t)) . 9141)) (26236 24790 734323 685000) 0 nil])
([nil nil ((7851 . 7857)) ((#("      " 0 5 (fontified t) 5 6 (fontified t)) . 7851)) (26236 20709 954502 119000) 0 nil])
([nil nil ((6708 . 6712)) nil (26236 25918 395773 743000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9159) (undo-tree-id1131 . -4) (undo-tree-id1132 . -4) (undo-tree-id1134 . -4) (undo-tree-id1136 . -4) (undo-tree-id1138 . -4) (undo-tree-id1140 . -4) (undo-tree-id1142 . -4) (undo-tree-id1144 . -4) (undo-tree-id1146 . -4) (undo-tree-id1148 . -4) (undo-tree-id1150 . -4) 9163 (9159 . 9163) (#("    " 0 4 (fontified nil)) . 9158) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4) (undo-tree-id1155 . -4) (undo-tree-id1157 . -4) (undo-tree-id1159 . -4) (undo-tree-id1161 . -4) (undo-tree-id1163 . -4) (undo-tree-id1165 . -4) (undo-tree-id1167 . -4) (undo-tree-id1169 . -4) (undo-tree-id1171 . -4) (9157 . 9163)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 9157) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -6) (undo-tree-id2530 . -6) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -6) (undo-tree-id2623 . -6) (undo-tree-id2624 . -6) (undo-tree-id2625 . -6) (undo-tree-id2626 . -6) (undo-tree-id2627 . -6) (undo-tree-id2628 . -6) (undo-tree-id2629 . -6) (undo-tree-id2630 . -6) (undo-tree-id2631 . -6) (undo-tree-id2632 . -6) (undo-tree-id2633 . -6) (undo-tree-id2634 . -6) (undo-tree-id2635 . -6) (undo-tree-id2636 . -6) (undo-tree-id2637 . -6) (undo-tree-id2638 . -6) (undo-tree-id2639 . -6) (undo-tree-id2640 . -6) (undo-tree-id2641 . -6) (undo-tree-id2642 . -6) (undo-tree-id2643 . -6) (undo-tree-id2644 . -6) (9158 . 9162) (#("    " 0 4 (fontified nil)) . 9159) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (9159 . 9163)) (26236 24790 678101 641000) 0 nil])
([nil nil ((7844 . 7846) (7840 . 7844)) ((#("_for" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7840) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7844)) (26236 20709 907391 621000) 0 nil])
([nil nil ((6708 . 6712) (#("   " 0 3 (fontified nil)) . -6708) (undo-tree-id3145 . -3) (#(" " 0 1 (fontified t)) . 6711)) nil (26236 25918 395771 571000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9159) (undo-tree-id1289 . 1) (undo-tree-id1290 . -1) (t 26236 23622 913325 700000)) ((9159 . 9160)) (26236 24790 651158 143000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 7844)) ((7844 . 7845)) (26236 20709 867035 603000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6710) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (#("a" 0 1 (fontified t)) . -6711) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (#("u" 0 1 (fontified t)) . -6712) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (#("t" 0 1 (fontified t)) . -6713) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) 6714 (6712 . 6714) (#("y" 0 1 (fontified t)) . -6712) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) 6713 (#("u" 0 1 (fontified t)) . -6713) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) 6714 (6711 . 6714) (#("l" 0 1 (fontified t)) . -6711) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) 6712 (#("a" 0 1 (fontified t)) . -6712) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) 6713 (6712 . 6713) (#("e" 0 1 (fontified t)) . -6712) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) 6713 (6711 . 6713) (6707 . 6711)) nil (26236 25918 395761 405000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9159) (undo-tree-id1288 . 1)) ((9159 . 9160)) (26236 24790 604145 423000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 7844)) ((7844 . 7845)) (26236 20709 826922 908000) 0 nil])
([nil nil ((apply 24 2451 2889 undo--wrap-and-run-primitive-undo 2451 2889 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2886) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2846) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2738) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2669) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2662) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2623) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2521) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -2455) 2451))) nil (26236 25918 395724 813000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9160) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) 9164 (9160 . 9164) (#("    " 0 4 (fontified nil)) . 9159) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (9158 . 9164)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 9158) (9159 . 9163) (#("    " 0 4 (fontified nil)) . 9160) (9160 . 9164)) (26236 24790 566643 344000) 0 nil])
([nil nil ((#("wait" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 7836) (undo-tree-id3426 . -3)) ((7836 . 7840)) (26236 20709 802467 597000) 0 nil])
([nil nil ((#("auto " 0 3 (face font-lock-keyword-face fontified t) 3 4 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 2523) (undo-tree-id3120 . -4)) nil (26236 25918 395722 679000) 0 nil])
([nil nil ((9158 . 9162)) ((#("    " 0 4 (fontified t)) . 9158) (undo-tree-id2441 . -3) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -3) (undo-tree-id2452 . -3) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) (undo-tree-id2484 . -4) (undo-tree-id2485 . -4) (undo-tree-id2486 . -4) (undo-tree-id2487 . -4) (undo-tree-id2488 . -4) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) (undo-tree-id2498 . -4) (undo-tree-id2499 . -4) (undo-tree-id2500 . -4) (undo-tree-id2501 . -4) (undo-tree-id2502 . -4) (undo-tree-id2503 . -3) (undo-tree-id2504 . -3) (undo-tree-id2505 . -3) (undo-tree-id2506 . -3) (undo-tree-id2507 . -3) (undo-tree-id2508 . -3) (undo-tree-id2509 . -3) (undo-tree-id2510 . -3) (undo-tree-id2511 . -3) (undo-tree-id2512 . -3) (undo-tree-id2513 . -3) (undo-tree-id2514 . -3) (undo-tree-id2515 . -3) (undo-tree-id2516 . -3) (undo-tree-id2517 . -3)) (26236 24790 518009 178000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7836)) ((7836 . 7837)) (26236 20709 761390 89000) 0 nil])
([nil nil ((#("topush " 0 6 (fontified t) 6 7 (fontified t)) . 2523) (undo-tree-id3119 . -6)) nil (26236 25918 395719 167000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9577 . 9578) (nil fontified nil 9205 . 9578) (nil fontified nil 9204 . 9205) (nil category c->-as-paren-syntax 9204 . 9205) (nil fontified nil 9193 . 9204) (nil fontified nil 9192 . 9193) (nil category c-<-as-paren-syntax 9192 . 9193) (nil fontified nil 9162 . 9192) (9162 . 9578) 9161) ((#("  auto node = std::make_shared<ServiceNode>(std::string(\"ServeNode\"),
					     std::string(service_name_global),
					     lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE);

  while (node->first_take) {
    rclcpp::spin_some(node);
  }

  if (node->service_result) {
    RCLCPP_INFO(rclcpp::get_logger(\"OutMain\"), \"IT WAS TRUE\");
  } else {
    RCLCPP_INFO(rclcpp::get_logger(\"OutMain\"), \"IT WAS TRUE\");
  }

" 0 2 (fontified nil) 2 5 (face font-lock-keyword-face fontified nil) 5 6 (c-type c-decl-id-start face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 11 (face font-lock-variable-name-face fontified nil) 11 14 (fontified nil) 14 17 (face font-lock-constant-face fontified nil) 17 30 (fontified nil) 30 31 (face (rainbow-delimiters-depth-4-face) fontified nil category c-<-as-paren-syntax) 31 42 (face font-lock-type-face fontified nil) 42 43 (face (rainbow-delimiters-depth-4-face) fontified nil category c->-as-paren-syntax) 43 44 (face (rainbow-delimiters-depth-4-face) fontified nil) 44 47 (face font-lock-constant-face fontified nil) 47 55 (fontified nil) 55 56 (face (rainbow-delimiters-depth-5-face) fontified nil) 56 67 (face font-lock-string-face fontified nil) 67 68 (face (rainbow-delimiters-depth-5-face) fontified nil) 68 70 (fontified nil) 70 80 (fontified nil) 80 83 (face font-lock-constant-face fontified nil) 83 91 (fontified nil) 91 92 (face (rainbow-delimiters-depth-5-face) fontified nil) 92 99 (fontified nil) 99 100 (fontified nil) 100 104 (fontified nil) 104 105 (fontified nil) 105 111 (fontified nil) 111 112 (face (rainbow-delimiters-depth-5-face) fontified nil) 112 114 (fontified nil) 114 124 (fontified nil) 124 138 (face font-lock-constant-face fontified nil) 138 140 (fontified nil) 140 143 (face font-lock-constant-face fontified nil) 143 145 (fontified nil) 145 155 (face font-lock-constant-face fontified nil) 155 177 (fontified nil) 177 178 (face (rainbow-delimiters-depth-4-face) fontified nil) 178 180 (fontified nil) 180 181 (fontified nil) 181 183 (fontified nil) 183 188 (face font-lock-keyword-face fontified nil) 188 189 (fontified nil) 189 190 (face (rainbow-delimiters-depth-4-face) fontified nil) 190 206 (fontified nil) 206 207 (face (rainbow-delimiters-depth-4-face) fontified nil) 207 208 (fontified nil) 208 209 (face (rainbow-delimiters-depth-4-face) fontified nil) 209 210 (fontified nil) 210 214 (fontified nil) 214 220 (face font-lock-constant-face fontified nil) 220 231 (fontified nil) 231 232 (face (rainbow-delimiters-depth-5-face) fontified nil) 232 236 (fontified nil) 236 237 (face (rainbow-delimiters-depth-5-face) fontified nil) 237 239 (fontified nil) 239 241 (fontified nil) 241 242 (face (rainbow-delimiters-depth-4-face) fontified nil) 242 243 (fontified nil) 243 244 (fontified nil) 244 246 (fontified nil) 246 248 (face font-lock-keyword-face fontified nil) 248 249 (fontified nil) 249 250 (face (rainbow-delimiters-depth-4-face) fontified nil) 250 270 (fontified nil) 270 271 (face (rainbow-delimiters-depth-4-face) fontified nil) 271 272 (fontified nil) 272 273 (face (rainbow-delimiters-depth-4-face) fontified nil) 273 274 (fontified nil) 274 278 (fontified nil) 278 289 (fontified nil) 289 290 (face (rainbow-delimiters-depth-5-face) fontified nil) 290 296 (face font-lock-constant-face fontified nil) 296 308 (fontified nil) 308 309 (face (rainbow-delimiters-depth-6-face) fontified nil) 309 318 (face font-lock-string-face fontified nil) 318 319 (face (rainbow-delimiters-depth-6-face) fontified nil) 319 321 (fontified nil) 321 334 (face font-lock-string-face fontified nil) 334 335 (face (rainbow-delimiters-depth-5-face) fontified nil) 335 337 (fontified nil) 337 339 (fontified nil) 339 340 (face (rainbow-delimiters-depth-4-face) fontified nil) 340 341 (fontified nil) 341 345 (face font-lock-keyword-face fontified nil) 345 346 (fontified nil) 346 347 (face (rainbow-delimiters-depth-4-face) fontified nil) 347 348 (fontified nil) 348 352 (fontified nil) 352 363 (fontified nil) 363 364 (face (rainbow-delimiters-depth-5-face) fontified nil) 364 370 (face font-lock-constant-face fontified nil) 370 382 (fontified nil) 382 383 (face (rainbow-delimiters-depth-6-face) fontified nil) 383 392 (face font-lock-string-face fontified nil) 392 393 (face (rainbow-delimiters-depth-6-face) fontified nil) 393 395 (fontified nil) 395 408 (face font-lock-string-face fontified nil) 408 409 (face (rainbow-delimiters-depth-5-face) fontified nil) 409 411 (fontified nil) 411 413 (fontified nil) 413 414 (face (rainbow-delimiters-depth-4-face) fontified nil) 414 415 (fontified nil) 415 416 (fontified nil rear-nonsticky nil)) . 9162) (undo-tree-id2382 . -92) (undo-tree-id2383 . -92) (undo-tree-id2384 . -92) (undo-tree-id2385 . -92) (undo-tree-id2386 . -114) (undo-tree-id2387 . -114) (undo-tree-id2388 . -114) (undo-tree-id2389 . -114) (undo-tree-id2390 . -180) (undo-tree-id2391 . -247) (undo-tree-id2392 . -247) (undo-tree-id2393 . -247) (undo-tree-id2394 . -247) (undo-tree-id2395 . -247) (undo-tree-id2396 . -247) (undo-tree-id2397 . -415) (undo-tree-id2398 . -415) (undo-tree-id2399 . -415) (undo-tree-id2400 . -415) (undo-tree-id2401 . -415) (undo-tree-id2402 . -415) (undo-tree-id2403 . -243) (undo-tree-id2404 . -243) (undo-tree-id2405 . -243) (undo-tree-id2406 . -243) (undo-tree-id2407 . -243) (undo-tree-id2408 . -243) (undo-tree-id2409 . -180) (undo-tree-id2410 . -180) (undo-tree-id2411 . -180) (undo-tree-id2412 . -180) (undo-tree-id2413 . -180) (undo-tree-id2414 . -180) (undo-tree-id2415 . -180) (undo-tree-id2416 . -180) (undo-tree-id2417 . -180) (undo-tree-id2418 . -180) (undo-tree-id2419 . -180) (undo-tree-id2420 . -180) (undo-tree-id2421 . -180) (undo-tree-id2422 . -70) (undo-tree-id2423 . -125) (undo-tree-id2424 . -125) (undo-tree-id2425 . -125) (undo-tree-id2426 . -125) (undo-tree-id2427 . -125) (undo-tree-id2428 . -125) (undo-tree-id2429 . -70) (undo-tree-id2430 . -71) (undo-tree-id2431 . -71) (undo-tree-id2432 . -71) (undo-tree-id2433 . -71) (undo-tree-id2434 . -71) (undo-tree-id2435 . -71) (undo-tree-id2436 . -71) (undo-tree-id2437 . -71) (undo-tree-id2438 . -71) (undo-tree-id2439 . -71) (undo-tree-id2440 . -71) (nil rear-nonsticky t 9577 . 9578)) (26236 24790 490523 627000) 0 nil])
([nil nil ((#("for" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face)) . 7836) (undo-tree-id3422 . -2)) ((7836 . 7839)) (26236 20709 721200 439000) 0 nil])
([nil nil ((#("= " 0 2 (fontified t)) . 2523) (undo-tree-id3118 . -1)) nil (26236 25918 395715 693000) 0 nil])
([nil nil ((9158 . 9162) (#("      " 0 4 (fontified t) 4 6 (fontified t)) . 9158) (undo-tree-id1278 . -3) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -3) (undo-tree-id1283 . -4)) ((9158 . 9164) (#("    " 0 4 (fontified nil)) . 9158) (undo-tree-id2380 . -4) (undo-tree-id2381 . -4)) (26236 24790 451210 848000) 0 nil])
([nil nil ((#("false" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face)) . 7867) (undo-tree-id3420 . -5)) ((7867 . 7872)) (26236 20709 680967 779000) 0 nil])
([nil nil ((#(" this->create_client<lifecycle_msgs::srv::GetState>(get_state_topics[i].c_str())" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-5-face) category c-<-as-paren-syntax fontified t) 21 35 (face font-lock-constant-face fontified t) 35 37 (fontified t) 37 40 (face font-lock-constant-face fontified t) 40 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) category c->-as-paren-syntax fontified t) 51 52 (face (rainbow-delimiters-depth-5-face) fontified t) 52 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-6-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-6-face) fontified t) 71 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-6-face) fontified t) 78 79 (face (rainbow-delimiters-depth-6-face) fontified t) 79 80 (face (rainbow-delimiters-depth-5-face) fontified t)) . 2522) (undo-tree-id3111 . -79) (undo-tree-id3112 . -79) (undo-tree-id3113 . -79) (undo-tree-id3114 . 79) (undo-tree-id3115 . -79) (undo-tree-id3116 . -79) (undo-tree-id3117 . -79) 2601) nil (26236 25918 395711 113000) 0 nil])
([nil nil ((9230 . 9241) (#("					     " 0 10 (fontified t)) . 9230) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) 9231) ((9230 . 9240) (#("					      " 0 11 (fontified t)) . 9230)) (26236 24790 421472 466000) 0 nil])
([nil nil ((7867 . 7887) (#("curr" 0 4 (fontified nil)) . 7867) (7867 . 7871) (#("current_service_done" 0 20 (fontified nil)) . -7867) (7867 . 7887) (#("current" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -7867) (undo-tree-id3224 . -7) (undo-tree-id3226 . -3) (undo-tree-id3228 . -3) (undo-tree-id3230 . -3) (undo-tree-id3232 . -3) (undo-tree-id3234 . -4) (undo-tree-id3236 . -4) (undo-tree-id3238 . -4) (undo-tree-id3240 . -4) (undo-tree-id3242 . -4) (undo-tree-id3244 . -4) (undo-tree-id3246 . -4) (undo-tree-id3248 . -4) (undo-tree-id3250 . -4) (undo-tree-id3252 . -4) (undo-tree-id3254 . -4) (undo-tree-id3256 . -4) (undo-tree-id3258 . -4) (undo-tree-id3260 . -4) (undo-tree-id3262 . -4) (undo-tree-id3264 . -4) (undo-tree-id3266 . -4) (undo-tree-id3268 . -4) (undo-tree-id3270 . -4) (undo-tree-id3272 . -4) (undo-tree-id3274 . -4) (undo-tree-id3276 . -4) (undo-tree-id3278 . -4) (undo-tree-id3280 . -4) (undo-tree-id3282 . -4) (undo-tree-id3284 . -4) (undo-tree-id3286 . -4) (undo-tree-id3288 . -4) (undo-tree-id3290 . -4) (undo-tree-id3292 . -4) (undo-tree-id3294 . -4) (undo-tree-id3296 . -4) (undo-tree-id3298 . -4) (undo-tree-id3300 . -4) (undo-tree-id3302 . -4) (undo-tree-id3304 . -4) (undo-tree-id3306 . -4) (undo-tree-id3308 . -4) (undo-tree-id3310 . -4) (undo-tree-id3312 . -4) (undo-tree-id3314 . -4) (undo-tree-id3316 . -5) (undo-tree-id3318 . -5) (undo-tree-id3320 . -5) (undo-tree-id3322 . -5) (undo-tree-id3324 . -5) (undo-tree-id3326 . -5) (undo-tree-id3328 . -5) (undo-tree-id3330 . -5) (undo-tree-id3332 . -5) (undo-tree-id3334 . -5) (undo-tree-id3336 . -5) (undo-tree-id3338 . -5) (undo-tree-id3340 . -5) (undo-tree-id3342 . -6) (undo-tree-id3344 . -6) (undo-tree-id3346 . -6) (undo-tree-id3348 . -6) (undo-tree-id3350 . -6) (undo-tree-id3352 . -6) (undo-tree-id3354 . -6) (undo-tree-id3356 . -6) (undo-tree-id3358 . -6) (undo-tree-id3360 . -6) (undo-tree-id3362 . -6) (undo-tree-id3364 . -6) (undo-tree-id3366 . -7) (undo-tree-id3368 . -7) (undo-tree-id3370 . -7) (undo-tree-id3372 . -7) (undo-tree-id3374 . -7) (undo-tree-id3376 . -7) (undo-tree-id3378 . -7) (undo-tree-id3380 . -7) (undo-tree-id3382 . -7) (undo-tree-id3384 . -7) (undo-tree-id3386 . -7) (undo-tree-id3388 . -7) (undo-tree-id3390 . -7) (undo-tree-id3392 . -7) (undo-tree-id3394 . -7) (undo-tree-id3396 . -7) (undo-tree-id3398 . -7) (undo-tree-id3400 . -7) (undo-tree-id3402 . -7) (undo-tree-id3404 . -7) (undo-tree-id3406 . -7) (undo-tree-id3408 . -7) (undo-tree-id3410 . -7) (undo-tree-id3412 . -7) (undo-tree-id3414 . -7) (undo-tree-id3416 . -7) (undo-tree-id3418 . -7) 7874 (7867 . 7874)) ((#("current" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 7867) (7867 . 7874) (#("current_service_done" 0 20 (fontified nil)) . 7867) (7867 . 7887) (#("curr" 0 4 (fontified nil)) . 7867) (7867 . 7871) (#("current_service_done" 0 2 (fontified t) 2 20 (fontified t)) . 7867)) (26236 20709 634031 434000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2634 . 2635) (nil fontified nil 2606 . 2635) (nil fontified nil 2605 . 2606) (nil category c->-as-paren-syntax 2605 . 2606) (nil fontified nil 2576 . 2605) (nil fontified nil 2575 . 2576) (nil category c-<-as-paren-syntax 2575 . 2576) (nil fontified nil 2555 . 2575) (2555 . 2635) (#("topush" 0 6 (fontified t)) . 2555) (undo-tree-id3105 . -6) (undo-tree-id3106 . -5) (undo-tree-id3107 . -5) (undo-tree-id3108 . -5) (undo-tree-id3109 . -5) (undo-tree-id3110 . -5) 2561) nil (26236 25918 395555 290000) 0 nil])
([nil nil ((9275 . 9286) (#("					     " 0 10 (fontified t)) . 9275) 9286) ((9275 . 9285) (#("					      " 0 11 (fontified t)) . 9275) (undo-tree-id2376 . -11) (undo-tree-id2377 . -11) (undo-tree-id2378 . -11) (undo-tree-id2379 . -11)) (26236 24790 369365 304000) 0 nil])
([nil nil ((#("();" 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face)) 2 3 (fontified t)) . 7836) (undo-tree-id3438 . -2) (t 26236 9005 837179 837000)) ((7836 . 7839)) (26236 20709 615216 555000) 0 nil])
([nil nil ((#("     ;
" 0 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t)) . 2517) (undo-tree-id3102 . -6) (undo-tree-id3103 . 2) (undo-tree-id3104 . -5) 2522) nil (26236 25918 395539 938000) 0 nil])
([nil nil ((9342 . 9346)) ((#("    " 0 3 (fontified t) 3 4 (fontified t)) . 9342)) (26236 24790 347281 755000) 0 nil])
([nil nil ((7845 . 7853) (#("tim" 0 3 (fontified nil)) . 7845) (7845 . 7848) (#("time_out" 0 8 (fontified nil)) . -7845) (7845 . 7853) (#("tim" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7845) (undo-tree-id3430 . -3) 7848 (7845 . 7848) (#("s" 0 1 (fontified t)) . -7845) (#("t" 0 1 (fontified t)) . -7846) (#("d" 0 1 (fontified t)) . -7847) 7848 (7845 . 7848) (#("std" 0 3 (fontified nil)) . 7845) (7845 . 7848) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7845) (undo-tree-id3435 . -3) 7848 (7845 . 7848) (7844 . 7846) (7836 . 7844)) ((#("wait_for" 0 8 (fontified nil)) . 7836) (undo-tree-id349 . -8) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (undo-tree-id359 . -8) (undo-tree-id360 . -8) (undo-tree-id361 . -8) (undo-tree-id362 . -8) (undo-tree-id363 . -8) (undo-tree-id364 . -8) (undo-tree-id365 . -8) (undo-tree-id366 . -8) (undo-tree-id367 . -8) (undo-tree-id368 . -8) (undo-tree-id369 . -8) (undo-tree-id370 . -8) (undo-tree-id371 . -8) (undo-tree-id372 . -8) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -8) (undo-tree-id376 . -8) (undo-tree-id377 . -8) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -8) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -8) (undo-tree-id386 . -8) (undo-tree-id387 . -8) (undo-tree-id388 . -8) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 7844) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -2) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("std" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7845) (7845 . 7848) (#("std" 0 3 (fontified nil)) . 7845) (7845 . 7848) (#("std" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7845) (7845 . 7848) (#("tim" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7845) (7845 . 7848) (#("time_out" 0 8 (fontified nil)) . 7845) (7845 . 7853) (#("tim" 0 3 (fontified nil)) . 7845) (7845 . 7848) (#("time_out" 0 8 (fontified t)) . 7845) (undo-tree-id429 . -8) (undo-tree-id430 . -8) (undo-tree-id431 . -8) (undo-tree-id432 . -8) (undo-tree-id433 . -8) (undo-tree-id434 . -8) (undo-tree-id435 . -8) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (undo-tree-id454 . -8) (undo-tree-id455 . -8) (undo-tree-id456 . -8) (undo-tree-id457 . -8) (undo-tree-id458 . -8) (undo-tree-id459 . -8) (undo-tree-id460 . -8) (undo-tree-id461 . -8) (undo-tree-id462 . -8) (undo-tree-id463 . -8) (undo-tree-id464 . -8) (undo-tree-id465 . -8) (undo-tree-id466 . -8) (undo-tree-id467 . -8)) (26236 20708 987030 430000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2517) (undo-tree-id3101 . 1)) nil (26236 25918 395527 863000) 0 nil])
([nil nil ((9409 . 9411)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 9409)) (26236 24790 312928 310000) 0 nil])
([nil nil ((7854 . 7855)) ((#(";" 0 1 (fontified t)) . 7854)) (26236 20707 329981 201000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2929 . 2930) (nil fontified nil 2898 . 2930) (nil fontified nil 2897 . 2898) (nil category c->-as-paren-syntax 2897 . 2898) (nil fontified nil 2865 . 2897) (nil fontified nil 2864 . 2865) (nil category c-<-as-paren-syntax 2864 . 2865) (nil fontified nil 2845 . 2864) (2845 . 2930) (#("topush" 0 6 (fontified t)) . 2845) (undo-tree-id3155 . -6) (undo-tree-id3156 . -5) (undo-tree-id3157 . -5) (undo-tree-id3158 . -5) (undo-tree-id3159 . -5) 2851 (t 26236 25918 427182 634000)) nil (26236 25933 658084 46000) 0 nil])
([nil nil ((9583 . 9585)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 9583)) (26236 24790 310073 826000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 7863) (undo-tree-id3442 . -5) 7868 (t 26236 9036 951212 62000)) ((7863 . 7870)) (26236 20707 288689 516000) 0 nil])
([nil nil ((#("      auto topush = this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[i].c_str());
" 0 4 (fontified t) 4 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t category c-<-as-paren-syntax) 40 54 (face font-lock-constant-face fontified t) 54 56 (fontified t) 56 59 (face font-lock-constant-face fontified t) 59 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-5-face) fontified t category c->-as-paren-syntax) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-6-face) fontified t) 94 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-6-face) fontified t) 96 102 (fontified t) 102 103 (face (rainbow-delimiters-depth-6-face) fontified t) 103 104 (face (rainbow-delimiters-depth-6-face) fontified t) 104 105 (face (rainbow-delimiters-depth-5-face) fontified t) 105 106 (fontified t) 106 107 (fontified t)) . 2706) (undo-tree-id3160 . -106) (undo-tree-id3161 . 82) (undo-tree-id3162 . -67) (undo-tree-id3163 . -67) (undo-tree-id3164 . -67) (undo-tree-id3165 . -67) (undo-tree-id3166 . -67) (undo-tree-id3167 . -67) (undo-tree-id3168 . -67) (undo-tree-id3169 . -67) (undo-tree-id3170 . -67) (undo-tree-id3171 . -67) (undo-tree-id3172 . -67) (undo-tree-id3173 . -67) (undo-tree-id3174 . -67) (undo-tree-id3175 . -67) (undo-tree-id3176 . -67) (undo-tree-id3177 . -67) (undo-tree-id3178 . -67) (undo-tree-id3179 . -67) (undo-tree-id3180 . -67) (undo-tree-id3181 . -67) (undo-tree-id3182 . -67) (undo-tree-id3183 . -67) (undo-tree-id3184 . -67) (undo-tree-id3185 . -67) (undo-tree-id3186 . -107) 2773) nil (26236 25935 503380 719000) 0 nil] [nil nil ((#("    for (long unsigned int i; i < change_state_topics.size(); i++) {
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 25 (face font-lock-type-face fontified t) 25 26 (face font-lock-type-face c-type c-decl-id-start fontified t) 26 27 (fontified t) 27 28 (face font-lock-variable-name-face fontified t) 28 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-5-face) fontified t) 59 60 (face (rainbow-delimiters-depth-5-face) fontified t) 60 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t) 66 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-4-face) fontified t) 68 69 (fontified t)) . 2637) (undo-tree-id3153 . -68) (undo-tree-id3154 . -67) 2704) ((2637 . 2706)) (26236 25933 653248 846000) 0 nil])
([nil nil ((9342 . 9346) (#("   " 0 3 (fontified nil)) . -9342) (#(" " 0 1 (fontified t)) . 9345)) ((9342 . 9346) (#("    " 0 4 (fontified t)) . 9342)) (26236 24790 303533 683000) 0 nil])
([nil nil ((#("1000" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 6748) (undo-tree-id3440 . -4)) ((6748 . 6752)) (26236 20707 268950 409000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2706) (undo-tree-id3187 . 1) (undo-tree-id3188 . -1) (t 26236 25935 567244 761000)) nil (26236 25937 926414 971000) 0 nil])
nil
([nil nil ((9347 . 9351) (#("  " 0 2 (fontified t)) . 9347) 9350) ((9347 . 9349) (#("    " 0 4 (fontified t)) . 9347)) (26236 24790 298778 967000) 0 nil])
([nil nil ((6748 . 6752)) ((#("4000" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 6748)) (26236 20707 243349 659000) 0 nil])
([nil nil ((2832 . 2836) (t 26236 25937 991253 698000)) nil (26236 25996 929812 451000) 0 nil])
([nil nil ((9378 . 9384) (#("    " 0 4 (fontified t)) . 9378) 9383) ((9378 . 9382) (#("      " 0 6 (fontified t)) . 9378)) (26236 24790 294224 910000) 0 nil])
([nil nil ((6565 . 6566) (6554 . 6565) (6553 . 6554) (6552 . 6553) (6551 . 6552) (6546 . 6551) (6545 . 6546) (6544 . 6545) (6538 . 6544) (#("c" 0 1 (fontified nil)) . 6538) (6538 . 6539) (#("chrono" 0 6 (fontified nil)) . -6538) (6538 . 6544) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -6538) (undo-tree-id3555 . -2) 6540 (6538 . 6540) (6531 . 6533) (6535 . 6536) (#("  " 0 2 (fontified nil)) . 6531) (6536 . 6537) (#("_" 0 1 (fontified t)) . -6536) (undo-tree-id3558 . -1) (#("c" 0 1 (fontified t)) . -6537) (undo-tree-id3560 . -1) (#("h" 0 1 (fontified t)) . -6538) (undo-tree-id3562 . -1) (#("o" 0 1 (fontified t)) . -6539) (#("r" 0 1 (fontified t)) . -6540) 6541 (6537 . 6541) (6536 . 6537) (6533 . 6536) (6530 . 6533) (t 26236 9049 379992 47000)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 6530) (#("std" 0 3 (face font-lock-constant-face fontified nil)) . 6533) (#("_" 0 1 (fontified nil)) . 6536) (#("chor" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 6537) (6536 . 6541) (#(":" 0 1 (fontified nil)) . 6536) (6531 . 6533) (#(":" 0 1 (fontified nil)) . 6535) (#("  " 0 2 (fontified nil)) . 6531) (#("ch" 0 1 (fontified nil) 1 2 (fontified nil)) . 6538) (6538 . 6540) (#("chrono" 0 6 (fontified nil)) . 6538) (6538 . 6544) (#("c" 0 1 (fontified nil)) . 6538) (6538 . 6539) (#("chrono" 0 6 (face font-lock-constant-face fontified nil)) . 6538) (#(":" 0 1 (fontified nil)) . 6544) (#(":" 0 1 (fontified nil)) . 6545) (#("secon" 0 5 (face font-lock-type-face fontified nil)) . 6546) (#("d" 0 1 (face font-lock-type-face fontified nil)) . 6551) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified nil)) . 6552) (#(" " 0 1 (fontified nil)) . 6553) (#("towait = 4s" 0 6 (face font-lock-variable-name-face fontified nil) 6 11 (fontified nil)) . 6554) (#(";" 0 1 (fontified t)) . 6565)) (26236 20707 178408 125000) 0 nil])
([nil nil ((2896 . 2899) (2895 . 2896) (2881 . 2895) (2880 . 2881) (2879 . 2880) (2878 . 2879) (#(":" 0 1 (face font-lock-string-face fontified t)) . -2878) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2879) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) 2880 (2879 . 2880) (2878 . 2879) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2878) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) 2879 (2870 . 2879) (2869 . 2870) (#("A" 0 1 (face font-lock-string-face fontified t)) . -2869) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2870) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -2871) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -2872) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2873) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2874) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -2875) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -2876) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2877) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) 2878 (2877 . 2878) (2876 . 2877) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2876) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) 2877 (2872 . 2877) (2869 . 2872) (#("S" 0 1 (face font-lock-string-face fontified t)) . -2869) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2870) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2871) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2872) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2873) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2874) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) 2875 (2869 . 2875) (2869 . 2870) (nil syntax-table nil 2870 . 2871) (nil syntax-table (1) 2868 . 2869) (2868 . 2869) (#("\"" 0 1 (fontified nil)) . -2868) (nil syntax-table nil 2870 . 2871) (nil syntax-table (1) 2868 . 2869) (2867 . 2869) (2866 . 2867) (apply yas--snippet-revive 2854 2866 #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 2848 2900 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 2848 2900 nil nil nil t nil) nil)) (2854 . 2866) (#("get_logger()" 0 12 (fontified nil)) . 2854) (2854 . 2866) (#("get_logger() const" 0 18 (fontified nil)) . -2854) (2854 . 2872) (#("get_lo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -2854) (undo-tree-id3227 . -5) (undo-tree-id3228 . -6) (undo-tree-id3229 . -6) 2860 (2858 . 2860) (2854 . 2858) (2853 . 2854) (2849 . 2853) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 2849) (2848 . 2849) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2848 2900 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2848 2900 nil nil nil t nil) nil nil)) (2836 . 2860) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 2836) (2836 . 2865) (#("RCLCPP_I" 0 8 (fontified nil)) . 2836) (2836 . 2844) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -2836) (2836 . 2860) (#("RCLCPP_IN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -2836) (undo-tree-id3230 . -9) (undo-tree-id3231 . -9) 2845 (2836 . 2845) (2832 . 2836) (#("   " 0 3 (fontified nil)) . -2832) (undo-tree-id3232 . -3) (#(" " 0 1 (fontified t)) . 2835)) nil (26236 25996 929790 133000) 0 nil])
([nil nil ((9413 . 9417) (#(" " 0 1 (fontified nil)) . -9413) (#(" " 0 1 (fontified t)) . 9414)) ((9413 . 9415) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 9413)) (26236 24790 86619 997000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face)) . 6758) (undo-tree-id3553 . -3)) ((6758 . 6761)) (26236 20707 134246 139000) 0 nil])
([nil nil ((apply yas--snippet-revive 2836 2901 #s(yas--snippet nil (#s(yas--field 1 2848 2900 nil nil nil t nil)) nil 33 nil #s(yas--field 1 2848 2900 nil nil nil t nil) nil nil))) nil (26236 25996 929666 765000) 0 nil])
([nil nil ((9418 . 9422) (#("  " 0 2 (fontified t)) . 9418) 9421) ((9418 . 9420) (#("    " 0 4 (fontified t)) . 9418)) (26236 24790 39110 919000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 6758) (undo-tree-id3551 . -2)) ((6758 . 6760)) (26236 20707 90823 258000) 0 nil])
([nil nil ((apply -9 2451 2646 undo--wrap-and-run-primitive-undo 2451 2646 ((2640 . 2643) (2524 . 2527) (2455 . 2458) 2451))) nil (26236 25996 929655 67000) 0 nil])
([nil nil ((9450 . 9456) (#("    " 0 4 (fontified t)) . 9450) 9455) ((9450 . 9454) (#("      " 0 6 (fontified t)) . 9450)) (26236 24790 13367 563000) 0 nil])
([nil nil ((#("chrono" 0 6 (fontified t face font-lock-constant-face)) . 6758) (undo-tree-id3549 . -6)) ((6758 . 6764)) (26236 20707 70480 113000) 0 nil])
([nil nil ((2910 . 2911) (2909 . 2910) (t 26236 25997 7482 218000)) nil (26236 26037 286497 780000) 0 nil])
([nil nil ((9409 . 9413) (#("  " 0 2 (fontified t)) . -9409) (undo-tree-id1275 . -2) 9411) ((9409 . 9411) (#("    " 0 4 (fontified t)) . 9409)) (26236 24789 960099 102000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 6758) (undo-tree-id3547 . -2)) ((6758 . 6760)) (26236 20707 68592 272000) 0 nil])
([nil nil ((2907 . 2908)) nil (26236 26037 286493 861000) 0 nil])
([nil nil ((9415 . 9419) (#("   " 0 3 (fontified nil)) . -9415) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (#(" " 0 1 (fontified t)) . 9418)) ((9415 . 9419) (#("    " 0 4 (fontified t)) . 9415)) (26236 24789 924975 847000) 0 nil])
([nil nil ((#("milliseconds" 0 12 (fontified t)) . 6758) (undo-tree-id3545 . -12)) ((6758 . 6770)) (26236 20707 66820 823000) 0 nil])
([nil nil ((2929 . 2931) (2925 . 2929) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -2925) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 2926) (2925 . 2927) (2920 . 2925) (#("e" 0 1 (fontified t)) . -2920) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (#("n" 0 1 (fontified t)) . -2921) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (#("t" 0 1 (fontified t)) . -2922) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) 2923 (2914 . 2923) (2911 . 2914) (2910 . 2911) (#("." 0 1 (fontified t)) . -2910) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (#(" " 0 1 (fontified t)) . -2911) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (#("c" 0 1 (fontified t)) . -2912) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (#("h" 0 1 (fontified t)) . -2913) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) 2914 (2909 . 2914) (nil syntax-table nil 2910 . 2911) (nil syntax-table (1) 2877 . 2878) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -2909) (2909 . 2910) (nil syntax-table nil 2910 . 2911) (nil syntax-table (1) 2877 . 2878) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -2909) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (#("," 0 1 (fontified t)) . -2910) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (#(" " 0 1 (fontified t)) . -2911) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (#("c" 0 1 (fontified nil)) . -2912) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (#("h" 0 1 (fontified t)) . -2913) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (#("a" 0 1 (fontified t)) . -2914) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (#("n" 0 1 (fontified t)) . -2915) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (#("g" 0 1 (fontified t)) . -2916) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (#("e" 0 1 (fontified t)) . -2917) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (#("_" 0 1 (fontified t)) . -2918) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (#("s" 0 1 (fontified t)) . -2919) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (#("t" 0 1 (fontified t)) . -2920) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (#("a" 0 1 (fontified t)) . -2921) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (#("t" 0 1 (fontified t)) . -2922) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (#("e" 0 1 (fontified t)) . -2923) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (#("_" 0 1 (fontified t)) . -2924) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (#("t" 0 1 (fontified t)) . -2925) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (#("o" 0 1 (fontified t)) . -2926) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (#("p" 0 1 (fontified t)) . -2927) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (#("i" 0 1 (fontified t)) . -2928) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (#("c" 0 1 (fontified t)) . -2929) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) 2930 (#("s" 0 1 (fontified t)) . -2930) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) 2931 (2912 . 2931) (#("ch" 0 2 (fontified nil)) . 2912) (2912 . 2914) (#("change_state_topics" 0 19 (fontified nil)) . -2912) (2912 . 2931) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -2912) (undo-tree-id3296 . -2) (undo-tree-id3297 . -2) 2914 (2912 . 2914)) nil (26236 26037 286463 915000) 0 nil])
([nil nil ((9517 . 9521) (#("  " 0 2 (fontified t)) . 9517) 9523) ((9517 . 9519) (#("    " 0 4 (fontified t)) . 9517)) (26236 24789 877259 230000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 6758)) ((6758 . 6759)) (26236 20707 65041 675000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2834) (undo-tree-id3298 . -6) (undo-tree-id3299 . -6) 2840 (2833 . 2840) (t 26236 26037 351649 782000)) nil (26236 26058 664933 508000) 0 nil])
([nil nil ((9530 . 9536) (#("    " 0 4 (fontified t)) . 9530) 9538) ((9530 . 9534) (#("      " 0 6 (fontified t)) . 9530)) (26236 24789 845176 670000) 0 nil])
([nil nil ((#("4000" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 6758) (undo-tree-id3542 . -4)) ((6758 . 6762)) (26236 20707 63222 591000) 0 nil])
([nil nil ((apply 9 8954 9079 undo--wrap-and-run-primitive-undo 8954 9079 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -9058) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -8977) (#("// " 0 1 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . -8956) 9088))) nil (26236 26058 664898 375000) 0 nil])
([nil nil ((9595 . 9599) (#("  " 0 2 (fontified t)) . -9595) (undo-tree-id1271 . -2) (undo-tree-id1272 . -2) 9597) ((9595 . 9597) (#("    " 0 4 (fontified t)) . 9595)) (26236 24789 800005 241000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6758) (undo-tree-id3540 . -1)) ((6758 . 6759)) (26236 20707 61097 575000) 0 nil])
([nil nil ((8954 . 8956) (8954 . 8956) (t 26236 26058 731742 19000)) nil (26236 26062 522076 324000) 0 nil])
([nil nil ((9601 . 9605) (#(" " 0 1 (fontified nil)) . -9601) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#(" " 0 1 (fontified t)) . 9602)) ((9601 . 9603) (#("    " 0 4 (fontified t)) . 9601) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1)) (26236 24789 760797 897000) 0 nil])
([nil nil ((6758 . 6764) (#("to" 0 2 (fontified nil)) . 6758) (6758 . 6760) (#("towait" 0 6 (fontified nil)) . -6758) (6758 . 6764) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -6758) (undo-tree-id3444 . -2) (undo-tree-id3446 . -2) (undo-tree-id3448 . -2) (undo-tree-id3450 . -2) (undo-tree-id3452 . -2) (undo-tree-id3454 . -2) (undo-tree-id3456 . -2) (undo-tree-id3458 . -2) (undo-tree-id3460 . -2) (undo-tree-id3462 . -2) (undo-tree-id3464 . -2) (undo-tree-id3466 . -2) (undo-tree-id3468 . -2) (undo-tree-id3470 . -2) (undo-tree-id3472 . -2) (undo-tree-id3474 . -2) (undo-tree-id3476 . -2) (undo-tree-id3478 . -2) (undo-tree-id3480 . -2) (undo-tree-id3482 . -2) (undo-tree-id3484 . -2) (undo-tree-id3486 . -2) (undo-tree-id3488 . -2) (undo-tree-id3490 . -2) (undo-tree-id3492 . -2) (undo-tree-id3494 . -2) (undo-tree-id3496 . -2) (undo-tree-id3498 . -2) (undo-tree-id3500 . -2) (undo-tree-id3502 . -2) (undo-tree-id3504 . -2) (undo-tree-id3506 . -2) (undo-tree-id3508 . -2) (undo-tree-id3510 . -2) (undo-tree-id3512 . -2) (undo-tree-id3514 . -2) (undo-tree-id3516 . -2) (undo-tree-id3518 . -2) (undo-tree-id3520 . -2) (undo-tree-id3522 . -2) (undo-tree-id3524 . -2) (undo-tree-id3526 . -2) (undo-tree-id3528 . -2) (undo-tree-id3530 . -2) (undo-tree-id3532 . -2) (undo-tree-id3534 . -2) (undo-tree-id3536 . -2) (undo-tree-id3538 . -2) 6760 (6758 . 6760)) ((#("to" 0 1 (fontified nil) 1 2 (fontified nil)) . 6758) (6758 . 6760) (#("towait" 0 6 (fontified nil)) . 6758) (6758 . 6764) (#("to" 0 2 (fontified nil)) . 6758) (6758 . 6760) (#("towait" 0 6 (fontified t)) . 6758)) (26236 20706 841965 209000) 0 nil])
([nil nil ((#("change" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2913) (undo-tree-id3396 . -5) (undo-tree-id3397 . -6) (t 26236 26062 587758 898000)) nil (26236 26107 281329 124000) 0 nil])
([nil nil ((9606 . 9610)) ((#("    " 0 4 (fontified t)) . 9606) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1)) (26236 24789 715282 65000) 0 nil])
([nil nil ((7691 . 7692) (7683 . 7691) (#("ti" 0 2 (fontified nil)) . 7683) (7683 . 7685) (#("time_out" 0 8 (fontified nil)) . -7683) (7683 . 7691) (#("ti" 0 1 (fontified t) 1 2 (fontified t)) . -7683) (undo-tree-id3566 . -2) 7685 (7683 . 7685) (#("4" 0 1 (fontified t)) . -7683) 7684 (7680 . 7684) (7674 . 7680) (#("to" 0 2 (fontified nil)) . 7674) (7674 . 7676) (#("towait" 0 6 (fontified nil)) . -7674) (7674 . 7680) (#("tow" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7674) (undo-tree-id3569 . -3) 7677 (7674 . 7677) (7670 . 7674) (t 26236 9082 601992 176000)) ((#("    " 0 4 (fontified nil)) . 7670) (#("tow" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 7674) (7674 . 7677) (#("towait" 0 6 (fontified nil)) . 7674) (7674 . 7680) (#("to" 0 2 (fontified nil)) . 7674) (7674 . 7676) (#("towait" 0 6 (fontified nil)) . 7674) (#(" = 4" 0 3 (fontified nil) 3 4 (fontified nil)) . 7680) (7683 . 7684) (#("ti" 0 1 (fontified nil) 1 2 (fontified nil)) . 7683) (7683 . 7685) (#("time_out" 0 8 (fontified nil)) . 7683) (7683 . 7691) (#("ti" 0 2 (fontified nil)) . 7683) (7683 . 7685) (#("time_out" 0 8 (fontified nil)) . 7683) (#(";" 0 1 (fontified t)) . 7691)) (26236 20706 771157 339000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2913)) nil (26236 26107 281323 302000) 0 nil])
([nil nil ((9611 . 9615)) ((#("    " 0 4 (fontified t)) . 9611) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1)) (26236 24789 681341 787000) 0 nil])
([nil nil ((6784 . 6785) (t 26236 9094 574683 867000)) ((#("=" 0 1 (fontified t)) . 6784)) (26236 20706 727510 557000) 0 nil])
([nil nil ((#("cients" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2913) (undo-tree-id3394 . -6) (undo-tree-id3395 . -5)) nil (26236 26107 281321 3000) 0 nil])
([nil nil ((9616 . 9620)) ((#("    " 0 4 (fontified t)) . 9616) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1)) (26236 24789 636190 480000) 0 nil])
([nil nil ((6949 . 6950) (t 26236 9137 25018 857000)) ((#("c" 0 1 (fontified t)) . 6949)) (26236 20706 705080 596000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2913) (undo-tree-id3392 . 1) (undo-tree-id3393 . -1)) nil (26236 26107 281315 759000) 0 nil])
([nil nil ((9621 . 9625)) ((#("    " 0 4 (fontified t)) . 9621)) (26236 24789 600463 815000) 0 nil])
([nil nil ((6668 . 6670) (#("  " 0 2 (fontified nil)) . 6667) (undo-tree-id3571 . -2) (6667 . 6670) (#("  " 0 2 (fontified nil)) . 6666) (undo-tree-id3573 . -2) (6666 . 6669) (#(" " 0 1 (fontified nil)) . 6666) (6665 . 6666) (t 26236 9171 586792 150000)) ((#("
" 0 1 (fontified nil)) . 6665) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (6666 . 6667) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 6666) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (6666 . 6668) (#("  
" 0 2 (fontified nil) 2 3 (fontified nil)) . 6667) (6667 . 6669) (#("  " 0 2 (fontified t)) . 6668)) (26236 20706 644336 525000) 0 nil])
([nil nil ((#("len" 0 2 (fontified t) 2 3 (fontified t)) . 2913) (undo-tree-id3389 . -2) (undo-tree-id3390 . 3) (undo-tree-id3391 . -3)) nil (26236 26107 281309 933000) 0 nil])
([nil nil ((9630 . 9632)) ((#("  " 0 2 (fontified t)) . 9630)) (26236 24789 553915 278000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6760 . 6761) (nil fontified nil 6738 . 6761) (nil fontified nil 6737 . 6738) (nil category c->-as-paren-syntax 6737 . 6738) (nil fontified nil 6715 . 6737) (nil fontified nil 6714 . 6715) (nil category c-<-as-paren-syntax 6714 . 6715) (nil fontified nil 6667 . 6714) (6667 . 6761)) ((#("
  void response_callback(
      rclcpp::Client<std_srvs::srv::SetBool>::SharedFuture future) " 0 1 (fontified nil) 1 3 (c-in-sws t c-is-sws t fontified nil) 3 4 (face font-lock-type-face c-is-sws t fontified nil) 4 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified nil) 7 8 (fontified nil) 8 25 (face font-lock-function-name-face fontified nil) 25 26 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified nil) 26 27 (fontified nil) 27 33 (fontified nil) 33 39 (face font-lock-constant-face fontified nil) 39 41 (fontified nil) 41 47 (face font-lock-constant-face fontified nil) 47 48 (face (rainbow-delimiters-depth-4-face) category c-<-as-paren-syntax fontified nil) 48 51 (face font-lock-constant-face fontified nil) 51 52 (face font-lock-constant-face fontified nil) 52 56 (face font-lock-constant-face fontified nil) 56 58 (fontified nil) 58 61 (face font-lock-constant-face fontified nil) 61 63 (fontified nil) 63 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-4-face) category c->-as-paren-syntax fontified nil) 71 73 (fontified nil) 73 85 (face font-lock-type-face fontified nil) 85 86 (fontified nil) 86 92 (face font-lock-variable-name-face fontified nil) 92 93 (face (rainbow-delimiters-depth-3-face) fontified nil) 93 94 (rear-nonsticky nil fontified nil)) . 6667) (undo-tree-id74 . -27) (undo-tree-id75 . -63) (undo-tree-id76 . -63) (undo-tree-id77 . -63) (undo-tree-id78 . -63) (undo-tree-id79 . -63) (undo-tree-id80 . -63) (undo-tree-id81 . -63) (undo-tree-id82 . -63) (undo-tree-id83 . -63) (undo-tree-id84 . -63) (undo-tree-id85 . -63) (undo-tree-id86 . -63) (undo-tree-id87 . -63) (undo-tree-id88 . -63) (undo-tree-id89 . -63) (undo-tree-id90 . -63) (undo-tree-id91 . -63) (undo-tree-id92 . -63) (undo-tree-id93 . -63) (undo-tree-id94 . -63) (undo-tree-id95 . -63) (undo-tree-id96 . -63) (undo-tree-id97 . -63) (undo-tree-id98 . -63) (undo-tree-id99 . -63) (undo-tree-id100 . -63) (undo-tree-id101 . -48) (undo-tree-id102 . -48) (undo-tree-id103 . -48) (undo-tree-id104 . -48) (undo-tree-id105 . -48) (undo-tree-id106 . -48) (undo-tree-id107 . -48) (undo-tree-id108 . -48) (undo-tree-id109 . -48) (undo-tree-id110 . -48) (undo-tree-id111 . -48) (undo-tree-id112 . -48) (undo-tree-id113 . -48) (undo-tree-id114 . -48) (undo-tree-id115 . -48) (undo-tree-id116 . -48) (undo-tree-id117 . -48) (undo-tree-id118 . -48) (undo-tree-id119 . -48) (undo-tree-id120 . -48) (undo-tree-id121 . -48) (undo-tree-id122 . -48) (undo-tree-id123 . -48) (undo-tree-id124 . -48) (undo-tree-id125 . -48) (undo-tree-id126 . -48) (undo-tree-id127 . -48) (undo-tree-id128 . -48) (undo-tree-id129 . -48) (undo-tree-id130 . -48) (undo-tree-id131 . -48) (undo-tree-id132 . -48) (undo-tree-id133 . -48) (undo-tree-id134 . -48) (undo-tree-id135 . -48) (undo-tree-id136 . -48) (undo-tree-id137 . -48) (undo-tree-id138 . -48) (undo-tree-id139 . -48) (undo-tree-id140 . -48) (undo-tree-id141 . -48) (undo-tree-id142 . -48) (undo-tree-id143 . -48) (undo-tree-id144 . -48) (undo-tree-id145 . -48) (undo-tree-id146 . -48) (undo-tree-id147 . -48) (undo-tree-id148 . -48) (undo-tree-id149 . -48) (undo-tree-id150 . -48) (nil rear-nonsticky nil 6760 . 6761)) (26236 20706 594944 444000) 0 nil])
([nil nil ((#("())" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2913) (undo-tree-id3384 . -2) (undo-tree-id3385 . 3) (undo-tree-id3386 . -1) (undo-tree-id3387 . -2) (undo-tree-id3388 . -3)) nil (26236 26107 281302 546000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t rear-nonsticky t)) . 9601) (undo-tree-id1267 . -4) (undo-tree-id1268 . -1) 9602) ((9601 . 9606)) (26236 24789 529143 98000) 0 nil])
([nil nil ((apply -3 6567 6670 undo--wrap-and-run-primitive-undo 6567 6670 ((6572 . 6575) 6567))) ((apply 3 6567 6667 undo--wrap-and-run-primitive-undo 6567 6667 ((#("// " 0 1 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t)) . 6572) 6718))) (26236 20706 555347 7000) 0 nil])
([nil nil ((2914 . 2915) (2913 . 2914) (#(")" 0 1 (fontified nil)) . -2913) (2913 . 2914)) nil (26236 26107 281290 982000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 9601) (undo-tree-id1263 . -4) (undo-tree-id1264 . 1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) 9602) ((9601 . 9606)) (26236 24789 483170 473000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 6718) (undo-tree-id3663 . -3) (t 26236 9274 403463 889000)) ((6718 . 6721)) (26236 20706 515210 808000) 0 nil])
([nil nil ((apply yas--snippet-revive 2928 2934 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (2928 . 2934) (#("size()" 0 6 (fontified nil)) . 2928) (2928 . 2934) (#("size() const" 0 12 (fontified nil)) . -2928) (2928 . 2940) (#("si" 0 1 (fontified t) 1 2 (fontified t)) . -2928) (undo-tree-id3300 . -1) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -2) (undo-tree-id3307 . -2) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2) (undo-tree-id3310 . -2) (undo-tree-id3311 . -2) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -2) (undo-tree-id3331 . -2) (undo-tree-id3332 . -2) (undo-tree-id3333 . -2) (undo-tree-id3334 . -2) (undo-tree-id3335 . -2) (undo-tree-id3336 . -2) (undo-tree-id3337 . -2) (undo-tree-id3338 . -2) (undo-tree-id3339 . -2) (undo-tree-id3340 . -2) (undo-tree-id3341 . -2) (undo-tree-id3342 . -2) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -2) (undo-tree-id3346 . -2) (undo-tree-id3347 . -2) (undo-tree-id3348 . -2) (undo-tree-id3349 . -2) (undo-tree-id3350 . -2) (undo-tree-id3351 . -2) (undo-tree-id3352 . -2) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -2) (undo-tree-id3356 . -2) (undo-tree-id3357 . -2) (undo-tree-id3358 . -2) (undo-tree-id3359 . -2) (undo-tree-id3360 . -2) (undo-tree-id3361 . -2) (undo-tree-id3362 . -2) (undo-tree-id3363 . -2) (undo-tree-id3364 . -2) (undo-tree-id3365 . -2) (undo-tree-id3366 . -2) (undo-tree-id3367 . -2) (undo-tree-id3368 . -2) (undo-tree-id3369 . -2) (undo-tree-id3370 . -2) (undo-tree-id3371 . -2) (undo-tree-id3372 . -2) (undo-tree-id3373 . -2) (undo-tree-id3374 . -2) (undo-tree-id3375 . -2) (undo-tree-id3376 . -2) 2930 (2928 . 2930) (#("l" 0 1 (fontified t)) . -2928) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (#("e" 0 1 (fontified t)) . -2929) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) 2930 (2927 . 2930) (2913 . 2927) (#("ch" 0 2 (fontified nil)) . 2913) (2913 . 2915) (#("change_clients" 0 14 (fontified nil)) . -2913) (2913 . 2927) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -2913) (undo-tree-id3382 . -2) (undo-tree-id3383 . -2) 2915 (2913 . 2915)) nil (26236 26107 281268 15000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 9601) (undo-tree-id1259 . -4) (undo-tree-id1260 . 5) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) 9602) ((9601 . 9606)) (26236 24789 451226 699000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . 6718)) ((6718 . 6719)) (26236 20706 495023 335000) 0 nil])
([nil nil ((#("  // void die() {

  //   bool val;

  //   for (long unsigned int i = 0; i < change_state_topics.size(); i++) {
  //     val = change_state(lifecycle_msgs::msg::Transition::TRANSITION_UNCONFIGURED_SHUTDOWN, i);

  //     RCLCPP_INFO(this->get_logger(), \"ENDING: i : %li val : %i\",i, val );
      
  //   }

  // }

" 0 2 (fontified t c-is-sws t c-in-sws t) 2 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 3 5 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 5 8 (face font-lock-comment-face fontified t c-in-sws t) 8 9 (face font-lock-comment-face fontified t c-in-sws t) 9 10 (face font-lock-comment-face fontified t c-in-sws t) 10 13 (face font-lock-comment-face fontified t c-in-sws t) 13 14 (face font-lock-comment-face fontified t c-in-sws t) 14 15 (face font-lock-comment-face fontified t c-in-sws t) 15 16 (face font-lock-comment-face fontified t c-in-sws t) 16 17 (face font-lock-comment-face fontified t c-in-sws t) 17 18 (face font-lock-comment-face fontified t c-in-sws t) 18 21 (fontified t c-in-sws t) 21 24 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 24 26 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26 29 (face font-lock-comment-face fontified t c-in-sws t) 29 30 (face font-lock-comment-face fontified t c-in-sws t) 30 31 (face font-lock-comment-face fontified t c-in-sws t) 31 34 (face font-lock-comment-face fontified t c-in-sws t) 34 36 (face font-lock-comment-face fontified t c-in-sws t) 36 39 (fontified t c-in-sws t) 39 42 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 42 44 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 44 47 (face font-lock-comment-face fontified t c-in-sws t) 47 48 (face font-lock-comment-face fontified t c-in-sws t) 48 49 (face font-lock-comment-face fontified t c-in-sws t) 49 53 (face font-lock-comment-face fontified t c-in-sws t) 53 54 (face font-lock-comment-face fontified t c-in-sws t) 54 62 (face font-lock-comment-face fontified t c-in-sws t) 62 63 (face font-lock-comment-face fontified t c-in-sws t) 63 65 (face font-lock-comment-face fontified t c-in-sws t) 65 66 (face font-lock-comment-face fontified t c-in-sws t) 66 67 (face font-lock-comment-face fontified t c-in-sws t) 67 68 (face font-lock-comment-face fontified t c-in-sws t) 68 102 (face font-lock-comment-face fontified t c-in-sws t) 102 103 (face font-lock-comment-face fontified t c-in-sws t) 103 104 (face font-lock-comment-face fontified t c-in-sws t) 104 109 (face font-lock-comment-face fontified t c-in-sws t) 109 110 (face font-lock-comment-face fontified t c-in-sws t) 110 111 (face font-lock-comment-face fontified t c-in-sws t) 111 112 (face font-lock-comment-face fontified t c-in-sws t) 112 113 (face font-lock-comment-face fontified t c-in-sws t) 113 115 (fontified t c-in-sws t) 115 118 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 118 122 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 122 140 (face font-lock-comment-face fontified t c-in-sws t) 140 141 (face font-lock-comment-face fontified t c-in-sws t) 141 146 (face font-lock-comment-face fontified t c-in-sws t) 146 155 (face font-lock-comment-face fontified t c-in-sws t) 155 157 (face font-lock-comment-face fontified t c-in-sws t) 157 160 (face font-lock-comment-face fontified t c-in-sws t) 160 162 (face font-lock-comment-face fontified t c-in-sws t) 162 172 (face font-lock-comment-face fontified t c-in-sws t) 172 207 (face font-lock-comment-face fontified t c-in-sws t) 207 209 (face font-lock-comment-face fontified t c-in-sws t) 209 210 (face font-lock-comment-face fontified t c-in-sws t) 210 212 (face font-lock-comment-face fontified t c-in-sws t) 212 213 (fontified t c-in-sws t) 213 215 (fontified t c-in-sws t) 215 218 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 218 222 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 222 233 (face font-lock-comment-face fontified t c-in-sws t) 233 234 (face font-lock-comment-face fontified t c-in-sws t) 234 238 (face font-lock-comment-face fontified t c-in-sws t) 238 250 (face font-lock-comment-face fontified t c-in-sws t) 250 251 (face font-lock-comment-face fontified t c-in-sws t) 251 252 (face font-lock-comment-face fontified t c-in-sws t) 252 254 (face font-lock-comment-face fontified t c-in-sws t) 254 269 (face font-lock-comment-face fontified t c-in-sws t) 269 280 (face font-lock-comment-face fontified t c-in-sws t) 280 281 (face font-lock-comment-face fontified t c-in-sws t) 281 283 (face font-lock-comment-face fontified t c-in-sws t) 283 287 (face font-lock-comment-face fontified t c-in-sws t) 287 288 (face font-lock-comment-face fontified t c-in-sws t) 288 289 (face font-lock-comment-face fontified t c-in-sws t) 289 290 (face font-lock-comment-face fontified t c-in-sws t) 290 291 (face font-lock-comment-face fontified t c-in-sws t) 291 295 (fontified t c-in-sws t) 295 296 (fontified t c-in-sws t) 296 297 (fontified t c-in-sws t) 297 298 (fontified t c-in-sws t) 298 299 (c-in-sws t c-is-sws t fontified t) 299 300 (c-is-sws t fontified t c-in-sws t) 300 301 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 301 303 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 303 305 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 305 306 (face font-lock-comment-face fontified t c-in-sws t) 306 307 (face font-lock-comment-face fontified t c-in-sws t) 307 308 (c-in-sws t fontified t) 308 309 (fontified t c-in-sws t) 309 310 (fontified t c-in-sws t) 310 311 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 311 313 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 313 314 (face font-lock-comment-face fontified t c-in-sws t) 314 315 (face font-lock-comment-face fontified t c-in-sws t) 315 316 (fontified t c-in-sws t)) . 7895) (undo-tree-id3420 . -315) (undo-tree-id3421 . -315) (undo-tree-id3422 . -315) (undo-tree-id3423 . -308) (undo-tree-id3424 . -315) (t 26236 26107 319959 919000)) nil (26236 26267 19184 869000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 9601) (undo-tree-id1255 . -4) (undo-tree-id1256 . 5) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) 9602) ((9601 . 9606)) (26236 24789 447457 1000) 0 nil])
([nil nil ((#("srvs" 0 4 (fontified t face font-lock-constant-face)) . 6718) (undo-tree-id3659 . -4)) ((6718 . 6722)) (26236 20706 455737 414000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -7900) (undo-tree-id3398 . -2) (undo-tree-id3399 . -2) (undo-tree-id3400 . -2) (undo-tree-id3401 . -2) (undo-tree-id3402 . -2) (undo-tree-id3403 . -2) (undo-tree-id3404 . -2) (undo-tree-id3405 . -2) (undo-tree-id3406 . -2) 7902 (7900 . 7902) (#("  " 0 2 (fontified nil)) . 7899) (undo-tree-id3407 . -2) (undo-tree-id3408 . -2) (undo-tree-id3409 . -2) (7899 . 7902) (#("  " 0 2 (fontified nil)) . 7898) (undo-tree-id3410 . -2) (undo-tree-id3411 . -2) (7898 . 7901) (#("  " 0 2 (fontified nil)) . 7897) (undo-tree-id3412 . -2) (undo-tree-id3413 . -2) (7897 . 7900) (#("  " 0 2 (fontified nil)) . 7896) (undo-tree-id3414 . -2) (undo-tree-id3415 . -2) (7896 . 7899) (#("  " 0 2 (fontified nil)) . 7895) (undo-tree-id3416 . -2) (undo-tree-id3417 . -2) (7895 . 7898) (#("  " 0 2 (fontified nil)) . 7894) (undo-tree-id3418 . -2) (undo-tree-id3419 . -2) (7893 . 7897)) nil (26236 26311 374126 214000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 9601) (undo-tree-id1251 . -4) (undo-tree-id1252 . 5) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) 9602) ((9601 . 9606)) (26236 24789 438758 294000) 0 nil])
([nil nil ((6718 . 6732) (#("life" 0 4 (fontified nil)) . 6718) (6718 . 6722) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6718) (6718 . 6732) (#("lifecycle" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t face font-lock-constant-face) 8 9 (fontified t face font-lock-constant-face)) . -6718) (undo-tree-id3581 . -9) (undo-tree-id3583 . -9) (undo-tree-id3585 . -9) (undo-tree-id3587 . -9) (undo-tree-id3589 . -9) (undo-tree-id3591 . -9) (undo-tree-id3593 . -9) (undo-tree-id3595 . -9) (undo-tree-id3597 . -9) (undo-tree-id3599 . -9) (undo-tree-id3601 . -9) (undo-tree-id3603 . -9) (undo-tree-id3605 . -9) (undo-tree-id3607 . -9) (undo-tree-id3609 . -9) (undo-tree-id3611 . -9) (undo-tree-id3613 . -9) (undo-tree-id3615 . -9) (undo-tree-id3617 . -9) (undo-tree-id3619 . -9) (undo-tree-id3621 . -9) (undo-tree-id3623 . -9) (undo-tree-id3625 . -9) (undo-tree-id3627 . -9) (undo-tree-id3629 . -9) (undo-tree-id3631 . -9) (undo-tree-id3633 . -9) (undo-tree-id3635 . -9) (undo-tree-id3637 . -9) (undo-tree-id3639 . -9) (undo-tree-id3641 . -9) (undo-tree-id3643 . -9) (undo-tree-id3645 . -9) 6727 (6723 . 6727) (#("u" 0 1 (fontified t face font-lock-constant-face)) . -6723) (undo-tree-id3647 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -6724) (undo-tree-id3650 . -1) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -6725) (undo-tree-id3653 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -6726) (undo-tree-id3656 . -1) 6727 (6718 . 6727)) ((#("lifecucle" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 3 (fontified nil face font-lock-constant-face) 3 4 (fontified nil face font-lock-constant-face) 4 5 (fontified nil face font-lock-constant-face) 5 6 (fontified nil face font-lock-constant-face) 6 7 (fontified nil face font-lock-constant-face) 7 8 (fontified nil face font-lock-constant-face) 8 9 (fontified nil face font-lock-constant-face)) . 6718) (6723 . 6727) (#("ycle" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 3 (fontified nil face font-lock-constant-face) 3 4 (fontified nil face font-lock-constant-face)) . 6723) (6718 . 6727) (#("lifecycle_msgs" 0 14 (fontified nil)) . 6718) (6718 . 6732) (#("life" 0 4 (fontified nil)) . 6718) (6718 . 6722) (#("lifecycle_msgs" 0 14 (face font-lock-constant-face fontified t)) . 6718)) (26236 20706 394640 713000) 0 nil])
([nil nil ((6734 . 6738) (#("   " 0 3 (fontified nil)) . -6734) (undo-tree-id3746 . -3) (#(" " 0 1 (fontified t)) . 6737)) nil (26236 26331 302514 973000) 0 nil] [nil nil ((#("client" 0 6 (fontified t)) . 6753) (undo-tree-id3432 . -5) (t 26236 26267 88746 308000)) ((6753 . 6759)) (26236 26310 463266 553000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -9603) (undo-tree-id1245 . -4) (undo-tree-id1246 . -4) 9607 (9603 . 9607) (#("    " 0 4 (fontified nil)) . 9602) (undo-tree-id1247 . -4) (undo-tree-id1248 . -4) (9602 . 9607) (#("    " 0 4 (fontified nil)) . 9601) (undo-tree-id1249 . -4) (undo-tree-id1250 . -4) (9600 . 9606)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 9600) (undo-tree-id2326 . -6) (undo-tree-id2327 . -6) (undo-tree-id2328 . -6) (undo-tree-id2329 . -6) (undo-tree-id2330 . -6) (undo-tree-id2331 . -6) (undo-tree-id2332 . -6) (9601 . 9605) (#("    
" 0 4 (fontified nil) 4 5 (fontified nil)) . 9602) (undo-tree-id2333 . -4) (9602 . 9606) (#("    " 0 4 (fontified nil)) . 9603) (9603 . 9607)) (26236 24789 423928 68000) 0 nil])
([nil nil ((#("SetBool" 0 7 (fontified t)) . 6739) (undo-tree-id3579 . -7)) ((6739 . 6746)) (26236 20706 374286 137000) 0 nil])
([nil nil ((6738 . 6743) (6734 . 6738) (#("   " 0 3 (fontified nil)) . -6734) (undo-tree-id3743 . -3) (undo-tree-id3744 . -3) (#(" " 0 1 (fontified t)) . 6737) (undo-tree-id3745 . -1)) nil (26236 26331 302509 931000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6753)) ((6753 . 6754)) (26236 26309 494092 248000) 0 nil])
([nil nil ((#("void " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t)) . 9096) (undo-tree-id1243 . -4)) ((9096 . 9101)) (26236 24789 421434 149000) 0 nil])
([nil nil ((6739 . 6750) (#("Ch" 0 2 (fontified nil)) . 6739) (6739 . 6741) (#("ChangeState" 0 11 (fontified nil)) . -6739) (6739 . 6750) (#("Cha" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6739) (undo-tree-id3576 . -3) 6742 (6741 . 6742) (6739 . 6741)) ((#("Ch" 0 1 (fontified nil) 1 2 (fontified nil)) . 6739) (#("a" 0 1 (fontified nil)) . 6741) (6739 . 6742) (#("ChangeState" 0 11 (fontified nil)) . 6739) (6739 . 6750) (#("Ch" 0 2 (fontified nil)) . 6739) (6739 . 6741) (#("ChangeState" 0 11 (fontified t)) . 6739)) (26236 20706 338801 662000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6762 . 6763) (nil fontified nil 6743 . 6763) (6743 . 6763) 6742) nil (26236 26331 302501 269000) 0 nil])
([nil nil ((#("change" 0 6 (fontified t)) . 6753) (undo-tree-id3431 . -5)) ((6753 . 6759)) (26236 26309 44472 14000) 0 nil])
([nil nil ((9096 . 9101)) ((#("bool " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t)) . 9096)) (26236 24789 412536 288000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face)) . 7943)) ((7943 . 7946)) (26236 20706 313142 209000) 0 nil] [nil nil ((#("this" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face)) . 7937) (undo-tree-id3666 . -3) (undo-tree-id3668 . -4) (undo-tree-id3670 . -4) (undo-tree-id3672 . -4) (undo-tree-id3674 . -4) (undo-tree-id3676 . -4) (undo-tree-id3678 . -4) (undo-tree-id3680 . -4) (undo-tree-id3682 . -4) (undo-tree-id3684 . -4) (undo-tree-id3686 . -4) (undo-tree-id3688 . -4) (t 26236 9289 964099 695000)) ((7937 . 7941)) (26236 9543 515678 597000) 0 nil])
([nil nil ((6781 . 6782) (6780 . 6782) (#(";" 0 1 (fontified t)) . -6780) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (#("i" 0 1 (fontified t)) . -6781) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) 6782 (6781 . 6782) (6780 . 6781) (6766 . 6780) (#("c" 0 1 (fontified nil)) . 6766) (6766 . 6767) (#("change_clients" 0 14 (fontified nil)) . -6766) (6766 . 6780) (#("c" 0 1 (fontified t)) . -6766) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) 6767 (6764 . 6767) (6763 . 6764)) nil (26236 26331 302473 623000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6753)) ((6753 . 6754)) (26236 26308 637538 211000) 0 nil])
([nil nil ((9603 . 9607) (#("    " 0 4 (fontified nil)) . 9602) (undo-tree-id1323 . -4) (undo-tree-id1324 . -4) (9606 . 9607) (9602 . 9606) (t 26236 23660 630122 820000)) ((#("    " 0 4 (fontified nil)) . 9602) (undo-tree-id2325 . -4) (#("
" 0 1 (fontified nil)) . 9606) (9602 . 9606) (#("    " 0 4 (fontified t)) . 9603)) (26236 24789 200410 542000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 7943)) ((7943 . 7945)) (26236 20706 310478 378000) 0 nil])
([nil nil ((#(", " 0 1 (fontified t) 1 2 (fontified t)) . 7937) (undo-tree-id3664 . -1) (undo-tree-id3665 . -2)) ((7937 . 7939) (t 26236 9523 39832 295000)) (26236 9523 15658 916000) 0 nil])
([nil nil ((6783 . 6784)) nil (26236 26331 301590 895000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . 6753) (undo-tree-id3430 . -4)) ((6753 . 6758)) (26236 26308 82292 717000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9602)) ((9602 . 9603)) (26236 24789 177321 969000) 0 nil])
([nil nil ((#("placeholders" 0 12 (fontified t face font-lock-constant-face)) . 7943)) ((7943 . 7955)) (26236 20706 308032 190000) 0 nil])
nil
([nil nil ((6782 . 6786) (t 26236 26331 369088 26000)) nil (26236 26360 568114 34000) 0 nil])
([nil nil ((#("_->" 0 3 (fontified t)) . 6753) (undo-tree-id3429 . -2)) ((6753 . 6756)) (26236 26307 288981 857000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 9602) (undo-tree-id1291 . -4) (undo-tree-id1292 . 1) (undo-tree-id1294 . -4) (undo-tree-id1296 . -4) (undo-tree-id1298 . -4) (undo-tree-id1300 . -4) (undo-tree-id1302 . -3) (undo-tree-id1304 . -3) (undo-tree-id1306 . -3) (undo-tree-id1308 . -3) (undo-tree-id1310 . -3) (undo-tree-id1312 . -3) (undo-tree-id1314 . -3) (undo-tree-id1316 . -3) (undo-tree-id1318 . -3) (undo-tree-id1320 . -4)) ((9602 . 9607)) (26236 24789 155121 489000) 0 nil])
([nil nil ((#("::_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7943)) ((7943 . 7946)) (26236 20706 305349 487000) 0 nil])
([nil nil ((#("lifecycle" 0 9 (fontified t)) . 7515) (undo-tree-id3879 . -8) (t 26236 26360 609247 539000)) nil (26236 26453 529468 896000) 0 nil])
([nil nil ((6768 . 6769) (6767 . 6768) (6753 . 6767) (#("cli" 0 3 (fontified nil)) . 6753) (6753 . 6756) (#("change_clients" 0 14 (fontified nil)) . -6753) (6753 . 6767) (#("cli" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6753) (undo-tree-id3427 . -3) (undo-tree-id3428 . -3) 6756 (6755 . 6756) (6753 . 6755)) ((#("cl" 0 1 (fontified nil) 1 2 (fontified nil)) . 6753) (undo-tree-id3440 . -2) (undo-tree-id3441 . -2) (#("i" 0 1 (fontified nil)) . 6755) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (6753 . 6756) (#("change_clients" 0 14 (fontified nil)) . 6753) (6753 . 6767) (#("cli" 0 3 (fontified nil)) . 6753) (6753 . 6756) (#("change_clients" 0 14 (fontified nil)) . 6753) (undo-tree-id3444 . -14) (undo-tree-id3445 . -14) (undo-tree-id3446 . -14) (undo-tree-id3447 . -14) (undo-tree-id3448 . -14) (undo-tree-id3449 . -14) (undo-tree-id3450 . -14) (undo-tree-id3451 . -14) (undo-tree-id3452 . -14) (undo-tree-id3453 . -14) (undo-tree-id3454 . -14) (undo-tree-id3455 . -14) (undo-tree-id3456 . -14) (undo-tree-id3457 . -14) (undo-tree-id3458 . -14) (undo-tree-id3459 . -14) (undo-tree-id3460 . -14) (undo-tree-id3461 . -14) (undo-tree-id3462 . -14) (undo-tree-id3463 . -14) (undo-tree-id3464 . -14) (undo-tree-id3465 . -14) (undo-tree-id3466 . -14) (undo-tree-id3467 . -14) (undo-tree-id3468 . -14) (undo-tree-id3469 . -14) (undo-tree-id3470 . -14) (undo-tree-id3471 . -14) (undo-tree-id3472 . -14) (undo-tree-id3473 . -14) (undo-tree-id3474 . -14) (undo-tree-id3475 . -14) (undo-tree-id3476 . -14) (undo-tree-id3477 . -14) (undo-tree-id3478 . -14) (undo-tree-id3479 . -14) (undo-tree-id3480 . -14) (undo-tree-id3481 . -14) (undo-tree-id3482 . -14) (undo-tree-id3483 . -14) (undo-tree-id3484 . -14) (undo-tree-id3485 . -14) (undo-tree-id3486 . -14) (undo-tree-id3487 . -14) (undo-tree-id3488 . -14) (undo-tree-id3489 . -14) (undo-tree-id3490 . -14) (undo-tree-id3491 . -14) (undo-tree-id3492 . -14) (undo-tree-id3493 . -14) (undo-tree-id3494 . -14) (undo-tree-id3495 . -14) (undo-tree-id3496 . -14) (undo-tree-id3497 . -14) (undo-tree-id3498 . -14) (undo-tree-id3499 . -14) (undo-tree-id3500 . -14) (undo-tree-id3501 . -14) (undo-tree-id3502 . -14) (undo-tree-id3503 . -14) (undo-tree-id3504 . -14) (undo-tree-id3505 . -14) (undo-tree-id3506 . -14) (undo-tree-id3507 . -14) (undo-tree-id3508 . -14) (undo-tree-id3509 . -14) (#("-" 0 1 (fontified nil)) . 6767) (undo-tree-id3510 . 1) (#(">" 0 1 (fontified t)) . 6768)) (26236 26306 584879 159000) 0 nil])
([nil nil ((9633 . 9634) (9619 . 9633) (9618 . 9619) (9617 . 9618) (9613 . 9617) (#("node" 0 4 (fontified nil)) . 9613) (9613 . 9617) (#("node" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -9613) (undo-tree-id1325 . -4) (undo-tree-id1326 . -4) 9617 (9615 . 9617) (9613 . 9615) (9608 . 9613) (9606 . 9608) (9602 . 9606) (#("    " 0 4 (fontified nil)) . 9601) (undo-tree-id1327 . -4) (undo-tree-id1328 . -4) (9605 . 9606) (9601 . 9605) (t 26236 23666 466223 477000)) ((#("    " 0 4 (fontified nil)) . 9601) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (#("
" 0 1 (fontified nil)) . 9605) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (9601 . 9605) (#("    " 0 4 (fontified nil)) . 9602) (undo-tree-id2317 . -4) (#("re" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil)) . 9606) (undo-tree-id2318 . -2) (#("turn " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil)) . 9608) (undo-tree-id2319 . -5) (#("no" 0 1 (fontified nil) 1 2 (fontified nil)) . 9613) (#("de" 0 1 (fontified nil) 1 2 (fontified nil)) . 9615) (9613 . 9617) (#("node" 0 4 (fontified nil)) . 9613) (9613 . 9617) (#("node" 0 4 (fontified nil)) . 9613) (undo-tree-id2320 . -4) (#("-" 0 1 (fontified nil)) . 9617) (undo-tree-id2321 . -1) (#(">" 0 1 (fontified nil)) . 9618) (undo-tree-id2322 . -1) (#("service_result" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil)) . 9619) (undo-tree-id2323 . -14) (#(";" 0 1 (fontified t)) . 9633) (undo-tree-id2324 . -1)) (26236 24789 83979 702000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 7943)) ((7943 . 7944)) (26236 20706 115246 475000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7515)) nil (26236 26453 529464 792000) 0 nil])
([nil nil ((6768 . 6773) (#("ind" 0 3 (fontified nil)) . 6768) (6768 . 6771) (#("index" 0 5 (fontified nil)) . -6768) (6768 . 6773) (#("ind" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6768) (undo-tree-id3425 . -3) (undo-tree-id3426 . -3) 6771 (6770 . 6771) (6768 . 6770) (6767 . 6769)) ((#("[]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 6767) (undo-tree-id3439 . 1) (#("in" 0 1 (fontified nil) 1 2 (fontified nil)) . 6768) (#("d" 0 1 (fontified nil)) . 6770) (6768 . 6771) (#("index" 0 5 (fontified nil)) . 6768) (6768 . 6773) (#("ind" 0 3 (fontified nil)) . 6768) (6768 . 6771) (#("index" 0 5 (fontified t)) . 6768) (t 26236 26293 860887 76000)) (26236 26305 433136 403000) 0 nil])
([nil nil ((#("service" 0 7 (fontified t)) . 9253) (undo-tree-id1340 . -6) (t 26236 23725 878945 494000)) ((9253 . 9260)) (26236 24789 34103 444000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 7941)) ((7941 . 7942)) (26236 20706 84426 673000) 0 nil])
([nil nil ((#("node" 0 4 (fontified t)) . 7515) (undo-tree-id3752 . -3) (undo-tree-id3753 . -4) (undo-tree-id3754 . -4) (undo-tree-id3755 . -4) (undo-tree-id3756 . -4) (undo-tree-id3757 . -4) (undo-tree-id3758 . -4) (undo-tree-id3759 . -4) (undo-tree-id3760 . -4) (undo-tree-id3761 . -4) (undo-tree-id3762 . -4) (undo-tree-id3763 . -4) (undo-tree-id3764 . -4) (undo-tree-id3765 . -4) (undo-tree-id3766 . -4) (undo-tree-id3767 . -4) (undo-tree-id3768 . -4) (undo-tree-id3769 . -4) (undo-tree-id3770 . -4) (undo-tree-id3771 . -4) (undo-tree-id3772 . -4) (undo-tree-id3773 . -4) (undo-tree-id3774 . -4) (undo-tree-id3775 . -4) (undo-tree-id3776 . -4) (undo-tree-id3777 . -4) (undo-tree-id3778 . -4) (undo-tree-id3779 . -4) (undo-tree-id3780 . -4) (undo-tree-id3781 . -4) (undo-tree-id3782 . -4) (undo-tree-id3783 . -4) (undo-tree-id3784 . -4) (undo-tree-id3785 . -4) (undo-tree-id3786 . -4) (undo-tree-id3787 . -4) (undo-tree-id3788 . -4) (undo-tree-id3789 . -4) (undo-tree-id3790 . -4) (undo-tree-id3791 . -4) (undo-tree-id3792 . -4) (undo-tree-id3793 . -4) (undo-tree-id3794 . -4) (undo-tree-id3795 . -4) (undo-tree-id3796 . -4) (undo-tree-id3797 . -4) (undo-tree-id3798 . -4) (undo-tree-id3799 . -4) (undo-tree-id3800 . -4) (undo-tree-id3801 . -4) (undo-tree-id3802 . -4) (undo-tree-id3803 . -4) (undo-tree-id3804 . -4) (undo-tree-id3805 . -4) (undo-tree-id3806 . -4) (undo-tree-id3807 . -4) (undo-tree-id3808 . -4) (undo-tree-id3809 . -4) (undo-tree-id3810 . -4) (undo-tree-id3811 . -4) (undo-tree-id3812 . -4) (undo-tree-id3813 . -4) (undo-tree-id3814 . -4) (undo-tree-id3815 . -4) (undo-tree-id3816 . -4) (undo-tree-id3817 . -4) (undo-tree-id3818 . -4) (undo-tree-id3819 . -4) (undo-tree-id3820 . -4) (undo-tree-id3821 . -4) (undo-tree-id3822 . -4) (undo-tree-id3823 . -4) (undo-tree-id3824 . -4) (undo-tree-id3825 . -4) (undo-tree-id3826 . -4) (undo-tree-id3827 . -4) (undo-tree-id3828 . -4) (undo-tree-id3829 . -4) (undo-tree-id3830 . -4) (undo-tree-id3831 . -4) (undo-tree-id3832 . -4) (undo-tree-id3833 . -4) (undo-tree-id3834 . -4) (undo-tree-id3835 . -4) (undo-tree-id3836 . -4) (undo-tree-id3837 . -4) (undo-tree-id3838 . -4) (undo-tree-id3839 . -4) (undo-tree-id3840 . -4) (undo-tree-id3841 . -4) (undo-tree-id3842 . -4) (undo-tree-id3843 . -4) (undo-tree-id3844 . -4) (undo-tree-id3845 . -4) (undo-tree-id3846 . -4) (undo-tree-id3847 . -4) (undo-tree-id3848 . -4) (undo-tree-id3849 . -4) (undo-tree-id3850 . -4) (undo-tree-id3851 . -4) (undo-tree-id3852 . -4) (undo-tree-id3853 . -4) (undo-tree-id3854 . -4) (undo-tree-id3855 . -4) (undo-tree-id3856 . -4) (undo-tree-id3857 . -4) (undo-tree-id3858 . -4) (undo-tree-id3859 . -4) (undo-tree-id3860 . -4) (undo-tree-id3861 . -4) (undo-tree-id3862 . -4) (undo-tree-id3863 . -4) (undo-tree-id3864 . -4) (undo-tree-id3865 . -4) (undo-tree-id3866 . -4) (undo-tree-id3867 . -4) (undo-tree-id3868 . -4) (undo-tree-id3869 . -4) (undo-tree-id3870 . -4) (undo-tree-id3871 . -4) (undo-tree-id3872 . -4) (undo-tree-id3873 . -4) (undo-tree-id3874 . -4) (undo-tree-id3875 . -4) (undo-tree-id3876 . -4) (undo-tree-id3877 . -4) (undo-tree-id3878 . -4)) nil (26236 26453 529452 129000) 0 nil])
([nil nil ((#("client" 0 6 (fontified t)) . 7057) (undo-tree-id3437 . -5) (undo-tree-id3438 . -3) (t 26236 26293 860887 76000)) ((7057 . 7063)) (26236 26304 875840 847000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 9253)) ((9253 . 9254)) (26236 24789 10570 356000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7941)) ((7941 . 7942)) (26236 20706 34500 179000) 0 nil])
([nil nil ((apply yas--snippet-revive 7537 7555 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (7537 . 7555) (#("get_service_name()" 0 18 (fontified nil)) . 7537) (7537 . 7555) (#("get_service_name() const" 0 24 (fontified nil)) . -7537) (7537 . 7561) (#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7537) (undo-tree-id3747 . -1) (undo-tree-id3748 . -3) (undo-tree-id3749 . -3) 7540 (7537 . 7540) (7536 . 7537) (7535 . 7536) (7515 . 7535) (#("c" 0 1 (fontified nil)) . 7515) (7515 . 7516) (#("client_change_state_" 0 20 (fontified nil)) . -7515) (7515 . 7535) (#("c" 0 1 (fontified t)) . -7515) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) 7516 (7515 . 7516)) nil (26236 26453 529166 382000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7057)) ((7057 . 7058)) (26236 26304 514553 223000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . 9253) (undo-tree-id1337 . -3)) ((9253 . 9257)) (26236 24788 956669 727000) 0 nil])
([nil nil ((apply -18 6780 7092 undo--wrap-and-run-primitive-undo 6780 7092 ((7086 . 7089) (7007 . 7010) (6939 . 6942) (6889 . 6892) (6842 . 6845) (6784 . 6787) 6780)) (t 26236 9549 4519 819000)) ((apply 18 6780 7074 undo--wrap-and-run-primitive-undo 6780 7074 ((#("// " 0 1 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 1 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 6784) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 6842) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 6889) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 6939) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 7007) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . 7086) 6673))) (26236 20706 10709 692000) 0 nil])
([nil nil ((#("




" 0 5 (fontified t)) . 7971) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (t 26236 26453 597769 752000)) nil (26246 36360 924905 479000) 0 nil])
([nil nil ((#("change" 0 6 (fontified t)) . 7057) (undo-tree-id3436 . -5)) ((7057 . 7063)) (26236 26303 992758 565000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 9253)) ((9253 . 9254)) (26236 24788 931962 49000) 0 nil])
([nil nil ((6675 . 6680) (6673 . 6675) (t 26236 9804 521954 766000)) ((#("st" 0 1 (face font-lock-keyword-face c-is-sws t fontified nil) 1 2 (face font-lock-keyword-face fontified nil)) . 6673) (#("atic " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 6675)) (26236 20705 959703 475000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7970) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2)) nil (26246 36360 924892 231000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7057) (undo-tree-id3435 . -1)) ((7057 . 7058)) (26236 26303 707750 601000) 0 nil])
([nil nil ((#("global" 0 6 (fontified t)) . 9253) (undo-tree-id1334 . -5)) ((9253 . 9259)) (26236 24788 929353 798000) 0 nil])
([nil nil ((#("static " 0 1 (fontified t c-is-sws t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 6673) (undo-tree-id3694 . -6) (undo-tree-id3696 . -6) (undo-tree-id3698 . -6) (undo-tree-id3700 . -6) (undo-tree-id3702 . -6) (undo-tree-id3704 . -6) (undo-tree-id3706 . -6) (undo-tree-id3708 . -6) (undo-tree-id3710 . -6) (undo-tree-id3712 . -6) (undo-tree-id3714 . -6) (undo-tree-id3716 . -6) (undo-tree-id3718 . -6) (undo-tree-id3720 . -6) (undo-tree-id3722 . -6) (undo-tree-id3724 . -6) (undo-tree-id3726 . -6) (undo-tree-id3728 . -6) (undo-tree-id3730 . -6) (undo-tree-id3732 . -6) (undo-tree-id3734 . -6) (undo-tree-id3736 . -6) (undo-tree-id3738 . -6) (undo-tree-id3740 . -6) (undo-tree-id3742 . -6) (undo-tree-id3744 . -6) (undo-tree-id3746 . -6) (t 26236 9823 850285 72000)) ((6673 . 6680)) (26236 20705 939843 587000) 0 nil])
([nil nil ((apply -3 8426 8501 undo--wrap-and-run-primitive-undo 8426 8501 ((8428 . 8431) 8426))) nil (26246 36360 924819 712000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . 7057) (undo-tree-id3433 . -4) (undo-tree-id3434 . -5)) ((7057 . 7062)) (26236 26303 704131 469000) 0 nil])
([nil nil ((9273 . 9278) (9272 . 9274) (9253 . 9272) (#("ch" 0 2 (fontified nil)) . 9253) (9253 . 9255) (#("change_state_topics" 0 19 (fontified nil)) . -9253) (9253 . 9272) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -9253) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) 9255 (9253 . 9255)) ((#("ch" 0 1 (fontified nil) 1 2 (fontified nil)) . 9253) (9253 . 9255) (#("change_state_topics" 0 19 (fontified nil)) . 9253) (9253 . 9272) (#("ch" 0 2 (fontified nil)) . 9253) (9253 . 9255) (#("change_state_topics" 0 19 (fontified nil)) . 9253) (undo-tree-id2303 . -19) (undo-tree-id2304 . -19) (undo-tree-id2305 . -19) (undo-tree-id2306 . -19) (undo-tree-id2307 . -19) (#("[]" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-6-face) fontified nil)) . 9272) (undo-tree-id2308 . -2) (undo-tree-id2309 . -2) (undo-tree-id2310 . -2) (undo-tree-id2311 . -2) (undo-tree-id2312 . -2) (#("index" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 9273)) (26236 24788 908369 795000) 0 nil])
([nil nil ((apply 18 6783 7084 undo--wrap-and-run-primitive-undo 6783 7084 ((#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -7071) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6995) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6930) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6883) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6839) (#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6784) 6783)) (t 26236 9834 298459 722000)) ((apply -18 6783 7102 undo--wrap-and-run-primitive-undo 6783 7102 ((6784 . 6787) (6839 . 6842) (6883 . 6886) (6930 . 6933) (6995 . 6998) (7071 . 7074) 7941))) (26236 20705 918404 654000) 0 nil])
([nil nil ((apply -6 8544 8645 undo--wrap-and-run-primitive-undo 8544 8645 ((8594 . 8597) (8546 . 8549) 8544)) (t 26246 36361 45597 383000)) nil (26246 36363 857950 875000) 0 nil])
nil
([nil nil ((9285 . 9287) (9281 . 9285) (9279 . 9281) (#("," 0 1 (fontified t)) . -9279) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) 9280 (9279 . 9280)) ((#("," 0 1 (fontified nil)) . 9279) (undo-tree-id2296 . -1) (9279 . 9280) (#(".c" 0 1 (fontified nil) 1 2 (fontified nil)) . 9279) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) (#("_str" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 9281) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (#("()" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t) 1 2 (face (rainbow-delimiters-depth-6-face) fontified t)) . 9285)) (26236 24788 813781 777000) 0 nil])
([nil nil ((7962 . 7964) (7960 . 7962) (7948 . 7960) (#("pla" 0 3 (fontified nil)) . 7948) (7948 . 7951) (#("placeholders" 0 12 (fontified nil)) . -7948) (7948 . 7960) (#("plac" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7948) (undo-tree-id3749 . -4) 7952 (7948 . 7952) (7946 . 7948) (#("_" 0 1 (fontified t)) . -7946) (undo-tree-id3752 . -1) (#("p" 0 1 (fontified t)) . -7947) (undo-tree-id3754 . -1) 7948 (7946 . 7948) (7942 . 7946) (7941 . 7942)) ((#("," 0 1 (fontified nil)) . 7941) (#(" std" 0 1 (fontified nil) 1 4 (face font-lock-constant-face fontified nil)) . 7942) (#("_p" 0 1 (fontified nil) 1 2 (fontified nil)) . 7946) (7946 . 7948) (#("::" 0 2 (fontified nil)) . 7946) (#("plac" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 7948) (7948 . 7952) (#("placeholders" 0 12 (fontified nil)) . 7948) (7948 . 7960) (#("pla" 0 3 (fontified nil)) . 7948) (7948 . 7951) (#("placeholders" 0 12 (face font-lock-constant-face fontified nil)) . 7948) (#("::" 0 2 (fontified nil)) . 7960) (#("_1" 0 2 (fontified t)) . 7962)) (26236 20705 855748 626000) 0 nil])
([nil nil ((apply -6 8750 8860 undo--wrap-and-run-primitive-undo 8750 8860 ((8836 . 8839) (8752 . 8755) 8750)) (t 26246 36363 905716 772000)) nil (26246 36368 211145 646000) 0 nil])
([nil nil ((9141 . 9142) (#("h" 0 1 (face font-lock-type-face fontified t)) . 9141) (t 26236 23756 259126 413000)) ((9141 . 9142) (#("n" 0 1 (face font-lock-type-face)) . 9141)) (26236 24788 808649 625000) 0 nil])
([nil nil ((7903 . 7904) (t 26236 9931 795967 919000)) ((#("&" 0 1 (fontified t)) . 7903)) (26236 20705 831711 861000) 0 nil])
([nil nil ((#("

// int main(int argc, char **argv) {
//   rclcpp::init(argc, argv);

//   auto options = rclcpp::NodeOptions().use_intra_process_comms(false);

//   rclcpp::spin(std::make_shared<managed_talker::LifeActivator>(options)
//                    ->get_node_base_interface());

//   rclcpp::shutdown();

//   return 0;
// }
" 0 2 (fontified t) 2 3 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 3 5 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 21 (c-in-sws t fontified t face font-lock-comment-face) 21 39 (c-in-sws t fontified t face font-lock-comment-face) 39 44 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 44 47 (c-in-sws t fontified t face font-lock-comment-face) 47 69 (c-in-sws t fontified t face font-lock-comment-face) 69 70 (c-in-sws t fontified t face font-lock-comment-face) 70 71 (c-in-sws t fontified t) 71 72 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 72 76 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 76 145 (c-in-sws t fontified t face font-lock-comment-face) 145 146 (c-in-sws t fontified t) 146 151 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 151 221 (c-in-sws t fontified t face font-lock-comment-face) 221 243 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 243 273 (c-in-sws t fontified t face font-lock-comment-face) 273 274 (c-in-sws t fontified t) 274 279 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 279 299 (c-in-sws t fontified t face font-lock-comment-face) 299 300 (c-in-sws t fontified t) 300 302 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 302 305 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 305 315 (c-in-sws t fontified t face font-lock-comment-face) 315 318 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 318 319 (c-in-sws t fontified t face font-lock-comment-face) 319 320 (fontified t face font-lock-comment-face c-in-sws t)) . 9035) (undo-tree-id63 . -320) (undo-tree-id64 . -320) (undo-tree-id65 . -319) (undo-tree-id66 . -320) (undo-tree-id67 . -320) 9355 (t 26246 36368 253899 438000)) nil (26246 36382 428949 749000) 0 nil])
([nil nil ((#("lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE" 0 14 (face font-lock-constant-face fontified t) 14 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 31 (face font-lock-constant-face fontified t) 31 53 (fontified t)) . 9301) (undo-tree-id1379 . -52) (undo-tree-id1380 . -52) (undo-tree-id1381 . -52) (undo-tree-id1382 . -52) (undo-tree-id1384 . -1) (undo-tree-id1386 . -1) (undo-tree-id1388 . -1) (undo-tree-id1390 . -1) (undo-tree-id1392 . -53) (undo-tree-id1393 . -52) (undo-tree-id1395 . -53) (undo-tree-id1397 . -53) (undo-tree-id1399 . -53) (undo-tree-id1401 . -52) (undo-tree-id1403 . -52) (undo-tree-id1405 . -52) (undo-tree-id1407 . -52) (undo-tree-id1409 . -53) 9353 (t 26236 23787 339199 69000)) ((9301 . 9354)) (26236 24788 805715 122000) 0 nil])
([nil nil ((7098 . 7103) (7078 . 7098) (#("cu" 0 2 (fontified nil)) . 7078) (7078 . 7080) (#("current_service_done" 0 20 (fontified nil)) . -7078) (7078 . 7098) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -7078) (undo-tree-id3756 . -2) 7080 (7078 . 7080) (7074 . 7078) (#("   " 0 1 (fontified nil) 1 3 (fontified nil)) . -7074) (#(" " 0 1 (fontified t)) . 7077) (t 26236 10046 253495 448000)) ((7074 . 7078) (#("    " 0 4 (fontified nil)) . 7074) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (#("cu" 0 1 (fontified nil) 1 2 (fontified nil)) . 7078) (7078 . 7080) (#("current_service_done" 0 20 (fontified nil)) . 7078) (7078 . 7098) (#("cu" 0 2 (fontified nil)) . 7078) (7078 . 7080) (#("current_service_done" 0 20 (fontified nil)) . 7078) (undo-tree-id70 . -20) (undo-tree-id71 . -20) (#(" = st" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 7098) (undo-tree-id72 . -3) (undo-tree-id73 . -5)) (26236 20705 766541 761000) 0 nil])
([nil nil ((#("  // std::vector<std::string> get_state_topics;
  // std::vector<std::string> change_state_topics;

  // std::vector<std::shared_ptr<rclcpp::Client<lifecycle_msgs::srv::GetState>>>
  //      state_clients;
  // std::vector<std::shared_ptr<rclcpp::Client<lifecycle_msgs::srv::ChangeState>>>
  //     change_clients;

" 0 1 (fontified t c-in-sws t c-is-sws t) 1 2 (fontified t c-in-sws t c-is-sws t) 2 3 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 5 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 8 (fontified t c-in-sws t face font-lock-comment-face) 8 10 (fontified t c-in-sws t face font-lock-comment-face) 10 16 (fontified t c-in-sws t face font-lock-comment-face) 16 17 (fontified t c-in-sws t face font-lock-comment-face) 17 20 (fontified t c-in-sws t face font-lock-comment-face) 20 28 (fontified t c-in-sws t face font-lock-comment-face) 28 29 (fontified t c-in-sws t face font-lock-comment-face) 29 30 (fontified t c-in-sws t face font-lock-comment-face) 30 46 (fontified t c-in-sws t face font-lock-comment-face) 46 48 (fontified t c-in-sws t face font-lock-comment-face) 48 50 (fontified t c-in-sws t) 50 53 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 53 56 (fontified t c-in-sws t face font-lock-comment-face) 56 58 (fontified t c-in-sws t face font-lock-comment-face) 58 64 (fontified t c-in-sws t face font-lock-comment-face) 64 65 (fontified t c-in-sws t face font-lock-comment-face) 65 68 (fontified t c-in-sws t face font-lock-comment-face) 68 76 (fontified t c-in-sws t face font-lock-comment-face) 76 77 (fontified t c-in-sws t face font-lock-comment-face) 77 78 (fontified t c-in-sws t face font-lock-comment-face) 78 97 (fontified t c-in-sws t face font-lock-comment-face) 97 99 (fontified t c-in-sws t face font-lock-comment-face) 99 100 (fontified t c-in-sws t) 100 101 (fontified t c-in-sws t) 101 102 (c-in-sws t fontified t) 102 103 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 103 105 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 105 181 (c-in-sws t fontified t face font-lock-comment-face) 181 183 (c-in-sws t fontified t) 183 184 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 184 191 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 191 205 (c-in-sws t fontified t face font-lock-comment-face) 205 206 (fontified t face font-lock-comment-face c-in-sws t) 206 207 (fontified t c-in-sws t) 207 208 (fontified t c-in-sws t) 208 209 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 209 211 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 211 212 (fontified t c-in-sws t face font-lock-comment-face) 212 214 (fontified t c-in-sws t face font-lock-comment-face) 214 216 (fontified t c-in-sws t face font-lock-comment-face) 216 222 (fontified t c-in-sws t face font-lock-comment-face) 222 223 (fontified t c-in-sws t face font-lock-comment-face) 223 226 (fontified t c-in-sws t face font-lock-comment-face) 226 228 (fontified t c-in-sws t face font-lock-comment-face) 228 238 (fontified t c-in-sws t face font-lock-comment-face) 238 239 (fontified t c-in-sws t face font-lock-comment-face) 239 245 (fontified t c-in-sws t face font-lock-comment-face) 245 247 (fontified t c-in-sws t face font-lock-comment-face) 247 253 (fontified t c-in-sws t face font-lock-comment-face) 253 254 (fontified t c-in-sws t face font-lock-comment-face) 254 268 (fontified t c-in-sws t face font-lock-comment-face) 268 270 (fontified t c-in-sws t face font-lock-comment-face) 270 273 (fontified t c-in-sws t face font-lock-comment-face) 273 286 (fontified t c-in-sws t face font-lock-comment-face) 286 287 (fontified t c-in-sws t face font-lock-comment-face) 287 288 (fontified t c-in-sws t face font-lock-comment-face) 288 289 (fontified t c-in-sws t face font-lock-comment-face) 289 290 (fontified t c-in-sws t face font-lock-comment-face) 290 292 (fontified t c-in-sws t) 292 295 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 295 299 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 299 313 (fontified t c-in-sws t face font-lock-comment-face) 313 315 (fontified t c-in-sws t face font-lock-comment-face) 315 316 (fontified t c-in-sws t)) . 8544) (undo-tree-id8 . -315) (undo-tree-id9 . -315) (undo-tree-id10 . -315) (undo-tree-id11 . -316) (undo-tree-id12 . -315) (undo-tree-id13 . -315) (undo-tree-id14 . -315) (undo-tree-id15 . -315) (undo-tree-id16 . -315) (undo-tree-id17 . -315) (undo-tree-id18 . -315) (undo-tree-id19 . -315) (undo-tree-id20 . -290) (undo-tree-id21 . -290) (undo-tree-id22 . -290) (undo-tree-id23 . -290) (undo-tree-id24 . -290) (undo-tree-id25 . -290) (undo-tree-id26 . -290) (undo-tree-id27 . -206) (undo-tree-id28 . -206) (undo-tree-id29 . -206) (undo-tree-id30 . -206) (undo-tree-id31 . -206) (undo-tree-id32 . -206) (undo-tree-id33 . -206) (undo-tree-id34 . -181) (undo-tree-id35 . -181) (undo-tree-id36 . -181) (undo-tree-id37 . -181) (undo-tree-id38 . -181) (undo-tree-id39 . -181) (undo-tree-id40 . -181) (undo-tree-id41 . -100) (undo-tree-id42 . -100) (undo-tree-id43 . -100) (undo-tree-id44 . -100) (undo-tree-id45 . -100) (undo-tree-id46 . -100) (undo-tree-id47 . -100) (undo-tree-id48 . -99) (undo-tree-id49 . -99) (undo-tree-id50 . -99) (undo-tree-id51 . -99) (undo-tree-id52 . -99) (undo-tree-id53 . -99) (undo-tree-id54 . -99) (undo-tree-id55 . -48) (undo-tree-id56 . -48) (undo-tree-id57 . -48) (undo-tree-id58 . -48) (undo-tree-id59 . -48) (undo-tree-id60 . -48) (undo-tree-id61 . -48) (undo-tree-id62 . -316)) nil (26246 36382 428924 188000) 0 nil])
([nil nil ((9301 . 9308) (#("tra" 0 3 (fontified nil)) . 9301) (9301 . 9304) (#("transit" 0 7 (fontified nil)) . -9301) (9301 . 9308) (#("tra" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -9301) (undo-tree-id1343 . -3) (undo-tree-id1344 . -3) (undo-tree-id1346 . -3) (undo-tree-id1348 . -3) (undo-tree-id1350 . -3) (undo-tree-id1352 . -3) (undo-tree-id1354 . -3) (undo-tree-id1356 . -3) (undo-tree-id1358 . -3) (undo-tree-id1360 . -3) (undo-tree-id1362 . -3) (undo-tree-id1364 . -3) (undo-tree-id1366 . -3) (undo-tree-id1368 . -3) (undo-tree-id1370 . -3) (undo-tree-id1372 . -3) (undo-tree-id1374 . -3) (undo-tree-id1376 . -3) (undo-tree-id1378 . -3) 9304 (9301 . 9304)) ((#("tra" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 9301) (9301 . 9304) (#("transit" 0 7 (fontified nil)) . 9301) (9301 . 9308) (#("tra" 0 3 (fontified nil)) . 9301) (9301 . 9304) ("transit" . 9301) (undo-tree-id2293 . -6) (undo-tree-id2294 . -6) (undo-tree-id2295 . -6)) (26236 24788 785781 856000) 0 nil])
([nil nil ((6875 . 6880)) ((#(" - 1s" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 5 (fontified nil)) . 6875)) (26236 20705 758593 236000) 0 nil])
([nil nil ((apply -6 2040 2189 undo--wrap-and-run-primitive-undo 2040 2189 ((2117 . 2120) (2046 . 2049) 2040)) (t 26246 36382 486506 591000)) nil (26246 36405 691182 572000) 0 nil])
([nil nil ((#("  
  rclcpp::Subscription<std_msgs::msg::Int16>::SharedPtr subscription_;

" 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t) 5 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 25 (face font-lock-constant-face fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t category c-<-as-paren-syntax) 26 34 (face font-lock-constant-face fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 39 (face font-lock-constant-face fontified t) 39 41 (fontified t) 41 46 (face font-lock-type-face fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t category c->-as-paren-syntax) 47 49 (fontified t) 49 57 (face font-lock-type-face fontified t) 57 58 (face font-lock-type-face c-type c-decl-id-start fontified t) 58 59 (fontified t) 59 72 (face font-lock-variable-name-face fontified t) 72 74 (fontified t) 74 75 (fontified t)) . 9609) (undo-tree-id1411 . -74) (undo-tree-id1412 . -74) (undo-tree-id1413 . -74) (undo-tree-id1415 . -74) (t 26236 23809 735188 264000)) ((9609 . 9684)) (26236 24788 783035 531000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -7106) (#("t" 0 1 (fontified t)) . -7107) 7108 (t 26236 10127 862452 271000)) ((7106 . 7108)) (26236 20705 754515 880000) 0 nil])
([nil nil ((apply -12 2188 2422 undo--wrap-and-run-primitive-undo 2188 2422 ((2393 . 2396) (2310 . 2313) (2275 . 2278) (2195 . 2198) 2410)) (t 26246 36405 731525 570000)) nil (26246 36413 908756 174000) 0 nil])
([nil nil ((9611 . 9613) (#("  " 0 2 (fontified t)) . -9611) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1420 . -2) (undo-tree-id1422 . -2) (undo-tree-id1424 . -2) (undo-tree-id1426 . -2) (undo-tree-id1428 . -2) (undo-tree-id1430 . -2) (undo-tree-id1432 . -2) (undo-tree-id1434 . -2) (undo-tree-id1436 . -2) (9610 . 9611) (9610 . 9612) (#("  " 0 2 (fontified t)) . -9610) (undo-tree-id1438 . 2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1442 . -2) (undo-tree-id1444 . -2) (undo-tree-id1446 . -2) (undo-tree-id1448 . -2) (undo-tree-id1450 . -2) (undo-tree-id1452 . -2) (undo-tree-id1454 . -2) (undo-tree-id1456 . -2) (undo-tree-id1458 . -2) (9609 . 9610) (t 26236 23840 791094 855000)) (("
" . 9609) (9610 . 9612) (#("  " 0 2 (fontified nil)) . 9610) (undo-tree-id2291 . 2) ("
" . 9610) (undo-tree-id2292 . 1) (9611 . 9613) ("  " . 9611)) (26236 24788 765566 64000) 0 nil])
([nil nil ((#("towait " 0 6 (fontified t) 6 7 (fontified t)) . 6869) (undo-tree-id3761 . -7)) ((6869 . 6876)) (26236 20705 752672 55000) 0 nil])
([nil nil ((#("
template<typename FutureT, typename WaitTimeT>
std::future_status
wait_for_result(
  FutureT & future,
  WaitTimeT time_to_wait)
{
  auto end = std::chrono::steady_clock::now() + time_to_wait;
  std::chrono::milliseconds wait_period(100);
  std::future_status status = std::future_status::timeout;
  do {
    auto now = std::chrono::steady_clock::now();
    auto time_left = end - now;
    if (time_left <= std::chrono::seconds(0)) {break;}
    status = future.wait_for((time_left < wait_period) ? time_left : wait_period);
  } while (rclcpp::ok() && status != std::future_status::ready);
  return status;
}


" 0 1 (fontified t) 1 9 (fontified t face font-lock-keyword-face) 9 10 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 10 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 26 (fontified t face font-lock-type-face) 26 27 (fontified t c-type c-<>-arg-sep) 27 28 (fontified t) 28 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 46 (fontified t face font-lock-type-face) 46 47 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 47 48 (fontified t) 48 51 (fontified t face font-lock-constant-face) 51 53 (fontified t) 53 65 (fontified t face font-lock-type-face) 65 66 (fontified t c-type c-decl-id-start face font-lock-type-face) 66 67 (fontified t) 67 82 (fontified t face font-lock-function-name-face) 82 83 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-2-face)) 83 86 (fontified t) 86 93 (fontified t face font-lock-type-face) 93 96 (fontified t) 96 102 (fontified t face font-lock-variable-name-face) 102 103 (fontified t c-type c-decl-arg-start) 103 106 (fontified t) 106 115 (fontified t face font-lock-type-face) 115 116 (fontified t) 116 128 (fontified t face font-lock-variable-name-face) 128 129 (fontified t face (rainbow-delimiters-depth-2-face)) 129 130 (fontified t) 130 131 (fontified t face (rainbow-delimiters-depth-2-face)) 131 134 (fontified t) 134 137 (fontified t face font-lock-keyword-face) 137 138 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 138 139 (fontified t) 139 142 (fontified t face font-lock-variable-name-face) 142 145 (fontified t) 145 148 (fontified t face font-lock-constant-face) 148 150 (fontified t) 150 156 (fontified t face font-lock-constant-face) 156 158 (fontified t) 158 170 (fontified t face font-lock-constant-face) 170 175 (fontified t) 175 176 (fontified t face (rainbow-delimiters-depth-3-face)) 176 177 (fontified t face (rainbow-delimiters-depth-3-face)) 177 196 (fontified t) 196 199 (fontified t face font-lock-constant-face) 199 201 (fontified t) 201 207 (fontified t face font-lock-constant-face) 207 209 (fontified t) 209 220 (fontified t face font-lock-type-face) 220 221 (fontified t c-type c-decl-id-start face font-lock-type-face) 221 222 (fontified t) 222 233 (fontified t face font-lock-variable-name-face) 233 234 (fontified t face (rainbow-delimiters-depth-3-face)) 234 237 (fontified t) 237 238 (fontified t face (rainbow-delimiters-depth-3-face)) 238 242 (fontified t) 242 245 (fontified t face font-lock-constant-face) 245 247 (fontified t) 247 259 (fontified t face font-lock-type-face) 259 260 (fontified t c-type c-decl-id-start face font-lock-type-face) 260 261 (fontified t) 261 267 (fontified t face font-lock-variable-name-face) 267 268 (fontified t) 268 269 (fontified t) 269 270 (fontified t) 270 273 (fontified t face font-lock-constant-face) 273 275 (fontified t) 275 288 (fontified t face font-lock-constant-face) 288 301 (fontified t) 301 303 (fontified t face font-lock-keyword-face) 303 304 (fontified t) 304 305 (fontified t face (rainbow-delimiters-depth-3-face)) 305 310 (fontified t) 310 313 (fontified t face font-lock-keyword-face) 313 314 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 314 315 (fontified t) 315 318 (fontified t face font-lock-variable-name-face) 318 321 (fontified t) 321 324 (fontified t face font-lock-constant-face) 324 326 (fontified t) 326 332 (fontified t face font-lock-constant-face) 332 334 (fontified t) 334 346 (fontified t face font-lock-constant-face) 346 351 (fontified t) 351 352 (fontified t face (rainbow-delimiters-depth-4-face)) 352 353 (fontified t face (rainbow-delimiters-depth-4-face)) 353 359 (fontified t) 359 362 (fontified t face font-lock-keyword-face) 362 363 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 363 364 (fontified t) 364 373 (fontified t face font-lock-variable-name-face) 373 391 (fontified t) 391 393 (fontified t face font-lock-keyword-face) 393 394 (fontified t) 394 395 (fontified t face (rainbow-delimiters-depth-4-face)) 395 408 (fontified t) 408 411 (fontified t face font-lock-constant-face) 411 413 (fontified t) 413 419 (fontified t face font-lock-constant-face) 419 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-5-face)) 429 430 (fontified t) 430 431 (fontified t face (rainbow-delimiters-depth-5-face)) 431 432 (fontified t face (rainbow-delimiters-depth-4-face)) 432 433 (fontified t) 433 434 (fontified t face (rainbow-delimiters-depth-4-face)) 434 439 (fontified t face font-lock-keyword-face) 439 440 (fontified t) 440 441 (fontified t face (rainbow-delimiters-depth-4-face)) 441 470 (fontified t) 470 471 (fontified t face (rainbow-delimiters-depth-4-face)) 471 472 (fontified t face (rainbow-delimiters-depth-5-face)) 472 495 (fontified t) 495 496 (fontified t face (rainbow-delimiters-depth-5-face)) 496 522 (fontified t) 522 523 (fontified t face (rainbow-delimiters-depth-4-face)) 523 527 (fontified t) 527 528 (fontified t face (rainbow-delimiters-depth-3-face)) 528 529 (fontified t) 529 534 (fontified t face font-lock-keyword-face) 534 535 (fontified t) 535 536 (fontified t face (rainbow-delimiters-depth-3-face)) 536 542 (fontified t face font-lock-constant-face) 542 546 (fontified t) 546 547 (fontified t face (rainbow-delimiters-depth-4-face)) 547 548 (fontified t face (rainbow-delimiters-depth-4-face)) 548 562 (fontified t) 562 565 (fontified t face font-lock-constant-face) 565 567 (fontified t) 567 580 (fontified t face font-lock-constant-face) 580 587 (fontified t) 587 588 (fontified t face (rainbow-delimiters-depth-3-face)) 588 592 (fontified t) 592 598 (fontified t face font-lock-keyword-face) 598 607 (fontified t) 607 608 (fontified t face (rainbow-delimiters-depth-2-face)) 608 611 (fontified t)) . 747) (undo-tree-id68 . -610) (undo-tree-id69 . -610) (undo-tree-id70 . -610) (undo-tree-id71 . -610) (undo-tree-id72 . -610) 1357 (t 26246 36413 963893 665000)) nil (26246 36426 4886 57000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -4157) (undo-tree-id1617 . -1) (undo-tree-id1619 . -1) (undo-tree-id1621 . -1) (undo-tree-id1623 . -1) (undo-tree-id1625 . -1) (undo-tree-id1627 . -1) 4158 (t 26236 23843 859081 39000)) ((4157 . 4158)) (26236 24788 761448 613000) 0 nil])
([nil nil ((#("- " 0 1 (fontified t) 1 2 (fontified t)) . 6869) (undo-tree-id3759 . -2)) ((6869 . 6871)) (26236 20705 745331 613000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 747) (undo-tree-id75 . 1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (t 26246 36426 56440 477000)) nil (26246 36428 301329 302000) 0 nil])
([nil nil ((#("    std::this_thread::sleep_for(s);
" 0 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 20 (face font-lock-constant-face fontified t) 20 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-4-face) fontified t) 32 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 35 (fontified t) 35 36 (fontified t)) . 4125) (undo-tree-id1460 . -35) (undo-tree-id1461 . 4) (undo-tree-id1462 . -32) (undo-tree-id1463 . -31) (undo-tree-id1465 . -36) (undo-tree-id1467 . -36) (undo-tree-id1469 . -36) (undo-tree-id1471 . -36) (undo-tree-id1473 . -36) (undo-tree-id1475 . -36) (undo-tree-id1477 . -36) (undo-tree-id1479 . -4) (undo-tree-id1481 . -4) (undo-tree-id1483 . -4) (undo-tree-id1485 . -4) (undo-tree-id1487 . -4) (undo-tree-id1489 . -4) (undo-tree-id1491 . -4) (undo-tree-id1493 . -4) (undo-tree-id1495 . -4) (undo-tree-id1497 . -4) (undo-tree-id1499 . -4) (undo-tree-id1501 . -4) (undo-tree-id1503 . -4) (undo-tree-id1505 . -4) (undo-tree-id1507 . -32) (undo-tree-id1509 . -32) (undo-tree-id1511 . -32) (undo-tree-id1513 . -32) (undo-tree-id1515 . -32) (undo-tree-id1517 . -32) (undo-tree-id1519 . -32) (undo-tree-id1521 . -32) (undo-tree-id1523 . -32) (undo-tree-id1525 . -32) (undo-tree-id1527 . -32) (undo-tree-id1529 . -32) (undo-tree-id1531 . -32) (undo-tree-id1533 . -32) (undo-tree-id1535 . -32) (undo-tree-id1537 . -32) (undo-tree-id1539 . -32) (undo-tree-id1541 . -32) (undo-tree-id1543 . -32) (undo-tree-id1545 . -32) (undo-tree-id1547 . -32) (undo-tree-id1549 . -32) (undo-tree-id1551 . -32) (undo-tree-id1553 . -32) (undo-tree-id1555 . -32) (undo-tree-id1557 . -32) (undo-tree-id1559 . -32) (undo-tree-id1561 . -32) (undo-tree-id1563 . -32) (undo-tree-id1565 . -32) (undo-tree-id1567 . -32) (undo-tree-id1569 . -34) (undo-tree-id1571 . -32) (undo-tree-id1573 . -32) (undo-tree-id1575 . -32) (undo-tree-id1577 . -32) (undo-tree-id1579 . -32) (undo-tree-id1581 . -32) (undo-tree-id1583 . -32) (undo-tree-id1585 . -32) (undo-tree-id1587 . -32) (undo-tree-id1589 . -32) (undo-tree-id1591 . -32) (undo-tree-id1593 . -32) (undo-tree-id1595 . -32) (undo-tree-id1597 . -31) (undo-tree-id1599 . -31) (undo-tree-id1601 . -31) (undo-tree-id1603 . -31) (undo-tree-id1605 . -31) (undo-tree-id1607 . -31) (undo-tree-id1609 . -31) (undo-tree-id1611 . -31) (undo-tree-id1613 . -31) (undo-tree-id1615 . -31) 4156) ((4125 . 4161)) (26236 24788 535802 392000) 0 nil])
([nil nil ((7097 . 7103) (#("fu" 0 2 (fontified nil)) . 7097) (7097 . 7099) (#("future" 0 6 (fontified nil)) . -7097) (7097 . 7103) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -7097) (undo-tree-id3880 . -2) (undo-tree-id3882 . -2) (undo-tree-id3884 . -2) (undo-tree-id3886 . -2) (undo-tree-id3888 . -2) 7099 (7097 . 7099) (#("d" 0 1 (fontified t)) . -7097) (undo-tree-id3890 . -1) (#("d" 0 1 (fontified t)) . -7098) (undo-tree-id3893 . -1) 7099 (7097 . 7099) (t 26236 10139 18575 622000)) ((#("dd" 0 1 (fontified nil) 1 2 (fontified nil)) . 7097) (7097 . 7099) (#("fu" 0 1 (fontified nil) 1 2 (fontified nil)) . 7097) (7097 . 7099) (#("future" 0 6 (fontified nil)) . 7097) (7097 . 7103) (#("fu" 0 2 (fontified nil)) . 7097) (7097 . 7099) (#("future" 0 6 (fontified nil)) . 7097) (undo-tree-id67 . -5)) (26236 20705 726221 460000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 747) (undo-tree-id73 . 1) (undo-tree-id74 . -1)) nil (26246 36428 301283 237000) 0 nil])
([nil nil ((#("  void topic_callback(const std_msgs::msg::Int16 &msg) {

    RCLCPP_INFO(this->get_logger(), \"Got Subscription\");
  }

" 0 2 (fontified t) 2 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 21 (face font-lock-function-name-face fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 22 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 36 (face font-lock-constant-face fontified t) 36 38 (fontified t) 38 41 (face font-lock-constant-face fontified t) 41 43 (fontified t) 43 48 (face font-lock-type-face fontified t) 48 50 (fontified t) 50 53 (face font-lock-variable-name-face fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 58 (fontified t) 58 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 78 (face font-lock-keyword-face fontified t) 78 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-5-face) fontified t) 91 92 (face (rainbow-delimiters-depth-5-face) fontified t) 92 94 (fontified t) 94 112 (face font-lock-string-face fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t) 113 114 (fontified t) 114 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-3-face) fontified t) 118 119 (fontified t) 119 120 (fontified t)) . 4130) (undo-tree-id1628 . -119) (undo-tree-id1629 . -119) (undo-tree-id1630 . -119) (undo-tree-id1632 . -2) (undo-tree-id1634 . -2) (undo-tree-id1636 . -2) (undo-tree-id1638 . -2) (undo-tree-id1640 . -2) (undo-tree-id1642 . -2) (undo-tree-id1644 . -2) (undo-tree-id1646 . -2) (undo-tree-id1648 . -57) (undo-tree-id1650 . -57) (undo-tree-id1652 . -57) (undo-tree-id1654 . -60) (undo-tree-id1656 . -60) (undo-tree-id1658 . -60) (undo-tree-id1660 . -60) (undo-tree-id1662 . -117) (undo-tree-id1664 . -117) (undo-tree-id1666 . -117) (undo-tree-id1668 . -119) (undo-tree-id1670 . -119) (undo-tree-id1672 . -119) (undo-tree-id1674 . -119) (undo-tree-id1676 . -119) (undo-tree-id1678 . -119) (undo-tree-id1680 . -119) (undo-tree-id1682 . -120) (undo-tree-id1683 . -119) (undo-tree-id1685 . -119) (undo-tree-id1687 . -119) (undo-tree-id1689 . -119) (undo-tree-id1691 . -119) (undo-tree-id1693 . -115) (undo-tree-id1695 . -115) (undo-tree-id1697 . -115) (undo-tree-id1699 . -115) (undo-tree-id1701 . -58) (undo-tree-id1703 . -58) (undo-tree-id1705 . -58) (undo-tree-id1707 . -57) (undo-tree-id1709 . -57) (undo-tree-id1711 . -57) (undo-tree-id1713 . -57) (t 26236 23898 966707 539000)) ((4130 . 4250)) (26236 24788 492235 4000) 0 nil])
([nil nil ((#("    current_service_done = future
" 0 4 (fontified t) 4 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 33 (fontified t) 33 34 (fontified t)) . 7070) (undo-tree-id3771 . -33) (undo-tree-id3773 . -27) (undo-tree-id3775 . -32) (undo-tree-id3777 . -27) (undo-tree-id3779 . -27) (undo-tree-id3781 . -27) (undo-tree-id3783 . -27) (undo-tree-id3785 . -27) (undo-tree-id3787 . -33) (undo-tree-id3789 . -33) (undo-tree-id3791 . -33) (undo-tree-id3793 . -33) (undo-tree-id3795 . -33) (undo-tree-id3797 . -33) (undo-tree-id3799 . -33) (undo-tree-id3801 . -33) (undo-tree-id3803 . -33) (undo-tree-id3805 . -33) (undo-tree-id3807 . -33) (undo-tree-id3809 . -33) (undo-tree-id3811 . -33) (undo-tree-id3813 . -33) (undo-tree-id3815 . -33) (undo-tree-id3817 . -33) (undo-tree-id3819 . -33) (undo-tree-id3821 . -33) (undo-tree-id3823 . -33) (undo-tree-id3825 . -33) (undo-tree-id3827 . -33) (undo-tree-id3829 . -33) (undo-tree-id3831 . -33) (undo-tree-id3833 . -33) (undo-tree-id3835 . -33) (undo-tree-id3837 . -33) (undo-tree-id3839 . -33) (undo-tree-id3841 . -33) (undo-tree-id3843 . -33) (undo-tree-id3845 . -33) (undo-tree-id3847 . -33) (undo-tree-id3849 . -33) (undo-tree-id3851 . -33) (undo-tree-id3853 . -33) (undo-tree-id3855 . -33) (undo-tree-id3857 . -33) (undo-tree-id3859 . -32) (undo-tree-id3861 . -32) (undo-tree-id3863 . -32) (undo-tree-id3865 . -32) (undo-tree-id3867 . -32) (undo-tree-id3869 . -32) (undo-tree-id3871 . -32) (undo-tree-id3873 . -32) (undo-tree-id3875 . -32) (undo-tree-id3877 . -32) 7102) ((7070 . 7104)) (26236 20705 717593 358000) 0 nil])
([nil nil ((apply -3 1817 1858 undo--wrap-and-run-primitive-undo 1817 1858 ((1821 . 1824) 1817)) (t 26246 36428 348544 900000)) nil (26246 36451 640272 353000) 0 nil])
([nil nil ((#("    subscription_.reset();
" 0 15 (fontified t) 15 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 26 (fontified t) 26 27 (fontified t)) . 6478) (undo-tree-id1715 . -26) (undo-tree-id1717 . -7) (undo-tree-id1719 . -7) (undo-tree-id1721 . -7) (undo-tree-id1723 . -7) (undo-tree-id1724 . -7) (undo-tree-id1726 . -7) (undo-tree-id1728 . -7) (undo-tree-id1730 . -7) (undo-tree-id1732 . -7) (undo-tree-id1734 . -7) (undo-tree-id1736 . -7) (undo-tree-id1738 . -7) (undo-tree-id1740 . -7) (undo-tree-id1742 . -7) (undo-tree-id1744 . -7) (undo-tree-id1746 . -7) (undo-tree-id1748 . -7) (undo-tree-id1750 . -7) (undo-tree-id1752 . -7) (undo-tree-id1754 . -7) (undo-tree-id1756 . -7) (undo-tree-id1758 . -7) (undo-tree-id1760 . -7) (undo-tree-id1762 . -7) (undo-tree-id1764 . -7) (undo-tree-id1766 . -7) (undo-tree-id1768 . -7) (undo-tree-id1770 . -7) (undo-tree-id1772 . -27) 6485 (t 26236 23903 314668 754000)) ((6478 . 6505)) (26236 24788 487703 321000) 0 nil])
([nil nil ((7102 . 7104) (7098 . 7102) (7092 . 7098) (#("fu" 0 2 (fontified nil)) . 7092) (7092 . 7094) (#("future" 0 6 (fontified nil)) . -7092) (7092 . 7098) (#("fut" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7092) (undo-tree-id3765 . -3) 7095 (7093 . 7095) (#("i" 0 1 (fontified t)) . -7093) (undo-tree-id3767 . -1) 7094 (7089 . 7094) (7069 . 7089) (#("cu" 0 2 (fontified nil)) . 7069) (7069 . 7071) (#("current_service_done" 0 20 (fontified nil)) . -7069) (7069 . 7089) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -7069) (undo-tree-id3769 . -2) 7071 (7069 . 7071) (7062 . 7069)) ((#("
      " 0 1 (fontified t) 1 7 (fontified nil)) . 7062) (undo-tree-id0 . -7) (undo-tree-id1 . -7) (undo-tree-id2 . -1) (undo-tree-id3 . -7) (undo-tree-id4 . -7) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) (#("cu" 0 1 (fontified nil) 1 2 (fontified nil)) . 7069) (7069 . 7071) (#("current_service_done" 0 20 (fontified nil)) . 7069) (7069 . 7089) (#("cu" 0 2 (fontified nil)) . 7069) (7069 . 7071) (#("current_service_done" 0 20 (fontified nil)) . 7069) (undo-tree-id12 . -20) (undo-tree-id13 . -20) (undo-tree-id14 . -20) (undo-tree-id15 . -20) (undo-tree-id16 . -20) (undo-tree-id17 . -20) (undo-tree-id18 . -20) (undo-tree-id19 . -20) (undo-tree-id20 . -20) (undo-tree-id21 . -20) (undo-tree-id22 . -20) (#(" = fi" 0 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 7089) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (7093 . 7094) (#("ut" 0 1 (fontified nil) 1 2 (fontified nil)) . 7093) (7092 . 7095) (#("future" 0 6 (fontified nil)) . 7092) (7092 . 7098) (#("fu" 0 2 (fontified nil)) . 7092) (7092 . 7094) (#("future" 0 6 (fontified nil)) . 7092) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (#(".get" 0 4 (fontified nil)) . 7098) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7102) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1)) (26236 20704 914919 246000) 0 nil])
([nil nil ((apply -9 2054 2259 undo--wrap-and-run-primitive-undo 2054 2259 ((2253 . 2256) (2130 . 2133) (2058 . 2061) 2054)) (t 26246 36451 685620 733000)) nil (26246 36456 260467 729000) 0 nil])
([nil nil ((#("    subscription_.reset();
" 0 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 27 (fontified t)) . 6989) (undo-tree-id1773 . -26) (undo-tree-id1774 . -7) (undo-tree-id1775 . -7) (undo-tree-id1777 . -7) (undo-tree-id1779 . -7) (undo-tree-id1781 . -7) (undo-tree-id1783 . -7) (undo-tree-id1785 . -7) (undo-tree-id1787 . -7) (undo-tree-id1789 . -7) (undo-tree-id1791 . -7) (undo-tree-id1793 . -7) (undo-tree-id1795 . -7) (undo-tree-id1797 . -7) (undo-tree-id1799 . -7) (undo-tree-id1801 . -7) (undo-tree-id1803 . -7) (undo-tree-id1805 . -7) (undo-tree-id1807 . -7) (undo-tree-id1809 . -7) (undo-tree-id1811 . -7) (undo-tree-id1813 . -7) (undo-tree-id1815 . -7) (undo-tree-id1817 . -7) (undo-tree-id1819 . -7) (undo-tree-id1821 . -7) (undo-tree-id1823 . -7) (undo-tree-id1825 . -7) (undo-tree-id1827 . -7) (undo-tree-id1829 . -7) (undo-tree-id1831 . -7) (undo-tree-id1833 . -7) (undo-tree-id1835 . -7) (undo-tree-id1837 . -7) (undo-tree-id1839 . -7) (undo-tree-id1841 . -7) (undo-tree-id1843 . -7) (undo-tree-id1845 . -7) (undo-tree-id1847 . -7) 6996 (t 26236 23935 562343 465000)) ((6989 . 7016)) (26236 24788 407960 890000) 0 nil])
([nil nil ((7113 . 7114) (7106 . 7113) (7105 . 7106) (7104 . 7105)) ((#("-" 0 1 (fontified nil)) . 7104) (#(">" 0 1 (fontified nil)) . 7105) (#("success" 0 7 (fontified nil)) . 7106) (#(";" 0 1 (fontified t)) . 7113) (t 26236 10189 679115 162000)) (26236 10189 657774 221000) 0 nil])
([nil nil ((apply -3 2259 2362 undo--wrap-and-run-primitive-undo 2259 2362 ((2263 . 2266) 2259)) (t 26246 36456 309836 443000)) nil (26246 36459 932696 410000) 0 nil])
([nil nil ((#("    subscription_.reset();
" 0 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 27 (fontified t)) . 7542) (undo-tree-id1849 . -26) (undo-tree-id1850 . -7) (undo-tree-id1851 . -7) 7549 (t 26236 23939 114303 786000)) ((7542 . 7569)) (26236 24788 384049 754000) 0 nil])
nil
([nil nil ((#("  bool change_state(std::uint8_t transition,  unsigned int index = 0,
                    std::chrono::seconds time_out=4s)
  {
    
    auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
    request->transition.id = transition;

   
    auto client_change_state_ = change_clients[index];
    
    if (!client_change_state_->wait_for_service(time_out)) {
      RCLCPP_ERROR(
        get_logger(),
        \"Service %s is not available.\",
        client_change_state_->get_service_name());
      return false;
    }

    // We send the request with the transition we want to invoke.
    auto future_result = client_change_state_->async_send_request(request).future.share();

    // Let's wait until we have the answer from the node.
    // If the request times out, we return an unknown state.
    auto future_status = wait_for_result(future_result, time_out);

    if (future_status != std::future_status::ready) {
      RCLCPP_ERROR(
        get_logger(), \"Server time out while getting current state for node %s\", client_change_state_->get_service_name());
      return false;
    }

    // We have an answer, let's print our success.
    if (future_result.get()->success) {
      RCLCPP_INFO(
        get_logger(), \"Transition %d successfully triggered.\", static_cast<int>(transition));
      return true;
    } else {
      RCLCPP_WARN(
        get_logger(), \"Failed to trigger transition %u\", static_cast<unsigned int>(transition));
      return false;
    }


  }

" 0 2 (c-is-sws t c-in-sws t fontified t) 2 3 (c-is-sws t fontified t face font-lock-type-face) 3 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 20 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 32 (fontified t face font-lock-type-face) 32 33 (fontified t) 33 43 (fontified t face font-lock-variable-name-face) 43 44 (fontified t c-type c-decl-arg-start) 44 46 (fontified t) 46 54 (fontified t face font-lock-type-face) 54 55 (fontified t) 55 58 (fontified t face font-lock-type-face) 58 59 (fontified t) 59 64 (fontified t face font-lock-variable-name-face) 64 68 (fontified t) 68 69 (fontified t c-type c-decl-arg-start) 69 90 (fontified t) 90 93 (fontified t face font-lock-constant-face) 93 95 (fontified t) 95 101 (fontified t face font-lock-constant-face) 101 103 (fontified t) 103 110 (fontified t face font-lock-type-face) 110 111 (fontified t) 111 119 (fontified t face font-lock-variable-name-face) 119 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 126 (fontified t) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 141 142 (fontified t) 142 149 (fontified t face font-lock-variable-name-face) 149 152 (fontified t) 152 155 (fontified t face font-lock-constant-face) 155 168 (fontified t) 168 169 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 169 183 (fontified t face font-lock-constant-face) 183 185 (fontified t) 185 188 (fontified t face font-lock-constant-face) 188 190 (fontified t) 190 201 (fontified t face font-lock-constant-face) 201 210 (fontified t) 210 211 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 211 212 (fontified t face (rainbow-delimiters-depth-4-face)) 212 213 (fontified t face (rainbow-delimiters-depth-4-face)) 213 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 269 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 269 270 (fontified t) 270 290 (fontified t face font-lock-variable-name-face) 290 307 (fontified t) 307 308 (fontified t face (rainbow-delimiters-depth-4-face)) 308 313 (fontified t) 313 314 (fontified t face (rainbow-delimiters-depth-4-face)) 314 325 (fontified t) 325 327 (fontified t face font-lock-keyword-face) 327 328 (fontified t) 328 329 (fontified t face (rainbow-delimiters-depth-4-face)) 329 330 (fontified t face font-lock-negation-char-face) 330 332 (fontified t) 332 368 (fontified t) 368 369 (fontified t face (rainbow-delimiters-depth-5-face)) 369 377 (fontified t) 377 378 (fontified t face (rainbow-delimiters-depth-5-face)) 378 379 (fontified t face (rainbow-delimiters-depth-4-face)) 379 380 (fontified t) 380 381 (fontified t face (rainbow-delimiters-depth-4-face)) 381 400 (fontified t) 400 401 (fontified t face (rainbow-delimiters-depth-5-face)) 401 420 (fontified t) 420 421 (fontified t face (rainbow-delimiters-depth-6-face)) 421 422 (fontified t face (rainbow-delimiters-depth-6-face)) 422 432 (fontified t) 432 462 (fontified t face font-lock-string-face) 462 470 (fontified t) 470 510 (fontified t) 510 511 (fontified t face (rainbow-delimiters-depth-6-face)) 511 512 (fontified t face (rainbow-delimiters-depth-6-face)) 512 513 (fontified t face (rainbow-delimiters-depth-5-face)) 513 515 (fontified t) 515 521 (fontified t) 521 527 (fontified t face font-lock-keyword-face) 527 528 (fontified t) 528 533 (fontified t face font-lock-constant-face) 533 539 (fontified t) 539 540 (fontified t face (rainbow-delimiters-depth-4-face)) 540 542 (fontified t) 542 546 (c-in-sws t c-is-sws t fontified t) 546 547 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 547 549 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 549 608 (c-in-sws t fontified t face font-lock-comment-face) 608 612 (c-is-sws t c-in-sws t fontified t) 612 613 (c-is-sws t fontified t face font-lock-keyword-face) 613 615 (fontified t face font-lock-keyword-face) 615 616 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 616 617 (fontified t) 617 630 (fontified t face font-lock-variable-name-face) 630 673 (fontified t) 673 674 (fontified t face (rainbow-delimiters-depth-4-face)) 674 681 (fontified t) 681 682 (fontified t face (rainbow-delimiters-depth-4-face)) 682 695 (fontified t) 695 696 (fontified t face (rainbow-delimiters-depth-4-face)) 696 697 (fontified t face (rainbow-delimiters-depth-4-face)) 697 700 (fontified t) 700 704 (c-in-sws t c-is-sws t fontified t) 704 705 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 705 707 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 707 710 (c-in-sws t fontified t face font-lock-comment-face) 710 711 (c-in-sws t fontified t face font-lock-comment-face) 711 758 (c-in-sws t fontified t face font-lock-comment-face) 758 762 (c-in-sws t fontified t) 762 765 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 765 818 (c-in-sws t fontified t face font-lock-comment-face) 818 819 (fontified t face font-lock-comment-face c-in-sws t) 819 823 (c-is-sws t c-in-sws t fontified t) 823 824 (c-is-sws t fontified t face font-lock-keyword-face) 824 826 (fontified t face font-lock-keyword-face) 826 827 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 827 828 (fontified t) 828 841 (fontified t face font-lock-variable-name-face) 841 859 (fontified t) 859 860 (fontified t face (rainbow-delimiters-depth-4-face)) 860 879 (fontified t) 879 883 (fontified t) 883 884 (fontified t face (rainbow-delimiters-depth-4-face)) 884 891 (fontified t) 891 893 (fontified t face font-lock-keyword-face) 893 894 (fontified t) 894 895 (fontified t face (rainbow-delimiters-depth-4-face)) 895 912 (fontified t) 912 915 (fontified t face font-lock-constant-face) 915 917 (fontified t) 917 930 (fontified t face font-lock-constant-face) 930 937 (fontified t) 937 938 (fontified t face (rainbow-delimiters-depth-4-face)) 938 939 (fontified t) 939 940 (fontified t face (rainbow-delimiters-depth-4-face)) 940 959 (fontified t) 959 960 (fontified t face (rainbow-delimiters-depth-5-face)) 960 979 (fontified t) 979 980 (fontified t face (rainbow-delimiters-depth-6-face)) 980 981 (fontified t face (rainbow-delimiters-depth-6-face)) 981 983 (fontified t) 983 1015 (fontified t face font-lock-string-face) 1015 1040 (fontified t face font-lock-string-face) 1040 1080 (fontified t) 1080 1081 (fontified t face (rainbow-delimiters-depth-6-face)) 1081 1082 (fontified t face (rainbow-delimiters-depth-6-face)) 1082 1083 (fontified t face (rainbow-delimiters-depth-5-face)) 1083 1085 (fontified t) 1085 1091 (fontified t) 1091 1097 (fontified t face font-lock-keyword-face) 1097 1098 (fontified t) 1098 1103 (fontified t face font-lock-constant-face) 1103 1109 (fontified t) 1109 1110 (fontified t face (rainbow-delimiters-depth-4-face)) 1110 1112 (fontified t) 1112 1116 (c-in-sws t c-is-sws t fontified t) 1116 1117 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1117 1119 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1119 1141 (c-in-sws t fontified t face font-lock-comment-face) 1141 1142 (c-in-sws t fontified t face font-lock-comment-face) 1142 1163 (c-in-sws t fontified t face font-lock-comment-face) 1163 1167 (c-is-sws t c-in-sws t fontified t) 1167 1168 (c-is-sws t fontified t face font-lock-keyword-face) 1168 1169 (fontified t face font-lock-keyword-face) 1169 1170 (fontified t) 1170 1171 (fontified t face (rainbow-delimiters-depth-4-face)) 1171 1188 (fontified t) 1188 1189 (fontified t face (rainbow-delimiters-depth-5-face)) 1189 1190 (fontified t face (rainbow-delimiters-depth-5-face)) 1190 1199 (fontified t) 1199 1200 (fontified t face (rainbow-delimiters-depth-4-face)) 1200 1201 (fontified t) 1201 1202 (fontified t face (rainbow-delimiters-depth-4-face)) 1202 1220 (fontified t) 1220 1221 (fontified t face (rainbow-delimiters-depth-5-face)) 1221 1240 (fontified t) 1240 1241 (fontified t face (rainbow-delimiters-depth-6-face)) 1241 1242 (fontified t face (rainbow-delimiters-depth-6-face)) 1242 1244 (fontified t) 1244 1283 (fontified t face font-lock-string-face) 1283 1285 (fontified t) 1285 1296 (fontified t face font-lock-keyword-face) 1296 1297 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 1297 1300 (fontified t face font-lock-type-face) 1300 1301 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 1301 1302 (fontified t face (rainbow-delimiters-depth-6-face)) 1302 1312 (fontified t) 1312 1313 (fontified t face (rainbow-delimiters-depth-6-face)) 1313 1314 (fontified t face (rainbow-delimiters-depth-5-face)) 1314 1322 (fontified t) 1322 1328 (fontified t face font-lock-keyword-face) 1328 1329 (fontified t) 1329 1333 (fontified t face font-lock-constant-face) 1333 1339 (fontified t) 1339 1340 (fontified t face (rainbow-delimiters-depth-4-face)) 1340 1341 (fontified t) 1341 1345 (fontified t face font-lock-keyword-face) 1345 1346 (fontified t) 1346 1347 (fontified t face (rainbow-delimiters-depth-4-face)) 1347 1365 (fontified t) 1365 1366 (fontified t face (rainbow-delimiters-depth-5-face)) 1366 1384 (fontified t) 1384 1385 (fontified t) 1385 1386 (fontified t face (rainbow-delimiters-depth-6-face)) 1386 1387 (fontified t face (rainbow-delimiters-depth-6-face)) 1387 1388 (fontified t) 1388 1389 (fontified t) 1389 1422 (fontified t face font-lock-string-face) 1422 1424 (fontified t) 1424 1435 (fontified t face font-lock-keyword-face) 1435 1436 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 1436 1444 (fontified t face font-lock-type-face) 1444 1445 (fontified t) 1445 1448 (fontified t face font-lock-type-face) 1448 1449 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 1449 1450 (fontified t face (rainbow-delimiters-depth-6-face)) 1450 1460 (fontified t) 1460 1461 (fontified t face (rainbow-delimiters-depth-6-face)) 1461 1462 (fontified t face (rainbow-delimiters-depth-5-face)) 1462 1470 (fontified t) 1470 1476 (fontified t face font-lock-keyword-face) 1476 1477 (fontified t) 1477 1482 (fontified t face font-lock-constant-face) 1482 1488 (fontified t) 1488 1489 (fontified t face (rainbow-delimiters-depth-4-face)) 1489 1494 (fontified t) 1494 1495 (fontified t face (rainbow-delimiters-depth-3-face)) 1495 1497 (fontified t)) . 5893) (undo-tree-id97 . -1496) (undo-tree-id98 . -1496) (undo-tree-id99 . -886) (undo-tree-id100 . -1496) (undo-tree-id101 . -321) (undo-tree-id102 . -1496) (undo-tree-id103 . -1496) 7389 (t 26246 36459 978008 104000)) nil (26246 36533 463782 115000) 0 nil])
([nil nil ((#("    " 0 4 (c-in-sws t c-is-sws t fontified t)) . -4975) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1946 . -4) (undo-tree-id1948 . -4) (undo-tree-id1950 . -4) (undo-tree-id1952 . -4) (undo-tree-id1954 . -4) (undo-tree-id1956 . -4) (undo-tree-id1958 . -4) (undo-tree-id1960 . -4) (undo-tree-id1962 . -4) (undo-tree-id1964 . -4) (undo-tree-id1966 . -4) 4979 (4975 . 4979) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 4974) (undo-tree-id1967 . -4) (undo-tree-id1968 . -4) (undo-tree-id1970 . -4) (undo-tree-id1972 . -4) (undo-tree-id1974 . -4) (undo-tree-id1976 . -4) (undo-tree-id1978 . -4) (undo-tree-id1980 . -4) (undo-tree-id1982 . -4) (undo-tree-id1984 . -4) (undo-tree-id1986 . -4) (undo-tree-id1988 . -4) (undo-tree-id1990 . -4) (4974 . 4979) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 4973) (undo-tree-id1991 . -4) (undo-tree-id1992 . -4) (undo-tree-id1994 . -4) (undo-tree-id1996 . -4) (undo-tree-id1998 . -4) (undo-tree-id2000 . -4) (undo-tree-id2002 . -4) (undo-tree-id2004 . -4) (undo-tree-id2006 . -4) (undo-tree-id2008 . -4) (undo-tree-id2010 . -4) (undo-tree-id2012 . -4) (undo-tree-id2014 . -4) (undo-tree-id2016 . -4) (undo-tree-id2018 . -4) (undo-tree-id2020 . -4) (undo-tree-id2022 . -4) (undo-tree-id2024 . -4) (undo-tree-id2026 . -4) (undo-tree-id2028 . -4) (4977 . 4978) (4973 . 4977) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 4972) (undo-tree-id2029 . -4) (undo-tree-id2030 . -4) (undo-tree-id2032 . -4) (undo-tree-id2034 . -4) (undo-tree-id2036 . -4) (undo-tree-id2038 . -4) (undo-tree-id2040 . -4) (undo-tree-id2042 . -4) (undo-tree-id2044 . -4) (undo-tree-id2046 . -4) (undo-tree-id2048 . -4) (undo-tree-id2050 . -4) (undo-tree-id2052 . -4) (4971 . 4977) (t 26236 23944 406243 317000)) ((#("
    
" 0 1 (c-in-sws t c-is-sws t fontified t) 1 5 (c-in-sws t c-is-sws t fontified nil) 5 6 (c-in-sws t c-is-sws t fontified nil)) . 4971) (undo-tree-id2102 . -6) (undo-tree-id2103 . -6) (undo-tree-id2104 . -6) (undo-tree-id2105 . -6) (undo-tree-id2106 . -6) (undo-tree-id2107 . -6) (undo-tree-id2108 . -6) (undo-tree-id2109 . -6) (undo-tree-id2110 . -6) (undo-tree-id2111 . -6) (undo-tree-id2112 . -6) (undo-tree-id2113 . -6) (undo-tree-id2114 . -6) (undo-tree-id2115 . -6) (undo-tree-id2116 . -6) (undo-tree-id2117 . -6) (undo-tree-id2118 . -6) (undo-tree-id2119 . -6) (undo-tree-id2120 . -6) (undo-tree-id2121 . -6) (undo-tree-id2122 . -6) (undo-tree-id2123 . -6) (undo-tree-id2124 . -6) (undo-tree-id2125 . -6) (undo-tree-id2126 . -6) (undo-tree-id2127 . -6) (undo-tree-id2128 . -6) (undo-tree-id2129 . -6) (undo-tree-id2130 . -6) (undo-tree-id2131 . -6) (undo-tree-id2132 . -6) (undo-tree-id2133 . -6) (undo-tree-id2134 . -6) (undo-tree-id2135 . -6) (undo-tree-id2136 . -6) (undo-tree-id2137 . -6) (undo-tree-id2138 . -6) (undo-tree-id2139 . -6) (undo-tree-id2140 . -6) (undo-tree-id2141 . -6) (undo-tree-id2142 . -6) (undo-tree-id2143 . -6) (undo-tree-id2144 . -6) (undo-tree-id2145 . -6) (undo-tree-id2146 . -6) (undo-tree-id2147 . -6) (undo-tree-id2148 . -6) (undo-tree-id2149 . -6) (undo-tree-id2150 . -6) (undo-tree-id2151 . -6) (undo-tree-id2152 . -6) (undo-tree-id2153 . -6) (undo-tree-id2154 . -6) (undo-tree-id2155 . -6) (undo-tree-id2156 . -6) (undo-tree-id2157 . -6) (undo-tree-id2158 . -6) (undo-tree-id2159 . -6) (undo-tree-id2160 . -6) (undo-tree-id2161 . -6) (undo-tree-id2162 . -6) (undo-tree-id2163 . -6) (4972 . 4976) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 4973) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -4) (undo-tree-id2172 . -4) (undo-tree-id2173 . -4) (undo-tree-id2174 . -4) (undo-tree-id2175 . -4) (undo-tree-id2176 . -4) (undo-tree-id2177 . -4) (undo-tree-id2178 . -4) (undo-tree-id2179 . -4) (undo-tree-id2180 . -4) (undo-tree-id2181 . -4) (undo-tree-id2182 . -4) (undo-tree-id2183 . -4) (undo-tree-id2184 . -4) (undo-tree-id2185 . -4) (undo-tree-id2186 . -4) (undo-tree-id2187 . -4) (undo-tree-id2188 . -4) (undo-tree-id2189 . -4) (undo-tree-id2190 . -4) (undo-tree-id2191 . -4) (undo-tree-id2192 . -4) (undo-tree-id2193 . -4) (undo-tree-id2194 . -4) (undo-tree-id2195 . -4) (undo-tree-id2196 . -4) (undo-tree-id2197 . -4) (undo-tree-id2198 . -4) (undo-tree-id2199 . -4) (undo-tree-id2200 . -4) (undo-tree-id2201 . -4) (undo-tree-id2202 . -4) (undo-tree-id2203 . -4) (undo-tree-id2204 . -4) (undo-tree-id2205 . -4) (undo-tree-id2206 . -4) (undo-tree-id2207 . -4) (undo-tree-id2208 . -4) (undo-tree-id2209 . -4) (undo-tree-id2210 . -4) (undo-tree-id2211 . -4) (undo-tree-id2212 . -4) (undo-tree-id2213 . -4) (undo-tree-id2214 . -4) (undo-tree-id2215 . -4) (undo-tree-id2216 . -4) (undo-tree-id2217 . -4) (undo-tree-id2218 . -4) (undo-tree-id2219 . -4) (undo-tree-id2220 . -4) (undo-tree-id2221 . -4) (undo-tree-id2222 . -4) (undo-tree-id2223 . -4) (undo-tree-id2224 . -4) (undo-tree-id2225 . -4) (#("
" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 4977) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (4973 . 4977) (#("    
" 0 4 (c-in-sws t c-is-sws t fontified nil) 4 5 (c-in-sws t c-is-sws t fontified nil)) . 4974) (undo-tree-id2288 . 1) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (4974 . 4978) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 4975) (4975 . 4979)) (26236 24788 321762 927000) 0 nil] [nil nil ((#("  bool change_state(std::uint8_t transit, unsigned int index) {
    auto node = std::make_shared<ServiceNode>(std::string(\"ServeNode\"),
					      std::string(change_state_topics[index].c_str()),
					      transit);
    
    while (node->first_take) {
      rclcpp::spin_some(node);
    }
    
    if (node->service_result) {
      RCLCPP_INFO(rclcpp::get_logger(\"OutMain\"), \"IT WAS TRUE\");
    } else {
      RCLCPP_INFO(rclcpp::get_logger(\"OutMain\"), \"IT WAS TRUE\");
    }

    return node->service_result;

  }

" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t) 7 8 (face font-lock-function-name-face fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 10 (face font-lock-function-name-face fontified t) 10 11 (face font-lock-function-name-face fontified t) 11 13 (face font-lock-function-name-face fontified t) 13 14 (face font-lock-function-name-face fontified t) 14 15 (face font-lock-function-name-face fontified t) 15 16 (face font-lock-function-name-face fontified t) 16 17 (face font-lock-function-name-face fontified t) 17 18 (face font-lock-function-name-face fontified t) 18 19 (face font-lock-function-name-face fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) c-type c-decl-arg-start fontified t) 20 21 (face font-lock-constant-face fontified t) 21 22 (face font-lock-constant-face fontified t) 22 23 (face font-lock-constant-face fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (face font-lock-variable-name-face fontified t) 34 35 (face font-lock-variable-name-face fontified t) 35 36 (face font-lock-variable-name-face fontified t) 36 37 (face font-lock-variable-name-face fontified t) 37 38 (face font-lock-variable-name-face fontified t) 38 39 (face font-lock-variable-name-face fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 41 (c-type c-decl-arg-start fontified t) 41 42 (fontified t) 42 43 (face font-lock-type-face fontified t) 43 44 (face font-lock-type-face fontified t) 44 45 (face font-lock-type-face fontified t) 45 46 (face font-lock-type-face fontified t) 46 47 (face font-lock-type-face fontified t) 47 48 (face font-lock-type-face fontified t) 48 49 (face font-lock-type-face fontified t) 49 50 (face font-lock-type-face fontified t) 50 51 (fontified t) 51 52 (face font-lock-type-face fontified t) 52 53 (face font-lock-type-face fontified t) 53 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 56 (face font-lock-variable-name-face fontified t) 56 57 (face font-lock-variable-name-face fontified t) 57 59 (face font-lock-variable-name-face fontified t) 59 60 (face font-lock-variable-name-face fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (fontified t) 64 68 (fontified t) 68 71 (face font-lock-keyword-face fontified t) 71 72 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 72 73 (fontified t) 73 77 (face font-lock-variable-name-face fontified t) 77 80 (fontified t) 80 83 (face font-lock-constant-face fontified t) 83 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-4-face) fontified t category c-<-as-paren-syntax) 97 108 (face font-lock-type-face fontified t) 108 109 (face (rainbow-delimiters-depth-4-face) fontified t category c->-as-paren-syntax) 109 110 (face (rainbow-delimiters-depth-4-face) fontified t) 110 113 (face font-lock-constant-face fontified t) 113 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-5-face) fontified t) 122 133 (face font-lock-string-face fontified t) 133 134 (face (rainbow-delimiters-depth-5-face) fontified t) 134 147 (fontified t) 147 150 (face font-lock-constant-face fontified t) 150 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-5-face) fontified t) 159 178 (fontified t) 178 179 (face (rainbow-delimiters-depth-6-face) fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-6-face) fontified t) 185 186 (fontified t) 186 187 (fontified t) 187 188 (fontified t) 188 189 (fontified t) 189 190 (fontified t) 190 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-6-face) fontified t) 192 193 (face (rainbow-delimiters-depth-6-face) fontified t) 193 194 (face (rainbow-delimiters-depth-5-face) fontified t) 194 196 (fontified t) 196 207 (fontified t) 207 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-4-face) fontified t) 215 217 (fontified t) 217 221 (fontified t) 221 222 (fontified t) 222 226 (fontified t) 226 231 (face font-lock-keyword-face fontified t) 231 232 (fontified t) 232 233 (fontified t face (rainbow-delimiters-depth-4-face)) 233 249 (fontified t) 249 250 (fontified t face (rainbow-delimiters-depth-4-face)) 250 251 (fontified t) 251 252 (fontified t face (rainbow-delimiters-depth-4-face)) 252 253 (fontified t) 253 259 (fontified t) 259 265 (face font-lock-constant-face fontified t) 265 276 (fontified t) 276 277 (face (rainbow-delimiters-depth-5-face) fontified t) 277 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-5-face) fontified t) 282 284 (fontified t) 284 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-4-face) fontified t) 289 290 (fontified t) 290 294 (fontified t) 294 295 (fontified t) 295 299 (fontified t) 299 301 (face font-lock-keyword-face fontified t) 301 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-4-face) fontified t) 303 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-4-face) fontified t) 324 325 (fontified t) 325 326 (face (rainbow-delimiters-depth-4-face) fontified t) 326 327 (fontified t) 327 333 (fontified t) 333 344 (fontified t) 344 345 (face (rainbow-delimiters-depth-5-face) fontified t) 345 351 (face font-lock-constant-face fontified t) 351 363 (fontified t) 363 364 (face (rainbow-delimiters-depth-6-face) fontified t) 364 373 (face font-lock-string-face fontified t) 373 374 (face (rainbow-delimiters-depth-6-face) fontified t) 374 376 (fontified t) 376 389 (face font-lock-string-face fontified t) 389 390 (face (rainbow-delimiters-depth-5-face) fontified t) 390 392 (fontified t) 392 396 (fontified t) 396 397 (face (rainbow-delimiters-depth-4-face) fontified t) 397 398 (fontified t) 398 402 (face font-lock-keyword-face fontified t) 402 403 (fontified t) 403 404 (face (rainbow-delimiters-depth-4-face) fontified t) 404 405 (fontified t) 405 411 (fontified t) 411 422 (fontified t) 422 423 (face (rainbow-delimiters-depth-5-face) fontified t) 423 429 (face font-lock-constant-face fontified t) 429 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-6-face) fontified t) 442 451 (face font-lock-string-face fontified t) 451 452 (face (rainbow-delimiters-depth-6-face) fontified t) 452 454 (fontified t) 454 467 (face font-lock-string-face fontified t) 467 468 (face (rainbow-delimiters-depth-5-face) fontified t) 468 470 (fontified t) 470 474 (fontified t) 474 475 (face (rainbow-delimiters-depth-4-face) fontified t) 475 476 (fontified t) 476 477 (fontified t) 477 481 (fontified t) 481 482 (face font-lock-keyword-face fontified t) 482 483 (face font-lock-keyword-face fontified t) 483 484 (face font-lock-keyword-face fontified t) 484 485 (face font-lock-keyword-face fontified t) 485 486 (face font-lock-keyword-face fontified t) 486 487 (face font-lock-keyword-face fontified t) 487 488 (fontified t) 488 492 (fontified t) 492 493 (fontified t) 493 494 (fontified t) 494 495 (fontified t) 495 496 (fontified t) 496 497 (fontified t) 497 498 (fontified t) 498 499 (fontified t) 499 500 (fontified t) 500 501 (fontified t) 501 502 (fontified t) 502 503 (fontified t) 503 504 (fontified t) 504 505 (fontified t) 505 506 (fontified t) 506 507 (fontified t) 507 508 (fontified t) 508 509 (fontified t) 509 510 (fontified t) 510 511 (fontified t) 511 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-3-face) fontified t) 514 515 (fontified t) 515 516 (fontified t)) . 8856) (undo-tree-id1852 . -515) (undo-tree-id1853 . -515) (undo-tree-id1854 . -515) (undo-tree-id1855 . -63) (undo-tree-id1856 . -63) (undo-tree-id1857 . -63) (undo-tree-id1858 . -64) (undo-tree-id1859 . -64) (undo-tree-id1860 . -64) (undo-tree-id1861 . -185) (undo-tree-id1862 . -191) (undo-tree-id1863 . -64) (undo-tree-id1864 . -191) (undo-tree-id1865 . -191) (undo-tree-id1866 . -47) (undo-tree-id1867 . -47) (undo-tree-id1868 . -207) (undo-tree-id1869 . -213) (undo-tree-id1870 . -213) (undo-tree-id1871 . -213) (undo-tree-id1872 . -511) (undo-tree-id1873 . -516) (undo-tree-id1874 . -515) (undo-tree-id1875 . -476) (undo-tree-id1876 . -476) (undo-tree-id1877 . -476) (undo-tree-id1878 . -476) (undo-tree-id1879 . -295) (undo-tree-id1880 . -295) (undo-tree-id1881 . -295) (undo-tree-id1882 . -295) (undo-tree-id1883 . -295) (undo-tree-id1884 . -295) (undo-tree-id1885 . -295) (undo-tree-id1886 . -290) (undo-tree-id1887 . -290) (undo-tree-id1888 . -290) (undo-tree-id1889 . -290) (undo-tree-id1890 . -290) (undo-tree-id1891 . -290) (undo-tree-id1892 . -290) (undo-tree-id1893 . -284) (undo-tree-id1894 . -284) (undo-tree-id1895 . -284) (undo-tree-id1896 . -284) (undo-tree-id1897 . -284) (undo-tree-id1898 . -284) (undo-tree-id1899 . -284) (undo-tree-id1900 . -253) (undo-tree-id1901 . -253) (undo-tree-id1902 . -253) (undo-tree-id1903 . -253) (undo-tree-id1904 . -253) (undo-tree-id1905 . -253) (undo-tree-id1906 . -253) (undo-tree-id1907 . -222) (undo-tree-id1908 . -222) (undo-tree-id1909 . -222) (undo-tree-id1910 . -222) (undo-tree-id1911 . -222) (undo-tree-id1912 . -222) (undo-tree-id1913 . -222) (undo-tree-id1914 . -217) (undo-tree-id1915 . -217) (undo-tree-id1916 . -217) (undo-tree-id1917 . -217) (undo-tree-id1918 . -217) (undo-tree-id1919 . -217) (undo-tree-id1920 . -217) (undo-tree-id1921 . -196) (undo-tree-id1922 . -196) (undo-tree-id1923 . -196) (undo-tree-id1924 . -196) (undo-tree-id1925 . -196) (undo-tree-id1926 . -196) (undo-tree-id1927 . -196) (undo-tree-id1928 . -136) (undo-tree-id1929 . -136) (undo-tree-id1930 . -136) (undo-tree-id1931 . -136) (undo-tree-id1932 . -136) (undo-tree-id1933 . -136) (undo-tree-id1934 . -136) (undo-tree-id1935 . -64) (undo-tree-id1936 . -64) (undo-tree-id1937 . -64) (undo-tree-id1938 . -64) (undo-tree-id1939 . -64) (undo-tree-id1940 . -64) (undo-tree-id1941 . -64) (undo-tree-id1942 . -516) (t 26236 23944 406243 317000)) ((8856 . 9372)) (26236 23987 274609 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8138 . 8139) (nil fontified nil 8091 . 8139) (nil fontified nil 8090 . 8091) (nil category c->-as-paren-syntax 8090 . 8091) (nil fontified nil 8078 . 8090) (nil fontified nil 8077 . 8078) (nil category c-<-as-paren-syntax 8077 . 8078) (nil fontified nil 7943 . 8077) (nil fontified nil 7942 . 7943) (nil category c->-as-paren-syntax 7942 . 7943) (nil fontified nil 7939 . 7942) (nil fontified nil 7938 . 7939) (nil category c-<-as-paren-syntax 7938 . 7939) (nil fontified nil 7784 . 7938) (nil fontified nil 7783 . 7784) (nil fontified nil 7353 . 7783) (nil fontified nil 7352 . 7353) (nil fontified nil 6853 . 7352) (nil fontified nil 6852 . 6853) (nil category c->-as-paren-syntax 6852 . 6853) (nil fontified nil 6811 . 6852) (nil fontified nil 6810 . 6811) (nil category c-<-as-paren-syntax 6810 . 6811) (nil fontified nil 6642 . 6810) (6642 . 8139)) nil (26246 36533 463688 477000) 0 nil])
([nil nil ((4974 . 4978) (t 26236 24282 562033 435000)) ((#("    " 0 3 (c-in-sws t c-is-sws t fontified t) 3 4 (c-in-sws t c-is-sws t fontified t)) . 4974) (undo-tree-id2057 . -3) (undo-tree-id2058 . -3) (undo-tree-id2059 . -3) (undo-tree-id2060 . -3) (undo-tree-id2061 . -3) (undo-tree-id2062 . -3) (undo-tree-id2063 . -3) (undo-tree-id2064 . -3) (undo-tree-id2065 . -3) (undo-tree-id2066 . -3) (undo-tree-id2067 . -3) (undo-tree-id2068 . -3) (undo-tree-id2069 . -3) (undo-tree-id2070 . -3) (undo-tree-id2071 . -3) (undo-tree-id2072 . -3) (undo-tree-id2073 . -3) (undo-tree-id2074 . -3) (undo-tree-id2075 . -3) (undo-tree-id2076 . -3) (undo-tree-id2077 . -3) (undo-tree-id2078 . -3) (undo-tree-id2079 . -3) (undo-tree-id2080 . -3) (undo-tree-id2081 . -3) (undo-tree-id2082 . -3) (undo-tree-id2083 . -3) (undo-tree-id2084 . -3) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) (undo-tree-id2092 . -3) (undo-tree-id2093 . -3) (undo-tree-id2094 . -3) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3)) (26236 24787 714755 898000) 0 nil])
nil
([nil nil ((apply -102 6642 8241 undo--wrap-and-run-primitive-undo 6642 8241 ((8235 . 8238) (8224 . 8227) (8201 . 8204) (8101 . 8104) (8079 . 8082) (8063 . 8066) (8041 . 8044) (7944 . 7947) (7922 . 7925) (7879 . 7882) (7825 . 7828) (7815 . 7818) (7792 . 7795) (7665 . 7668) (7642 . 7645) (7585 . 7588) (7514 . 7517) (7450 . 7453) (7389 . 7392) (7294 . 7297) (7225 . 7228) (7215 . 7218) (7192 . 7195) (7138 . 7141) (7095 . 7098) (7070 . 7073) (7047 . 7050) (6983 . 6986) (6920 . 6923) (6871 . 6874) (6786 . 6789) (6774 . 6777) (6717 . 6720) (6644 . 6647) 6642))) nil (26246 36533 463669 688000) 0 nil])
([nil nil ((4974 . 4978) (#("   " 0 3 (c-in-sws t c-is-sws t fontified nil)) . -4974) (undo-tree-id2053 . -3) (undo-tree-id2054 . -3) (#(" " 0 1 (c-in-sws t c-is-sws t fontified t)) . 4977)) ((4974 . 4978) (#("    " 0 4 (c-in-sws t c-is-sws t fontified t)) . 4974) (undo-tree-id2055 . -3) (undo-tree-id2056 . -3) (t 26236 24347 809083 934000)) (26236 24347 751036 588000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-is-sws t c-in-sws t)) . 5891) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (t 26246 36533 525533 488000)) nil (26246 36538 480337 10000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t c-is-sws t c-in-sws t)) . 5891) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1)) nil (26246 36538 480313 175000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t c-is-sws t c-in-sws t)) . -5892) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) 5894 (5892 . 5894) (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-is-sws t c-in-sws t)) . 5891) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (5890 . 5894) (t 26246 36538 525777 828000)) nil (26246 36579 685873 963000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6020 . 6021) (nil fontified nil 5895 . 6021) (nil fontified nil 5894 . 5895) (nil fontified nil 5892 . 5894) (5892 . 6021)) nil (26246 36579 685632 324000) 0 nil])
([nil nil ((apply 6 5893 6018 undo--wrap-and-run-primitive-undo 5893 6018 ((#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -5964) (#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -5894) 5893))) nil (26246 36579 685627 608000) 0 nil])
([nil nil ((6018 . 6022) (6017 . 6021) (6016 . 6018) (6015 . 6016)) nil (26246 36579 685616 567000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 5982) (undo-tree-id204 . -2) (t 26246 36579 731807 791000)) nil (26246 36589 814006 234000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5982) (undo-tree-id203 . -1)) nil (26246 36589 814002 34000) 0 nil])
([nil nil ((#("chrono" 0 6 (fontified t face font-lock-constant-face)) . 5982) (undo-tree-id202 . -5)) nil (26246 36589 813998 503000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5982) (undo-tree-id201 . -1)) nil (26246 36589 813995 56000) 0 nil])
([nil nil ((#("seconds " 0 7 (fontified t face font-lock-type-face) 7 8 (fontified t)) . 5982) (undo-tree-id200 . -7)) nil (26246 36589 813991 315000) 0 nil])
([nil nil ((#("time" 0 4 (fontified t)) . 5982) (undo-tree-id199 . -3)) nil (26246 36589 813986 774000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5982)) nil (26246 36589 813982 846000) 0 nil])
([nil nil ((#("out" 0 3 (fontified t)) . 5982) (undo-tree-id198 . -2)) nil (26246 36589 813980 505000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 5982)) nil (26246 36589 813976 680000) 0 nil])
([nil nil ((#("4s" 0 2 (fontified t)) . 5982) (undo-tree-id197 . -1)) nil (26246 36589 813974 99000) 0 nil])
([nil nil ((#("                    " 0 2 (fontified t) 2 20 (fontified t)) . 5962) (undo-tree-id196 . -19)) nil (26246 36589 813969 32000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5961) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 5962) nil (26246 36589 813962 69000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5960) (undo-tree-id192 . -1)) nil (26246 36589 813944 821000) 0 nil])
([nil nil ((5967 . 5971) (#("    " 0 4 (fontified nil)) . 5966) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (5966 . 5971) (#("    " 0 4 (fontified nil)) . 5965) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (5965 . 5970) (#("    " 0 4 (fontified nil)) . 5964) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (5968 . 5969) (5964 . 5968) (#("   " 0 3 (fontified nil)) . -5964) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (#(" " 0 1 (fontified t)) . 5967) (t 26246 36589 856310 428000)) nil (26246 36632 435667 542000) 0 nil])
([nil nil ((5966 . 5970)) nil (26246 36632 435396 27000) 0 nil])
([nil nil ((5965 . 5969)) nil (26246 36632 435394 502000) 0 nil])
([nil nil ((5964 . 5968)) nil (26246 36632 435392 835000) 0 nil])
([nil nil ((5964 . 5968) (#("  " 0 2 (fontified nil)) . -5964) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (#("  " 0 2 (fontified t)) . 5966) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1)) nil (26246 36632 435372 766000) 0 nil])
([nil nil ((6005 . 6006) (6004 . 6006) (#("." 0 1 (fontified t)) . -6004) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("g" 0 1 (fontified t)) . -6005) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("e" 0 1 (fontified t)) . -6006) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 6007 (6004 . 6007) (5990 . 6004) (#("li" 0 2 (fontified nil)) . 5990) (5990 . 5992) (#("lifecycle_list" 0 14 (fontified nil)) . -5990) (5990 . 6004) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -5990) (undo-tree-id289 . -2) (undo-tree-id290 . -2) 5992 (5990 . 5992) (#("i" 0 1 (fontified t)) . -5990) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("n" 0 1 (fontified t)) . -5991) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 5992 (5990 . 5992) (#("u" 0 1 (fontified t)) . -5990) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 5991 (5990 . 5991) (5988 . 5990) (#("-" 0 1 (fontified t)) . -5988) (undo-tree-id297 . -1) 5989 (5973 . 5989) (5964 . 5968) (#("  " 0 2 (fontified nil)) . 5964) (5970 . 5971) (5964 . 5966) (#("    " 0 4 (fontified nil)) . 5964) (5971 . 5972) (5969 . 5971) (#("t" 0 1 (fontified t)) . -5969) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("r" 0 1 (fontified t)) . -5970) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("i" 0 1 (fontified t)) . -5971) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("n" 0 1 (fontified t)) . -5972) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("g" 0 1 (fontified t)) . -5973) (undo-tree-id306 . -1) (undo-tree-id307 . -1) 5974 (5968 . 5974) (5964 . 5968) (#("   " 0 3 (fontified nil)) . -5964) (undo-tree-id308 . -3) (#(" " 0 1 (fontified t)) . 5967)) nil (26246 36632 435012 50000) 0 nil])
([nil nil ((6007 . 6008)) nil (26246 36632 434574 247000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6010) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) 6014 (6010 . 6014) (#("    " 0 4 (fontified nil)) . 6009) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (6008 . 6014)) nil (26246 36632 434558 472000) 0 nil])
([nil nil ((6010 . 6014) (t 26246 36632 486439 933000)) nil (26246 36667 943165 283000) 0 nil])
([nil nil ((6030 . 6043) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6030) (undo-tree-id717 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -6031) (undo-tree-id718 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -6032) (undo-tree-id719 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6033) (undo-tree-id720 . -1) 6034 (6025 . 6034) (6025 . 6026) (nil syntax-table nil 6025 . 6026) (nil syntax-table (1) 6024 . 6025) (6024 . 6025) (#("\"" 0 1 (fontified nil)) . -6024) (nil syntax-table nil 6025 . 6026) (nil syntax-table (1) 6024 . 6025) (6014 . 6025) (6010 . 6014) (#("   " 0 3 (fontified nil)) . -6010) (undo-tree-id721 . -3) (#(" " 0 1 (fontified t)) . 6013)) nil (26246 36667 943159 121000) 0 nil])
([nil nil ((6043 . 6044)) nil (26246 36667 943145 85000) 0 nil])
([nil nil ((6045 . 6048)) nil (26246 36667 943143 352000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6055) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) 6056 (6050 . 6056) (#("t" 0 1 (fontified t)) . -6050) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) 6051 (6049 . 6051) (#("o" 0 1 (fontified t)) . -6049) (undo-tree-id714 . -1) (undo-tree-id715 . -1) 6050 (6048 . 6050) (#(" " 0 1 (fontified t)) . -6048) (undo-tree-id716 . -1) 6049 (6048 . 6049)) nil (26246 36667 943133 365000) 0 nil])
([nil nil ((6055 . 6056)) nil (26246 36667 942858 275000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6059) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) 6063 (6059 . 6063) (#("    " 0 4 (fontified nil)) . 6058) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (6058 . 6063) (#("    " 0 4 (fontified nil)) . 6057) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (6056 . 6062) (t 26246 36668 6221 743000)) nil (26246 36676 545673 288000) 0 nil])
([nil nil ((6057 . 6058) (6057 . 6058) (nil syntax-table nil 6058 . 6059) (nil syntax-table (1) 6056 . 6057) (6056 . 6057) (#("\"" 0 1 (fontified nil)) . -6056) (nil syntax-table nil 6058 . 6059) (nil syntax-table (1) 6056 . 6057) (6055 . 6057)) nil (26246 36676 545198 171000) 0 nil])
([nil nil ((6056 . 6058)) nil (26246 36676 545185 198000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6064) (undo-tree-id954 . -4) 6068 (6064 . 6068) (#("    " 0 4 (fontified nil)) . 6063) (undo-tree-id955 . -4) (6062 . 6068) (t 26246 36676 591428 55000)) nil (26246 38323 436165 951000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6064) (undo-tree-id953 . 1)) nil (26246 38323 436156 64000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6064) (undo-tree-id952 . 1)) nil (26246 38323 436151 134000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6064) (undo-tree-id951 . 1)) nil (26246 38323 436146 463000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6064) (undo-tree-id950 . 1)) nil (26246 38323 436141 589000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 6064) (undo-tree-id948 . -4) (undo-tree-id949 . 5)) nil (26246 38323 436135 936000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 6064) (undo-tree-id946 . -4) (undo-tree-id947 . 5)) nil (26246 38323 436128 347000) 0 nil])
([nil nil ((6065 . 6069) (#("    " 0 4 (fontified nil)) . 6064) (undo-tree-id944 . -4) (6064 . 6069) (#("    " 0 4 (fontified nil)) . 6063) (undo-tree-id945 . -4) (6067 . 6068) (6063 . 6067)) nil (26246 38323 436115 946000) 0 nil])
([nil nil ((6065 . 6069) (#("    " 0 4 (fontified nil)) . 6064) (undo-tree-id943 . -4) (6068 . 6069) (6064 . 6068)) nil (26246 38323 436103 253000) 0 nil])
([nil nil ((6064 . 6068)) nil (26246 38323 436095 466000) 0 nil])
([nil nil ((6096 . 6100) (apply yas--snippet-revive 6068 6107 #s(yas--snippet nil (#s(yas--field 1 6076 6086 nil nil nil t #s(yas--field 0 6096 6101 nil nil nil nil nil)) #s(yas--field 0 6096 6101 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 6076 6086 nil nil nil t #s(yas--field 0 6096 6101 nil nil nil nil nil)) nil nil)) (6076 . 6086) (#("tra" 0 3 (fontified nil)) . 6076) (6076 . 6079) (#("transition" 0 10 (fontified nil)) . -6076) (6076 . 6086) (#("tra" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6076) (undo-tree-id937 . -3) (undo-tree-id938 . -3) 6079 (6077 . 6079) (#("condition" 0 9 (fontified nil)) . 6077) (6076 . 6077) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6076 6086 nil nil nil t #s(yas--field 0 6096 6101 nil nil nil nil nil)) #s(yas--field 0 6096 6101 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 6076 6086 nil nil nil t #s(yas--field 0 6096 6101 nil nil nil nil nil)) nil nil)) (6068 . 6106) (#("switch (${1:condition}) {
      ${0:cases}
    }" 0 48 (fontified nil)) . 6068) (6111 . 6115) (6094 . 6100) (6068 . 6106) (#("sw" 0 2 (fontified nil)) . 6068) (6068 . 6070) (#("switch (condition) {cases}" 0 26 (fontified nil)) . -6068) (6068 . 6094) (#("swit" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -6068) (undo-tree-id939 . -3) (undo-tree-id940 . -4) (undo-tree-id941 . -4) 6072 (6068 . 6072) (6064 . 6068) (#("   " 0 3 (fontified nil)) . -6064) (undo-tree-id942 . -3) (#(" " 0 1 (fontified t)) . 6067)) nil (26246 38323 436083 625000) 0 nil])
([nil nil ((#("cases" 0 5 (fontified t)) . 6100) (undo-tree-id934 . -5) (undo-tree-id935 . -4) (undo-tree-id936 . 5)) nil (26246 38323 436054 18000) 0 nil])
([nil nil ((6182 . 6184) (6172 . 6182) (#("Transition" 0 10 (fontified nil)) . -6172) (6172 . 6182) (6170 . 6172) (521 . 564) (6117 . 6127) (#("Transition" 0 10 (fontified nil)) . -6117) (6117 . 6127) (6116 . 6117) (6090 . 6094) (#("      " 0 6 (fontified nil)) . 6090) (6117 . 6118) (6101 . 6117) (#("rclcpp" 0 6 (fontified nil)) . 6101) (6101 . 6107) (#("rclcpp_lifecycle" 0 16 (fontified nil)) . -6101) (6101 . 6117) (#("rclcpp" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -6101) (undo-tree-id931 . -5) (undo-tree-id932 . -6) (undo-tree-id933 . -6) 6107 (6100 . 6107)) nil (26246 38323 436039 673000) 0 nil])
([nil nil ((#("rclcpp_lifecycle::Transition::Transition::" 0 16 (fontified t face font-lock-constant-face) 16 17 (fontified t) 17 18 (fontified t) 18 28 (fontified t face font-lock-constant-face) 28 29 (fontified t) 29 30 (fontified t) 30 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t)) . 6142) (undo-tree-id929 . -30) (undo-tree-id930 . -42)) nil (26246 38323 436019 505000) 0 nil])
([nil nil ((6175 . 6177) (6173 . 6175) (6163 . 6173) (#("Transition" 0 10 (fontified nil)) . -6163) (6163 . 6173) (#("T" 0 1 (fontified t)) . -6163) (undo-tree-id916 . -1) (undo-tree-id917 . -1) 6164 (6163 . 6164) (#("S" 0 1 (fontified nil)) . -6163) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("H" 0 1 (fontified t)) . -6164) (undo-tree-id921 . -1) 6165 (6163 . 6165) (#("T" 0 1 (fontified t)) . -6163) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) 6164 (6163 . 6164) (6161 . 6163) (6158 . 6161) (#("msg" 0 3 (fontified nil)) . -6158) (6158 . 6161) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -6158) (undo-tree-id925 . -2) (undo-tree-id926 . -2) 6160 (6158 . 6160) (6156 . 6158) (6142 . 6156) (#("lif" 0 3 (fontified nil)) . 6142) (6142 . 6145) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6142) (6142 . 6156) (#("lif" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6142) (undo-tree-id927 . -3) (undo-tree-id928 . -3) 6145 (6142 . 6145)) nil (26246 38323 436003 110000) 0 nil])
([nil nil ((6195 . 6202) (6194 . 6195) (6175 . 6194) (#("TRANSITION_ACTIVATE" 0 19 (fontified nil)) . -6175) (6175 . 6194) (#("TR" 0 1 (fontified t) 1 2 (fontified t)) . -6175) (undo-tree-id908 . -2) (undo-tree-id909 . -2) 6177 (6175 . 6177) (#("S" 0 1 (fontified t)) . -6175) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (#("H" 0 1 (fontified t)) . -6176) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 6177) nil (26246 38323 435945 801000) 0 nil])
([nil nil ((6196 . 6202) (#("    " 0 4 (fontified nil)) . -6196) (undo-tree-id907 . -4) (#("  " 0 2 (fontified t)) . 6200)) nil (26246 38323 435916 863000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -6222) (undo-tree-id903 . -1) 6223 (6214 . 6223) (6214 . 6215) (nil syntax-table nil 6214 . 6215) (nil syntax-table (1) 6213 . 6214) (6213 . 6214) (#("\"" 0 1 (fontified nil)) . -6213) (nil syntax-table nil 6214 . 6215) (nil syntax-table (1) 6213 . 6214) (6209 . 6214) (6202 . 6209) (#("cu" 0 2 (fontified nil)) . 6202) (6202 . 6204) (#("current" 0 7 (fontified nil)) . -6202) (6202 . 6209) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -6202) (undo-tree-id904 . -2) (undo-tree-id905 . -2) 6204 (6202 . 6204) (6196 . 6202) (#("     " 0 5 (fontified nil)) . -6196) (undo-tree-id906 . -5) (#(" " 0 1 (fontified t)) . 6201)) nil (26246 38323 435663 16000) 0 nil])
([nil nil ((6323 . 6331) (6321 . 6323) (6321 . 6322) (nil syntax-table nil 6321 . 6322) (nil syntax-table (1) 6320 . 6321) (6320 . 6321) (#("\"" 0 1 (fontified nil)) . -6320) (nil syntax-table nil 6321 . 6322) (nil syntax-table (1) 6320 . 6321) (6309 . 6321) (6302 . 6309) (6301 . 6302) (6280 . 6301) (#("TRANSITION_DEACTIVATE" 0 21 (fontified nil)) . -6280) (6280 . 6301) (#("T" 0 1 (fontified t)) . -6280) (undo-tree-id890 . -1) (undo-tree-id891 . -1) 6281 (6280 . 6281) (6278 . 6280) (6268 . 6278) (#("Transition" 0 10 (fontified nil)) . -6268) (6268 . 6278) (#("T" 0 1 (fontified t)) . -6268) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 6269 (6268 . 6269) (6266 . 6268) (6263 . 6266) (#("ms" 0 2 (fontified nil)) . 6263) (6263 . 6265) (#("msg" 0 3 (fontified nil)) . -6263) (6263 . 6266) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -6263) (undo-tree-id895 . -2) (undo-tree-id896 . -2) (undo-tree-id897 . -2) 6265 (6263 . 6265) (6262 . 6263) (6238 . 6242) (#("      " 0 6 (fontified nil)) . 6238) (6263 . 6264) (6249 . 6263) (#("li" 0 2 (fontified nil)) . 6249) (6249 . 6251) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6249) (6249 . 6263) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -6249) (undo-tree-id898 . -2) (undo-tree-id899 . -2) 6251 (6244 . 6251) (6237 . 6244) (apply yas--snippet-revive 6231 6237 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (6231 . 6237) (#("break;" 0 6 (fontified nil)) . 6231) (6231 . 6237) (#("brea" 0 4 (fontified nil)) . 6231) (6231 . 6235) (#("break;" 0 6 (fontified nil)) . -6231) (6231 . 6237) (#("brea" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -6231) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) 6235 (6231 . 6235) (6224 . 6231) (6223 . 6224)) nil (26246 38323 435619 790000) 0 nil])
([nil nil ((6332 . 6333)) nil (26246 38323 435556 771000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6334) (undo-tree-id889 . -6) 6340 (6333 . 6340)) nil (26246 38323 435553 297000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6339) (undo-tree-id888 . -1) 6340 (6334 . 6340)) nil (26246 38323 435546 382000) 0 nil])
([nil nil ((6335 . 6341) (#("      " 0 6 (fontified nil)) . 6334) (undo-tree-id886 . -6) (6340 . 6341) (6334 . 6340) (#("    " 0 4 (fontified nil)) . -6334) (undo-tree-id887 . -4) (#(" " 0 1 (fontified t)) . 6338)) nil (26246 38323 435538 37000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6334)) nil (26246 38323 435528 644000) 0 nil])
([nil nil ((6340 . 6344) (6334 . 6340) (#("      " 0 6 (fontified t)) . 6334)) nil (26246 38323 435525 133000) 0 nil])
([nil nil ((#("      case
" 0 6 (fontified t) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t)) . 6334) (undo-tree-id881 . -10) (undo-tree-id882 . 1) (undo-tree-id883 . -10) (undo-tree-id884 . -10) (undo-tree-id885 . -9) 6343) nil (26246 38323 435519 728000) 0 nil])
([nil nil ((6430 . 6439) (6430 . 6431) (nil syntax-table nil 6430 . 6431) (nil syntax-table (1) 6429 . 6430) (6429 . 6430) (#("\"" 0 1 (fontified nil)) . -6429) (nil syntax-table nil 6430 . 6431) (nil syntax-table (1) 6429 . 6430) (6429 . 6430) (#("c" 0 1 (fontified t)) . -6429) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (#("o" 0 1 (fontified t)) . -6430) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#("n" 0 1 (fontified t)) . -6431) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#("f" 0 1 (fontified t)) . -6432) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("i" 0 1 (fontified t)) . -6433) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("g" 0 1 (fontified t)) . -6434) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) 6435 (6420 . 6435) (6418 . 6420) (6411 . 6418) (6410 . 6411) (6390 . 6410) (#("TRANSITION_CONFIGURE" 0 20 (fontified nil)) . -6390) (6390 . 6410) (#("TR" 0 1 (fontified t) 1 2 (fontified t)) . -6390) (undo-tree-id869 . -2) (undo-tree-id870 . -2) 6392 (6390 . 6392) (6388 . 6390) (6378 . 6388) (#("Transition" 0 10 (fontified nil)) . -6378) (6378 . 6388) (#("T" 0 1 (fontified t)) . -6378) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) 6379 (6378 . 6379) (6376 . 6378) (6373 . 6376) (#("msg" 0 3 (fontified nil)) . -6373) (6373 . 6376) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -6373) (undo-tree-id874 . -2) (undo-tree-id875 . -2) 6375 (6373 . 6375) (6372 . 6373) (6348 . 6352) (#("      " 0 6 (fontified nil)) . 6348) (6373 . 6374) (6359 . 6373) (#("li" 0 2 (fontified nil)) . 6359) (6359 . 6361) (#("lifecycle_msgs" 0 14 (fontified nil)) . -6359) (6359 . 6373) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -6359) (undo-tree-id876 . -2) (undo-tree-id877 . -2) 6361 (6354 . 6361) (6348 . 6354) (#("      " 0 6 (fontified nil)) . 6347) (undo-tree-id878 . -6) (6346 . 6354) (apply yas--snippet-revive 6340 6346 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (6340 . 6346) (#("break;" 0 6 (fontified nil)) . 6340) (6340 . 6346) (#("bre" 0 3 (fontified nil)) . 6340) (6340 . 6343) (#("break;" 0 6 (fontified nil)) . -6340) (6340 . 6346) (#("bre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6340) (undo-tree-id879 . -3) (undo-tree-id880 . -3) 6343 (6340 . 6343) (6333 . 6340)) nil (26246 38323 435476 545000) 0 nil])
([nil nil ((6440 . 6441)) nil (26246 38323 435368 314000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6347)) nil (26246 38323 435365 110000) 0 nil])
([nil nil ((6535 . 6543) (6535 . 6536) (nil syntax-table nil 6535 . 6536) (nil syntax-table (1) 6534 . 6535) (6534 . 6535) (#("\"" 0 1 (fontified nil)) . -6534) (nil syntax-table nil 6535 . 6536) (nil syntax-table (1) 6534 . 6535) (6532 . 6535) (#(" " 0 1 (fontified t)) . -6532) (undo-tree-id841 . -1) 6533 (6523 . 6533) (6516 . 6523) (6515 . 6516) (6483 . 6515) (#("TRANSITION_UNCONFIGURED_SHUTDOWN" 0 32 (fontified nil)) . -6483) (6483 . 6515) (#("T" 0 1 (fontified t)) . -6483) (undo-tree-id842 . -1) (undo-tree-id843 . -1) 6484 (6483 . 6484) (6482 . 6483) (6481 . 6482) (6471 . 6481) (#("Transition" 0 10 (fontified nil)) . -6471) (6471 . 6481) (#("T" 0 1 (fontified t)) . -6471) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) 6472 (6471 . 6472) (6469 . 6471) (6466 . 6469) (#("msg" 0 3 (fontified nil)) . -6466) (6466 . 6469) (#("ms" 0 1 (fontified t) 1 2 (fontified t)) . -6466) (undo-tree-id847 . -2) (undo-tree-id848 . -2) 6468 (6466 . 6468) (#("s" 0 1 (fontified t)) . -6466) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 6467 (6466 . 6467) (6465 . 6466) (6441 . 6445) (#("      " 0 6 (fontified nil)) . 6441) (6466 . 6467) (6447 . 6466) (6440 . 6447)) nil (26246 38323 435350 466000) 0 nil])
([nil nil ((6544 . 6545)) nil (26246 38323 435295 437000) 0 nil])
([nil nil ((6555 . 6561) (6553 . 6555) (6547 . 6553) (#("      " 0 6 (fontified nil)) . 6546) (undo-tree-id840 . -6) (6545 . 6553)) nil (26246 38323 435291 837000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6546)) nil (26246 38323 435284 275000) 0 nil])
([nil nil ((6546 . 6550) (#("      " 0 6 (fontified nil)) . 6546) (6560 . 6561)) nil (26246 38323 435280 891000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6557)) nil (26246 38323 435276 749000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6559) (undo-tree-id839 . -6) 6565 (6558 . 6565)) nil (26246 38323 435273 153000) 0 nil])
([nil nil ((6452 . 6453) (6447 . 6452) (6440 . 6447)) nil (26246 38323 435267 145000) 0 nil])
([nil nil ((6570 . 6571) (6565 . 6570) (6558 . 6565)) nil (26246 38323 435263 343000) 0 nil])
([nil nil ((6624 . 6643) (6624 . 6625) (nil syntax-table nil 6625 . 6626) (nil syntax-table (1) 6623 . 6624) (6623 . 6624) (#("\"" 0 1 (fontified nil)) . -6623) (nil syntax-table nil 6625 . 6626) (nil syntax-table (1) 6623 . 6624) (6622 . 6624) (6621 . 6622) (apply yas--snippet-revive 6609 6621 #s(yas--snippet nil nil nil 20 nil nil #s(yas--field 1 6603 6644 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil #s(yas--field 1 6603 6644 nil nil nil t nil) nil)) (6609 . 6621) (#("get_logger()" 0 12 (fontified nil)) . 6609) (6609 . 6621) (#("get_logger() const" 0 18 (fontified nil)) . -6609) (6609 . 6627) (#("get_logg" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -6609) (undo-tree-id832 . -5) (undo-tree-id833 . -8) (undo-tree-id834 . -8) 6617 (6609 . 6617) (6608 . 6609) (6604 . 6608) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 6604) (6603 . 6604) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6603 6644 nil nil nil t nil)) nil 19 nil #s(yas--field 1 6603 6644 nil nil nil t nil) nil nil)) (6591 . 6615) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 6591) (6591 . 6620) (#("RCLCPP_I" 0 8 (fontified nil)) . 6591) (6591 . 6599) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -6591) (6591 . 6615) (#("RCLCPP_IN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -6591) (undo-tree-id835 . -9) (undo-tree-id836 . -9) 6600 (6591 . 6600) (#("E" 0 1 (fontified t)) . -6591) (undo-tree-id837 . -1) (undo-tree-id838 . -1) 6592 (6591 . 6592) (6584 . 6591)) nil (26246 38323 435249 670000) 0 nil])
([nil nil ((6645 . 6646) (apply yas--snippet-revive 6591 6645 #s(yas--snippet nil (#s(yas--field 1 6603 6644 nil nil nil t nil)) nil 19 nil #s(yas--field 1 6603 6644 nil nil nil t nil) nil nil))) nil (26246 38323 435207 324000) 0 nil])
([nil nil ((#("ending " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face)) . 6624) (undo-tree-id831 . -6)) nil (26246 38323 435203 754000) 0 nil])
([nil nil ((#("transmission" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face)) . 6624) (undo-tree-id829 . -11) (undo-tree-id830 . -12)) nil (26246 38323 435196 17000) 0 nil])
([nil nil ((6643 . 6655) (#("e" 0 1 (fontified t face font-lock-string-face)) . -6643) (undo-tree-id827 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6644) (undo-tree-id828 . -1) 6645 (6642 . 6645) (6624 . 6642)) nil (26246 38323 435177 589000) 0 nil])
([nil nil ((6665 . 6670) (6658 . 6665) (t 26246 38323 498595 145000)) nil (26246 38327 296360 813000) 0 nil])
([nil nil ((6670 . 6671)) nil (26246 38327 296354 577000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6672) (undo-tree-id956 . -1)) nil (26246 38327 296343 577000) 0 nil])
([nil nil ((6683 . 6687) (#("    " 0 4 (fontified t)) . 6683) (t 26246 38327 358795 930000)) nil (26246 38409 419156 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 6702 6709 #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 6694 6709 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 6694 6709 nil nil nil t nil) nil)) (6702 . 6709) (#("c_str()" 0 7 (fontified nil)) . 6702) (6702 . 6709) (#("c_str() const" 0 13 (fontified nil)) . -6702) (6702 . 6715) (#("cs" 0 1 (fontified t) 1 2 (fontified t)) . -6702) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) 6704 (6701 . 6704) (6694 . 6701) (#("cu" 0 2 (fontified nil)) . 6694) (6694 . 6696) (#("current" 0 7 (fontified nil)) . -6694) (6694 . 6701) (#("cu" 0 1 (fontified t) 1 2 (fontified t)) . -6694) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) 6696 (6695 . 6696) (#("const char *command" 0 5 (fontified nil face font-lock-keyword-face) 5 6 (fontified nil) 6 10 (fontified nil face font-lock-type-face) 10 12 (fontified nil) 12 19 (fontified nil face font-lock-variable-name-face)) . 6695) (6694 . 6695) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6694 6709 nil nil nil t nil)) nil 21 nil #s(yas--field 1 6694 6709 nil nil nil t nil) nil nil)) (6687 . 6714) (#("system(${1:const char *command})" 0 32 (fontified nil)) . 6687) (6687 . 6719) (#("sy" 0 2 (fontified nil)) . 6687) (6687 . 6689) (#("system(const char *command)" 0 27 (fontified nil)) . -6687) (6687 . 6714) (#("system" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -6687) (undo-tree-id1159 . -4) (undo-tree-id1160 . -6) (undo-tree-id1161 . -6) 6693 (6692 . 6693) (6687 . 6692) (#("r" 0 1 (fontified t)) . -6687) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("o" 0 1 (fontified t)) . -6688) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("s" 0 1 (fontified t)) . -6689) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("2" 0 1 (fontified t)) . -6690) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (#(" " 0 1 (fontified t)) . -6691) (undo-tree-id1170 . -1) 6692 (6687 . 6692) (6683 . 6687) (#("   " 0 3 (fontified nil)) . -6683) (undo-tree-id1171 . -3) (#(" " 0 1 (fontified t)) . 6686)) nil (26246 38409 419144 540000) 0 nil])
([nil nil ((6710 . 6711) (apply yas--snippet-revive 6687 6710 #s(yas--snippet nil (#s(yas--field 1 6694 6709 nil nil nil t nil)) nil 21 nil #s(yas--field 1 6694 6709 nil nil nil t nil) nil nil))) nil (26246 38409 418823 346000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6714) (undo-tree-id1151 . -4) 6718 (6714 . 6718) (#("    " 0 4 (fontified nil)) . 6713) (undo-tree-id1152 . -4) (6713 . 6718) (#("    " 0 4 (fontified nil)) . 6712) (undo-tree-id1153 . -4) (6711 . 6717)) nil (26246 38409 418819 858000) 0 nil])
([nil nil ((6713 . 6717)) nil (26246 38409 418812 427000) 0 nil])
([nil nil ((6062 . 6069) (6053 . 6057) (#("  " 0 2 (fontified nil)) . 6053) (6059 . 6060) (6053 . 6055) (#("    " 0 4 (fontified nil)) . 6053) (6060 . 6061) (6057 . 6060)) nil (26246 38409 418809 110000) 0 nil])
([nil nil ((6069 . 6070) (#("curr" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face)) . 6069) (undo-tree-id1148 . -4) (undo-tree-id1149 . -4) (undo-tree-id1150 . -4) (6075 . 6084) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 6075) 6073) nil (26246 38409 418803 532000) 0 nil])
([nil nil ((#("current " 0 7 (fontified t) 7 8 (fontified t)) . 6219) (undo-tree-id1147 . -7)) nil (26246 38409 418796 306000) 0 nil])
([nil nil ((6231 . 6232) (6219 . 6231) (#("sen" 0 3 (fontified nil)) . 6219) (6219 . 6222) (#("send_command" 0 12 (fontified nil)) . -6219) (6219 . 6231) (#("send_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -6219) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) 6224 (6219 . 6224)) nil (26246 38409 418791 597000) 0 nil])
([nil nil ((#("current " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 6331) (undo-tree-id1143 . -7) (undo-tree-id1144 . -8)) nil (26246 38409 418784 27000) 0 nil])
([nil nil ((6343 . 6344) (6331 . 6343) (#("sen" 0 3 (fontified nil)) . 6331) (6331 . 6334) (#("send_command" 0 12 (fontified nil)) . -6331) (6331 . 6343) (#("sen" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6331) (undo-tree-id1133 . -3) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) 6334 (6331 . 6334)) nil (26246 38409 418777 84000) 0 nil])
([nil nil ((#("current " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 6444) (undo-tree-id1131 . -7) (undo-tree-id1132 . -8)) nil (26246 38409 418755 525000) 0 nil])
([nil nil ((6456 . 6457) (6444 . 6456) (#("sen" 0 3 (fontified nil)) . 6444) (6444 . 6447) (#("send_command" 0 12 (fontified nil)) . -6444) (6444 . 6456) (#("sen" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6444) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (undo-tree-id1064 . -3) (undo-tree-id1065 . -3) (undo-tree-id1066 . -3) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -3) (undo-tree-id1092 . -3) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -3) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) (undo-tree-id1130 . -3) 6447 (6444 . 6447)) nil (26246 38409 418743 632000) 0 nil])
([nil nil ((#("current " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 6568) (undo-tree-id1052 . -7) (undo-tree-id1053 . -8)) nil (26246 38409 418626 500000) 0 nil])
([nil nil ((6580 . 6581) (6568 . 6580) (#("sen" 0 3 (fontified nil)) . 6568) (6568 . 6571) (#("send_command" 0 12 (fontified nil)) . -6568) (6568 . 6580) (#("sen" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6568) (undo-tree-id957 . -3) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -3) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) (undo-tree-id969 . -3) (undo-tree-id970 . -3) (undo-tree-id971 . -3) (undo-tree-id972 . -3) (undo-tree-id973 . -3) (undo-tree-id974 . -3) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -3) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -3) (undo-tree-id990 . -3) (undo-tree-id991 . -3) (undo-tree-id992 . -3) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (undo-tree-id995 . -3) (undo-tree-id996 . -3) (undo-tree-id997 . -3) (undo-tree-id998 . -3) (undo-tree-id999 . -3) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) 6571 (6568 . 6571)) nil (26246 38409 418608 279000) 0 nil])
([nil nil ((6672 . 6674) (t 26246 38409 479436 493000)) nil (26246 38456 986346 111000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -6662) (6662 . 6663) (#("]" 0 1 (fontified nil face font-lock-string-face)) . -6662) (6662 . 6663) (6661 . 6663)) nil (26246 38456 986342 638000) 0 nil])
([nil nil ((6665 . 6667) (6664 . 6665) (#("O" 0 1 (fontified t face font-lock-string-face)) . -6664) (undo-tree-id1172 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -6665) (undo-tree-id1173 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -6666) (undo-tree-id1174 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -6667) (undo-tree-id1175 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -6668) (undo-tree-id1176 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -6669) (undo-tree-id1177 . -1) 6670 (6663 . 6670) (#("W" 0 1 (fontified t face font-lock-string-face)) . -6663) (undo-tree-id1178 . -1) 6664 (6662 . 6664)) nil (26246 38456 986327 864000) 0 nil])
([nil nil ((6668 . 6669)) nil (26246 38456 986291 493000) 0 nil])
([nil nil ((#("current" 0 7 (fontified t)) . 6741) (undo-tree-id1424 . -6) (undo-tree-id1425 . -7) (t 26246 38457 30395 38000)) nil (26246 38465 679921 884000) 0 nil])
([nil nil ((6741 . 6753) (#("send" 0 4 (fontified nil)) . 6741) (6741 . 6745) (#("send_command" 0 12 (fontified nil)) . -6741) (6741 . 6753) (#("send_c" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -6741) (undo-tree-id1179 . -4) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -2) (undo-tree-id1200 . -2) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) (undo-tree-id1205 . -2) (undo-tree-id1206 . -2) (undo-tree-id1207 . -2) (undo-tree-id1208 . -2) (undo-tree-id1209 . -2) (undo-tree-id1210 . -2) (undo-tree-id1211 . -2) (undo-tree-id1212 . -2) (undo-tree-id1213 . -2) (undo-tree-id1214 . -2) (undo-tree-id1215 . -2) (undo-tree-id1216 . -2) (undo-tree-id1217 . -2) (undo-tree-id1218 . -2) (undo-tree-id1219 . -2) (undo-tree-id1220 . -2) (undo-tree-id1221 . -2) (undo-tree-id1222 . -2) (undo-tree-id1223 . -2) (undo-tree-id1224 . -2) (undo-tree-id1225 . -2) (undo-tree-id1226 . -2) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -2) (undo-tree-id1230 . -2) (undo-tree-id1231 . -2) (undo-tree-id1232 . -2) (undo-tree-id1233 . -2) (undo-tree-id1234 . -2) (undo-tree-id1235 . -2) (undo-tree-id1236 . -2) (undo-tree-id1237 . -2) (undo-tree-id1238 . -2) (undo-tree-id1239 . -2) (undo-tree-id1240 . -2) (undo-tree-id1241 . -2) (undo-tree-id1242 . -2) (undo-tree-id1243 . -2) (undo-tree-id1244 . -2) (undo-tree-id1245 . -2) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -3) (undo-tree-id1260 . -3) (undo-tree-id1261 . -3) (undo-tree-id1262 . -4) (undo-tree-id1263 . -4) (undo-tree-id1264 . -4) (undo-tree-id1265 . -4) (undo-tree-id1266 . -4) (undo-tree-id1267 . -4) (undo-tree-id1268 . -4) (undo-tree-id1269 . -4) (undo-tree-id1270 . -4) (undo-tree-id1271 . -4) (undo-tree-id1272 . -4) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -4) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) (undo-tree-id1297 . -4) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) (undo-tree-id1302 . -4) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) (undo-tree-id1307 . -5) (undo-tree-id1308 . -5) (undo-tree-id1309 . -5) (undo-tree-id1310 . -5) (undo-tree-id1311 . -5) (undo-tree-id1312 . -5) (undo-tree-id1313 . -5) (undo-tree-id1314 . -5) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -6) (undo-tree-id1349 . -6) (undo-tree-id1350 . -6) (undo-tree-id1351 . -6) (undo-tree-id1352 . -6) (undo-tree-id1353 . -6) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -6) (undo-tree-id1372 . -6) (undo-tree-id1373 . -6) (undo-tree-id1374 . -6) (undo-tree-id1375 . -6) (undo-tree-id1376 . -6) (undo-tree-id1377 . -6) (undo-tree-id1378 . -6) (undo-tree-id1379 . -6) (undo-tree-id1380 . -6) (undo-tree-id1381 . -6) (undo-tree-id1382 . -6) (undo-tree-id1383 . -6) (undo-tree-id1384 . -6) (undo-tree-id1385 . -6) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) 6747 (6746 . 6747) (6741 . 6746) (#("e" 0 1 (fontified t)) . -6741) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) 6742 (6741 . 6742)) nil (26246 38465 679880 610000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6795) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("o" 0 1 (fontified t)) . -6796) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("s" 0 1 (fontified t)) . -6797) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) 6798 (6784 . 6798) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -6784) (undo-tree-id1442 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -6785) (undo-tree-id1443 . -1) 6786 (6784 . 6786) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6784) (undo-tree-id1444 . -1) (#("_" 0 1 (fontified t)) . -6785) (undo-tree-id1445 . -1) 6786 (6785 . 6786) (6784 . 6785) (#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . -6784) (6784 . 6785) (6781 . 6784) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -6781) (undo-tree-id1446 . -1) 6782 (6781 . 6782) (6780 . 6781) (6774 . 6780) (#("s" 0 1 (fontified nil)) . 6774) (6774 . 6775) (#("string" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -6774) (undo-tree-id1447 . -4) (undo-tree-id1448 . -6) (undo-tree-id1449 . -6) 6780 (6774 . 6780) (6765 . 6769) (#("  " 0 2 (fontified nil)) . 6765) (6771 . 6772) (6765 . 6767) (#("    " 0 4 (fontified nil)) . 6765) (6772 . 6773) (6769 . 6772) (6765 . 6769) (#("   " 0 3 (fontified nil)) . -6765) (undo-tree-id1450 . -3) (#(" " 0 1 (fontified t)) . 6768) (t 26246 38465 738954 807000)) nil (26246 38548 227251 573000) 0 nil])
([nil nil ((6796 . 6797) (nil syntax-table nil 6796 . 6797) (nil syntax-table (1) 6795 . 6796) (6795 . 6796) (#("\"" 0 1 (fontified nil)) . -6795) (nil syntax-table nil 6796 . 6797) (nil syntax-table (1) 6795 . 6796) (6795 . 6796)) nil (26246 38548 227161 655000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6864 . 6865) (nil fontified nil 6864 . 6865) (nil fontified nil 6863 . 6864) (nil fontified nil 6847 . 6863) (nil fontified nil 6846 . 6847) (nil fontified nil 6796 . 6846) (6796 . 6865) 6795) nil (26246 38548 227155 956000) 0 nil])
([nil nil ((6822 . 6823) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6822) (nil syntax-table nil 6867 . 6868) (nil syntax-table (1) 6866 . 6867) (6822 . 6823)) nil (26246 38548 227150 280000) 0 nil])
([nil nil ((6836 . 6837) (nil syntax-table nil 6867 . 6868) (nil syntax-table (1) 6866 . 6867) (#("\"" 0 1 (fontified nil)) . -6836) (6836 . 6837) (nil syntax-table nil 6867 . 6868) (nil syntax-table (1) 6866 . 6867)) nil (26246 38548 227144 994000) 0 nil])
([nil nil ((6822 . 6823)) nil (26246 38548 227139 739000) 0 nil])
([nil nil ((6838 . 6839)) nil (26246 38548 227138 0) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6825) (undo-tree-id1435 . -1)) nil (26246 38548 227135 472000) 0 nil])
([nil nil ((#("node" 0 4 (fontified t)) . 6825) (undo-tree-id1433 . -3) (undo-tree-id1434 . -4)) nil (26246 38548 227131 200000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 6825) (undo-tree-id1432 . -1)) nil (26246 38548 227124 843000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . 6825) (undo-tree-id1430 . -3) (undo-tree-id1431 . -4)) nil (26246 38548 227119 760000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 6825) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1)) nil (26246 38548 227111 603000) 0 nil])
([nil nil ((6834 . 6836) (6827 . 6834) (#("c" 0 1 (fontified nil)) . 6827) (6827 . 6828) (#("current" 0 7 (fontified nil)) . -6827) (6827 . 6834) (#("c" 0 1 (fontified t)) . -6827) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) 6828 (6825 . 6828)) nil (26246 38548 227096 494000) 0 nil])
([nil nil ((6870 . 6871) (t 26246 38548 276490 535000)) nil (26246 38549 912792 865000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6873) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -4) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -4) (undo-tree-id1490 . -4) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) 6877 (6873 . 6877) (#("    " 0 4 (fontified nil)) . 6872) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) (undo-tree-id1498 . -4) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4) (undo-tree-id1502 . -4) (undo-tree-id1503 . -4) (undo-tree-id1504 . -4) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (undo-tree-id1507 . -4) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) (undo-tree-id1520 . -4) (undo-tree-id1521 . -4) (6871 . 6877) (t 26246 38549 960607 327000)) nil (26246 38552 809493 725000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6873) (undo-tree-id1453 . 1) (undo-tree-id1454 . -1)) nil (26246 38552 809373 704000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6873) (undo-tree-id1451 . 1) (undo-tree-id1452 . -1)) nil (26246 38552 809359 810000) 0 nil])
([nil nil ((6873 . 6877) (#("    " 0 1 (fontified t) 1 4 (fontified t)) . 6873) (undo-tree-id2062 . 4) (t 26246 38552 856808 505000)) nil (26246 38616 884227 157000) 0 nil])
([nil nil ((6888 . 6899) (#("ge" 0 2 (fontified nil)) . 6888) (undo-tree-id1993 . -2) (6888 . 6890) (#("get_command" 0 11 (fontified nil)) . -6888) (undo-tree-id1994 . -11) (6888 . 6899) (#("ge" 0 1 (fontified t) 1 2 (fontified t)) . -6888) (undo-tree-id1995 . -2) (undo-tree-id1996 . -2) (undo-tree-id1997 . -2) (undo-tree-id1998 . -2) (undo-tree-id1999 . -2) (undo-tree-id2000 . -2) (undo-tree-id2001 . -2) (undo-tree-id2002 . -2) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) (undo-tree-id2005 . -2) (undo-tree-id2006 . -2) (undo-tree-id2007 . -2) (undo-tree-id2008 . -2) (undo-tree-id2009 . -2) (undo-tree-id2010 . -2) (undo-tree-id2011 . -2) (undo-tree-id2012 . -2) (undo-tree-id2013 . -2) (undo-tree-id2014 . -2) (undo-tree-id2015 . -2) (undo-tree-id2016 . -2) (undo-tree-id2017 . -2) (undo-tree-id2018 . -2) (undo-tree-id2019 . -2) (undo-tree-id2020 . -2) (undo-tree-id2021 . -2) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -2) (undo-tree-id2025 . -2) (undo-tree-id2026 . -2) (undo-tree-id2027 . -2) (undo-tree-id2028 . -2) (undo-tree-id2029 . -2) (undo-tree-id2030 . -2) (undo-tree-id2031 . -2) (undo-tree-id2032 . -2) (undo-tree-id2033 . -2) (undo-tree-id2034 . -2) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) (undo-tree-id2037 . -2) (undo-tree-id2038 . -2) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -2) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -2) (undo-tree-id2049 . -2) (undo-tree-id2050 . -2) (undo-tree-id2051 . -2) (undo-tree-id2052 . -2) (undo-tree-id2053 . -2) (undo-tree-id2054 . -2) (undo-tree-id2055 . -2) (undo-tree-id2056 . -2) (undo-tree-id2057 . -2) 6890 (6889 . 6890) (#("const char *command" 0 5 (fontified nil face font-lock-keyword-face) 5 6 (fontified nil) 6 10 (fontified nil face font-lock-type-face) 10 12 (fontified nil) 12 19 (fontified nil face font-lock-variable-name-face)) . 6889) (undo-tree-id2058 . -19) (6888 . 6889) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6888 6899 nil nil nil t nil)) nil 23 nil #s(yas--field 1 6888 6899 nil nil nil t nil) nil nil)) (6881 . 6908) (#("system(${1:const char *command})" 0 32 (fontified nil)) . 6881) (6881 . 6913) (#("sys" 0 3 (fontified nil)) . 6881) (6881 . 6884) (#("system(const char *command)" 0 27 (fontified nil)) . -6881) (6881 . 6908) (#("sys" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6881) (undo-tree-id2059 . -3) (undo-tree-id2060 . -3) 6884 (6881 . 6884) (6880 . 6882) (6877 . 6880) (6873 . 6877) (#("    " 0 4 (fontified nil)) . 6872) (undo-tree-id2061 . -4) (6876 . 6877) (6872 . 6876)) nil (26246 38616 884212 855000) 0 nil])
([nil nil ((6904 . 6914) (#("tr" 0 2 (fontified nil)) . 6904) (6904 . 6906) (#("transition" 0 10 (fontified nil)) . -6904) (6904 . 6914) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . -6904) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2) (undo-tree-id1869 . -2) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) (undo-tree-id1874 . -2) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) (undo-tree-id1879 . -2) (undo-tree-id1880 . -2) (undo-tree-id1881 . -2) (undo-tree-id1882 . -2) (undo-tree-id1883 . -2) (undo-tree-id1884 . -2) (undo-tree-id1885 . -2) (undo-tree-id1886 . -2) (undo-tree-id1887 . -2) (undo-tree-id1888 . -2) (undo-tree-id1889 . -2) (undo-tree-id1890 . -2) (undo-tree-id1891 . -2) (undo-tree-id1892 . -2) (undo-tree-id1893 . -2) (undo-tree-id1894 . -2) (undo-tree-id1895 . -2) (undo-tree-id1896 . -2) (undo-tree-id1897 . -2) (undo-tree-id1898 . -2) (undo-tree-id1899 . -2) (undo-tree-id1900 . -2) (undo-tree-id1901 . -2) (undo-tree-id1902 . -2) (undo-tree-id1903 . -2) (undo-tree-id1904 . -2) (undo-tree-id1905 . -2) (undo-tree-id1906 . -2) (undo-tree-id1907 . -2) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -2) (undo-tree-id1911 . -2) (undo-tree-id1912 . -2) (undo-tree-id1913 . -2) (undo-tree-id1914 . -2) (undo-tree-id1915 . -2) (undo-tree-id1916 . -2) (undo-tree-id1917 . -2) (undo-tree-id1918 . -2) (undo-tree-id1919 . -2) (undo-tree-id1920 . -2) (undo-tree-id1921 . -2) (undo-tree-id1922 . -2) (undo-tree-id1923 . -2) (undo-tree-id1924 . -2) (undo-tree-id1925 . -2) (undo-tree-id1926 . -2) (undo-tree-id1927 . -2) (undo-tree-id1928 . -2) (undo-tree-id1929 . -2) (undo-tree-id1930 . -2) (undo-tree-id1931 . -2) (undo-tree-id1932 . -2) (undo-tree-id1933 . -2) (undo-tree-id1934 . -2) (undo-tree-id1935 . -2) (undo-tree-id1936 . -2) (undo-tree-id1937 . -2) (undo-tree-id1938 . -2) (undo-tree-id1939 . -2) (undo-tree-id1940 . -2) (undo-tree-id1941 . -2) (undo-tree-id1942 . -2) (undo-tree-id1943 . -2) (undo-tree-id1944 . -2) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) (undo-tree-id1947 . -2) (undo-tree-id1948 . -2) (undo-tree-id1949 . -2) (undo-tree-id1950 . -2) (undo-tree-id1951 . -2) (undo-tree-id1952 . -2) (undo-tree-id1953 . -2) (undo-tree-id1954 . -2) (undo-tree-id1955 . -2) (undo-tree-id1956 . -2) (undo-tree-id1957 . -2) (undo-tree-id1958 . -2) (undo-tree-id1959 . -2) (undo-tree-id1960 . -2) (undo-tree-id1961 . -2) (undo-tree-id1962 . -2) (undo-tree-id1963 . -2) (undo-tree-id1964 . -2) (undo-tree-id1965 . -2) (undo-tree-id1966 . -2) (undo-tree-id1967 . -2) (undo-tree-id1968 . -2) (undo-tree-id1969 . -2) (undo-tree-id1970 . -2) (undo-tree-id1971 . -2) (undo-tree-id1972 . -2) (undo-tree-id1973 . -2) (undo-tree-id1974 . -2) (undo-tree-id1975 . -2) (undo-tree-id1976 . -2) (undo-tree-id1977 . -2) (undo-tree-id1978 . -2) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) (undo-tree-id1981 . -2) (undo-tree-id1982 . -2) (undo-tree-id1983 . -2) (undo-tree-id1984 . -2) (undo-tree-id1985 . -2) (undo-tree-id1986 . -2) (undo-tree-id1987 . -2) (undo-tree-id1988 . -2) (undo-tree-id1989 . -2) (undo-tree-id1990 . -2) (undo-tree-id1991 . -2) (undo-tree-id1992 . -2) 6906 (6900 . 6906) (apply yas--snippet-revive 6881 6900 #s(yas--snippet nil (#s(yas--field 1 6888 6899 nil nil nil t nil)) nil 23 nil #s(yas--field 1 6888 6899 nil nil nil t nil) nil nil))) nil (26246 38616 884077 582000) 0 nil])
([nil nil ((6918 . 6924) (6917 . 6923) (6916 . 6918) (6915 . 6916)) nil (26246 38616 883797 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 6924 6936 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (6924 . 6936) (#("return true;" 0 12 (fontified nil)) . 6924) (6924 . 6936) (#("ret" 0 3 (fontified nil)) . 6924) (6924 . 6927) (#("return true;" 0 12 (fontified nil)) . -6924) (6924 . 6936) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6924) (undo-tree-id1585 . -3) (undo-tree-id1586 . -3) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -2) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2) (undo-tree-id1634 . -2) (undo-tree-id1635 . -2) (undo-tree-id1636 . -2) (undo-tree-id1637 . -2) (undo-tree-id1638 . -2) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -2) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -2) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -3) (undo-tree-id1713 . -3) (undo-tree-id1714 . -3) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -3) (undo-tree-id1783 . -3) (undo-tree-id1784 . -3) (undo-tree-id1785 . -3) (undo-tree-id1786 . -3) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -3) (undo-tree-id1790 . -3) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) 6927 (6924 . 6927) (6918 . 6924) (#("     " 0 5 (fontified nil)) . -6918) (undo-tree-id1793 . -5) (undo-tree-id1794 . -5) (undo-tree-id1795 . -5) (undo-tree-id1796 . -5) (undo-tree-id1797 . -5) (undo-tree-id1798 . -5) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -5) (undo-tree-id1810 . -5) (undo-tree-id1811 . -5) (undo-tree-id1812 . -5) (undo-tree-id1813 . -5) (undo-tree-id1814 . -5) (undo-tree-id1815 . -5) (undo-tree-id1816 . -5) (undo-tree-id1817 . -5) (undo-tree-id1818 . -5) (undo-tree-id1819 . -5) (undo-tree-id1820 . -5) (undo-tree-id1821 . -5) (undo-tree-id1822 . -5) (undo-tree-id1823 . -5) (undo-tree-id1824 . -5) (undo-tree-id1825 . -5) (undo-tree-id1826 . -5) (undo-tree-id1827 . -5) (#(" " 0 1 (fontified t)) . 6923) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1)) nil (26246 38616 883770 871000) 0 nil])
([nil nil ((6968 . 6969) (6959 . 6968) (#("r" 0 1 (fontified t)) . -6959) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) 6960 (6959 . 6960) (#("r" 0 1 (fontified t)) . -6959) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) 6960 (6956 . 6960) (6950 . 6956) (6949 . 6955) (6948 . 6950) (6947 . 6948) (#("else" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 6947) (undo-tree-id1584 . -4) (6943 . 6947) 6947 (6942 . 6947)) nil (26246 38616 883252 807000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6919) (undo-tree-id1547 . -6) (undo-tree-id1548 . -6) (undo-tree-id1549 . -6) (undo-tree-id1550 . -6) (undo-tree-id1551 . -6) (undo-tree-id1552 . -6) (undo-tree-id1553 . -6) (undo-tree-id1554 . -6) (undo-tree-id1555 . -6) (undo-tree-id1556 . -6) (undo-tree-id1557 . -6) (undo-tree-id1558 . -6) (undo-tree-id1559 . -6) (undo-tree-id1560 . -6) (undo-tree-id1561 . -6) (undo-tree-id1562 . -6) (undo-tree-id1563 . -6) (undo-tree-id1564 . -6) (undo-tree-id1565 . -6) (undo-tree-id1566 . -6) (undo-tree-id1567 . -6) (undo-tree-id1568 . -6) (undo-tree-id1569 . -6) (undo-tree-id1570 . -6) (undo-tree-id1571 . -6) (undo-tree-id1572 . -6) (undo-tree-id1573 . -6) (undo-tree-id1574 . -6) (undo-tree-id1575 . -6) 6925 (6919 . 6925) (#("      " 0 6 (fontified nil)) . 6918) (undo-tree-id1576 . -6) (undo-tree-id1577 . -6) (undo-tree-id1578 . -6) (undo-tree-id1579 . -6) (6917 . 6925)) nil (26246 38616 883235 34000) 0 nil])
([nil nil ((6965 . 6983) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6965) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6966) (undo-tree-id1524 . -1) 6967 (6961 . 6967) (6958 . 6961) (#("t" 0 1 (fontified t face font-lock-string-face)) . -6958) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -6959) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6960) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -6961) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -6962) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6963) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) 6964 (6958 . 6964) (6958 . 6959) (nil syntax-table nil 6959 . 6960) (nil syntax-table (1) 6957 . 6958) (6957 . 6958) (#("\"" 0 1 (fontified nil)) . -6957) (undo-tree-id1537 . -1) (nil syntax-table nil 6959 . 6960) (nil syntax-table (1) 6957 . 6958) (6956 . 6958) (6955 . 6956) (apply yas--snippet-revive 6943 6955 #s(yas--snippet nil nil nil 26 nil nil #s(yas--field 1 6937 6984 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil #s(yas--field 1 6937 6984 nil nil nil t nil) nil)) (6943 . 6955) (#("get_logger()" 0 12 (fontified nil)) . 6943) (undo-tree-id1538 . -12) (6943 . 6955) (#("get_logger() const" 0 18 (fontified nil)) . -6943) (undo-tree-id1539 . -18) (6943 . 6961) (#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6943) (undo-tree-id1540 . -3) (undo-tree-id1541 . -3) (undo-tree-id1542 . -3) 6946 (6944 . 6946) (6943 . 6944) (6942 . 6943) (6938 . 6942) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 6938) (undo-tree-id1543 . -11) (6937 . 6938) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6937 6984 nil nil nil t nil)) nil 25 nil #s(yas--field 1 6937 6984 nil nil nil t nil) nil nil)) (6925 . 6949) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 6925) (6925 . 6954) (#("RCLCPP_IN" 0 9 (fontified nil)) . 6925) (6925 . 6934) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -6925) (6925 . 6949) (#("RCLCPP_IN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -6925) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) 6934 (6925 . 6934) (6919 . 6925) (#("      " 0 6 (fontified nil)) . 6918) (undo-tree-id1546 . -6) (6924 . 6925) (6918 . 6924)) nil (26246 38616 883160 902000) 0 nil])
([nil nil ((6985 . 6986) (apply yas--snippet-revive 6925 6985 #s(yas--snippet nil (#s(yas--field 1 6937 6984 nil nil nil t nil)) nil 25 nil #s(yas--field 1 6937 6984 nil nil nil t nil) nil nil))) nil (26246 38616 883076 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 6900 6907 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (6900 . 6907) (#("c_str()" 0 7 (fontified nil)) . 6900) (6900 . 6907) (#("c_str() const" 0 13 (fontified nil)) . -6900) (6900 . 6913) (#("c" 0 1 (fontified t)) . -6900) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) 6901 (6899 . 6901) (t 26246 38616 933354 156000)) nil (26246 38705 12347 520000) 0 nil])
([nil nil ((6855 . 6856) (t 26246 38705 63849 592000)) nil (26246 38721 991714 719000) 0 nil])
([nil nil ((6865 . 6866)) nil (26246 38721 991703 578000) 0 nil])
([nil nil ((#("change" 0 6 (fontified t)) . 7293) (undo-tree-id2366 . -5) (t 26246 38722 65128 545000)) nil (26246 38754 202674 119000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7293) (undo-tree-id2365 . -1)) nil (26246 38754 202666 388000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . 7293) (undo-tree-id2363 . -4) (undo-tree-id2364 . -5)) nil (26246 38754 202658 890000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7293) (undo-tree-id2362 . -1)) nil (26246 38754 202648 497000) 0 nil])
([nil nil ((#("topics" 0 6 (fontified t)) . 7293) (undo-tree-id2360 . -5) (undo-tree-id2361 . -6)) nil (26246 38754 202641 21000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7293) (undo-tree-id2359 . -1)) nil (26246 38754 202629 975000) 0 nil])
([nil nil ((#("size" 0 4 (fontified t)) . 7293) (undo-tree-id2357 . -3) (undo-tree-id2358 . -4)) nil (26246 38754 202622 723000) 0 nil])
([nil nil ((#("(); " 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 2 (fontified t face (rainbow-delimiters-depth-5-face)) 2 4 (fontified t)) . 7293) (undo-tree-id2355 . -3) (undo-tree-id2356 . -4)) nil (26246 38754 202612 341000) 0 nil])
([nil nil ((7293 . 7294)) nil (26246 38754 202602 300000) 0 nil])
([nil nil ((apply yas--snippet-revive 7308 7314 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (7308 . 7314) (#("size()" 0 6 (fontified nil)) . 7308) (7308 . 7314) (#("size() const" 0 12 (fontified nil)) . -7308) (7308 . 7320) (#("si" 0 1 (fontified t) 1 2 (fontified t)) . -7308) (undo-tree-id2135 . -1) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) (undo-tree-id2187 . -2) (undo-tree-id2188 . -2) (undo-tree-id2189 . -2) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) (undo-tree-id2195 . -2) (undo-tree-id2196 . -2) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) (undo-tree-id2199 . -2) (undo-tree-id2200 . -2) (undo-tree-id2201 . -2) (undo-tree-id2202 . -2) (undo-tree-id2203 . -2) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) (undo-tree-id2209 . -2) (undo-tree-id2210 . -2) (undo-tree-id2211 . -2) (undo-tree-id2212 . -2) (undo-tree-id2213 . -2) (undo-tree-id2214 . -2) (undo-tree-id2215 . -2) (undo-tree-id2216 . -2) (undo-tree-id2217 . -2) (undo-tree-id2218 . -2) (undo-tree-id2219 . -2) (undo-tree-id2220 . -2) (undo-tree-id2221 . -2) (undo-tree-id2222 . -2) (undo-tree-id2223 . -2) (undo-tree-id2224 . -2) (undo-tree-id2225 . -2) (undo-tree-id2226 . -2) (undo-tree-id2227 . -2) (undo-tree-id2228 . -2) (undo-tree-id2229 . -2) (undo-tree-id2230 . -2) (undo-tree-id2231 . -2) (undo-tree-id2232 . -2) (undo-tree-id2233 . -2) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . -2) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -2) (undo-tree-id2256 . -2) (undo-tree-id2257 . -2) (undo-tree-id2258 . -2) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2) 7310 (7307 . 7310) (7293 . 7307) (#("li" 0 2 (fontified nil)) . 7293) (7293 . 7295) (#("lifecycle_list" 0 14 (fontified nil)) . -7293) (7293 . 7307) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -7293) (undo-tree-id2261 . -2) (undo-tree-id2262 . -2) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -2) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) (undo-tree-id2286 . -2) (undo-tree-id2287 . -2) (undo-tree-id2288 . -2) (undo-tree-id2289 . -2) (undo-tree-id2290 . -2) (undo-tree-id2291 . -2) (undo-tree-id2292 . -2) (undo-tree-id2293 . -2) (undo-tree-id2294 . -2) (undo-tree-id2295 . -2) (undo-tree-id2296 . -2) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) (undo-tree-id2300 . -2) (undo-tree-id2301 . -2) (undo-tree-id2302 . -2) (undo-tree-id2303 . -2) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) (undo-tree-id2306 . -2) (undo-tree-id2307 . -2) (undo-tree-id2308 . -2) (undo-tree-id2309 . -2) (undo-tree-id2310 . -2) (undo-tree-id2311 . -2) (undo-tree-id2312 . -2) (undo-tree-id2313 . -2) (undo-tree-id2314 . -2) (undo-tree-id2315 . -2) (undo-tree-id2316 . -2) (undo-tree-id2317 . -2) (undo-tree-id2318 . -2) (undo-tree-id2319 . -2) (undo-tree-id2320 . -2) (undo-tree-id2321 . -2) (undo-tree-id2322 . -2) (undo-tree-id2323 . -2) (undo-tree-id2324 . -2) (undo-tree-id2325 . -2) (undo-tree-id2326 . -2) (undo-tree-id2327 . -2) (undo-tree-id2328 . -2) (undo-tree-id2329 . -2) (undo-tree-id2330 . -2) (undo-tree-id2331 . -2) (undo-tree-id2332 . -2) (undo-tree-id2333 . -2) (undo-tree-id2334 . -2) (undo-tree-id2335 . -2) (undo-tree-id2336 . -2) (undo-tree-id2337 . -2) (undo-tree-id2338 . -2) (undo-tree-id2339 . -2) (undo-tree-id2340 . -2) (undo-tree-id2341 . -2) (undo-tree-id2342 . -2) (undo-tree-id2343 . -2) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (undo-tree-id2346 . -2) (undo-tree-id2347 . -2) (undo-tree-id2348 . -2) (undo-tree-id2349 . -2) (undo-tree-id2350 . -2) (undo-tree-id2351 . -2) (undo-tree-id2352 . -2) (undo-tree-id2353 . -2) (undo-tree-id2354 . -2) 7295 (7293 . 7295)) nil (26246 38754 202557 214000) 0 nil])
([nil nil ((7314 . 7315)) nil (26246 38754 201647 447000) 0 nil])
([nil nil ((6050 . 6053) (6049 . 6050) (t 26246 38754 255569 269000)) nil (26246 38782 711173 915000) 0 nil])
([nil nil ((apply -3 2716 2870 undo--wrap-and-run-primitive-undo 2716 2870 ((2720 . 2723) 2716)) (t 26246 38782 777750 773000)) nil (26246 38830 805125 468000) 0 nil])
([nil nil ((apply 3 7523 7595 undo--wrap-and-run-primitive-undo 7523 7595 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -7525) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) (#<marker at 7011 in activator.cpp> . -1) 7523)) (t 26246 38830 857463 50000)) nil (26246 38890 195036 489000) 0 nil])
([nil nil ((#("change" 0 6 (fontified t)) . 7232) (undo-tree-id2446 . -5) (undo-tree-id2447 . -6) (t 26246 38866 436234 509000)) nil (26246 38897 811998 192000) 0 nil] [nil nil ((apply -3 7160 7265 undo--wrap-and-run-primitive-undo 7160 7265 ((7164 . 7167) 7160)) (t 26246 38866 436234 509000)) ((apply 3 7160 7262 undo--wrap-and-run-primitive-undo 7160 7262 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7164) 7160))) (26246 38890 190596 813000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7232) (undo-tree-id2445 . -1)) nil (26246 38897 811992 484000) 0 nil])
nil
([nil nil ((#("state" 0 5 (fontified t)) . 7232) (undo-tree-id2443 . -4) (undo-tree-id2444 . -5)) nil (26246 38897 811988 877000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 7232) (undo-tree-id2442 . -1)) nil (26246 38897 811983 543000) 0 nil])
([nil nil ((#("topics" 0 6 (fontified t)) . 7232) (undo-tree-id2440 . -5) (undo-tree-id2441 . -6)) nil (26246 38897 811978 273000) 0 nil])
([nil nil ((7232 . 7246) (#("li" 0 2 (fontified nil)) . 7232) (7232 . 7234) (#("lifecycle_list" 0 14 (fontified nil)) . -7232) (7232 . 7246) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -7232) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -2) (undo-tree-id2370 . -2) (undo-tree-id2371 . -2) (undo-tree-id2372 . -2) (undo-tree-id2373 . -2) (undo-tree-id2374 . -2) (undo-tree-id2375 . -2) (undo-tree-id2376 . -2) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2) (undo-tree-id2383 . -2) (undo-tree-id2384 . -2) (undo-tree-id2385 . -2) (undo-tree-id2386 . -2) (undo-tree-id2387 . -2) (undo-tree-id2388 . -2) (undo-tree-id2389 . -2) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (undo-tree-id2392 . -2) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) (undo-tree-id2399 . -2) (undo-tree-id2400 . -2) (undo-tree-id2401 . -2) (undo-tree-id2402 . -2) (undo-tree-id2403 . -2) (undo-tree-id2404 . -2) (undo-tree-id2405 . -2) (undo-tree-id2406 . -2) (undo-tree-id2407 . -2) (undo-tree-id2408 . -2) (undo-tree-id2409 . -2) (undo-tree-id2410 . -2) (undo-tree-id2411 . -2) (undo-tree-id2412 . -2) (undo-tree-id2413 . -2) (undo-tree-id2414 . -2) (undo-tree-id2415 . -2) (undo-tree-id2416 . -2) (undo-tree-id2417 . -2) (undo-tree-id2418 . -2) (undo-tree-id2419 . -2) (undo-tree-id2420 . -2) (undo-tree-id2421 . -2) (undo-tree-id2422 . -2) (undo-tree-id2423 . -2) (undo-tree-id2424 . -2) (undo-tree-id2425 . -2) (undo-tree-id2426 . -2) (undo-tree-id2427 . -2) (undo-tree-id2428 . -2) (undo-tree-id2429 . -2) (undo-tree-id2430 . -2) (undo-tree-id2431 . -2) (undo-tree-id2432 . -2) (undo-tree-id2433 . -2) (undo-tree-id2434 . -2) (undo-tree-id2435 . -2) (undo-tree-id2436 . -2) (undo-tree-id2437 . -2) (undo-tree-id2438 . -2) (undo-tree-id2439 . -2) 7234 (7232 . 7234)) nil (26246 38897 811958 760000) 0 nil])
([nil nil ((#("
  // bool change_state(std::uint8_t transition,  unsigned int index = 0,
  //                   std::chrono::seconds time_out=4s)
  // {
    
  //   auto request = std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
  //   request->transition.id = transition;

   
  //   auto client_change_state_ = change_clients[index];
    
  //   if (!client_change_state_->wait_for_service(time_out)) {
  //     RCLCPP_ERROR(
  //       get_logger(),
  //       \"Service %s is not available.\",
  //       client_change_state_->get_service_name());
  //     return false;
  //   }

  //   // We send the request with the transition we want to invoke.
  //   auto future_result = client_change_state_->async_send_request(request).future.share();

  //   // Let's wait until we have the answer from the node.
  //   // If the request times out, we return an unknown state.
  //   auto future_status = wait_for_result(future_result, time_out);

  //   if (future_status != std::future_status::ready) {
  //     RCLCPP_ERROR(
  //       get_logger(), \"Server time out while getting current state for node %s\", client_change_state_->get_service_name());
  //     return false;
  //   }

  //   // We have an answer, let's print our success.
  //   if (future_result.get()->success) {
  //     RCLCPP_INFO(
  //       get_logger(), \"Transition %d successfully triggered.\", static_cast<int>(transition));
  //     return true;
  //   } else {
  //     RCLCPP_WARN(
  //       get_logger(), \"Failed to trigger transition %u\", static_cast<unsigned int>(transition));
  //     return false;
  //   }


  // }

" 0 1 (fontified t) 1 3 (c-in-sws t c-is-sws t fontified t) 3 4 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 4 6 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 6 8 (c-in-sws t fontified t face font-lock-comment-face) 8 9 (c-in-sws t fontified t face font-lock-comment-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 15 (c-in-sws t fontified t face font-lock-comment-face) 15 18 (c-in-sws t fontified t face font-lock-comment-face) 18 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 27 (c-in-sws t fontified t face font-lock-comment-face) 27 29 (c-in-sws t fontified t face font-lock-comment-face) 29 36 (c-in-sws t fontified t face font-lock-comment-face) 36 37 (c-in-sws t fontified t face font-lock-comment-face) 37 47 (c-in-sws t fontified t face font-lock-comment-face) 47 48 (c-in-sws t fontified t face font-lock-comment-face) 48 50 (c-in-sws t fontified t face font-lock-comment-face) 50 58 (c-in-sws t fontified t face font-lock-comment-face) 58 59 (c-in-sws t fontified t face font-lock-comment-face) 59 62 (c-in-sws t fontified t face font-lock-comment-face) 62 63 (c-in-sws t fontified t face font-lock-comment-face) 63 68 (c-in-sws t fontified t face font-lock-comment-face) 68 72 (c-in-sws t fontified t face font-lock-comment-face) 72 73 (c-in-sws t fontified t face font-lock-comment-face) 73 74 (c-in-sws t fontified t face font-lock-comment-face) 74 75 (c-in-sws t fontified t) 75 76 (c-in-sws t fontified t) 76 77 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 77 79 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 79 80 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 80 97 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 97 100 (c-in-sws t fontified t face font-lock-comment-face) 100 102 (c-in-sws t fontified t face font-lock-comment-face) 102 108 (c-in-sws t fontified t face font-lock-comment-face) 108 110 (c-in-sws t fontified t face font-lock-comment-face) 110 117 (c-in-sws t fontified t face font-lock-comment-face) 117 118 (c-in-sws t fontified t face font-lock-comment-face) 118 126 (c-in-sws t fontified t face font-lock-comment-face) 126 129 (c-in-sws t fontified t face font-lock-comment-face) 129 130 (c-in-sws t fontified t face font-lock-comment-face) 130 131 (c-in-sws t fontified t face font-lock-comment-face) 131 132 (c-in-sws t fontified t) 132 133 (c-in-sws t fontified t) 133 134 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 134 136 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 136 137 (c-in-sws t fontified t face font-lock-comment-face) 137 138 (c-in-sws t fontified t face font-lock-comment-face) 138 139 (c-in-sws t fontified t) 139 142 (c-in-sws t fontified t) 142 143 (c-in-sws t fontified t) 143 144 (c-in-sws t fontified t) 144 145 (c-in-sws t fontified t) 145 146 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 146 148 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 148 150 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 150 153 (c-in-sws t fontified t face font-lock-comment-face) 153 154 (c-in-sws t fontified t face font-lock-comment-face) 154 155 (c-in-sws t fontified t face font-lock-comment-face) 155 162 (c-in-sws t fontified t face font-lock-comment-face) 162 165 (c-in-sws t fontified t face font-lock-comment-face) 165 168 (c-in-sws t fontified t face font-lock-comment-face) 168 181 (c-in-sws t fontified t face font-lock-comment-face) 181 182 (c-in-sws t fontified t face font-lock-comment-face) 182 196 (c-in-sws t fontified t face font-lock-comment-face) 196 198 (c-in-sws t fontified t face font-lock-comment-face) 198 201 (c-in-sws t fontified t face font-lock-comment-face) 201 203 (c-in-sws t fontified t face font-lock-comment-face) 203 214 (c-in-sws t fontified t face font-lock-comment-face) 214 223 (c-in-sws t fontified t face font-lock-comment-face) 223 224 (c-in-sws t fontified t face font-lock-comment-face) 224 225 (c-in-sws t fontified t face font-lock-comment-face) 225 226 (c-in-sws t fontified t face font-lock-comment-face) 226 228 (c-in-sws t fontified t face font-lock-comment-face) 228 230 (c-in-sws t fontified t) 230 233 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 233 235 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 235 272 (c-in-sws t fontified t face font-lock-comment-face) 272 279 (c-in-sws t fontified t) 279 282 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 282 284 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 284 287 (c-in-sws t fontified t face font-lock-comment-face) 287 288 (c-in-sws t fontified t face font-lock-comment-face) 288 289 (c-in-sws t fontified t face font-lock-comment-face) 289 309 (c-in-sws t fontified t face font-lock-comment-face) 309 326 (c-in-sws t fontified t face font-lock-comment-face) 326 327 (c-in-sws t fontified t face font-lock-comment-face) 327 332 (c-in-sws t fontified t face font-lock-comment-face) 332 333 (c-in-sws t fontified t face font-lock-comment-face) 333 334 (c-in-sws t fontified t face font-lock-comment-face) 334 335 (c-in-sws t fontified t face font-lock-comment-face) 335 336 (c-in-sws t fontified t) 336 342 (c-in-sws t fontified t) 342 343 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 343 345 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 345 347 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 347 349 (c-in-sws t fontified t face font-lock-comment-face) 349 350 (c-in-sws t fontified t face font-lock-comment-face) 350 351 (c-in-sws t fontified t face font-lock-comment-face) 351 352 (c-in-sws t fontified t face font-lock-comment-face) 352 390 (c-in-sws t fontified t face font-lock-comment-face) 390 391 (c-in-sws t fontified t face font-lock-comment-face) 391 399 (c-in-sws t fontified t face font-lock-comment-face) 399 400 (c-in-sws t fontified t face font-lock-comment-face) 400 401 (c-in-sws t fontified t face font-lock-comment-face) 401 402 (c-in-sws t fontified t face font-lock-comment-face) 402 403 (c-in-sws t fontified t face font-lock-comment-face) 403 404 (c-in-sws t fontified t face font-lock-comment-face) 404 405 (c-in-sws t fontified t) 405 406 (c-in-sws t fontified t) 406 407 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 407 409 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 409 413 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 413 425 (c-in-sws t fontified t face font-lock-comment-face) 425 426 (c-in-sws t fontified t face font-lock-comment-face) 426 427 (c-in-sws t fontified t face font-lock-comment-face) 427 428 (c-in-sws t fontified t) 428 429 (c-in-sws t fontified t) 429 430 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 430 432 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 432 438 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 438 448 (c-in-sws t fontified t face font-lock-comment-face) 448 449 (c-in-sws t fontified t face font-lock-comment-face) 449 450 (c-in-sws t fontified t face font-lock-comment-face) 450 451 (c-in-sws t fontified t face font-lock-comment-face) 451 452 (c-in-sws t fontified t face font-lock-comment-face) 452 453 (c-in-sws t fontified t) 453 454 (c-in-sws t fontified t) 454 455 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 455 457 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 457 463 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 463 493 (c-in-sws t fontified t face font-lock-comment-face) 493 494 (c-in-sws t fontified t face font-lock-comment-face) 494 495 (c-in-sws t fontified t face font-lock-comment-face) 495 496 (c-in-sws t fontified t) 496 497 (c-in-sws t fontified t) 497 498 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 498 500 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 500 501 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 501 506 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 506 534 (c-in-sws t face font-lock-comment-face fontified t) 534 544 (c-in-sws t face font-lock-comment-face fontified t) 544 545 (c-in-sws t face font-lock-comment-face fontified t) 545 546 (c-in-sws t face font-lock-comment-face fontified t) 546 547 (c-in-sws t face font-lock-comment-face fontified t) 547 548 (c-in-sws t face font-lock-comment-face fontified t) 548 549 (c-in-sws t face font-lock-comment-face fontified t) 549 550 (c-in-sws t) 550 551 (c-in-sws t) 551 552 (face font-lock-comment-delimiter-face c-in-sws t) 552 554 (c-in-sws t face font-lock-comment-delimiter-face) 554 558 (c-in-sws t face font-lock-comment-delimiter-face) 558 564 (c-in-sws t face font-lock-comment-face) 564 565 (c-in-sws t face font-lock-comment-face) 565 570 (c-in-sws t face font-lock-comment-face) 570 571 (c-in-sws t face font-lock-comment-face) 571 572 (c-in-sws t face font-lock-comment-face) 572 573 (c-in-sws t) 573 574 (c-in-sws t) 574 575 (face font-lock-comment-delimiter-face c-in-sws t) 575 577 (c-in-sws t face font-lock-comment-delimiter-face) 577 579 (c-in-sws t face font-lock-comment-delimiter-face) 579 580 (c-in-sws t face font-lock-comment-face) 580 581 (c-in-sws t face font-lock-comment-face) 581 582 (c-in-sws t) 582 583 (c-in-sws t) 583 584 (c-in-sws t) 584 585 (face font-lock-comment-delimiter-face c-in-sws t) 585 587 (c-in-sws t face font-lock-comment-delimiter-face) 587 589 (c-in-sws t face font-lock-comment-delimiter-face) 589 590 (c-in-sws t face font-lock-comment-face) 590 592 (c-in-sws t face font-lock-comment-face) 592 651 (c-in-sws t face font-lock-comment-face) 651 653 (c-in-sws t) 653 656 (c-in-sws t face font-lock-comment-delimiter-face) 656 658 (c-in-sws t face font-lock-comment-delimiter-face) 658 659 (c-in-sws t face font-lock-comment-face) 659 661 (c-in-sws t face font-lock-comment-face) 661 662 (c-in-sws t face font-lock-comment-face) 662 663 (c-in-sws t face font-lock-comment-face) 663 676 (c-in-sws t face font-lock-comment-face) 676 719 (c-in-sws t face font-lock-comment-face) 719 720 (c-in-sws t face font-lock-comment-face) 720 727 (c-in-sws t face font-lock-comment-face) 727 728 (c-in-sws t face font-lock-comment-face) 728 741 (c-in-sws t face font-lock-comment-face) 741 742 (c-in-sws t face font-lock-comment-face) 742 743 (c-in-sws t face font-lock-comment-face) 743 745 (c-in-sws t face font-lock-comment-face) 745 746 (c-in-sws t) 746 748 (c-in-sws t) 748 751 (c-in-sws t face font-lock-comment-delimiter-face) 751 753 (c-in-sws t face font-lock-comment-delimiter-face) 753 754 (c-in-sws t face font-lock-comment-face) 754 756 (c-in-sws t face font-lock-comment-face) 756 759 (c-in-sws t face font-lock-comment-face) 759 760 (c-in-sws t face font-lock-comment-face) 760 807 (c-in-sws t face font-lock-comment-face) 807 809 (c-in-sws t) 809 812 (c-in-sws t face font-lock-comment-delimiter-face) 812 814 (c-in-sws t face font-lock-comment-delimiter-face) 814 817 (c-in-sws t face font-lock-comment-face) 817 835 (c-in-sws t face font-lock-comment-face) 835 871 (c-in-sws t face font-lock-comment-face) 871 873 (c-in-sws t) 873 876 (c-in-sws t face font-lock-comment-delimiter-face) 876 878 (c-in-sws t face font-lock-comment-delimiter-face) 878 879 (c-in-sws t face font-lock-comment-face) 879 881 (c-in-sws t face font-lock-comment-face) 881 882 (c-in-sws t face font-lock-comment-face) 882 883 (c-in-sws t face font-lock-comment-face) 883 896 (c-in-sws t face font-lock-comment-face) 896 914 (c-in-sws t face font-lock-comment-face) 914 915 (c-in-sws t face font-lock-comment-face) 915 938 (c-in-sws t face font-lock-comment-face) 938 939 (c-in-sws t face font-lock-comment-face) 939 941 (c-in-sws t face font-lock-comment-face) 941 942 (c-in-sws t) 942 943 (c-in-sws t fontified t) 943 944 (c-in-sws t fontified t) 944 945 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 945 947 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 947 949 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 949 951 (c-in-sws t fontified t face font-lock-comment-face) 951 952 (c-in-sws t fontified t face font-lock-comment-face) 952 953 (c-in-sws t fontified t face font-lock-comment-face) 953 970 (c-in-sws t fontified t face font-lock-comment-face) 970 973 (c-in-sws t fontified t face font-lock-comment-face) 973 975 (c-in-sws t fontified t face font-lock-comment-face) 975 988 (c-in-sws t fontified t face font-lock-comment-face) 988 995 (c-in-sws t fontified t face font-lock-comment-face) 995 996 (c-in-sws t fontified t face font-lock-comment-face) 996 997 (c-in-sws t fontified t face font-lock-comment-face) 997 998 (c-in-sws t fontified t face font-lock-comment-face) 998 999 (c-in-sws t fontified t face font-lock-comment-face) 999 1000 (c-in-sws t fontified t) 1000 1001 (c-in-sws t fontified t) 1001 1002 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1002 1004 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1004 1008 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1008 1020 (c-in-sws t fontified t face font-lock-comment-face) 1020 1021 (c-in-sws t fontified t face font-lock-comment-face) 1021 1022 (c-in-sws t fontified t face font-lock-comment-face) 1022 1023 (c-in-sws t fontified t) 1023 1024 (c-in-sws t fontified t) 1024 1025 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1025 1027 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1027 1033 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1033 1043 (c-in-sws t fontified t face font-lock-comment-face) 1043 1044 (c-in-sws t fontified t face font-lock-comment-face) 1044 1045 (c-in-sws t fontified t face font-lock-comment-face) 1045 1047 (c-in-sws t fontified t face font-lock-comment-face) 1047 1049 (c-in-sws t fontified t face font-lock-comment-face) 1049 1104 (c-in-sws t fontified t face font-lock-comment-face) 1104 1144 (c-in-sws t fontified t face font-lock-comment-face) 1144 1145 (c-in-sws t fontified t face font-lock-comment-face) 1145 1146 (c-in-sws t fontified t face font-lock-comment-face) 1146 1147 (c-in-sws t fontified t face font-lock-comment-face) 1147 1148 (c-in-sws t fontified t face font-lock-comment-face) 1148 1149 (c-in-sws t fontified t face font-lock-comment-face) 1149 1150 (c-in-sws t fontified t) 1150 1151 (c-in-sws t fontified t) 1151 1152 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1152 1154 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1154 1158 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1158 1164 (c-in-sws t fontified t face font-lock-comment-face) 1164 1165 (c-in-sws t fontified t face font-lock-comment-face) 1165 1170 (c-in-sws t fontified t face font-lock-comment-face) 1170 1172 (c-in-sws t fontified t face font-lock-comment-face) 1172 1174 (c-in-sws t fontified t) 1174 1177 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1177 1179 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1179 1180 (c-in-sws t fontified t face font-lock-comment-face) 1180 1181 (c-in-sws t fontified t face font-lock-comment-face) 1181 1182 (c-in-sws t fontified t) 1182 1184 (c-in-sws t fontified t) 1184 1187 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1187 1189 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1189 1190 (c-in-sws t fontified t face font-lock-comment-face) 1190 1192 (c-in-sws t fontified t face font-lock-comment-face) 1192 1214 (c-in-sws t fontified t face font-lock-comment-face) 1214 1215 (c-in-sws t fontified t face font-lock-comment-face) 1215 1236 (c-in-sws t fontified t face font-lock-comment-face) 1236 1238 (c-in-sws t fontified t) 1238 1241 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1241 1243 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1243 1244 (c-in-sws t fontified t face font-lock-comment-face) 1244 1245 (c-in-sws t fontified t face font-lock-comment-face) 1245 1246 (c-in-sws t fontified t face font-lock-comment-face) 1246 1247 (c-in-sws t fontified t face font-lock-comment-face) 1247 1264 (c-in-sws t fontified t face font-lock-comment-face) 1264 1265 (c-in-sws t fontified t face font-lock-comment-face) 1265 1266 (c-in-sws t fontified t face font-lock-comment-face) 1266 1275 (c-in-sws t fontified t face font-lock-comment-face) 1275 1276 (c-in-sws t fontified t face font-lock-comment-face) 1276 1277 (c-in-sws t fontified t face font-lock-comment-face) 1277 1278 (c-in-sws t fontified t face font-lock-comment-face) 1278 1279 (c-in-sws t fontified t face font-lock-comment-face) 1279 1281 (c-in-sws t fontified t) 1281 1284 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1284 1288 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1288 1299 (c-in-sws t fontified t face font-lock-comment-face) 1299 1300 (c-in-sws t fontified t face font-lock-comment-face) 1300 1301 (c-in-sws t fontified t face font-lock-comment-face) 1301 1303 (c-in-sws t fontified t) 1303 1306 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1306 1312 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1312 1322 (c-in-sws t fontified t face font-lock-comment-face) 1322 1323 (c-in-sws t fontified t face font-lock-comment-face) 1323 1324 (c-in-sws t fontified t face font-lock-comment-face) 1324 1326 (c-in-sws t fontified t face font-lock-comment-face) 1326 1365 (c-in-sws t fontified t face font-lock-comment-face) 1365 1367 (c-in-sws t fontified t face font-lock-comment-face) 1367 1378 (c-in-sws t fontified t face font-lock-comment-face) 1378 1379 (c-in-sws t fontified t face font-lock-comment-face) 1379 1382 (c-in-sws t fontified t face font-lock-comment-face) 1382 1383 (c-in-sws t fontified t face font-lock-comment-face) 1383 1384 (c-in-sws t fontified t face font-lock-comment-face) 1384 1394 (c-in-sws t fontified t face font-lock-comment-face) 1394 1395 (c-in-sws t fontified t face font-lock-comment-face) 1395 1396 (c-in-sws t fontified t face font-lock-comment-face) 1396 1397 (c-in-sws t fontified t face font-lock-comment-face) 1397 1398 (c-in-sws t fontified t face font-lock-comment-face) 1398 1399 (c-in-sws t fontified t) 1399 1400 (c-in-sws t fontified t) 1400 1401 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1401 1403 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1403 1407 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1407 1413 (c-in-sws t fontified t face font-lock-comment-face) 1413 1414 (c-in-sws t fontified t face font-lock-comment-face) 1414 1418 (c-in-sws t fontified t face font-lock-comment-face) 1418 1419 (c-in-sws t fontified t face font-lock-comment-face) 1419 1420 (c-in-sws t fontified t face font-lock-comment-face) 1420 1421 (c-in-sws t fontified t) 1421 1422 (c-in-sws t fontified t) 1422 1423 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1423 1425 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1425 1427 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1427 1428 (c-in-sws t fontified t face font-lock-comment-face) 1428 1429 (c-in-sws t fontified t face font-lock-comment-face) 1429 1433 (c-in-sws t fontified t face font-lock-comment-face) 1433 1434 (c-in-sws t fontified t face font-lock-comment-face) 1434 1435 (c-in-sws t fontified t face font-lock-comment-face) 1435 1436 (c-in-sws t fontified t face font-lock-comment-face) 1436 1437 (c-in-sws t fontified t) 1437 1438 (c-in-sws t fontified t) 1438 1439 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1439 1441 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1441 1442 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1442 1445 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1445 1456 (c-in-sws t face font-lock-comment-face fontified t) 1456 1457 (c-in-sws t face font-lock-comment-face fontified t) 1457 1458 (face font-lock-comment-face fontified t c-in-sws t) 1458 1459 (fontified t c-in-sws t) 1459 1460 (c-in-sws t fontified t) 1460 1461 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 1461 1463 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1463 1469 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1469 1479 (c-in-sws t fontified t face font-lock-comment-face) 1479 1480 (c-in-sws t fontified t face font-lock-comment-face) 1480 1481 (c-in-sws t fontified t face font-lock-comment-face) 1481 1483 (c-in-sws t fontified t face font-lock-comment-face) 1483 1516 (c-in-sws t fontified t face font-lock-comment-face) 1516 1518 (c-in-sws t fontified t face font-lock-comment-face) 1518 1529 (c-in-sws t fontified t face font-lock-comment-face) 1529 1530 (c-in-sws t fontified t face font-lock-comment-face) 1530 1538 (c-in-sws t fontified t face font-lock-comment-face) 1538 1539 (c-in-sws t fontified t face font-lock-comment-face) 1539 1542 (c-in-sws t fontified t face font-lock-comment-face) 1542 1543 (c-in-sws t fontified t face font-lock-comment-face) 1543 1544 (c-in-sws t fontified t face font-lock-comment-face) 1544 1554 (c-in-sws t fontified t face font-lock-comment-face) 1554 1555 (c-in-sws t fontified t face font-lock-comment-face) 1555 1556 (c-in-sws t fontified t face font-lock-comment-face) 1556 1558 (c-in-sws t fontified t face font-lock-comment-face) 1558 1560 (c-in-sws t fontified t) 1560 1563 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1563 1567 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1567 1573 (c-in-sws t fontified t face font-lock-comment-face) 1573 1574 (c-in-sws t fontified t face font-lock-comment-face) 1574 1579 (c-in-sws t fontified t face font-lock-comment-face) 1579 1581 (c-in-sws t fontified t face font-lock-comment-face) 1581 1583 (c-in-sws t fontified t) 1583 1586 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1586 1588 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1588 1589 (c-in-sws t fontified t face font-lock-comment-face) 1589 1590 (c-in-sws t fontified t face font-lock-comment-face) 1590 1594 (c-in-sws t fontified t) 1594 1597 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1597 1598 (c-in-sws t fontified t face font-lock-comment-face) 1598 1599 (c-in-sws t fontified t face font-lock-comment-face) 1599 1600 (rear-nonsticky t fontified t c-in-sws t)) . 7807) (undo-tree-id2625 . -1600) (undo-tree-id2626 . -1600) (undo-tree-id2627 . -1599) (undo-tree-id2628 . -1) (undo-tree-id2629 . -129) (undo-tree-id2630 . -1600) (undo-tree-id2631 . -942) (undo-tree-id2632 . -1600) 9407 (t 26246 38897 861496 39000)) nil (26246 39250 939574 219000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7493) (undo-tree-id2600 . -4) (undo-tree-id2601 . -4) (undo-tree-id2602 . -4) (undo-tree-id2603 . -4) (undo-tree-id2604 . -4) (undo-tree-id2605 . -4) (undo-tree-id2606 . -4) (undo-tree-id2607 . -4) (undo-tree-id2608 . -4) (undo-tree-id2609 . -4) (undo-tree-id2610 . -4) (undo-tree-id2611 . -4) (undo-tree-id2612 . -4) (undo-tree-id2613 . -4) (undo-tree-id2614 . -4) (undo-tree-id2615 . -4) (undo-tree-id2616 . -4) (undo-tree-id2617 . -4) (undo-tree-id2618 . -4) (undo-tree-id2619 . -4) 7497 (7493 . 7497) (#("    " 0 4 (fontified nil)) . 7492) (undo-tree-id2620 . -4) (7492 . 7497) (#("    " 0 4 (fontified nil)) . 7491) (undo-tree-id2621 . -4) (undo-tree-id2622 . -4) (undo-tree-id2623 . -4) (undo-tree-id2624 . -4) (7490 . 7496)) nil (26246 39250 939555 359000) 0 nil])
([nil nil ((7500 . 7508) (#("ret" 0 3 (fontified nil)) . 7500) (7500 . 7503) (#("retstate" 0 8 (fontified nil)) . -7500) (7500 . 7508) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7500) (undo-tree-id2528 . -3) (undo-tree-id2529 . -3) (undo-tree-id2530 . -3) (undo-tree-id2531 . -3) (undo-tree-id2532 . -3) (undo-tree-id2533 . -3) (undo-tree-id2534 . -3) (undo-tree-id2535 . -3) (undo-tree-id2536 . -3) (undo-tree-id2537 . -3) (undo-tree-id2538 . -3) (undo-tree-id2539 . -3) (undo-tree-id2540 . -3) (undo-tree-id2541 . -3) (undo-tree-id2542 . -3) (undo-tree-id2543 . -3) (undo-tree-id2544 . -3) (undo-tree-id2545 . -3) (undo-tree-id2546 . -3) (undo-tree-id2547 . -3) (undo-tree-id2548 . -3) (undo-tree-id2549 . -3) (undo-tree-id2550 . -3) (undo-tree-id2551 . -3) (undo-tree-id2552 . -3) (undo-tree-id2553 . -3) (undo-tree-id2554 . -3) (undo-tree-id2555 . -3) (undo-tree-id2556 . -3) (undo-tree-id2557 . -3) (undo-tree-id2558 . -3) (undo-tree-id2559 . -3) (undo-tree-id2560 . -3) (undo-tree-id2561 . -3) (undo-tree-id2562 . -3) (undo-tree-id2563 . -3) (undo-tree-id2564 . -3) (undo-tree-id2565 . -3) (undo-tree-id2566 . -3) (undo-tree-id2567 . -3) (undo-tree-id2568 . -3) (undo-tree-id2569 . -3) (undo-tree-id2570 . -3) (undo-tree-id2571 . -3) (undo-tree-id2572 . -3) (undo-tree-id2573 . -3) (undo-tree-id2574 . -3) (undo-tree-id2575 . -3) (undo-tree-id2576 . -3) (undo-tree-id2577 . -3) (undo-tree-id2578 . -3) (undo-tree-id2579 . -3) (undo-tree-id2580 . -3) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -3) (undo-tree-id2584 . -3) (undo-tree-id2585 . -3) (undo-tree-id2586 . -3) (undo-tree-id2587 . -3) (undo-tree-id2588 . -3) (undo-tree-id2589 . -3) (undo-tree-id2590 . -3) (undo-tree-id2591 . -3) (undo-tree-id2592 . -3) (undo-tree-id2593 . -3) (undo-tree-id2594 . -3) (undo-tree-id2595 . -3) (undo-tree-id2596 . -3) (undo-tree-id2597 . -3) (undo-tree-id2598 . -3) (undo-tree-id2599 . -3) 7503 (7500 . 7503) (7499 . 7501) (7496 . 7499) (7492 . 7496)) nil (26246 39250 939495 588000) 0 nil])
([nil nil ((7575 . 7578) (#("L" 0 1 (fontified t face font-lock-string-face)) . -7575) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) 7576 (7566 . 7576) (#("I" 0 1 (fontified t face font-lock-string-face)) . -7566) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) 7567 (7563 . 7567) (#("R" 0 1 (fontified t face font-lock-string-face)) . -7563) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7564) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) 7565 (7561 . 7565) (7558 . 7561) (#("O" 0 1 (fontified t face font-lock-string-face)) . -7558) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) 7559 (7551 . 7559) (7551 . 7552) (nil syntax-table nil 7552 . 7553) (nil syntax-table (1) 7550 . 7551) (7550 . 7551) (#("\"" 0 1 (fontified nil)) . -7550) (undo-tree-id2519 . -1) (nil syntax-table nil 7552 . 7553) (nil syntax-table (1) 7550 . 7551) (7549 . 7551) (7548 . 7549) (apply yas--snippet-revive 7536 7548 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 7530 7579 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 7530 7579 nil nil nil t nil) nil)) (7536 . 7548) (#("get_logger()" 0 12 (fontified nil)) . 7536) (undo-tree-id2520 . -12) (7536 . 7548) (#("get_logger() const" 0 18 (fontified nil)) . -7536) (undo-tree-id2521 . -18) (7536 . 7554) (#("get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7536) (undo-tree-id2522 . -3) (undo-tree-id2523 . -3) (undo-tree-id2524 . -3) 7539 (7536 . 7539) (7535 . 7536) (7534 . 7535) (7531 . 7534) (#("logger, ..." 0 7 (fontified nil) 7 11 (fontified t)) . 7531) (undo-tree-id2525 . -11) (7530 . 7531) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7530 7579 nil nil nil t nil)) nil 29 nil #s(yas--field 1 7530 7579 nil nil nil t nil) nil nil)) (7518 . 7542) (#("RCLCPP_INFO(${1:logger, ...})" 0 29 (fontified nil)) . 7518) (7518 . 7547) (#("R" 0 1 (fontified nil)) . 7518) (7518 . 7519) (#("RCLCPP_INFO(logger, ...)" 0 24 (fontified nil)) . -7518) (7518 . 7542) (#("R" 0 1 (fontified t)) . -7518) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) 7519 (7518 . 7519) (7512 . 7518) (7511 . 7517) (7510 . 7512) (7509 . 7510)) nil (26246 39250 939351 616000) 0 nil])
([nil nil ((apply yas--snippet-revive 7518 7580 #s(yas--snippet nil (#s(yas--field 1 7530 7579 nil nil nil t nil)) nil 29 nil #s(yas--field 1 7530 7579 nil nil nil t nil) nil nil))) nil (26246 39250 939176 29000) 0 nil])
([nil nil ((7580 . 7581)) nil (26246 39250 939174 147000) 0 nil])
([nil nil ((7572 . 7583) (7551 . 7572)) nil (26246 39250 939171 55000) 0 nil])
([nil nil ((7631 . 7638) (7610 . 7631)) nil (26246 39250 939160 76000) 0 nil])
([nil nil ((7638 . 7642) (t 26246 39251 1796 951000)) nil (26246 39257 723047 281000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6887 . 6888) (#("
" 0 1 (fontified nil)) . -6949) (6881 . 6950) (t 26246 39257 765646 961000)) nil (26246 39440 679174 824000) 0 nil])
([nil nil ((6882 . 6886) (#("      " 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -6882) (undo-tree-id2644 . -6) 6888) nil (26246 39440 679171 751000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6882) (undo-tree-id2642 . -4) 6886 (6882 . 6886) (#("    " 0 4 (fontified nil)) . 6881) (undo-tree-id2643 . -4) (6880 . 6886)) nil (26246 39440 679166 414000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6881)) nil (26246 39440 679160 38000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6881) (undo-tree-id2641 . 1)) nil (26246 39440 679157 560000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 6862) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1)) nil (26246 39440 679153 713000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 6862) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1)) nil (26246 39440 679147 971000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 6870) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1)) nil (26246 39440 679140 759000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 6870) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1)) nil (26246 39440 679129 891000) 0 nil])
([nil nil ((792 . 794) (#("  " 0 2 (fontified nil)) . 791) (undo-tree-id2735 . -2) (791 . 794) (#("  " 0 2 (fontified nil)) . 790) (undo-tree-id2736 . -2) (789 . 793) (t 26246 39440 729180 34000)) nil (26246 39993 36342 993000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -790) (undo-tree-id2711 . -1) (#("i" 0 1 (fontified t)) . -791) (undo-tree-id2712 . -1) 792 (790 . 792) (#("i" 0 1 (fontified t)) . -790) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (#("n" 0 1 (fontified t)) . -791) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -792) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (#(" " 0 1 (fontified t)) . -793) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -794) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -795) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -796) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -797) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) 798 (794 . 798) (790 . 794) (#(" " 0 1 (fontified t)) . -790) (undo-tree-id2729 . -1) (#(" " 0 1 (fontified t)) . -791) (undo-tree-id2730 . -1) 792 (789 . 792) (#("
" 0 1 (fontified t)) . -789) (undo-tree-id2731 . -1) (#("
" 0 1 (fontified t)) . -790) (undo-tree-id2732 . -1) (#(" " 0 1 (fontified t)) . -791) (undo-tree-id2733 . -1) (#(" " 0 1 (fontified t)) . -792) (undo-tree-id2734 . -1) 793 (790 . 793)) nil (26246 39993 36316 154000) 0 nil])
([nil nil ((855 . 856) (854 . 855) (851 . 854) (850 . 852) (836 . 850) (833 . 836) (#("n" 0 1 (fontified t)) . -833) (undo-tree-id2707 . -1) (#("s" 0 1 (fontified t)) . -834) (undo-tree-id2708 . -1) (#(" " 0 1 (fontified t)) . -835) (undo-tree-id2709 . -1) 836 (823 . 836) (19 . 38) (797 . 804) (#("u" 0 1 (fontified nil)) . 797) (797 . 798) (#("uint8_t" 0 7 (fontified nil)) . -797) (797 . 804) (#("uint" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -797) (undo-tree-id2710 . -4) 801 (798 . 801) (797 . 798) (790 . 792) (793 . 795) (790 . 793)) nil (26246 39993 36229 853000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -6340) (undo-tree-id2704 . -1) (#("j" 0 1 (fontified t)) . -6341) (undo-tree-id2705 . -1) (#("j" 0 1 (fontified t)) . -6342) (undo-tree-id2706 . -1) 6343 (6340 . 6343) (858 . 859) (857 . 858) (856 . 857)) nil (26246 39993 36201 393000) 0 nil])
([nil nil ((863 . 864) (862 . 863) (859 . 862)) nil (26246 39993 36185 47000) 0 nil])
([nil nil ((#("= {255, 2, 255, }
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t)) . 848) (undo-tree-id2698 . -17) (undo-tree-id2699 . -17) (undo-tree-id2700 . -17) (undo-tree-id2701 . -18) (undo-tree-id2702 . -17) (undo-tree-id2703 . -17) 865) nil (26246 39993 36178 564000) 0 nil])
([nil nil ((847 . 848) (#(" " 0 1 (fontified t)) . -847) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) 848) nil (26246 39993 36156 732000) 0 nil])
([nil nil ((851 . 852) (850 . 852) (847 . 850)) nil (26246 39993 36125 759000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -855) (undo-tree-id2687 . -2) 857 (854 . 857)) nil (26246 39993 36120 52000) 0 nil])
([nil nil ((857 . 859) (#("  " 0 2 (fontified nil)) . 856) (undo-tree-id2685 . -2) (856 . 859) (#("  " 0 2 (fontified nil)) . 855) (undo-tree-id2686 . -2) (857 . 858) (855 . 857)) nil (26246 39993 36111 542000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -858) (undo-tree-id2682 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -859) (undo-tree-id2683 . -1) (#(" " 0 1 (fontified t)) . -860) (undo-tree-id2684 . -1) 861 (858 . 861) (856 . 858)) nil (26246 39993 36097 700000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -859) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (#("a" 0 1 (fontified t)) . -860) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (#("n" 0 1 (fontified t)) . -861) (undo-tree-id2676 . -1) (#("s" 0 1 (fontified t)) . -862) (undo-tree-id2677 . -1) 863 (860 . 863) (#("a" 0 1 (fontified t)) . -860) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) 861 (859 . 861) (858 . 859) (#("l" 0 1 (fontified t)) . -858) (undo-tree-id2680 . -1) 859 (858 . 859) (856 . 858) (#("  " 0 2 (fontified nil)) . 855) (undo-tree-id2681 . -2) (857 . 858) (855 . 857)) nil (26246 39993 36075 890000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-variable-name-face)) . 826)) nil (26246 39993 36035 893000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . 825)) nil (26246 39993 36032 497000) 0 nil])
([nil nil ((825 . 827)) nil (26246 39993 36029 632000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -858) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (#("r" 0 1 (fontified t)) . -859) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (#("a" 0 1 (fontified t)) . -860) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (#("=" 0 1 (fontified t)) . -861) (undo-tree-id2670 . -1) 862 (861 . 862) (#("n" 0 1 (fontified t)) . -861) (undo-tree-id2671 . -1) 862 (859 . 862)) nil (26246 39993 36022 340000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -858) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (#("r" 0 1 (fontified t)) . -859) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (#("a" 0 1 (fontified t)) . -860) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (#("n" 0 1 (fontified t)) . -861) (undo-tree-id2658 . -1) (#("s" 0 1 (fontified t)) . -862) (undo-tree-id2659 . -1) (#("i" 0 1 (fontified t)) . -863) (undo-tree-id2660 . -1) 864 (858 . 864) (856 . 858) (#(" " 0 1 (fontified nil)) . -856) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (#(" " 0 1 (fontified t)) . 857) (undo-tree-id2663 . -1)) nil (26246 39993 35986 648000) 0 nil])
([nil nil ((nil rear-nonsticky nil 880 . 881) (nil fontified nil 858 . 881) (858 . 881) 857) nil (26246 39993 35945 296000) 0 nil])
([nil nil ((881 . 883)) nil (26246 39993 35940 266000) 0 nil])
([nil nil ((#("using namespace std::chrono_literals;

" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 19 (fontified t face font-lock-constant-face) 19 21 (fontified t) 21 35 (fontified t face font-lock-constant-face) 35 36 (fontified t c-type c-decl-id-start face font-lock-constant-face) 36 38 (fontified t) 38 39 (fontified t)) . 770) (undo-tree-id2648 . -38) (undo-tree-id2649 . -38) (undo-tree-id2650 . -38) (undo-tree-id2651 . -38)) nil (26246 39993 35935 319000) 0 nil])
([nil nil ((771 . 773) (#("  " 0 2 (fontified nil)) . 770) (undo-tree-id2646 . -2) (770 . 773) (#("  " 0 2 (fontified nil)) . 769) (undo-tree-id2647 . -2) (771 . 772) (769 . 771)) nil (26246 39993 35918 932000) 0 nil])
([nil nil ((773 . 788) (#("i" 0 1 (fontified t)) . -773) (undo-tree-id2645 . -1) 774 (773 . 774) (772 . 773) (770 . 772)) nil (26246 39993 35903 156000) 0 nil])
([nil nil ((nil rear-nonsticky nil 818 . 819) (nil fontified nil 788 . 819) (788 . 819) 787) nil (26246 39993 35876 240000) 0 nil])
([nil nil ((819 . 820)) nil (26246 39993 35869 399000) 0 nil])
([nil nil ((819 . 820)) nil (26246 39993 35856 371000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 807) (undo-tree-id2740 . -1) (undo-tree-id2741 . -2) (undo-tree-id2742 . -2) (t 26246 39993 90390 232000)) nil (26246 39997 525837 627000) 0 nil])
([nil nil ((#("Transition " 0 9 (fontified t face font-lock-constant-face) 9 10 (fontified t rear-nonsticky t c-type c-decl-id-start face font-lock-constant-face) 10 11 (fontified t)) . 807) (undo-tree-id2737 . -10) (undo-tree-id2738 . -10) (undo-tree-id2739 . -11)) nil (26246 39997 525817 726000) 0 nil])
([nil nil ((897 . 916) (#("TRANSITION_ACTIVATE" 0 19 (fontified nil)) . -897) (897 . 916) (#("TR" 0 1 (fontified t) 1 2 (fontified t)) . -897) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (undo-tree-id2839 . -2) (undo-tree-id2840 . -2) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) (undo-tree-id2851 . -2) (undo-tree-id2852 . -2) (undo-tree-id2853 . -2) (undo-tree-id2854 . -2) (undo-tree-id2855 . -2) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) 899 (897 . 899) (#("A" 0 1 (fontified t)) . -897) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) 898 (897 . 898) (895 . 897) (885 . 895) (#("Tra" 0 3 (fontified nil)) . 885) (885 . 888) (#("Transition" 0 10 (fontified nil)) . -885) (885 . 895) (#("Tran" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -885) (undo-tree-id2878 . -4) 889 (886 . 889) (#("R" 0 1 (fontified t)) . -886) (undo-tree-id2879 . -1) 887 (885 . 887) (t 26246 39997 582572 686000)) nil (26246 40037 549575 107000) 0 nil])
([nil nil ((917 . 920)) nil (26246 40037 549491 108000) 0 nil])
([nil nil ((#("ACTIVATE" 0 8 (fontified t)) . 908) (undo-tree-id2835 . -7) (undo-tree-id2836 . -8)) nil (26246 40037 549488 241000) 0 nil])
([nil nil ((897 . 917) (#("TRANSITION_CO" 0 13 (fontified nil)) . 897) (897 . 910) (#("TRANSITION_CONFIGURE" 0 20 (fontified nil)) . -897) (897 . 917) (#("TRANSITION_CO" 0 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . -897) (undo-tree-id2743 . -11) (undo-tree-id2744 . -11) (undo-tree-id2745 . -13) (undo-tree-id2746 . -13) (undo-tree-id2747 . -13) (undo-tree-id2748 . -13) (undo-tree-id2749 . -13) (undo-tree-id2750 . -13) (undo-tree-id2751 . -13) (undo-tree-id2752 . -13) (undo-tree-id2753 . -13) (undo-tree-id2754 . -13) (undo-tree-id2755 . -13) (undo-tree-id2756 . -13) (undo-tree-id2757 . -13) (undo-tree-id2758 . -13) (undo-tree-id2759 . -13) (undo-tree-id2760 . -13) (undo-tree-id2761 . -13) (undo-tree-id2762 . -13) (undo-tree-id2763 . -13) (undo-tree-id2764 . -13) (undo-tree-id2765 . -13) (undo-tree-id2766 . -13) (undo-tree-id2767 . -13) (undo-tree-id2768 . -13) (undo-tree-id2769 . -13) (undo-tree-id2770 . -13) (undo-tree-id2771 . -13) (undo-tree-id2772 . -13) (undo-tree-id2773 . -13) (undo-tree-id2774 . -13) (undo-tree-id2775 . -13) (undo-tree-id2776 . -13) (undo-tree-id2777 . -13) (undo-tree-id2778 . -13) (undo-tree-id2779 . -13) (undo-tree-id2780 . -13) (undo-tree-id2781 . -13) (undo-tree-id2782 . -13) (undo-tree-id2783 . -13) (undo-tree-id2784 . -13) (undo-tree-id2785 . -13) (undo-tree-id2786 . -12) (undo-tree-id2787 . -13) (undo-tree-id2788 . -13) (undo-tree-id2789 . -13) (undo-tree-id2790 . -13) (undo-tree-id2791 . -13) (undo-tree-id2792 . -13) (undo-tree-id2793 . -13) (undo-tree-id2794 . -13) (undo-tree-id2795 . -13) (undo-tree-id2796 . -13) (undo-tree-id2797 . -13) (undo-tree-id2798 . -13) (undo-tree-id2799 . -13) (undo-tree-id2800 . -13) (undo-tree-id2801 . -13) (undo-tree-id2802 . -13) (undo-tree-id2803 . -13) (undo-tree-id2804 . -13) (undo-tree-id2805 . -13) (undo-tree-id2806 . -13) (undo-tree-id2807 . -13) (undo-tree-id2808 . -13) (undo-tree-id2809 . -13) (undo-tree-id2810 . -13) (undo-tree-id2811 . -13) (undo-tree-id2812 . -13) (undo-tree-id2813 . -13) (undo-tree-id2814 . -13) (undo-tree-id2815 . -13) (undo-tree-id2816 . -13) (undo-tree-id2817 . -13) (undo-tree-id2818 . -13) (undo-tree-id2819 . -13) (undo-tree-id2820 . -13) (undo-tree-id2821 . -13) (undo-tree-id2822 . -13) (undo-tree-id2823 . -13) (undo-tree-id2824 . -13) (undo-tree-id2825 . -13) (undo-tree-id2826 . -13) (undo-tree-id2827 . -13) (undo-tree-id2828 . -13) (undo-tree-id2829 . -13) (undo-tree-id2830 . -13) (undo-tree-id2831 . -13) (undo-tree-id2832 . -13) (undo-tree-id2833 . -13) (undo-tree-id2834 . -13) 910 (908 . 910)) nil (26246 40037 549470 423000) 0 nil])
([nil nil ((922 . 923) (921 . 922)) nil (26246 40037 549224 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 925 . 926) (#("
" 0 1 (fontified nil)) . -988) (923 . 989) 922 (t 26246 40037 600210 150000)) nil (26246 40052 593901 828000) 0 nil])
([nil nil ((nil rear-nonsticky nil 990 . 991) (#("
" 0 1 (fontified nil)) . -1053) (988 . 1054) 926) nil (26246 40052 593896 648000) 0 nil])
([nil nil ((#("CONFIGURE" 0 9 (fontified t)) . 973) (undo-tree-id2892 . -8) (undo-tree-id2893 . -9)) nil (26246 40052 593892 460000) 0 nil])
([nil nil ((962 . 981) (#("TRANSITION_A" 0 12 (fontified nil)) . 962) (962 . 974) (#("TRANSITION_ACTIVATE" 0 19 (fontified nil)) . -962) (962 . 981) (#("TRANSITION_AC" 0 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . -962) (undo-tree-id2880 . -11) (undo-tree-id2881 . -11) (undo-tree-id2882 . -13) (undo-tree-id2883 . -13) (undo-tree-id2884 . -13) (undo-tree-id2885 . -13) (undo-tree-id2886 . -13) (undo-tree-id2887 . -13) (undo-tree-id2888 . -13) (undo-tree-id2889 . -13) (undo-tree-id2890 . -13) (undo-tree-id2891 . -13) 975 (973 . 975)) nil (26246 40052 593880 461000) 0 nil])
([nil nil ((851 . 853) (850 . 852)) nil (26246 40052 593827 272000) 0 nil])
([nil nil ((989 . 990) (#("2" 0 1 (fontified t)) . -989) (undo-tree-id2894 . -1) 990 (t 26246 40052 636830 619000)) nil (26246 40103 439603 78000) 0 nil])
([nil nil ((#("CONFIGURE" 0 9 (fontified t)) . 1041) (undo-tree-id2994 . -8) (undo-tree-id2995 . -9) (t 26246 40103 486947 195000)) nil (26246 40110 581143 117000) 0 nil])
([nil nil ((1030 . 1051) (#("TRANSITION_D" 0 12 (fontified nil)) . 1030) (1030 . 1042) (#("TRANSITION_DEACTIVATE" 0 21 (fontified nil)) . -1030) (1030 . 1051) (#("TRANSITION_D" 0 11 (fontified t) 11 12 (fontified t)) . -1030) (undo-tree-id2895 . -11) (undo-tree-id2896 . -11) (undo-tree-id2897 . -12) (undo-tree-id2898 . -12) (undo-tree-id2899 . -12) (undo-tree-id2900 . -12) (undo-tree-id2901 . -12) (undo-tree-id2902 . -12) (undo-tree-id2903 . -12) (undo-tree-id2904 . -12) (undo-tree-id2905 . -12) (undo-tree-id2906 . -12) (undo-tree-id2907 . -12) (undo-tree-id2908 . -12) (undo-tree-id2909 . -12) (undo-tree-id2910 . -12) (undo-tree-id2911 . -12) (undo-tree-id2912 . -12) (undo-tree-id2913 . -12) (undo-tree-id2914 . -12) (undo-tree-id2915 . -12) (undo-tree-id2916 . -12) (undo-tree-id2917 . -12) (undo-tree-id2918 . -12) (undo-tree-id2919 . -12) (undo-tree-id2920 . -12) (undo-tree-id2921 . -12) (undo-tree-id2922 . -12) (undo-tree-id2923 . -12) (undo-tree-id2924 . -12) (undo-tree-id2925 . -12) (undo-tree-id2926 . -12) (undo-tree-id2927 . -12) (undo-tree-id2928 . -12) (undo-tree-id2929 . -12) (undo-tree-id2930 . -12) (undo-tree-id2931 . -12) (undo-tree-id2932 . -12) (undo-tree-id2933 . -12) (undo-tree-id2934 . -12) (undo-tree-id2935 . -12) (undo-tree-id2936 . -12) (undo-tree-id2937 . -12) (undo-tree-id2938 . -12) (undo-tree-id2939 . -12) (undo-tree-id2940 . -12) (undo-tree-id2941 . -12) (undo-tree-id2942 . -12) (undo-tree-id2943 . -11) (undo-tree-id2944 . -12) (undo-tree-id2945 . -12) (undo-tree-id2946 . -12) (undo-tree-id2947 . -12) (undo-tree-id2948 . -12) (undo-tree-id2949 . -12) (undo-tree-id2950 . -12) (undo-tree-id2951 . -12) (undo-tree-id2952 . -12) (undo-tree-id2953 . -12) (undo-tree-id2954 . -12) (undo-tree-id2955 . -12) (undo-tree-id2956 . -12) (undo-tree-id2957 . -12) (undo-tree-id2958 . -12) (undo-tree-id2959 . -12) (undo-tree-id2960 . -12) (undo-tree-id2961 . -12) (undo-tree-id2962 . -12) (undo-tree-id2963 . -12) (undo-tree-id2964 . -12) (undo-tree-id2965 . -12) (undo-tree-id2966 . -12) (undo-tree-id2967 . -12) (undo-tree-id2968 . -12) (undo-tree-id2969 . -12) (undo-tree-id2970 . -12) (undo-tree-id2971 . -12) (undo-tree-id2972 . -12) (undo-tree-id2973 . -12) (undo-tree-id2974 . -12) (undo-tree-id2975 . -12) (undo-tree-id2976 . -12) (undo-tree-id2977 . -12) (undo-tree-id2978 . -12) (undo-tree-id2979 . -12) (undo-tree-id2980 . -12) (undo-tree-id2981 . -12) (undo-tree-id2982 . -12) (undo-tree-id2983 . -12) (undo-tree-id2984 . -12) (undo-tree-id2985 . -12) (undo-tree-id2986 . -12) (undo-tree-id2987 . -12) (undo-tree-id2988 . -12) (undo-tree-id2989 . -12) (undo-tree-id2990 . -12) (undo-tree-id2991 . -12) 1042 (1041 . 1042) (#("d" 0 1 (fontified t)) . -1041) (undo-tree-id2992 . -1) (#("e" 0 1 (fontified t)) . -1042) (undo-tree-id2993 . -1) 1043 (1041 . 1043)) nil (26246 40110 581118 176000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1123) (1057 . 1124) 1050 (t 26246 40110 631246 625000)) nil (26246 40210 744342 317000) 0 nil])
([nil nil ((#("TRANSITION" 0 10 (fontified t)) . 1096) (undo-tree-id3002 . -9)) nil (26246 40210 744338 687000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1096) (undo-tree-id3001 . 1)) nil (26246 40210 744334 557000) 0 nil])
([nil nil ((#("DEACTIVATE" 0 10 (fontified t)) . 1096) (undo-tree-id2999 . -9) (undo-tree-id3000 . 10)) nil (26246 40210 744329 839000) 0 nil])
([nil nil ((1096 . 1128) (#("T" 0 1 (fontified nil)) . 1096) (1096 . 1097) (#("TRANSITION_UNCONFIGURED_SHUTDOWN" 0 32 (fontified nil)) . -1096) (1096 . 1128) (#("TRANSITION_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -1096) (undo-tree-id2998 . -11) 1107 (1098 . 1107) (1096 . 1098)) nil (26246 40210 744319 702000) 0 nil])
([nil nil ((1133 . 1134) (1132 . 1133) (#("2" 0 1 (fontified t)) . -1132) (undo-tree-id2996 . -1) (#(";" 0 1 (fontified t)) . -1133) (undo-tree-id2997 . -1) 1134) nil (26246 40210 744304 555000) 0 nil])
([nil nil ((#("transition" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face)) . 827) (undo-tree-id3008 . -9) (t 26246 40210 795488 269000)) nil (26246 40229 372475 361000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 827)) nil (26246 40229 372471 13000) 0 nil])
([nil nil ((#("transition" 0 10 (fontified t)) . 854) (undo-tree-id3007 . -9)) nil (26246 40229 372468 309000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 854)) nil (26246 40229 372463 435000) 0 nil])
([nil nil ((#("transition" 0 10 (fontified t)) . 908) (undo-tree-id3006 . -9)) nil (26246 40229 372460 192000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 908) (undo-tree-id3005 . -1)) nil (26246 40229 376688 442000) 0 nil])
([nil nil ((#("transition" 0 10 (fontified t)) . 961) (undo-tree-id3010 . -9)) nil (26246 40232 839962 174000) 0 nil] [nil nil ((#("lookup" 0 6 (fontified t)) . 908) (undo-tree-id3003 . -5) (undo-tree-id3004 . -6)) ((908 . 914)) (26246 40229 372440 825000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 961)) nil (26246 40232 839954 809000) 0 nil])
nil
([nil nil ((#("transition" 0 10 (fontified t)) . 1016) (undo-tree-id3009 . -9)) nil (26246 40232 839949 746000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1016)) nil (26246 40232 839921 220000) 0 nil])
([nil nil ((#("transition" 0 10 (fontified t)) . 7282) (undo-tree-id3120 . -9) (undo-tree-id3121 . -10) (undo-tree-id3122 . -10) (t 26246 40232 904433 780000)) nil (26246 40302 717253 708000) 0 nil])
([nil nil ((7295 . 7305) (#("tr" 0 2 (fontified nil)) . 7295) (7295 . 7297) (#("transition" 0 10 (fontified nil)) . -7295) (7295 . 7305) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . -7295) (undo-tree-id3011 . -2) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -2) (undo-tree-id3017 . -2) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) (undo-tree-id3022 . -2) (undo-tree-id3023 . -2) (undo-tree-id3024 . -2) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -2) (undo-tree-id3042 . -2) (undo-tree-id3043 . -2) (undo-tree-id3044 . -2) (undo-tree-id3045 . -2) (undo-tree-id3046 . -2) (undo-tree-id3047 . -2) (undo-tree-id3048 . -2) (undo-tree-id3049 . -2) (undo-tree-id3050 . -2) (undo-tree-id3051 . -2) (undo-tree-id3052 . -2) (undo-tree-id3053 . -2) (undo-tree-id3054 . -2) (undo-tree-id3055 . -2) (undo-tree-id3056 . -2) (undo-tree-id3057 . -2) (undo-tree-id3058 . -2) (undo-tree-id3059 . -2) (undo-tree-id3060 . -2) (undo-tree-id3061 . -2) (undo-tree-id3062 . -2) (undo-tree-id3063 . -2) (undo-tree-id3064 . -2) (undo-tree-id3065 . -2) (undo-tree-id3066 . -2) (undo-tree-id3067 . -2) (undo-tree-id3068 . -2) (undo-tree-id3069 . -2) (undo-tree-id3070 . -2) (undo-tree-id3071 . -2) (undo-tree-id3072 . -2) (undo-tree-id3073 . -2) (undo-tree-id3074 . -2) (undo-tree-id3075 . -2) (undo-tree-id3076 . -2) (undo-tree-id3077 . -2) (undo-tree-id3078 . -2) (undo-tree-id3079 . -2) (undo-tree-id3080 . -2) (undo-tree-id3081 . -2) (undo-tree-id3082 . -2) (undo-tree-id3083 . -2) (undo-tree-id3084 . -2) (undo-tree-id3085 . -2) (undo-tree-id3086 . -2) (undo-tree-id3087 . -2) (undo-tree-id3088 . -2) (undo-tree-id3089 . -2) (undo-tree-id3090 . -2) (undo-tree-id3091 . -2) (undo-tree-id3092 . -2) (undo-tree-id3093 . -2) (undo-tree-id3094 . -2) (undo-tree-id3095 . -2) (undo-tree-id3096 . -2) (undo-tree-id3097 . -2) (undo-tree-id3098 . -2) (undo-tree-id3099 . -2) (undo-tree-id3100 . -2) (undo-tree-id3101 . -2) (undo-tree-id3102 . -2) (undo-tree-id3103 . -2) (undo-tree-id3104 . -2) (undo-tree-id3105 . -2) (undo-tree-id3106 . -2) (undo-tree-id3107 . -2) (undo-tree-id3108 . -2) (undo-tree-id3109 . -2) (undo-tree-id3110 . -2) (undo-tree-id3111 . -2) (undo-tree-id3112 . -2) (undo-tree-id3113 . -2) (undo-tree-id3114 . -2) (undo-tree-id3115 . -2) (undo-tree-id3116 . -2) (undo-tree-id3117 . -2) 7297 (7295 . 7297) (7294 . 7296) (7282 . 7294) (#("look" 0 4 (fontified nil)) . 7282) (7282 . 7286) (#("lookup_table" 0 12 (fontified nil)) . -7282) (7282 . 7294) (#("look" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7282) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) 7286 (7282 . 7286)) nil (26246 40302 717211 167000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7244) (undo-tree-id3167 . -4) (undo-tree-id3168 . -4) 7248 (7244 . 7248) (#("    " 0 4 (fontified nil)) . 7243) (undo-tree-id3169 . -4) (7242 . 7248) (t 26246 40302 787439 502000)) nil (26246 40341 311174 390000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7245) (undo-tree-id3129 . -4) (undo-tree-id3130 . -4) (undo-tree-id3131 . -4) (undo-tree-id3132 . -4) (undo-tree-id3133 . -4) (undo-tree-id3134 . -4) (undo-tree-id3135 . -4) (undo-tree-id3136 . -4) (undo-tree-id3137 . -4) (undo-tree-id3138 . -4) (undo-tree-id3139 . -4) (undo-tree-id3140 . -4) (undo-tree-id3141 . -4) (undo-tree-id3142 . -4) (undo-tree-id3143 . -4) (undo-tree-id3144 . -4) (undo-tree-id3145 . -4) (undo-tree-id3146 . -4) (undo-tree-id3147 . -4) (undo-tree-id3148 . -4) (undo-tree-id3149 . -4) (undo-tree-id3150 . -4) (undo-tree-id3151 . -4) (undo-tree-id3152 . -4) (undo-tree-id3153 . -4) (undo-tree-id3154 . -4) (undo-tree-id3155 . -4) (undo-tree-id3156 . -4) (undo-tree-id3157 . -4) (undo-tree-id3158 . -4) (undo-tree-id3159 . -4) (undo-tree-id3160 . -4) (undo-tree-id3161 . -4) (undo-tree-id3162 . -4) (undo-tree-id3163 . -4) (undo-tree-id3164 . -4) (undo-tree-id3165 . -4) (undo-tree-id3166 . -4) 7249 (7244 . 7249) 7244) nil (26246 40341 311161 390000) 0 nil])
([nil nil ((7264 . 7266) (7263 . 7264) (7262 . 7263) (7252 . 7262) (#("tr" 0 2 (fontified nil)) . 7252) (7252 . 7254) (#("transition" 0 10 (fontified nil)) . -7252) (7252 . 7262) (#("tr" 0 1 (fontified t) 1 2 (fontified t)) . -7252) (undo-tree-id3128 . -2) 7254 (7252 . 7254) (7251 . 7253) (7248 . 7251) (7244 . 7248)) nil (26246 40341 311091 470000) 0 nil])
([nil nil ((7279 . 7288) (#("r" 0 1 (fontified t)) . -7279) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (#("u" 0 1 (fontified t)) . -7280) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (#("n" 0 1 (fontified t)) . -7281) (undo-tree-id3127 . -1) 7282 (7276 . 7282) (7270 . 7276) (7269 . 7275) (7268 . 7270) (7267 . 7268)) nil (26246 40341 311067 751000) 0 nil])
([nil nil ((7288 . 7289)) nil (26246 40341 310982 424000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 813) (t 26246 40341 361107 983000)) nil (26246 40380 193835 626000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face)) . 813) (undo-tree-id3186 . -2)) nil (26246 40380 193832 799000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 813) (undo-tree-id3185 . -1)) nil (26246 40380 193828 386000) 0 nil])
([nil nil ((812 . 814) (#(" " 0 1 (fontified t)) . -812) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) 813) nil (26246 40380 193817 829000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 839) (undo-tree-id3320 . -1) (t 26246 40380 242795 357000)) nil (26246 40391 30832 582000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 839) (undo-tree-id3319 . -1)) nil (26246 40391 30827 873000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 839) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1)) nil (26246 40391 30823 571000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 839) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1)) nil (26246 40391 30816 247000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 838) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1)) nil (26246 40391 30793 768000) 0 nil])
([nil nil ((812 . 814) (816 . 817) (#("  " 0 2 (fontified nil)) . 812) (817 . 818) (814 . 817) (t 26246 40391 83266 695000)) nil (26246 40451 655489 397000) 0 nil])
([nil nil ((862 . 865) (861 . 863) (t 26246 40451 709908 896000)) nil (26246 40851 755327 841000) 0 nil])
([nil nil ((866 . 867)) nil (26246 40851 755324 560000) 0 nil])
([nil nil ((1042 . 1043) (1041 . 1042) (1040 . 1041) (1039 . 1041) (982 . 983) (981 . 982) (980 . 981) (979 . 981) (924 . 925) (922 . 924) (921 . 923)) nil (26246 40851 755320 101000) 0 nil])
([nil nil ((1046 . 1047) (985 . 986) (926 . 927)) nil (26246 40851 755304 209000) 0 nil])
([nil nil ((nil rear-nonsticky nil 907 . 908) (#("
" 0 1 (fontified nil)) . -965) (905 . 966) 848 (t 26246 40851 807498 590000)) nil (26246 40884 367668 291000) 0 nil])
([nil nil ((908 . 910)) nil (26246 40884 367664 598000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 866) (undo-tree-id3401 . 1)) nil (26246 40884 367661 588000) 0 nil])
([nil nil ((#("Transition" 0 10 (fontified t face font-lock-constant-face)) . 866) (undo-tree-id3398 . 10) (undo-tree-id3399 . -9) (undo-tree-id3400 . -10)) nil (26246 40884 371598 998000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 866) (undo-tree-id3410 . 2) (undo-tree-id3411 . -1) (undo-tree-id3412 . -2) (undo-tree-id3413 . -2) (undo-tree-id3414 . -2) (undo-tree-id3415 . -2) (undo-tree-id3416 . -2) (undo-tree-id3417 . -2) (undo-tree-id3418 . -2) (undo-tree-id3419 . -2) (undo-tree-id3420 . -2) (undo-tree-id3421 . -2) (undo-tree-id3422 . -2) (undo-tree-id3423 . -2) (undo-tree-id3424 . -2) (undo-tree-id3425 . -2) (undo-tree-id3426 . -2) (undo-tree-id3427 . -2) (undo-tree-id3428 . -2) (undo-tree-id3429 . -2) (undo-tree-id3430 . -2) (undo-tree-id3431 . -2) (undo-tree-id3432 . -2) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -2) (undo-tree-id3437 . -2) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (undo-tree-id3440 . -2) (undo-tree-id3441 . -2) (undo-tree-id3442 . -2) (undo-tree-id3443 . -2) (undo-tree-id3444 . -2) (undo-tree-id3445 . -2) (undo-tree-id3446 . -2) (undo-tree-id3447 . -2) (undo-tree-id3448 . -2) (undo-tree-id3449 . -2) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) (undo-tree-id3472 . -2) (undo-tree-id3473 . -2) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2)) nil (26246 40889 747265 537000) 0 nil] [nil nil ((#("  lookup_table[(int)::TRANSITION_CONFIGURE] = 2;
" 0 2 (fontified t) 2 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face) 19 20 (fontified t face (rainbow-delimiters-depth-3-face)) 20 22 (fontified t) 22 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t)) . 846) (undo-tree-id3321 . -19) (undo-tree-id3322 . -19) (undo-tree-id3323 . 29) (undo-tree-id3324 . -19) (undo-tree-id3325 . -19) (undo-tree-id3326 . -48) (undo-tree-id3327 . -22) (undo-tree-id3328 . -22) (undo-tree-id3329 . -20) (undo-tree-id3330 . -20) (undo-tree-id3331 . -20) (undo-tree-id3332 . -20) (undo-tree-id3333 . -20) (undo-tree-id3334 . -20) (undo-tree-id3335 . -20) (undo-tree-id3336 . -20) (undo-tree-id3337 . -20) (undo-tree-id3338 . -20) (undo-tree-id3339 . -20) (undo-tree-id3340 . -20) (undo-tree-id3341 . -20) (undo-tree-id3342 . -20) (undo-tree-id3343 . -20) (undo-tree-id3344 . -20) (undo-tree-id3345 . -20) (undo-tree-id3346 . -20) (undo-tree-id3347 . -20) (undo-tree-id3348 . -20) (undo-tree-id3349 . -20) (undo-tree-id3350 . -20) (undo-tree-id3351 . -20) (undo-tree-id3352 . -20) (undo-tree-id3353 . -20) (undo-tree-id3354 . -20) (undo-tree-id3355 . -20) (undo-tree-id3356 . -20) (undo-tree-id3357 . -20) (undo-tree-id3358 . -20) (undo-tree-id3359 . -20) (undo-tree-id3360 . -20) (undo-tree-id3361 . -20) (undo-tree-id3362 . -20) (undo-tree-id3363 . -20) (undo-tree-id3364 . -20) (undo-tree-id3365 . -22) (undo-tree-id3366 . -22) (undo-tree-id3367 . -22) (undo-tree-id3368 . -22) (undo-tree-id3369 . -22) (undo-tree-id3370 . -22) (undo-tree-id3371 . -22) (undo-tree-id3372 . -22) (undo-tree-id3373 . -22) (undo-tree-id3374 . -22) (undo-tree-id3375 . -22) (undo-tree-id3376 . -22) (undo-tree-id3377 . -22) (undo-tree-id3378 . -22) (undo-tree-id3379 . -22) (undo-tree-id3380 . -22) (undo-tree-id3381 . -22) (undo-tree-id3382 . -22) (undo-tree-id3383 . -22) (undo-tree-id3384 . -22) (undo-tree-id3385 . -42) (undo-tree-id3386 . -2) (undo-tree-id3387 . -14) (undo-tree-id3388 . -22) (undo-tree-id3389 . -22) (undo-tree-id3390 . -22) (undo-tree-id3391 . -22) (undo-tree-id3392 . -22) (undo-tree-id3393 . -22) (undo-tree-id3394 . -22) (undo-tree-id3395 . -22) (undo-tree-id3396 . -22) (undo-tree-id3397 . -49) 868) ((846 . 895)) (26246 40884 367635 245000) 0 nil])
([nil nil ((#("TRANSITION" 0 10 (fontified t)) . 866) (undo-tree-id3407 . 10) (undo-tree-id3408 . -9) (undo-tree-id3409 . -10)) nil (26246 40889 747146 544000) 0 nil])
nil
([nil nil ((#("_" 0 1 (fontified t)) . 866) (undo-tree-id3405 . 1) (undo-tree-id3406 . -1)) nil (26246 40889 747139 259000) 0 nil])
([nil nil ((#("CONFIGURE" 0 9 (fontified t)) . 866) (undo-tree-id3402 . 9) (undo-tree-id3403 . -8) (undo-tree-id3404 . -9)) nil (26246 40889 747131 732000) 0 nil])
([nil nil ((866 . 868)) nil (26246 40889 747107 693000) 0 nil])
([nil nil ((868 . 869)) nil (26246 40889 747097 762000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face)) . 814) (undo-tree-id3484 . -2) (t 26246 40889 801176 166000)) nil (26246 40917 463499 354000) 0 nil])
([nil nil ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 814) (undo-tree-id3483 . -1)) nil (26246 40917 463494 297000) 0 nil])
([nil nil ((#("uint8" 0 5 (fontified t face font-lock-type-face)) . 814) (undo-tree-id3482 . -4)) nil (26246 40917 463490 105000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-type-face)) . 814) (undo-tree-id3481 . 1)) nil (26246 40917 463485 689000) 0 nil])
([nil nil ((#("t " 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face) 1 2 (fontified t)) . 814) (undo-tree-id3477 . -1) (undo-tree-id3478 . 2) (undo-tree-id3479 . -1) (undo-tree-id3480 . -2)) nil (26246 40917 463479 295000) 0 nil])
([nil nil ((814 . 817)) nil (26246 40917 463398 340000) 0 nil])
([nil nil ((814 . 815)) nil (26246 40917 463387 698000) 0 nil])
([nil nil ((apply -15 839 1139 undo--wrap-and-run-primitive-undo 839 1139 (("  " . 839) (1065 . 1068) (1001 . 1004) (939 . 942) (874 . 877) (839 . 844) 1124)) (t 26246 40917 546401 632000)) nil (26246 40923 428698 900000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -839) (undo-tree-id3486 . -1) (#("o" 0 1 (fontified t)) . -840) (undo-tree-id3487 . -1) (#("o" 0 1 (fontified t)) . -841) (undo-tree-id3488 . -1) (#("k" 0 1 (fontified t)) . -842) (undo-tree-id3489 . -1) (#("k" 0 1 (fontified t)) . -843) (undo-tree-id3490 . -1) 844 (839 . 844) (837 . 839) (#("  " 0 2 (fontified nil)) . 836) (undo-tree-id3491 . -2) (835 . 839) (t 26246 40923 470663 339000)) nil (26246 40944 466970 427000) 0 nil])
([nil nil ((nil rear-nonsticky nil 850 . 851) (nil fontified nil 839 . 851) (839 . 851) 838) nil (26246 40944 466953 590000) 0 nil])
([nil nil ((852 . 853) (851 . 853) (#("9" 0 1 (fontified t)) . -851) (undo-tree-id3485 . -1) 852 (851 . 852)) nil (26246 40944 466947 12000) 0 nil])
([nil nil ((859 . 860) (857 . 859) (854 . 857)) nil (26246 40944 466920 270000) 0 nil])
([nil nil ((855 . 857) (#("-" 0 1 (fontified t)) . -855) (undo-tree-id3492 . -1) (#(" " 0 1 (fontified t)) . -856) (undo-tree-id3493 . -1) 857 (t 26246 40944 543594 351000)) nil (26246 40947 490011 469000) 0 nil])
([nil nil ((#("  int lookup_table[10];

  lookup_table[5] = 5 ;

" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 27 (fontified t) 27 38 (fontified t) 38 39 (fontified t rear-nonsticky t) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-2-face)) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t)) . 812) (undo-tree-id3495 . -49) (undo-tree-id3496 . -49) (undo-tree-id3497 . -49) (undo-tree-id3498 . 5) (undo-tree-id3499 . -18) (undo-tree-id3500 . -18) (undo-tree-id3501 . -17) (undo-tree-id3502 . -17) (undo-tree-id3503 . 2) (undo-tree-id3504 . -49) (t 26246 40947 567727 970000)) nil (26246 40955 286797 450000) 0 nil])
([nil nil ((741 . 743)) nil (26246 40955 286774 774000) 0 nil])
([nil nil ((nil rear-nonsticky nil 792 . 793) (nil fontified nil 743 . 793) (743 . 793)) nil (26246 40955 286772 256000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t c-is-sws t c-in-sws t)) . 743)) nil (26246 40955 286766 772000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 766) (undo-tree-id3494 . -2)) nil (26246 40955 286757 375000) 0 nil])
([nil nil ((#("
lookup_table[5] = 5 ;


" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 23 (fontified t) 23 24 (rear-nonsticky t fontified t) 24 25 (fontified t)) . 765) (undo-tree-id3505 . -24) (undo-tree-id3506 . -24) (undo-tree-id3507 . -24) (undo-tree-id3508 . 1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -13) (undo-tree-id3511 . -12) (undo-tree-id3512 . -12) (undo-tree-id3513 . -12) (undo-tree-id3514 . -12) (undo-tree-id3515 . -12) (undo-tree-id3516 . -12) (undo-tree-id3517 . -12) (undo-tree-id3518 . -12) (undo-tree-id3519 . -12) (undo-tree-id3520 . -12) (undo-tree-id3521 . -12) (undo-tree-id3522 . -12) (undo-tree-id3523 . -12) (undo-tree-id3524 . -12) (undo-tree-id3525 . -12) (undo-tree-id3526 . -12) (undo-tree-id3527 . -12) (undo-tree-id3528 . -12) (undo-tree-id3529 . -12) (undo-tree-id3530 . -12) (undo-tree-id3531 . -12) (undo-tree-id3532 . -12) (undo-tree-id3533 . -12) (undo-tree-id3534 . -12) (undo-tree-id3535 . -24) (undo-tree-id3536 . -24) (undo-tree-id3537 . -24) (undo-tree-id3538 . -24) (undo-tree-id3539 . -24) (undo-tree-id3540 . -24) (undo-tree-id3541 . -24) (undo-tree-id3542 . -24) (undo-tree-id3543 . -24) (undo-tree-id3544 . -24) (undo-tree-id3545 . -24) (undo-tree-id3546 . -24) (undo-tree-id3547 . -24) (undo-tree-id3548 . -24) (undo-tree-id3549 . -24) (undo-tree-id3550 . -25) (undo-tree-id3551 . -24) (undo-tree-id3552 . -24) (undo-tree-id3553 . -24) (undo-tree-id3554 . -24) (undo-tree-id3555 . -24) (undo-tree-id3556 . -24) (undo-tree-id3557 . -24) (undo-tree-id3558 . -24) (undo-tree-id3559 . -24) (undo-tree-id3560 . -24) (undo-tree-id3561 . -24) (undo-tree-id3562 . -24) (undo-tree-id3563 . -24) (undo-tree-id3564 . -24) (undo-tree-id3565 . -24) (undo-tree-id3566 . -24) (undo-tree-id3567 . -24) (undo-tree-id3568 . -24) (undo-tree-id3569 . -23) (undo-tree-id3570 . -23) (undo-tree-id3571 . -23) (undo-tree-id3572 . -23) (undo-tree-id3573 . -23) (undo-tree-id3574 . -23) (undo-tree-id3575 . -23) (undo-tree-id3576 . -23) (undo-tree-id3577 . -23) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -25) (t 26246 40955 340071 402000)) nil (26246 41008 713793 129000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1495) (undo-tree-id3606 . -4) 1499 (1495 . 1499) (#("    " 0 4 (fontified nil)) . 1494) (undo-tree-id3607 . -4) (1493 . 1499) (t 26246 41008 766432 627000)) nil (26246 41021 848953 929000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1797 . 1798) (nil fontified nil 1797 . 1798) (nil fontified nil 1498 . 1797) (nil fontified nil 1497 . 1498) (nil fontified nil 1495 . 1497) (1495 . 1798)) nil (26246 41021 848944 399000) 0 nil])
([nil nil ((apply 15 1495 1780 undo--wrap-and-run-primitive-undo 1495 1780 ((#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1709) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1648) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1589) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1527) (#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -1497) 1495))) nil (26246 41021 848935 700000) 0 nil])
([nil nil ((#("  lookup_table[(int) 5 ] = 2;
" 0 2 (fontified t) 2 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-4-face)) 15 16 (fontified t face (rainbow-delimiters-depth-5-face)) 16 19 (fontified t face font-lock-type-face) 19 20 (fontified t face (rainbow-delimiters-depth-5-face)) 20 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 30 (fontified t)) . 1495) (undo-tree-id3590 . -29) (undo-tree-id3591 . -30) (undo-tree-id3592 . -30) (undo-tree-id3593 . -30) (undo-tree-id3594 . -30) (undo-tree-id3595 . -30) (undo-tree-id3596 . -30) (undo-tree-id3597 . -30) (undo-tree-id3598 . -30) (undo-tree-id3599 . -30) (undo-tree-id3600 . -30) (undo-tree-id3601 . -30) (undo-tree-id3602 . -30) (undo-tree-id3603 . -30) (undo-tree-id3604 . -30) (undo-tree-id3605 . -30)) nil (26246 41021 848925 580000) 0 nil])
([nil nil ((#("//" 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 1 2 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 1497) (undo-tree-id3588 . -1) (undo-tree-id3589 . -2)) nil (26246 41021 848443 989000) 0 nil])
([nil nil ((#("int lookup_table[10];
" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face) 3 4 (fontified t) 4 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 22 (fontified t)) . 743) (undo-tree-id3646 . -21) (undo-tree-id3647 . -2) 745 (t 26246 41021 895012 987000)) nil (26246 41038 287889 234000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1192) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -2) (undo-tree-id3611 . -2) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -2) (undo-tree-id3620 . -2) (undo-tree-id3621 . -2) (undo-tree-id3622 . -2) (undo-tree-id3623 . -2) (undo-tree-id3624 . -2) (undo-tree-id3625 . -2) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) (undo-tree-id3628 . -2) (undo-tree-id3629 . -2) (undo-tree-id3630 . -2) (undo-tree-id3631 . -2) (undo-tree-id3632 . -2) (undo-tree-id3633 . -2) (undo-tree-id3634 . -2) (undo-tree-id3635 . -2) (undo-tree-id3636 . -2) (undo-tree-id3637 . -2) (undo-tree-id3638 . -2) (undo-tree-id3639 . -2) (undo-tree-id3640 . -2) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) (undo-tree-id3644 . -2) (undo-tree-id3645 . -2) 1194 (1191 . 1194)) nil (26246 41038 287877 980000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1192 . 1193) (#("
" 0 1 (fontified nil)) . -1214) (1192 . 1215)) nil (26246 41038 287793 715000) 0 nil])
([nil nil ((1193 . 1195)) nil (26246 41038 287783 83000) 0 nil])
([nil nil ((#("  
  // lookup_table[(int) 5 ] = 2;
  // //lookup_table[(int) Transition::TRANSITION_CONFIGURE] = 2;
  // lookup_table[(int) Transition::TRANSITION_ACTIVATE] = 3;
  // lookup_table[(int) Transition::TRANSITION_DEACTIVATE] = 2;
  // lookup_table[(int) Transition::TRANSITION_UNCONFIGURED_SHUTDOWN] = 4;
 " 0 2 (fontified t) 2 3 (fontified t) 3 5 (c-in-sws t c-is-sws t fontified t) 5 6 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 6 8 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 8 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 25 (c-in-sws t fontified t face font-lock-comment-face) 25 26 (c-in-sws t fontified t face font-lock-comment-face) 26 28 (c-in-sws t fontified t face font-lock-comment-face) 28 29 (c-in-sws t fontified t face font-lock-comment-face) 29 30 (c-in-sws t fontified t face font-lock-comment-face) 30 31 (c-in-sws t fontified t face font-lock-comment-face) 31 32 (c-in-sws t fontified t face font-lock-comment-face) 32 33 (c-in-sws t fontified t face font-lock-comment-face) 33 34 (c-in-sws t fontified t face font-lock-comment-face) 34 35 (c-in-sws t fontified t face font-lock-comment-face) 35 36 (c-in-sws t fontified t face font-lock-comment-face) 36 37 (c-in-sws t fontified t) 37 38 (rear-nonsticky t c-in-sws t fontified t) 38 39 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 39 41 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 41 42 (c-in-sws t fontified t face font-lock-comment-face) 42 43 (c-in-sws t fontified t face font-lock-comment-face) 43 54 (c-in-sws t fontified t face font-lock-comment-face) 54 55 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face) 55 56 (c-in-sws t fontified t face font-lock-comment-face) 56 57 (c-in-sws t fontified t face font-lock-comment-face) 57 58 (c-in-sws t fontified t face font-lock-comment-face) 58 59 (c-in-sws t fontified t face font-lock-comment-face) 59 60 (c-in-sws t fontified t face font-lock-comment-face) 60 61 (c-in-sws t fontified t face font-lock-comment-face) 61 62 (c-in-sws t fontified t face font-lock-comment-face) 62 72 (c-in-sws t fontified t face font-lock-comment-face) 72 74 (c-in-sws t fontified t face font-lock-comment-face) 74 94 (c-in-sws t fontified t face font-lock-comment-face) 94 95 (c-in-sws t fontified t face font-lock-comment-face) 95 96 (c-in-sws t fontified t face font-lock-comment-face) 96 97 (c-in-sws t fontified t face font-lock-comment-face) 97 98 (c-in-sws t fontified t face font-lock-comment-face) 98 99 (c-in-sws t fontified t face font-lock-comment-face) 99 100 (c-in-sws t fontified t face font-lock-comment-face) 100 101 (c-in-sws t fontified t face font-lock-comment-face) 101 102 (c-in-sws t fontified t) 102 103 (rear-nonsticky t c-in-sws t fontified t) 103 106 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 106 107 (c-in-sws t fontified t face font-lock-comment-face) 107 112 (c-in-sws t fontified t face font-lock-comment-face) 112 117 (c-in-sws t fontified t face font-lock-comment-face) 117 118 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face) 118 119 (c-in-sws t fontified t face font-lock-comment-face) 119 120 (c-in-sws t fontified t face font-lock-comment-face) 120 121 (c-in-sws t fontified t face font-lock-comment-face) 121 122 (c-in-sws t fontified t face font-lock-comment-face) 122 123 (c-in-sws t fontified t face font-lock-comment-face) 123 124 (c-in-sws t fontified t face font-lock-comment-face) 124 125 (c-in-sws t fontified t face font-lock-comment-face) 125 135 (c-in-sws t fontified t face font-lock-comment-face) 135 137 (c-in-sws t fontified t face font-lock-comment-face) 137 156 (c-in-sws t fontified t face font-lock-comment-face) 156 157 (c-in-sws t fontified t face font-lock-comment-face) 157 158 (c-in-sws t fontified t face font-lock-comment-face) 158 159 (c-in-sws t fontified t face font-lock-comment-face) 159 160 (c-in-sws t fontified t face font-lock-comment-face) 160 161 (c-in-sws t fontified t face font-lock-comment-face) 161 162 (c-in-sws t fontified t face font-lock-comment-face) 162 163 (c-in-sws t fontified t face font-lock-comment-face) 163 164 (c-in-sws t fontified t) 164 165 (rear-nonsticky t c-in-sws t fontified t) 165 168 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 168 179 (c-in-sws t fontified t face font-lock-comment-face) 179 180 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face) 180 181 (c-in-sws t fontified t face font-lock-comment-face) 181 182 (c-in-sws t fontified t face font-lock-comment-face) 182 185 (c-in-sws t fontified t face font-lock-comment-face) 185 186 (c-in-sws t fontified t face font-lock-comment-face) 186 187 (c-in-sws t fontified t face font-lock-comment-face) 187 197 (c-in-sws t fontified t face font-lock-comment-face) 197 199 (c-in-sws t fontified t face font-lock-comment-face) 199 220 (c-in-sws t fontified t face font-lock-comment-face) 220 221 (c-in-sws t fontified t face font-lock-comment-face) 221 222 (c-in-sws t fontified t face font-lock-comment-face) 222 223 (c-in-sws t fontified t face font-lock-comment-face) 223 224 (c-in-sws t fontified t face font-lock-comment-face) 224 225 (c-in-sws t fontified t face font-lock-comment-face) 225 226 (c-in-sws t fontified t face font-lock-comment-face) 226 227 (c-in-sws t fontified t face font-lock-comment-face) 227 228 (c-in-sws t c-is-sws t fontified t) 228 229 (rear-nonsticky t c-in-sws t c-is-sws t fontified t) 229 230 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 230 232 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 232 243 (c-in-sws t fontified t face font-lock-comment-face) 243 244 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-face) 244 245 (c-in-sws t fontified t face font-lock-comment-face) 245 246 (c-in-sws t fontified t face font-lock-comment-face) 246 249 (c-in-sws t fontified t face font-lock-comment-face) 249 250 (c-in-sws t fontified t face font-lock-comment-face) 250 251 (c-in-sws t fontified t face font-lock-comment-face) 251 261 (c-in-sws t fontified t face font-lock-comment-face) 261 263 (c-in-sws t fontified t face font-lock-comment-face) 263 295 (c-in-sws t fontified t face font-lock-comment-face) 295 296 (c-in-sws t fontified t face font-lock-comment-face) 296 297 (c-in-sws t fontified t face font-lock-comment-face) 297 298 (c-in-sws t fontified t face font-lock-comment-face) 298 299 (c-in-sws t fontified t face font-lock-comment-face) 299 300 (c-in-sws t fontified t face font-lock-comment-face) 300 301 (c-in-sws t fontified t face font-lock-comment-face) 301 302 (c-in-sws t fontified t face font-lock-comment-face) 302 303 (c-in-sws t fontified t)) . 810) (undo-tree-id3648 . -302) (undo-tree-id3649 . -302) (undo-tree-id3650 . -302) (undo-tree-id3651 . -26) (undo-tree-id3652 . -3) (undo-tree-id3653 . -3) (undo-tree-id3654 . -3) (undo-tree-id3655 . -286) (undo-tree-id3656 . -286) (undo-tree-id3657 . -286) (undo-tree-id3658 . -3) (undo-tree-id3659 . 300) (undo-tree-id3660 . -3) (undo-tree-id3661 . -302) (undo-tree-id3662 . -36) (undo-tree-id3663 . -36) (undo-tree-id3664 . -36) (undo-tree-id3665 . -36) (undo-tree-id3666 . -36) (undo-tree-id3667 . -36) (undo-tree-id3668 . -36) (undo-tree-id3669 . -101) (undo-tree-id3670 . -101) (undo-tree-id3671 . -101) (undo-tree-id3672 . -101) (undo-tree-id3673 . -101) (undo-tree-id3674 . -101) (undo-tree-id3675 . -101) (undo-tree-id3676 . -163) (undo-tree-id3677 . -163) (undo-tree-id3678 . -163) (undo-tree-id3679 . -163) (undo-tree-id3680 . -163) (undo-tree-id3681 . -163) (undo-tree-id3682 . -163) (undo-tree-id3683 . -227) (undo-tree-id3684 . -227) (undo-tree-id3685 . -227) (undo-tree-id3686 . -227) (undo-tree-id3687 . -227) (undo-tree-id3688 . -227) (undo-tree-id3689 . -227) (undo-tree-id3690 . -302) (undo-tree-id3691 . -302) (undo-tree-id3692 . -302) (undo-tree-id3693 . -302) (undo-tree-id3694 . -302) (undo-tree-id3695 . -302) (undo-tree-id3696 . -302) (undo-tree-id3697 . -302) (undo-tree-id3698 . -302) (undo-tree-id3699 . -302) (undo-tree-id3700 . -302) (undo-tree-id3701 . -302) (undo-tree-id3702 . -302) (undo-tree-id3703 . -302) (undo-tree-id3704 . -303) (undo-tree-id3705 . -302) (undo-tree-id3706 . -302) (undo-tree-id3707 . -302) (undo-tree-id3708 . -302) (undo-tree-id3709 . -302) (undo-tree-id3710 . -302) (undo-tree-id3711 . -302) (undo-tree-id3712 . -302) (undo-tree-id3713 . -302) (undo-tree-id3714 . -302) (undo-tree-id3715 . -302) (undo-tree-id3716 . -302) (undo-tree-id3717 . -227) (undo-tree-id3718 . -227) (undo-tree-id3719 . -227) (undo-tree-id3720 . -227) (undo-tree-id3721 . -227) (undo-tree-id3722 . -227) (undo-tree-id3723 . -227) (undo-tree-id3724 . -227) (undo-tree-id3725 . -227) (undo-tree-id3726 . -227) (undo-tree-id3727 . -227) (undo-tree-id3728 . -163) (undo-tree-id3729 . -163) (undo-tree-id3730 . -163) (undo-tree-id3731 . -163) (undo-tree-id3732 . -163) (undo-tree-id3733 . -163) (undo-tree-id3734 . -163) (undo-tree-id3735 . -163) (undo-tree-id3736 . -163) (undo-tree-id3737 . -163) (undo-tree-id3738 . -163) (undo-tree-id3739 . -101) (undo-tree-id3740 . -101) (undo-tree-id3741 . -101) (undo-tree-id3742 . -101) (undo-tree-id3743 . -101) (undo-tree-id3744 . -101) (undo-tree-id3745 . -101) (undo-tree-id3746 . -101) (undo-tree-id3747 . -101) (undo-tree-id3748 . -101) (undo-tree-id3749 . -101) (undo-tree-id3750 . -36) (undo-tree-id3751 . -36) (undo-tree-id3752 . -36) (undo-tree-id3753 . -36) (undo-tree-id3754 . -36) (undo-tree-id3755 . -36) (undo-tree-id3756 . -36) (undo-tree-id3757 . -36) (undo-tree-id3758 . -36) (undo-tree-id3759 . -36) (undo-tree-id3760 . -36) (undo-tree-id3761 . -3) (undo-tree-id3762 . -3) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) (undo-tree-id3765 . -3) (undo-tree-id3766 . -3) (undo-tree-id3767 . -3) (undo-tree-id3768 . -3) (undo-tree-id3769 . -3) (undo-tree-id3770 . -3) (undo-tree-id3771 . -3) (undo-tree-id3772 . -303) (t 26246 41038 345210 242000)) nil (26246 41070 203942 748000) 0 nil])
([nil nil ((1195 . 1199) (#("  " 0 1 (c-in-sws t c-is-sws t fontified t) 1 2 (fontified t)) . 1195) (t 26246 41070 256812 178000)) nil (26246 41084 281587 394000) 0 nil])
([nil nil ((1257 . 1261) (#("  " 0 2 (c-is-sws t c-in-sws t fontified t)) . 1257) 1261) nil (26246 41084 281583 463000) 0 nil])
([nil nil ((1318 . 1322) (#("  " 0 2 (fontified t)) . 1318) 1324) nil (26246 41084 281580 47000) 0 nil])
([nil nil ((1381 . 1385) (#("  " 0 2 (fontified t)) . 1381) 1389) nil (26246 41084 281576 989000) 0 nil])
([nil nil ((1455 . 1459) (#(" " 0 1 (fontified nil)) . -1455) (undo-tree-id3875 . -1) (#(" " 0 1 (fontified t)) . 1456)) nil (26246 41084 281572 933000) 0 nil])
([nil nil ((#("      // get_state_topics.push_back(lifecycle_list[i] + \"/get_state\");
" 0 6 (c-in-sws t c-is-sws t fontified t) 6 7 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 33 (c-in-sws t fontified t face font-lock-comment-face) 33 35 (c-in-sws t fontified t face font-lock-comment-face) 35 36 (c-in-sws t fontified t face font-lock-comment-face) 36 50 (c-in-sws t fontified t face font-lock-comment-face) 50 51 (c-in-sws t fontified t face font-lock-comment-face) 51 52 (c-in-sws t fontified t face font-lock-comment-face) 52 53 (c-in-sws t fontified t face font-lock-comment-face) 53 56 (c-in-sws t fontified t face font-lock-comment-face) 56 68 (c-in-sws t fontified t face font-lock-comment-face) 68 69 (c-in-sws t fontified t face font-lock-comment-face) 69 70 (c-in-sws t fontified t face font-lock-comment-face) 70 71 (c-in-sws t fontified t face font-lock-comment-face)) . 1791) (undo-tree-id3873 . -70) (undo-tree-id3874 . -3) 1794) nil (26246 41084 281567 269000) 0 nil])
([nil nil ((#("      // change_state_topics.push_back(lifecycle_list[i] + \"/change_state\");
" 0 6 (c-in-sws t fontified t c-is-sws t) 6 7 (c-in-sws t fontified t c-is-sws t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 38 (c-in-sws t fontified t face font-lock-comment-face) 38 39 (c-in-sws t fontified t face font-lock-comment-face) 39 53 (c-in-sws t fontified t face font-lock-comment-face) 53 54 (c-in-sws t fontified t face font-lock-comment-face) 54 55 (c-in-sws t fontified t face font-lock-comment-face) 55 56 (c-in-sws t fontified t face font-lock-comment-face) 56 59 (c-in-sws t fontified t face font-lock-comment-face) 59 74 (c-in-sws t fontified t face font-lock-comment-face) 74 75 (c-in-sws t fontified t face font-lock-comment-face) 75 76 (c-in-sws t fontified t face font-lock-comment-face) 76 77 (c-in-sws t fontified t face font-lock-comment-face)) . 1791) (undo-tree-id3871 . -76) (undo-tree-id3872 . -3) 1794) nil (26246 41084 281560 427000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1791)) nil (26246 41084 281554 342000) 0 nil])
([nil nil ((#("      // RCLCPP_INFO(this->get_logger(), \"%s, %i\", get_state_topics[i].c_str(),
" 0 1 (c-in-sws t fontified t c-is-sws t) 1 6 (c-in-sws t fontified t c-is-sws t) 6 7 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 16 (c-in-sws t fontified t face font-lock-comment-face) 16 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 25 (c-in-sws t fontified t face font-lock-comment-face) 25 37 (c-in-sws t fontified t face font-lock-comment-face) 37 38 (c-in-sws t fontified t face font-lock-comment-face) 38 39 (c-in-sws t fontified t face font-lock-comment-face) 39 40 (c-in-sws t fontified t face font-lock-comment-face) 40 41 (c-in-sws t fontified t face font-lock-comment-face) 41 49 (c-in-sws t fontified t face font-lock-comment-face) 49 67 (c-in-sws t fontified t face font-lock-comment-face) 67 68 (c-in-sws t fontified t face font-lock-comment-face) 68 69 (c-in-sws t fontified t face font-lock-comment-face) 69 70 (c-in-sws t fontified t face font-lock-comment-face) 70 76 (c-in-sws t fontified t face font-lock-comment-face) 76 77 (c-in-sws t fontified t face font-lock-comment-face) 77 78 (c-in-sws t fontified t face font-lock-comment-face) 78 79 (c-in-sws t fontified t face font-lock-comment-face) 79 80 (c-in-sws t fontified t face font-lock-comment-face)) . 1791) (undo-tree-id3870 . -79)) nil (26246 41084 281550 933000) 0 nil])
([nil nil ((#("      //             to_continue);
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 6 (c-in-sws t fontified t c-is-sws t) 6 7 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 21 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 21 32 (c-in-sws t fontified t face font-lock-comment-face) 32 33 (c-in-sws t fontified t face font-lock-comment-face) 33 34 (c-in-sws t fontified t face font-lock-comment-face) 34 35 (c-in-sws t fontified t face font-lock-comment-face)) . 1791) (undo-tree-id3869 . -34)) nil (26246 41084 281546 178000) 0 nil])
([nil nil ((#("      // RCLCPP_INFO(this->get_logger(), \"%s, %i\", change_state_topics[i].c_str(),
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 6 (c-in-sws t fontified t c-is-sws t) 6 7 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 25 (c-in-sws t fontified t face font-lock-comment-face) 25 37 (c-in-sws t fontified t face font-lock-comment-face) 37 38 (c-in-sws t fontified t face font-lock-comment-face) 38 39 (c-in-sws t fontified t face font-lock-comment-face) 39 41 (c-in-sws t fontified t face font-lock-comment-face) 41 49 (c-in-sws t fontified t face font-lock-comment-face) 49 59 (c-in-sws t fontified t face font-lock-comment-face) 59 70 (c-in-sws t fontified t face font-lock-comment-face) 70 71 (c-in-sws t fontified t face font-lock-comment-face) 71 72 (c-in-sws t fontified t face font-lock-comment-face) 72 73 (c-in-sws t fontified t face font-lock-comment-face) 73 79 (c-in-sws t fontified t face font-lock-comment-face) 79 80 (c-in-sws t fontified t face font-lock-comment-face) 80 81 (c-in-sws t fontified t face font-lock-comment-face) 81 82 (c-in-sws t fontified t face font-lock-comment-face) 82 83 (fontified t c-in-sws t face font-lock-comment-face)) . 1791) (undo-tree-id3868 . -82)) nil (26246 41084 281542 15000) 0 nil])
([nil nil ((#("      //             to_continue);
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 6 (c-in-sws t fontified t c-is-sws t) 6 7 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 7 9 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 9 21 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 21 32 (c-in-sws t fontified t face font-lock-comment-face) 32 33 (c-in-sws t fontified t face font-lock-comment-face) 33 34 (c-in-sws t fontified t face font-lock-comment-face) 34 35 (c-in-sws t fontified t face font-lock-comment-face)) . 1791) (undo-tree-id3867 . -34)) nil (26246 41084 281536 506000) 0 nil])
([nil nil ((#("    // std::this_thread::sleep_for(5s);


    // for (long unsigned int i; i < get_state_topics.size(); i++) {
    //   state_clients.push_back( this->create_client<lifecycle_msgs::srv::GetState>(get_state_topics[i].c_str()));
    // }

    // for (long unsigned int i; i < change_state_topics.size(); i++) {
    //   change_clients.push_back(this->create_client<lifecycle_msgs::srv::ChangeState>(change_state_topics[i].c_str()));

    // }

    // RCLCPP_INFO(this->get_logger(), \"length of-> change_clients: %li\", change_clients.size());
 " 0 2 (c-in-sws t c-is-sws t fontified t) 2 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 10 (c-in-sws t fontified t face font-lock-comment-face) 10 12 (c-in-sws t fontified t face font-lock-comment-face) 12 23 (c-in-sws t fontified t face font-lock-comment-face) 23 34 (c-in-sws t fontified t face font-lock-comment-face) 34 35 (c-in-sws t fontified t face font-lock-comment-face) 35 37 (c-in-sws t fontified t face font-lock-comment-face) 37 38 (c-in-sws t fontified t face font-lock-comment-face) 38 40 (c-in-sws t fontified t face font-lock-comment-face) 40 41 (c-in-sws t fontified t) 41 42 (c-in-sws t fontified t) 42 43 (c-in-sws t fontified t) 43 46 (c-in-sws t fontified t) 46 47 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 47 49 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 49 109 (c-in-sws t fontified t face font-lock-comment-face) 109 111 (c-in-sws t fontified t face font-lock-comment-face) 111 115 (c-in-sws t fontified t) 115 120 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 120 181 (c-in-sws t fontified t face font-lock-comment-face) 181 198 (c-in-sws t fontified t face font-lock-comment-face) 198 226 (c-in-sws t fontified t face font-lock-comment-face) 226 227 (c-in-sws t fontified t face font-lock-comment-face) 227 228 (c-in-sws t fontified t) 228 231 (c-in-sws t fontified t) 231 232 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 232 234 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 234 236 (c-in-sws t fontified t face font-lock-comment-face) 236 237 (c-in-sws t fontified t) 237 238 (c-in-sws t fontified t) 238 241 (c-in-sws t fontified t) 241 242 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 242 244 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 244 245 (c-in-sws t fontified t face font-lock-comment-face) 245 247 (c-in-sws t fontified t face font-lock-comment-face) 247 248 (c-in-sws t fontified t face font-lock-comment-face) 248 249 (c-in-sws t fontified t face font-lock-comment-face) 249 253 (c-in-sws t fontified t face font-lock-comment-face) 253 254 (c-in-sws t fontified t face font-lock-comment-face) 254 258 (c-in-sws t fontified t face font-lock-comment-face) 258 262 (c-in-sws t fontified t face font-lock-comment-face) 262 263 (c-in-sws t fontified t face font-lock-comment-face) 263 265 (c-in-sws t fontified t face font-lock-comment-face) 265 266 (c-in-sws t fontified t face font-lock-comment-face) 266 267 (c-in-sws t fontified t face font-lock-comment-face) 267 268 (c-in-sws t fontified t face font-lock-comment-face) 268 298 (c-in-sws t fontified t face font-lock-comment-face) 298 299 (c-in-sws t fontified t face font-lock-comment-face) 299 300 (c-in-sws t fontified t face font-lock-comment-face) 300 305 (c-in-sws t fontified t face font-lock-comment-face) 305 306 (c-in-sws t fontified t face font-lock-comment-face) 306 307 (c-in-sws t fontified t face font-lock-comment-face) 307 308 (c-in-sws t fontified t face font-lock-comment-face) 308 309 (c-in-sws t fontified t face font-lock-comment-face) 309 310 (c-in-sws t fontified t) 310 313 (c-in-sws t fontified t) 313 314 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 314 316 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 316 317 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 317 318 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 318 342 (c-in-sws t fontified t face font-lock-comment-face) 342 343 (c-in-sws t fontified t face font-lock-comment-face) 343 347 (c-in-sws t fontified t face font-lock-comment-face) 347 362 (c-in-sws t fontified t face font-lock-comment-face) 362 363 (c-in-sws t fontified t face font-lock-comment-face) 363 377 (c-in-sws t fontified t face font-lock-comment-face) 377 379 (c-in-sws t fontified t face font-lock-comment-face) 379 382 (c-in-sws t fontified t face font-lock-comment-face) 382 395 (c-in-sws t fontified t face font-lock-comment-face) 395 396 (c-in-sws t fontified t face font-lock-comment-face) 396 397 (c-in-sws t fontified t face font-lock-comment-face) 397 416 (c-in-sws t fontified t face font-lock-comment-face) 416 417 (c-in-sws t fontified t face font-lock-comment-face) 417 418 (c-in-sws t fontified t face font-lock-comment-face) 418 419 (c-in-sws t fontified t face font-lock-comment-face) 419 425 (c-in-sws t fontified t face font-lock-comment-face) 425 426 (c-in-sws t fontified t face font-lock-comment-face) 426 427 (c-in-sws t fontified t face font-lock-comment-face) 427 428 (c-in-sws t fontified t face font-lock-comment-face) 428 429 (c-in-sws t fontified t face font-lock-comment-face) 429 430 (c-in-sws t fontified t face font-lock-comment-face) 430 431 (c-in-sws t fontified t face font-lock-comment-face) 431 432 (c-in-sws t fontified t) 432 436 (c-in-sws t fontified t) 436 437 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 437 439 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 439 440 (c-in-sws t fontified t face font-lock-comment-face) 440 441 (c-in-sws t fontified t face font-lock-comment-face) 441 442 (c-in-sws t fontified t) 442 443 (c-in-sws t fontified t) 443 446 (c-in-sws t fontified t) 446 447 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 447 449 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 449 450 (c-in-sws t fontified t face font-lock-comment-face) 450 457 (c-in-sws t fontified t face font-lock-comment-face) 457 460 (c-in-sws t face font-lock-comment-face fontified t) 460 461 (c-in-sws t face font-lock-comment-face fontified t) 461 465 (c-in-sws t face font-lock-comment-face fontified t) 465 472 (c-in-sws t face font-lock-comment-face fontified t) 472 477 (c-in-sws t face font-lock-comment-face fontified t) 477 478 (c-in-sws t face font-lock-comment-face fontified t) 478 479 (c-in-sws t face font-lock-comment-face fontified t) 479 480 (c-in-sws t face font-lock-comment-face fontified t) 480 481 (c-in-sws t face font-lock-comment-face fontified t) 481 514 (c-in-sws t face font-lock-comment-face fontified t) 514 535 (c-in-sws t face font-lock-comment-face fontified t) 535 536 (c-in-sws t face font-lock-comment-face fontified t) 536 537 (c-in-sws t face font-lock-comment-face fontified t) 537 538 (c-in-sws t face font-lock-comment-face fontified t) 538 539 (c-in-sws t face font-lock-comment-face fontified t) 539 540 (face font-lock-comment-face fontified t c-in-sws t) 540 541 (fontified t c-is-sws t c-in-sws t)) . 1799) (undo-tree-id3773 . -540) (undo-tree-id3774 . -540) (undo-tree-id3775 . -540) (undo-tree-id3776 . -540) (undo-tree-id3777 . -541) (undo-tree-id3778 . -540) (undo-tree-id3779 . -236) (undo-tree-id3780 . -236) (undo-tree-id3781 . -236) (undo-tree-id3782 . -236) (undo-tree-id3783 . -236) (undo-tree-id3784 . -236) (undo-tree-id3785 . -236) (undo-tree-id3786 . -236) (undo-tree-id3787 . -237) (undo-tree-id3788 . -237) (undo-tree-id3789 . -237) (undo-tree-id3790 . -237) (undo-tree-id3791 . -237) (undo-tree-id3792 . -237) (undo-tree-id3793 . -237) (undo-tree-id3794 . -237) (undo-tree-id3795 . -237) (undo-tree-id3796 . -237) (undo-tree-id3797 . -237) (undo-tree-id3798 . -309) (undo-tree-id3799 . -309) (undo-tree-id3800 . -309) (undo-tree-id3801 . -309) (undo-tree-id3802 . -309) (undo-tree-id3803 . -309) (undo-tree-id3804 . -309) (undo-tree-id3805 . -309) (undo-tree-id3806 . -309) (undo-tree-id3807 . -309) (undo-tree-id3808 . -309) (undo-tree-id3809 . -431) (undo-tree-id3810 . -431) (undo-tree-id3811 . -431) (undo-tree-id3812 . -431) (undo-tree-id3813 . -431) (undo-tree-id3814 . -431) (undo-tree-id3815 . -431) (undo-tree-id3816 . -431) (undo-tree-id3817 . -431) (undo-tree-id3818 . -431) (undo-tree-id3819 . -431) (undo-tree-id3820 . -432) (undo-tree-id3821 . -432) (undo-tree-id3822 . -432) (undo-tree-id3823 . -432) (undo-tree-id3824 . -432) (undo-tree-id3825 . -432) (undo-tree-id3826 . -432) (undo-tree-id3827 . -432) (undo-tree-id3828 . -432) (undo-tree-id3829 . -432) (undo-tree-id3830 . -432) (undo-tree-id3831 . -441) (undo-tree-id3832 . -441) (undo-tree-id3833 . -441) (undo-tree-id3834 . -441) (undo-tree-id3835 . -441) (undo-tree-id3836 . -441) (undo-tree-id3837 . -441) (undo-tree-id3838 . -441) (undo-tree-id3839 . -441) (undo-tree-id3840 . -441) (undo-tree-id3841 . -441) (undo-tree-id3842 . -442) (undo-tree-id3843 . -442) (undo-tree-id3844 . -442) (undo-tree-id3845 . -442) (undo-tree-id3846 . -442) (undo-tree-id3847 . -442) (undo-tree-id3848 . -442) (undo-tree-id3849 . -442) (undo-tree-id3850 . -442) (undo-tree-id3851 . -442) (undo-tree-id3852 . -442) (undo-tree-id3853 . -540) (undo-tree-id3854 . -540) (undo-tree-id3855 . -540) (undo-tree-id3856 . -540) (undo-tree-id3857 . -540) (undo-tree-id3858 . -540) (undo-tree-id3859 . -540) (undo-tree-id3860 . -540) (undo-tree-id3861 . -540) (undo-tree-id3862 . -540) (undo-tree-id3863 . -540) (undo-tree-id3864 . -540) (undo-tree-id3865 . -540) (undo-tree-id3866 . -541) 2339) nil (26246 41087 235294 20000) 0 nil])
([nil nil ((#("    // if (lifecycle_list.size() > 0) to_continue = true;
    // else to_continue = false;

" 0 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 5 7 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 7 12 (fontified t c-in-sws t face font-lock-comment-face) 12 15 (fontified t c-in-sws t face font-lock-comment-face) 15 19 (fontified t c-in-sws t face font-lock-comment-face) 19 57 (fontified t c-in-sws t face font-lock-comment-face) 57 58 (fontified t c-in-sws t face font-lock-comment-face) 58 59 (fontified t c-in-sws t) 59 61 (fontified t c-in-sws t) 61 62 (fontified t c-in-sws t) 62 63 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 63 65 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 65 69 (fontified t c-in-sws t face font-lock-comment-face) 69 73 (fontified t c-in-sws t face font-lock-comment-face) 73 75 (fontified t c-in-sws t face font-lock-comment-face) 75 78 (fontified t c-in-sws t face font-lock-comment-face) 78 90 (fontified t c-in-sws t face font-lock-comment-face) 90 91 (fontified t c-in-sws t face font-lock-comment-face) 91 92 (fontified t c-in-sws t)) . 1462) (undo-tree-id3918 . -91) (undo-tree-id3919 . -91) (undo-tree-id3920 . -91) (undo-tree-id3921 . -92) (undo-tree-id3922 . -92) (undo-tree-id3923 . -92) (undo-tree-id3924 . -92) (undo-tree-id3925 . -92) (undo-tree-id3926 . -92) (undo-tree-id3927 . -92) (undo-tree-id3928 . -91) (undo-tree-id3929 . -91) (undo-tree-id3930 . -91) (undo-tree-id3931 . -91) (undo-tree-id3932 . -91) (undo-tree-id3933 . -91) (undo-tree-id3934 . -91) (undo-tree-id3935 . -91) (undo-tree-id3936 . -91) (undo-tree-id3937 . -91) (undo-tree-id3938 . -91) (undo-tree-id3939 . -91) (undo-tree-id3940 . -91) (undo-tree-id3941 . -91) (undo-tree-id3942 . -91) (undo-tree-id3943 . -91) (undo-tree-id3944 . -91) (undo-tree-id3945 . -91) (undo-tree-id3946 . -58) (undo-tree-id3947 . -58) (undo-tree-id3948 . -58) (undo-tree-id3949 . -58) (undo-tree-id3950 . -58) (undo-tree-id3951 . -58) (undo-tree-id3952 . -58) (undo-tree-id3953 . -58) (undo-tree-id3954 . -58) (undo-tree-id3955 . -58) (undo-tree-id3956 . -58) (undo-tree-id3957 . -58) (undo-tree-id3958 . -58) (undo-tree-id3959 . -58) (undo-tree-id3960 . -58) (undo-tree-id3961 . -58) (undo-tree-id3962 . -58) (undo-tree-id3963 . -58) (undo-tree-id3964 . -91) (undo-tree-id3965 . -91) (undo-tree-id3966 . -91) (undo-tree-id3967 . -91) (undo-tree-id3968 . -91) (undo-tree-id3969 . -91) (undo-tree-id3970 . -91) (undo-tree-id3971 . -92) (undo-tree-id3972 . -92) (undo-tree-id3973 . -92) (undo-tree-id3974 . -92) (undo-tree-id3975 . -92) (undo-tree-id3976 . -92) (undo-tree-id3977 . -92) (undo-tree-id3978 . -92) (undo-tree-id3979 . -92) (undo-tree-id3980 . -92) (undo-tree-id3981 . -92) (undo-tree-id3982 . -92) (undo-tree-id3983 . -92) (undo-tree-id3984 . -92) (undo-tree-id3985 . -92) (undo-tree-id3986 . -92) (undo-tree-id3987 . -92) (undo-tree-id3988 . -92) (undo-tree-id3989 . -91) (undo-tree-id3990 . -91) (undo-tree-id3991 . -91) (undo-tree-id3992 . -91) (undo-tree-id3993 . -91) (undo-tree-id3994 . -91) (undo-tree-id3995 . -91) (undo-tree-id3996 . -91) (undo-tree-id3997 . -91) (undo-tree-id3998 . -91) (undo-tree-id3999 . -91) (undo-tree-id4000 . -91) (undo-tree-id4001 . -91) (undo-tree-id4002 . -91) (undo-tree-id4003 . -91) (undo-tree-id4004 . -91) (undo-tree-id4005 . -91) (undo-tree-id4006 . -91) (undo-tree-id4007 . -91) (undo-tree-id4008 . -91) (undo-tree-id4009 . -91) (undo-tree-id4010 . -91) (undo-tree-id4011 . -91) (undo-tree-id4012 . -91) (undo-tree-id4013 . -91) (undo-tree-id4014 . -91) (undo-tree-id4015 . -91) (undo-tree-id4016 . -91) (undo-tree-id4017 . -91) (undo-tree-id4018 . -91) (undo-tree-id4019 . -91) (undo-tree-id4020 . -91) (undo-tree-id4021 . -91) (undo-tree-id4022 . -91) (undo-tree-id4023 . -91) (undo-tree-id4024 . -91) (undo-tree-id4025 . -91) (undo-tree-id4026 . -91) (undo-tree-id4027 . -91) (undo-tree-id4028 . -91) (undo-tree-id4029 . -91) (undo-tree-id4030 . -91) (undo-tree-id4031 . -91) (undo-tree-id4032 . -91) (undo-tree-id4033 . -91) (undo-tree-id4034 . -91) (undo-tree-id4035 . -91) (undo-tree-id4036 . -91) (undo-tree-id4037 . -91) (undo-tree-id4038 . -91) (undo-tree-id4039 . -91) (undo-tree-id4040 . -91) (undo-tree-id4041 . -91) (undo-tree-id4042 . -91) (undo-tree-id4043 . -91) (undo-tree-id4044 . -58) (undo-tree-id4045 . -58) (undo-tree-id4046 . -58) (undo-tree-id4047 . -58) (undo-tree-id4048 . -58) (undo-tree-id4049 . -58) (undo-tree-id4050 . -58) (undo-tree-id4051 . -91) (undo-tree-id4052 . -91) (undo-tree-id4053 . -91) (undo-tree-id4054 . -91) (undo-tree-id4055 . -91) (undo-tree-id4056 . -91) (undo-tree-id4057 . -91) (undo-tree-id4058 . -92) (undo-tree-id4059 . -91) (undo-tree-id4060 . -91) (undo-tree-id4061 . -91) (undo-tree-id4062 . -91) (undo-tree-id4063 . -91) (undo-tree-id4064 . -91) (undo-tree-id4065 . -91) (undo-tree-id4066 . -91) (undo-tree-id4067 . -91) (undo-tree-id4068 . -91) (undo-tree-id4069 . -91) (undo-tree-id4070 . -91) (undo-tree-id4071 . -58) (undo-tree-id4072 . -58) (undo-tree-id4073 . -58) (undo-tree-id4074 . -58) (undo-tree-id4075 . -58) (undo-tree-id4076 . -58) (undo-tree-id4077 . -58) (undo-tree-id4078 . -58) (undo-tree-id4079 . -58) (undo-tree-id4080 . -58) (undo-tree-id4081 . -58) (undo-tree-id4082 . -92) (t 26246 41084 338965 997000)) nil (26246 41091 497211 660000) 0 nil] [nil nil ((#("    // if (lifecycle_list.size() > 0) to_continue = true;
    // else to_continue = false;

" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 12 (c-in-sws t fontified t face font-lock-comment-face) 12 15 (c-in-sws t fontified t face font-lock-comment-face) 15 19 (c-in-sws t fontified t face font-lock-comment-face) 19 57 (c-in-sws t fontified t face font-lock-comment-face) 57 58 (c-in-sws t fontified t face font-lock-comment-face) 58 59 (c-in-sws t fontified t) 59 61 (c-in-sws t fontified t) 61 62 (c-in-sws t fontified t) 62 63 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 63 65 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 65 69 (c-in-sws t fontified t face font-lock-comment-face) 69 73 (c-in-sws t fontified t face font-lock-comment-face) 73 75 (c-in-sws t fontified t face font-lock-comment-face) 75 78 (c-in-sws t fontified t face font-lock-comment-face) 78 90 (c-in-sws t fontified t face font-lock-comment-face) 90 91 (c-in-sws t fontified t face font-lock-comment-face) 91 92 (c-in-sws t fontified t)) . 1462) (undo-tree-id3876 . -91) (undo-tree-id3877 . -91) (undo-tree-id3878 . -91) (undo-tree-id3879 . -92) (undo-tree-id3880 . -92) (undo-tree-id3881 . -92) (undo-tree-id3882 . -92) (undo-tree-id3883 . -92) (undo-tree-id3884 . -92) (undo-tree-id3885 . -92) (undo-tree-id3886 . -91) (undo-tree-id3887 . -91) (undo-tree-id3888 . -91) (undo-tree-id3889 . -91) (undo-tree-id3890 . -91) (undo-tree-id3891 . -91) (undo-tree-id3892 . -91) (undo-tree-id3893 . -92) (undo-tree-id3894 . -91) (undo-tree-id3895 . -91) (undo-tree-id3896 . -91) (undo-tree-id3897 . -91) (undo-tree-id3898 . -91) (undo-tree-id3899 . -91) (undo-tree-id3900 . -91) (undo-tree-id3901 . -91) (undo-tree-id3902 . -91) (undo-tree-id3903 . -91) (undo-tree-id3904 . -91) (undo-tree-id3905 . -91) (undo-tree-id3906 . -58) (undo-tree-id3907 . -58) (undo-tree-id3908 . -58) (undo-tree-id3909 . -58) (undo-tree-id3910 . -58) (undo-tree-id3911 . -58) (undo-tree-id3912 . -58) (undo-tree-id3913 . -58) (undo-tree-id3914 . -58) (undo-tree-id3915 . -58) (undo-tree-id3916 . -58) (undo-tree-id3917 . -92) (t 26246 41084 338965 997000)) ((1462 . 1554)) (26246 41087 230201 238000) 0 nil])
([nil nil ((6427 . 6429) (6425 . 6427) (6423 . 6425) (6421 . 6423) (6420 . 6421) (6419 . 6420) (6412 . 6419) (6411 . 6412) (t 26246 41091 582038 219000)) nil (26246 41152 419131 608000) 0 nil])
nil
([nil nil ((6475 . 6476) (6474 . 6475) (6472 . 6474) (6471 . 6472) (6470 . 6471) (6469 . 6470) (6468 . 6469) (6460 . 6468) (6457 . 6460) (6456 . 6457) (6455 . 6456) (6454 . 6455)) nil (26246 41152 419115 855000) 0 nil])
([nil nil ((#("      RCLCPP_INFO(this->get_logger(), \"to_all_change: %li\", i);
" 0 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-5-face)) 18 22 (fontified t face font-lock-keyword-face) 22 25 (fontified t) 25 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-6-face)) 35 36 (fontified t face (rainbow-delimiters-depth-6-face)) 36 37 (fontified t) 37 38 (fontified t) 38 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 54 (fontified t face font-lock-string-face) 54 56 (fontified t face font-lock-string-face) 56 58 (fontified t face font-lock-string-face) 58 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-5-face)) 62 64 (fontified t)) . 6802) (undo-tree-id4122 . -11) (undo-tree-id4123 . -63) (undo-tree-id4124 . -11) (undo-tree-id4125 . -11) (undo-tree-id4126 . -6) (undo-tree-id4127 . -17) 6813 (t 26246 41152 530787 168000)) nil (26246 41504 871741 825000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6853 . 6854) (#("
" 0 1 (fontified nil)) . -6911) (6847 . 6912) 6841) nil (26246 41504 871717 888000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -6912) (undo-tree-id4083 . -6) (undo-tree-id4084 . -6) (undo-tree-id4085 . -6) (undo-tree-id4086 . -6) (undo-tree-id4087 . -6) (undo-tree-id4088 . -6) (undo-tree-id4089 . -6) (undo-tree-id4090 . -6) (undo-tree-id4091 . -6) (undo-tree-id4092 . -6) (undo-tree-id4093 . -6) (undo-tree-id4094 . -6) (undo-tree-id4095 . -6) (undo-tree-id4096 . -6) (undo-tree-id4097 . -6) (undo-tree-id4098 . -6) (undo-tree-id4099 . -6) (undo-tree-id4100 . -6) (undo-tree-id4101 . -6) (undo-tree-id4102 . -6) (undo-tree-id4103 . -6) (undo-tree-id4104 . -6) (undo-tree-id4105 . -6) (undo-tree-id4106 . -6) (undo-tree-id4107 . -6) (undo-tree-id4108 . -6) (undo-tree-id4109 . -6) (undo-tree-id4110 . -6) (undo-tree-id4111 . -6) (undo-tree-id4112 . -6) (undo-tree-id4113 . -6) (undo-tree-id4114 . -6) (undo-tree-id4115 . -6) (undo-tree-id4116 . -6) (undo-tree-id4117 . -6) (undo-tree-id4118 . -6) (undo-tree-id4119 . -6) (undo-tree-id4120 . -6) (undo-tree-id4121 . -6) 6918 (6911 . 6918)) nil (26246 41504 871699 791000) 0 nil])
([nil nil ((6906 . 6909) (6905 . 6906) (t 26246 41504 947897 910000)) nil (26246 41520 341293 337000) 0 nil])
([nil nil ((6915 . 6918) (6914 . 6915) (6913 . 6914)) nil (26246 41520 341283 36000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6306) (undo-tree-id4165 . -4) (undo-tree-id4166 . -4) 6310 (6306 . 6310) (#("    " 0 4 (fontified nil)) . 6305) (undo-tree-id4167 . -4) (6305 . 6310) (#("    " 0 4 (fontified nil)) . 6304) (undo-tree-id4168 . -4) (6303 . 6309) (t 26246 41520 395162 336000)) nil (26246 41619 276595 802000) 0 nil])
([nil nil ((#("    RCLCPP_INFO(this->get_logger(), \"Yay The Transition Worked\");

" 0 4 (fontified t) 4 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-4-face)) 16 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 22 (fontified t) 22 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-5-face)) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t face font-lock-string-face) 47 48 (fontified t face font-lock-string-face) 48 49 (fontified t face font-lock-string-face) 49 50 (fontified t face font-lock-string-face) 50 51 (fontified t face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 53 (fontified t face font-lock-string-face) 53 54 (fontified t face font-lock-string-face) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 64 (fontified t face (rainbow-delimiters-depth-4-face)) 64 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t)) . 6184) (undo-tree-id4128 . -66) (undo-tree-id4129 . -66) (undo-tree-id4130 . -66) (undo-tree-id4131 . -67) (undo-tree-id4132 . -67) (undo-tree-id4133 . -67) (undo-tree-id4134 . -67) (undo-tree-id4135 . -67) (undo-tree-id4136 . -67) (undo-tree-id4137 . -67) (undo-tree-id4138 . -67) (undo-tree-id4139 . -66) (undo-tree-id4140 . -66) (undo-tree-id4141 . -66) (undo-tree-id4142 . -66) (undo-tree-id4143 . -66) (undo-tree-id4144 . -66) (undo-tree-id4145 . -66) (undo-tree-id4146 . -66) (undo-tree-id4147 . -66) (undo-tree-id4148 . -66) (undo-tree-id4149 . -66) (undo-tree-id4150 . -66) (undo-tree-id4151 . -66) (undo-tree-id4152 . -66) (undo-tree-id4153 . -67) (undo-tree-id4154 . -66) (undo-tree-id4155 . -66) (undo-tree-id4156 . -66) (undo-tree-id4157 . -66) (undo-tree-id4158 . -66) (undo-tree-id4159 . -66) (undo-tree-id4160 . -66) (undo-tree-id4161 . -66) (undo-tree-id4162 . -66) (undo-tree-id4163 . -66) (undo-tree-id4164 . -67)) nil (26246 41619 276574 428000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6237) (t 26246 41619 339093 276000)) nil (26246 41630 738113 866000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6237)) nil (26246 41630 738110 934000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6237) (undo-tree-id4169 . 1)) nil (26246 41630 738107 483000) 0 nil])
([nil nil ((apply -9 6184 6246 undo--wrap-and-run-primitive-undo 6184 6246 ((6240 . 6243) (6217 . 6220) (6188 . 6191) 6184))) nil (26246 41630 738086 59000) 0 nil])
([nil nil ((apply 9 6184 6237 undo--wrap-and-run-primitive-undo 6184 6237 ((#("// " 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t c-in-sws t) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6234) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6214) (#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6188) 6184))) nil (26246 41630 738075 998000) 0 nil])
([nil nil ((#("system(get_command.c_str())" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-5-face)) 7 14 (fontified t) 14 18 (fontified t) 18 19 (fontified t) 19 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-6-face)) 25 26 (fontified t face (rainbow-delimiters-depth-6-face)) 26 27 (fontified t face (rainbow-delimiters-depth-5-face))) . 6245) (undo-tree-id4172 . -26) (undo-tree-id4173 . -26) (undo-tree-id4174 . -26) (undo-tree-id4175 . -26) (undo-tree-id4176 . -26) 6271 (t 26246 41630 794688 304000)) nil (26246 41664 901865 918000) 0 nil])
([nil nil ((6189 . 6202) (6185 . 6189) (#("    " 0 4 (fontified nil)) . 6184) (undo-tree-id4170 . -4) (6184 . 6189) (#("    " 0 4 (fontified nil)) . 6183) (undo-tree-id4171 . -4) (6182 . 6188)) nil (26246 41664 901851 960000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6228 . 6229) (nil fontified nil 6202 . 6229) (6202 . 6229) 6201) nil (26246 41664 901832 398000) 0 nil])
([nil nil ((6229 . 6230)) nil (26246 41664 901827 899000) 0 nil])
([nil nil ((6294 . 6300)) nil (26246 41664 901819 166000) 0 nil])
([nil nil ((6168 . 6170) (t 26246 41664 957554 706000)) nil (26246 41832 322538 364000) 0 nil])
([nil nil ((6178 . 6180)) nil (26246 41832 322528 561000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6343 . 6344) (nil fontified nil 6235 . 6344) (6235 . 6344) (t 26246 41832 405400 395000)) nil (26246 41979 430001 242000) 0 nil])
([nil nil ((6235 . 6239) (#("      " 0 6 (fontified t)) . 6235)) nil (26246 41979 429997 535000) 0 nil])
([nil nil ((#("******************" 0 18 (fontified t face font-lock-string-face)) . 6272) (undo-tree-id4182 . -17)) nil (26246 41979 429995 132000) 0 nil])
([nil nil ((#("Yay " 0 4 (fontified t face font-lock-string-face)) . 6272) (undo-tree-id4181 . -3)) nil (26246 41979 429991 234000) 0 nil])
([nil nil ((#("The " 0 4 (fontified t face font-lock-string-face)) . 6272) (undo-tree-id4180 . -3)) nil (26246 41979 429987 356000) 0 nil])
([nil nil ((#("Transition " 0 11 (fontified t face font-lock-string-face)) . 6272) (undo-tree-id4179 . -10)) nil (26246 41979 429983 385000) 0 nil])
([nil nil ((#("Worked" 0 6 (fontified t face font-lock-string-face)) . 6272) (undo-tree-id4178 . -5)) nil (26246 41979 429979 378000) 0 nil])
([nil nil ((#("**********************\");" 0 23 (fontified t face font-lock-string-face) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t)) . 6272) (undo-tree-id4177 . -24)) nil (26246 41979 429974 186000) 0 nil])
([nil nil ((6274 . 6275) (6273 . 6274) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -6273) (6273 . 6274) (6272 . 6273) (nil syntax-table nil 6272 . 6273) (nil syntax-table (1) 6271 . 6272) (#("\"" 0 1 (fontified nil face font-lock-warning-face)) . -6272) (6272 . 6273) (nil syntax-table nil 6272 . 6273) (nil syntax-table (1) 6271 . 6272)) nil (26246 51237 211922 966000) 0 nil])
([nil nil ((6272 . 6274)) ((#("%" 0 1 (fontified nil face font-lock-string-face)) . 6272) (undo-tree-id5602 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . 6273)) (26246 51238 325515 604000) 0 nil])
([nil nil ((6272 . 6284)) ((#("VALUE" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face)) . 6272) (#("::::::" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 6 (fontified nil face font-lock-string-face)) . 6277) (#(" " 0 1 (fontified t face font-lock-string-face)) . 6283)) (26246 51238 663975 699000) 0 nil])
([nil nil ((6287 . 6294)) ((#("," 0 1 (fontified nil)) . 6287) (#(" value" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 6288)) (26246 51239 328095 34000) 0 nil])
([nil nil ((#("auto " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 4 5 (fontified t)) . 6193) (undo-tree-id5603 . -4) (undo-tree-id5604 . -5)) nil (26246 51254 577723 381000) 0 nil] [nil nil ((#("auto " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 4 5 (fontified t)) . 6193) (undo-tree-id4308 . -4) (t 26246 41979 491288 442000)) ((6193 . 6198)) (26246 51231 298054 88000) 0 nil])
([nil nil ((6193 . 6197)) nil (26246 51254 577694 677000) 0 nil])
([nil nil ((6205 . 6206) (6198 . 6205) (#("u" 0 1 (fontified nil)) . 6198) (6198 . 6199) (#("uint8_t" 0 7 (fontified nil)) . -6198) (6198 . 6205) (#("uin" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -6198) (undo-tree-id4183 . -3) (undo-tree-id4184 . -3) (undo-tree-id4186 . -1) (undo-tree-id4188 . -1) (undo-tree-id4190 . -1) (undo-tree-id4192 . -1) (undo-tree-id4194 . -1) (undo-tree-id4196 . -1) (undo-tree-id4198 . -1) (undo-tree-id4200 . -1) (undo-tree-id4202 . -1) (undo-tree-id4204 . -1) (undo-tree-id4206 . -1) (undo-tree-id4208 . -1) (undo-tree-id4210 . -1) (undo-tree-id4212 . -1) (undo-tree-id4214 . -1) (undo-tree-id4216 . -1) (undo-tree-id4218 . -1) (undo-tree-id4220 . -2) (undo-tree-id4222 . -2) (undo-tree-id4224 . -2) (undo-tree-id4226 . -2) (undo-tree-id4228 . -2) (undo-tree-id4230 . -2) (undo-tree-id4232 . -2) (undo-tree-id4234 . -2) (undo-tree-id4236 . -2) (undo-tree-id4238 . -2) (undo-tree-id4240 . -2) (undo-tree-id4242 . -2) (undo-tree-id4244 . -2) (undo-tree-id4246 . -2) (undo-tree-id4248 . -2) (undo-tree-id4250 . -2) (undo-tree-id4252 . -2) (undo-tree-id4254 . -2) (undo-tree-id4256 . -2) (undo-tree-id4258 . -2) (undo-tree-id4260 . -2) (undo-tree-id4262 . -3) (undo-tree-id4264 . -3) (undo-tree-id4266 . -3) (undo-tree-id4268 . -3) (undo-tree-id4270 . -3) (undo-tree-id4272 . -3) (undo-tree-id4274 . -3) (undo-tree-id4276 . -3) (undo-tree-id4278 . -3) (undo-tree-id4280 . -3) (undo-tree-id4282 . -3) (undo-tree-id4284 . -3) (undo-tree-id4286 . -3) (undo-tree-id4288 . -3) (undo-tree-id4290 . -3) (undo-tree-id4292 . -3) (undo-tree-id4294 . -3) (undo-tree-id4296 . -3) (undo-tree-id4298 . -3) (undo-tree-id4300 . -3) (undo-tree-id4302 . -3) (undo-tree-id4304 . -3) 6201 (6198 . 6201) (6189 . 6193) (#("  " 0 2 (fontified nil)) . 6189) (6195 . 6196) (6189 . 6191) (#("    " 0 4 (fontified nil)) . 6189) (undo-tree-id4306 . -4) (undo-tree-id4307 . -4) (6196 . 6197) (6193 . 6196)) ((#("std" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 3 (fontified nil face font-lock-constant-face)) . 6193) (#(":" 0 1 (fontified nil)) . 6196) (6189 . 6193) (#("  " 0 2 (fontified nil)) . 6189) (#(":" 0 1 (fontified nil)) . 6195) (6189 . 6191) (#("    " 0 4 (fontified nil)) . 6189) (#("uin" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 6198) (6198 . 6201) (#("uint8_t" 0 7 (fontified nil)) . 6198) (6198 . 6205) (#("u" 0 1 (fontified nil)) . 6198) (6198 . 6199) (#("uint8_t" 0 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil c-type c-decl-id-start face font-lock-type-face)) . 6198) (#(" " 0 1 (fontified t)) . 6205)) (26246 51230 699171 266000) 0 nil])
([nil nil ((7347 . 7349) (7334 . 7348) (7330 . 7334) (7328 . 7330) (#("  " 0 2 (fontified nil)) . 7327) (undo-tree-id5605 . -2) (7326 . 7330) (t 26246 51254 636027 471000)) nil (26246 51514 816834 611000) 0 nil])
([nil nil ((6293 . 6294) (t 26246 42116 146284 969000)) ((#("u" 0 1 (fontified t face font-lock-string-face)) . 6293) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (t 26246 51060 413199 258000)) (26246 51053 107906 17000) 0 nil])
([nil nil ((7350 . 7351)) nil (26246 51514 816804 487000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 6294) (undo-tree-id4310 . 1) (undo-tree-id4312 . -1) (t 26246 42124 230249 425000)) ((6294 . 6295)) (26246 51052 998352 579000) 0 nil])
([nil nil ((#("  int lookup_table[10];
" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t) 23 24 (fontified t)) . 7328) (undo-tree-id5606 . -23) (undo-tree-id5607 . 1) (undo-tree-id5608 . 3) (undo-tree-id5609 . -22) (undo-tree-id5610 . -18) (undo-tree-id5611 . -6) (undo-tree-id5612 . -18) (undo-tree-id5613 . -22) (undo-tree-id5614 . -22) (undo-tree-id5615 . -22) (undo-tree-id5616 . -22) (undo-tree-id5617 . -22) (undo-tree-id5618 . -22) (undo-tree-id5619 . -22) (undo-tree-id5620 . -22) (undo-tree-id5621 . -22) (undo-tree-id5622 . -22) (undo-tree-id5623 . -22) (undo-tree-id5624 . -22) (undo-tree-id5625 . -22) (undo-tree-id5626 . -22) (undo-tree-id5627 . -22) (undo-tree-id5628 . -22) (undo-tree-id5629 . -22) (undo-tree-id5630 . -22) (undo-tree-id5631 . -22) (undo-tree-id5632 . -22) (undo-tree-id5633 . -22) (undo-tree-id5634 . -22) (undo-tree-id5635 . -22) (undo-tree-id5636 . -22) (undo-tree-id5637 . -22) (undo-tree-id5638 . -22) (undo-tree-id5639 . -22) (undo-tree-id5640 . -22) (undo-tree-id5641 . -22) (undo-tree-id5642 . -22) (undo-tree-id5643 . -22) (undo-tree-id5644 . -22) (undo-tree-id5645 . -22) (undo-tree-id5646 . -22) (undo-tree-id5647 . -22) (undo-tree-id5648 . -22) (undo-tree-id5649 . -22) (undo-tree-id5650 . -22) (undo-tree-id5651 . -22) (undo-tree-id5652 . -22) (undo-tree-id5653 . -22) (undo-tree-id5654 . -22) (undo-tree-id5655 . -22) (undo-tree-id5656 . -22) (undo-tree-id5657 . -22) (undo-tree-id5658 . -22) (undo-tree-id5659 . -22) (undo-tree-id5660 . -22) (undo-tree-id5661 . -22) (undo-tree-id5662 . -22) (undo-tree-id5663 . -22) (undo-tree-id5664 . -22) (undo-tree-id5665 . -22) (undo-tree-id5666 . -22) (undo-tree-id5667 . -22) (undo-tree-id5668 . -22) (undo-tree-id5669 . -22) (undo-tree-id5670 . -22) (undo-tree-id5671 . -22) (undo-tree-id5672 . -22) (undo-tree-id5673 . -22) (undo-tree-id5674 . -22) (undo-tree-id5675 . -22) (undo-tree-id5676 . -22) (undo-tree-id5677 . -22) (undo-tree-id5678 . -22) (undo-tree-id5679 . -22) (undo-tree-id5680 . -22) (undo-tree-id5681 . -22) (undo-tree-id5682 . -22) (undo-tree-id5683 . -22) (undo-tree-id5684 . -22) (undo-tree-id5685 . -22) (undo-tree-id5686 . -18) (undo-tree-id5687 . -18) (undo-tree-id5688 . -18) (undo-tree-id5689 . -18) (undo-tree-id5690 . -18) (undo-tree-id5691 . -18) (undo-tree-id5692 . -18) (undo-tree-id5693 . -18) (undo-tree-id5694 . -18) (undo-tree-id5695 . -18) (undo-tree-id5696 . -18) (undo-tree-id5697 . -18) (undo-tree-id5698 . -18) (undo-tree-id5699 . -18) (undo-tree-id5700 . -18) (undo-tree-id5701 . -18) (undo-tree-id5702 . -18) (undo-tree-id5703 . -18) (undo-tree-id5704 . -18) (undo-tree-id5705 . -18) (undo-tree-id5706 . -18) (undo-tree-id5707 . -18) (undo-tree-id5708 . -18) (undo-tree-id5709 . -18) (undo-tree-id5710 . -18) (undo-tree-id5711 . -18) (undo-tree-id5712 . -18) (undo-tree-id5713 . -18) (undo-tree-id5714 . -18) (undo-tree-id5715 . -18) (undo-tree-id5716 . -18) (undo-tree-id5717 . -18) (undo-tree-id5718 . -18) (undo-tree-id5719 . -18) (undo-tree-id5720 . -18) (undo-tree-id5721 . -18) (undo-tree-id5722 . -18) (undo-tree-id5723 . -18) (undo-tree-id5724 . -18) (undo-tree-id5725 . -18) (undo-tree-id5726 . -18) (undo-tree-id5727 . -18) (undo-tree-id5728 . -18) (undo-tree-id5729 . -18) (undo-tree-id5730 . -18) (undo-tree-id5731 . -18) (undo-tree-id5732 . -18) (undo-tree-id5733 . -24) 7346 (t 26246 51514 879817 55000)) nil (26246 51520 962568 769000) 0 nil])
([nil nil ((#("exit $(ros2 lifecycle  get \" + current + \" | grep -oP '(?<=\\\\[).*?(?=\\\\])')" 0 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 50 (fontified t face font-lock-string-face) 50 54 (fontified t face font-lock-string-face) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face font-lock-string-face) 56 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 66 (fontified t face font-lock-string-face) 66 67 (fontified t face font-lock-string-face) 67 69 (fontified t face font-lock-string-face) 69 70 (fontified t face font-lock-string-face) 70 71 (fontified t face font-lock-string-face) 71 72 (fontified t face font-lock-string-face) 72 73 (fontified t face font-lock-string-face) 73 74 (fontified t face font-lock-string-face) 74 75 (rear-nonsticky t fontified t face font-lock-string-face)) . 6109) (undo-tree-id4360 . -74) (undo-tree-id4361 . -74) (undo-tree-id4362 . -74) (undo-tree-id4363 . -74) (undo-tree-id4365 . -74) (undo-tree-id4367 . -12) (undo-tree-id4369 . -12) (undo-tree-id4371 . -12) (undo-tree-id4373 . -18) (undo-tree-id4375 . -18) (undo-tree-id4377 . -18) (undo-tree-id4379 . -18) (undo-tree-id4381 . -19) (undo-tree-id4383 . -19) (undo-tree-id4385 . -19) (undo-tree-id4387 . -20) (undo-tree-id4389 . -20) (undo-tree-id4391 . -20) (undo-tree-id4393 . -20) (undo-tree-id4395 . -21) (undo-tree-id4397 . -21) (undo-tree-id4399 . -21) (undo-tree-id4401 . -22) (undo-tree-id4403 . -22) (undo-tree-id4405 . -22) (undo-tree-id4407 . -22) (undo-tree-id4409 . -23) (undo-tree-id4411 . -23) (undo-tree-id4413 . -23) (undo-tree-id4415 . -24) (undo-tree-id4417 . -24) (undo-tree-id4419 . -24) (undo-tree-id4421 . -24) (undo-tree-id4423 . -25) (undo-tree-id4425 . -25) (undo-tree-id4427 . -25) (undo-tree-id4429 . -26) (undo-tree-id4431 . -26) (undo-tree-id4433 . -26) (undo-tree-id4435 . -26) (undo-tree-id4437 . -27) (undo-tree-id4439 . -27) (undo-tree-id4441 . -27) (undo-tree-id4443 . -28) (undo-tree-id4445 . -28) (undo-tree-id4447 . -28) (undo-tree-id4449 . -28) (undo-tree-id4451 . -29) (undo-tree-id4453 . -29) (undo-tree-id4455 . -29) (undo-tree-id4457 . -30) (undo-tree-id4459 . -30) (undo-tree-id4461 . -30) (undo-tree-id4463 . -30) (undo-tree-id4465 . -31) (undo-tree-id4467 . -31) (undo-tree-id4469 . -31) (undo-tree-id4471 . -32) (undo-tree-id4473 . -32) (undo-tree-id4475 . -32) (undo-tree-id4477 . -32) (undo-tree-id4479 . -33) (undo-tree-id4481 . -33) (undo-tree-id4483 . -33) (undo-tree-id4485 . -34) (undo-tree-id4487 . -34) (undo-tree-id4489 . -34) (undo-tree-id4491 . -34) (undo-tree-id4493 . -35) (undo-tree-id4495 . -35) (undo-tree-id4497 . -35) (undo-tree-id4499 . -36) (undo-tree-id4501 . -36) (undo-tree-id4503 . -36) (undo-tree-id4505 . -36) (undo-tree-id4507 . -37) (undo-tree-id4509 . -37) (undo-tree-id4511 . -37) (undo-tree-id4513 . -38) (undo-tree-id4515 . -38) (undo-tree-id4517 . -38) (undo-tree-id4519 . -38) (undo-tree-id4521 . -39) (undo-tree-id4523 . -39) (undo-tree-id4525 . -39) (undo-tree-id4527 . -40) (undo-tree-id4529 . -40) (undo-tree-id4531 . -40) (undo-tree-id4533 . -40) (undo-tree-id4535 . -41) (undo-tree-id4537 . -41) (undo-tree-id4539 . -41) (undo-tree-id4541 . -42) (undo-tree-id4543 . -42) (undo-tree-id4545 . -42) (undo-tree-id4547 . -42) (undo-tree-id4549 . -43) (undo-tree-id4551 . -43) (undo-tree-id4553 . -43) (undo-tree-id4555 . -44) (undo-tree-id4557 . -44) (undo-tree-id4559 . -44) (undo-tree-id4561 . -44) (undo-tree-id4563 . -45) (undo-tree-id4565 . -45) (undo-tree-id4567 . -45) (undo-tree-id4569 . -46) (undo-tree-id4571 . -46) (undo-tree-id4573 . -46) (undo-tree-id4575 . -46) (undo-tree-id4577 . -46) (undo-tree-id4579 . -46) (undo-tree-id4581 . -46) (undo-tree-id4583 . -46) (undo-tree-id4585 . -46) (undo-tree-id4587 . -46) (undo-tree-id4589 . -46) (undo-tree-id4591 . -46) (undo-tree-id4593 . -46) (undo-tree-id4595 . -46) (undo-tree-id4597 . -46) (undo-tree-id4599 . -46) (undo-tree-id4601 . -46) (undo-tree-id4603 . -46) (undo-tree-id4605 . -46) (undo-tree-id4607 . -46) (undo-tree-id4609 . -46) (undo-tree-id4611 . -46) (undo-tree-id4613 . -47) (undo-tree-id4615 . -47) (undo-tree-id4617 . -47) (undo-tree-id4619 . -47) (undo-tree-id4621 . -48) (undo-tree-id4623 . -48) (undo-tree-id4625 . -48) (undo-tree-id4627 . -49) (undo-tree-id4629 . -49) (undo-tree-id4631 . -49) (undo-tree-id4633 . -49) (undo-tree-id4635 . -50) (undo-tree-id4637 . -50) (undo-tree-id4639 . -50) (undo-tree-id4641 . -51) (undo-tree-id4643 . -51) (undo-tree-id4645 . -51) (undo-tree-id4647 . -51) (undo-tree-id4649 . -52) (undo-tree-id4651 . -52) (undo-tree-id4653 . -52) (undo-tree-id4655 . -53) (undo-tree-id4657 . -53) (undo-tree-id4659 . -53) (undo-tree-id4661 . -53) (undo-tree-id4663 . -54) (undo-tree-id4665 . -54) (undo-tree-id4667 . -54) (undo-tree-id4669 . -55) (undo-tree-id4671 . -55) (undo-tree-id4673 . -55) (undo-tree-id4675 . -55) (undo-tree-id4677 . -56) (undo-tree-id4679 . -56) (undo-tree-id4681 . -56) (undo-tree-id4683 . -57) (undo-tree-id4685 . -57) (undo-tree-id4687 . -57) (undo-tree-id4689 . -57) (undo-tree-id4691 . -58) (undo-tree-id4693 . -58) (undo-tree-id4695 . -58) (undo-tree-id4697 . -59) (undo-tree-id4699 . -59) (undo-tree-id4701 . -59) (undo-tree-id4703 . -59) (undo-tree-id4705 . -60) (undo-tree-id4707 . -60) (undo-tree-id4709 . -60) (undo-tree-id4711 . -61) (undo-tree-id4713 . -61) (undo-tree-id4715 . -61) (undo-tree-id4717 . -61) (undo-tree-id4719 . -62) (undo-tree-id4721 . -62) (undo-tree-id4723 . -62) (undo-tree-id4725 . -63) (undo-tree-id4727 . -63) (undo-tree-id4729 . -63) (undo-tree-id4731 . -63) (undo-tree-id4733 . -64) (undo-tree-id4735 . -64) (undo-tree-id4737 . -64) (undo-tree-id4739 . -65) (undo-tree-id4741 . -65) (undo-tree-id4743 . -65) (undo-tree-id4745 . -65) (undo-tree-id4747 . -66) (undo-tree-id4749 . -66) (undo-tree-id4751 . -66) (undo-tree-id4753 . -67) (undo-tree-id4755 . -67) (undo-tree-id4757 . -67) (undo-tree-id4759 . -67) (undo-tree-id4761 . -68) (undo-tree-id4763 . -68) (undo-tree-id4765 . -68) (undo-tree-id4767 . -69) (undo-tree-id4769 . -69) (undo-tree-id4771 . -69) (undo-tree-id4773 . -69) (undo-tree-id4775 . -70) (undo-tree-id4777 . -70) (undo-tree-id4779 . -70) (undo-tree-id4781 . -71) (undo-tree-id4783 . -71) (undo-tree-id4785 . -71) (undo-tree-id4787 . -71) (undo-tree-id4789 . -72) (undo-tree-id4791 . -72) (undo-tree-id4793 . -72) (undo-tree-id4795 . -73) (undo-tree-id4797 . -73) (undo-tree-id4799 . -73) (undo-tree-id4801 . -73) (undo-tree-id4803 . -74) (undo-tree-id4805 . -74) (undo-tree-id4807 . -74) (undo-tree-id4809 . -75) (undo-tree-id4811 . -75) (undo-tree-id4813 . -75) (undo-tree-id4815 . -75) (undo-tree-id4817 . -74) (undo-tree-id4819 . -74) (undo-tree-id4821 . -74) (undo-tree-id4823 . -74) (undo-tree-id4825 . -74) (undo-tree-id4827 . -74) (undo-tree-id4829 . -74) (undo-tree-id4831 . -74) (undo-tree-id4833 . -74) (undo-tree-id4835 . -74) (undo-tree-id4837 . -74) (undo-tree-id4839 . -74) (undo-tree-id4841 . -74) (undo-tree-id4843 . -74) (undo-tree-id4845 . -74) (undo-tree-id4847 . -74) (undo-tree-id4849 . -74) (undo-tree-id4851 . -74) (undo-tree-id4853 . -74) (undo-tree-id4855 . -74) (undo-tree-id4857 . -74) (undo-tree-id4859 . -74) (undo-tree-id4861 . -75) 6183 (t 26246 42131 414219 857000)) ((6109 . 6184)) (26246 51052 993092 163000) 0 nil])
([nil nil ((#("(int) " 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-5-face)) 5 6 (fontified t)) . 1380) (undo-tree-id5734 . -5) (undo-tree-id5735 . -5) (undo-tree-id5736 . -5) (undo-tree-id5737 . -5) (undo-tree-id5738 . -6) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -2) (undo-tree-id5747 . -2) (undo-tree-id5748 . -2) (undo-tree-id5749 . -2) (undo-tree-id5750 . -2) (undo-tree-id5751 . -2) (undo-tree-id5752 . -2) (undo-tree-id5753 . -3) (undo-tree-id5754 . -3) (undo-tree-id5755 . -3) (undo-tree-id5756 . -3) (undo-tree-id5757 . -3) (undo-tree-id5758 . -3) (undo-tree-id5759 . -3) (undo-tree-id5760 . -4) (undo-tree-id5761 . -4) (undo-tree-id5762 . -4) (undo-tree-id5763 . -4) (undo-tree-id5764 . -4) (undo-tree-id5765 . -4) (undo-tree-id5766 . -4) (undo-tree-id5767 . -5) (undo-tree-id5768 . -5) (undo-tree-id5769 . -5) (undo-tree-id5770 . -5) (undo-tree-id5771 . -5) (undo-tree-id5772 . -5) (undo-tree-id5773 . -5) (undo-tree-id5774 . -5) (undo-tree-id5775 . -6) (undo-tree-id5776 . -6) (#("(int) " 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-5-face)) 5 6 (fontified t)) . 1323) (undo-tree-id5777 . -6) (#("(int) " 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-5-face)) 5 6 (fontified t)) . 1268) (undo-tree-id5778 . -6) (#("(int) " 0 1 (fontified t face (rainbow-delimiters-depth-5-face)) 1 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-5-face)) 5 6 (fontified t)) . 1212) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -6) 1403 (t 26246 51521 19906 466000)) nil (26246 51542 569567 692000) 0 nil])
([nil nil ((6121 . 6134) (#("." 0 1 (fontified t face font-lock-string-face)) . -6121) (undo-tree-id4314 . -1) (undo-tree-id4316 . -1) (undo-tree-id4318 . -1) (undo-tree-id4320 . -1) (undo-tree-id4322 . -1) (undo-tree-id4324 . -1) (undo-tree-id4326 . -1) (undo-tree-id4328 . -1) (undo-tree-id4330 . -1) (undo-tree-id4332 . -1) (undo-tree-id4334 . -1) (undo-tree-id4336 . -1) (undo-tree-id4338 . -1) (undo-tree-id4340 . -1) (undo-tree-id4342 . -1) (undo-tree-id4344 . -1) (undo-tree-id4346 . -1) (undo-tree-id4348 . -1) (undo-tree-id4350 . -1) (undo-tree-id4352 . -1) (undo-tree-id4354 . -1) (undo-tree-id4356 . -1) (undo-tree-id4358 . -1) 6122 (6121 . 6122) (6120 . 6121) (6115 . 6120) (6114 . 6115) (6110 . 6114) (6109 . 6110)) ((#("/" 0 1 (fontified nil face font-lock-string-face)) . 6109) (#("home" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face)) . 6110) (#("/" 0 1 (fontified nil face font-lock-string-face)) . 6114) (#("light" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face)) . 6115) (#("/" 0 1 (fontified nil face font-lock-string-face)) . 6120) (#("." 0 1 (fontified nil face font-lock-string-face)) . 6121) (6121 . 6122) (#("get_state.sh " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face)) . 6121)) (26246 51052 541774 495000) 0 nil])
([nil nil ((1252 . 1254) (1250 . 1252) (1249 . 1250) (t 26246 51542 656221 520000)) nil (26246 51557 581009 805000) 0 nil])
([nil nil ((6139 . 6145) (6135 . 6139)) ((#(" + c" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 6135) (undo-tree-id5340 . -4) (undo-tree-id5341 . -4) (undo-tree-id5342 . -4) (undo-tree-id5343 . -4) (undo-tree-id5344 . -4) (undo-tree-id5345 . -4) (undo-tree-id5346 . -4) (undo-tree-id5347 . -4) (undo-tree-id5348 . -4) (undo-tree-id5349 . -4) (undo-tree-id5350 . -4) (undo-tree-id5351 . -4) (undo-tree-id5352 . -4) (undo-tree-id5353 . -4) (undo-tree-id5354 . -4) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -4) (undo-tree-id5359 . -4) (undo-tree-id5360 . -4) (undo-tree-id5361 . -4) (undo-tree-id5362 . -4) (undo-tree-id5363 . -4) (undo-tree-id5364 . -4) (undo-tree-id5365 . -4) (undo-tree-id5366 . -4) (undo-tree-id5367 . -4) (undo-tree-id5368 . -4) (undo-tree-id5369 . -4) (undo-tree-id5370 . -4) (undo-tree-id5371 . -4) (undo-tree-id5372 . -4) (undo-tree-id5373 . -4) (undo-tree-id5374 . -4) (undo-tree-id5375 . -4) (undo-tree-id5376 . -4) (#("urrent" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 6139) (undo-tree-id5377 . -6) (undo-tree-id5378 . -6) (undo-tree-id5379 . -6) (undo-tree-id5380 . -6) (undo-tree-id5381 . -6) (undo-tree-id5382 . -6) (undo-tree-id5383 . -6) (undo-tree-id5384 . -6) (undo-tree-id5385 . -6) (undo-tree-id5386 . -6) (undo-tree-id5387 . -6) (undo-tree-id5388 . -6) (undo-tree-id5389 . -6) (undo-tree-id5390 . -6) (undo-tree-id5391 . -6) (undo-tree-id5392 . -6) (undo-tree-id5393 . -6) (undo-tree-id5394 . -6) (undo-tree-id5395 . -6) (undo-tree-id5396 . -6) (undo-tree-id5397 . -6) (undo-tree-id5398 . -6) (undo-tree-id5399 . -6) (undo-tree-id5400 . -6) (undo-tree-id5401 . -6) (undo-tree-id5402 . -6) (undo-tree-id5403 . -6) (undo-tree-id5404 . -6) (undo-tree-id5405 . -6) (undo-tree-id5406 . -6) (undo-tree-id5407 . -6) (undo-tree-id5408 . -6) (undo-tree-id5409 . -6) (undo-tree-id5410 . -6) (undo-tree-id5411 . -6) (undo-tree-id5412 . -6) (undo-tree-id5413 . -6)) (26246 51052 306868 716000) 0 nil])
([nil nil ((#(">> " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1250) (undo-tree-id5789 . -2) (undo-tree-id5790 . -3) (undo-tree-id5791 . -3) (undo-tree-id5792 . -3) (undo-tree-id5793 . -3) (undo-tree-id5794 . -3) (undo-tree-id5795 . -3) (undo-tree-id5796 . -3) (undo-tree-id5797 . -3) (undo-tree-id5798 . -3) (undo-tree-id5799 . -3) (undo-tree-id5800 . -3) (undo-tree-id5801 . -3) (undo-tree-id5802 . -3) (undo-tree-id5803 . -3) (undo-tree-id5804 . -3) (undo-tree-id5805 . -3) (undo-tree-id5806 . -3) (undo-tree-id5807 . -3) (undo-tree-id5808 . -3) (undo-tree-id5809 . -3) (undo-tree-id5810 . -3) (undo-tree-id5811 . -3) (undo-tree-id5812 . -3) (undo-tree-id5813 . -3) (undo-tree-id5814 . -3) (undo-tree-id5815 . -3) (undo-tree-id5816 . -3) (undo-tree-id5817 . -3) (undo-tree-id5818 . -3) (undo-tree-id5819 . -3) (undo-tree-id5820 . -3) (undo-tree-id5821 . -3) (undo-tree-id5822 . -3) (undo-tree-id5823 . -3) (undo-tree-id5824 . -3) (undo-tree-id5825 . -3) (undo-tree-id5826 . -3) (undo-tree-id5827 . -3)) nil (26246 51557 581001 531000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6147) (undo-tree-id5033 . -4) 6151 (6146 . 6151) (t 26246 42322 358044 839000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 6146) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (6147 . 6151)) (26246 51052 132992 997000) 0 nil])
([nil nil ((1252 . 1253) (1250 . 1252)) nil (26246 51557 580915 513000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6152 . 6153) (#("
" 0 1 (fontified nil)) . -6210) (6148 . 6211)) ((#("
    RCLCPP_INFO(this->get_logger(), \"VALUE:::::: %u\", value);
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil) 5 16 (fontified nil) 16 17 (fontified nil face (rainbow-delimiters-depth-4-face)) 17 21 (fontified nil face font-lock-keyword-face) 21 33 (fontified nil) 33 34 (fontified nil face (rainbow-delimiters-depth-5-face)) 34 35 (fontified nil face (rainbow-delimiters-depth-5-face)) 35 36 (fontified nil) 36 37 (fontified nil) 37 38 (fontified nil face font-lock-string-face) 38 39 (fontified nil face font-lock-string-face) 39 40 (fontified nil face font-lock-string-face) 40 41 (fontified nil face font-lock-string-face) 41 42 (fontified nil face font-lock-string-face) 42 43 (fontified nil face font-lock-string-face) 43 44 (fontified nil face font-lock-string-face) 44 45 (fontified nil face font-lock-string-face) 45 46 (fontified nil face font-lock-string-face) 46 47 (fontified nil face font-lock-string-face) 47 48 (fontified nil face font-lock-string-face) 48 49 (fontified nil face font-lock-string-face) 49 50 (fontified nil face font-lock-string-face) 50 51 (fontified nil face font-lock-string-face) 51 52 (fontified nil face font-lock-string-face) 52 53 (fontified nil face font-lock-string-face) 53 54 (fontified nil) 54 55 (fontified nil) 55 56 (fontified nil) 56 57 (fontified nil) 57 58 (fontified nil) 58 59 (fontified nil) 59 60 (fontified nil) 60 61 (fontified nil face (rainbow-delimiters-depth-4-face)) 61 62 (fontified nil) 62 63 (fontified nil)) . 6148) (undo-tree-id5058 . -55) (undo-tree-id5059 . -38) (undo-tree-id5060 . -1) (undo-tree-id5061 . -55) (undo-tree-id5062 . -55) (undo-tree-id5063 . -55) (undo-tree-id5064 . -55) (undo-tree-id5065 . -55) (undo-tree-id5066 . -55) (undo-tree-id5067 . -55) (undo-tree-id5068 . -55) (undo-tree-id5069 . -55) (undo-tree-id5070 . -55) (undo-tree-id5071 . -55) (undo-tree-id5072 . -55) (undo-tree-id5073 . -55) (undo-tree-id5074 . -55) (undo-tree-id5075 . -55) (undo-tree-id5076 . -55) (undo-tree-id5077 . -55) (undo-tree-id5078 . -55) (undo-tree-id5079 . -55) (undo-tree-id5080 . -55) (undo-tree-id5081 . -55) (undo-tree-id5082 . -55) (undo-tree-id5083 . -55) (undo-tree-id5084 . -55) (undo-tree-id5085 . -55) (undo-tree-id5086 . -55) (undo-tree-id5087 . -55) (undo-tree-id5088 . -55) (undo-tree-id5089 . -55) (undo-tree-id5090 . -55) (undo-tree-id5091 . -55) (undo-tree-id5092 . -55) (undo-tree-id5093 . -55) (undo-tree-id5094 . -55) (undo-tree-id5095 . -55) (undo-tree-id5096 . -55) (undo-tree-id5097 . -55) (undo-tree-id5098 . -55) (undo-tree-id5099 . -55) (undo-tree-id5100 . -55) (undo-tree-id5101 . -55) (undo-tree-id5102 . -55) (undo-tree-id5103 . -55) (undo-tree-id5104 . -55) (undo-tree-id5105 . -55) (undo-tree-id5106 . -55) (undo-tree-id5107 . -55) (undo-tree-id5108 . -55) (undo-tree-id5109 . -55) (undo-tree-id5110 . -55) (undo-tree-id5111 . -55) (undo-tree-id5112 . -55) (undo-tree-id5113 . -55) (undo-tree-id5114 . -55) (undo-tree-id5115 . -55) (undo-tree-id5116 . -55) (undo-tree-id5117 . -55) (undo-tree-id5118 . -55) (undo-tree-id5119 . -55) (undo-tree-id5120 . -55) (undo-tree-id5121 . -55) (undo-tree-id5122 . -55) (undo-tree-id5123 . -55) (undo-tree-id5124 . -55) (undo-tree-id5125 . -55) (undo-tree-id5126 . -55) (undo-tree-id5127 . -55) (undo-tree-id5128 . -55) (undo-tree-id5129 . -55) (undo-tree-id5130 . -55) (undo-tree-id5131 . -55) (undo-tree-id5132 . -55) (undo-tree-id5133 . -55) (undo-tree-id5134 . -55) (undo-tree-id5135 . -55) (undo-tree-id5136 . -55) (undo-tree-id5137 . -55) (undo-tree-id5138 . -55) (undo-tree-id5139 . -55) (undo-tree-id5140 . -55) (undo-tree-id5141 . -55) (undo-tree-id5142 . -55) (undo-tree-id5143 . -55) (undo-tree-id5144 . -55) (undo-tree-id5145 . -55) (undo-tree-id5146 . -55) (undo-tree-id5147 . -55) (undo-tree-id5148 . -55) (undo-tree-id5149 . -55) (undo-tree-id5150 . -55) (undo-tree-id5151 . -55) (undo-tree-id5152 . -55) (undo-tree-id5153 . -55) (undo-tree-id5154 . -55) (undo-tree-id5155 . -55) (undo-tree-id5156 . -55) (undo-tree-id5157 . -55) (undo-tree-id5158 . -55) (undo-tree-id5159 . -55) (undo-tree-id5160 . -55) (undo-tree-id5161 . -55) (undo-tree-id5162 . -55) (undo-tree-id5163 . -55) (undo-tree-id5164 . -55) (undo-tree-id5165 . -55) (undo-tree-id5166 . -55) (undo-tree-id5167 . -55) (undo-tree-id5168 . -55) (undo-tree-id5169 . -55) (undo-tree-id5170 . -55) (undo-tree-id5171 . -55) (undo-tree-id5172 . -55) (undo-tree-id5173 . -55) (undo-tree-id5174 . -55) (undo-tree-id5175 . -55) (undo-tree-id5176 . -55) (undo-tree-id5177 . -55) (undo-tree-id5178 . -52) (undo-tree-id5179 . -52) (undo-tree-id5180 . -52) (undo-tree-id5181 . -52) (undo-tree-id5182 . -52) (undo-tree-id5183 . -52) (undo-tree-id5184 . -52) (undo-tree-id5185 . -52) (undo-tree-id5186 . -52) (undo-tree-id5187 . -52) (undo-tree-id5188 . -52) (undo-tree-id5189 . -52) (undo-tree-id5190 . -52) (undo-tree-id5191 . -52) (undo-tree-id5192 . -52) (undo-tree-id5193 . -52) (undo-tree-id5194 . -52) (undo-tree-id5195 . -52) (undo-tree-id5196 . -52) (undo-tree-id5197 . -52) (undo-tree-id5198 . -52) (undo-tree-id5199 . -52) (undo-tree-id5200 . -52) (undo-tree-id5201 . -52) (undo-tree-id5202 . -52) (undo-tree-id5203 . -52) (undo-tree-id5204 . -52) (undo-tree-id5205 . -52) (undo-tree-id5206 . -52) (undo-tree-id5207 . -52) (undo-tree-id5208 . -52) (undo-tree-id5209 . -52) (undo-tree-id5210 . -52) (undo-tree-id5211 . -52) (undo-tree-id5212 . -52) (undo-tree-id5213 . -52) (undo-tree-id5214 . -52) (undo-tree-id5215 . -52) (undo-tree-id5216 . -52) (undo-tree-id5217 . -52) (undo-tree-id5218 . -52) (undo-tree-id5219 . -52) (undo-tree-id5220 . -52) (undo-tree-id5221 . -52) (undo-tree-id5222 . -52) (undo-tree-id5223 . -52) (undo-tree-id5224 . -52) (undo-tree-id5225 . -52) (undo-tree-id5226 . -52) (undo-tree-id5227 . -52) (undo-tree-id5228 . -52) (undo-tree-id5229 . -52) (undo-tree-id5230 . -52) (undo-tree-id5231 . -38) (undo-tree-id5232 . -38) (undo-tree-id5233 . -38) (undo-tree-id5234 . -38) (undo-tree-id5235 . -38) (undo-tree-id5236 . -38) (undo-tree-id5237 . -38) (undo-tree-id5238 . -38) (undo-tree-id5239 . -38) (undo-tree-id5240 . -38) (undo-tree-id5241 . -38) (undo-tree-id5242 . -38) (undo-tree-id5243 . -38) (undo-tree-id5244 . -38) (undo-tree-id5245 . -38) (undo-tree-id5246 . -38) (undo-tree-id5247 . -38) (undo-tree-id5248 . -38) (undo-tree-id5249 . -38) (undo-tree-id5250 . -38) (undo-tree-id5251 . -38) (undo-tree-id5252 . -38) (undo-tree-id5253 . -38) (undo-tree-id5254 . -38) (undo-tree-id5255 . -38) (undo-tree-id5256 . -38) (undo-tree-id5257 . -38) (undo-tree-id5258 . -38) (undo-tree-id5259 . -38) (undo-tree-id5260 . -38) (undo-tree-id5261 . -38) (undo-tree-id5262 . -38) (undo-tree-id5263 . -38) (undo-tree-id5264 . -38) (undo-tree-id5265 . -38) (undo-tree-id5266 . -38) (undo-tree-id5267 . -38) (undo-tree-id5268 . -38) (undo-tree-id5269 . -38) (undo-tree-id5270 . -38) (undo-tree-id5271 . -38) (undo-tree-id5272 . -38) (undo-tree-id5273 . -38) (undo-tree-id5274 . -38) (undo-tree-id5275 . -38) (undo-tree-id5276 . -38) (undo-tree-id5277 . -38) (undo-tree-id5278 . -38) (undo-tree-id5279 . -38) (undo-tree-id5280 . -38) (undo-tree-id5281 . -38) (undo-tree-id5282 . -38) (undo-tree-id5283 . -38) (undo-tree-id5284 . -38) (undo-tree-id5285 . -38) (undo-tree-id5286 . -38) (undo-tree-id5287 . -38) (undo-tree-id5288 . -38) (undo-tree-id5289 . -38) (undo-tree-id5290 . -38) (undo-tree-id5291 . -38) (undo-tree-id5292 . -38) (undo-tree-id5293 . -38) (undo-tree-id5294 . -38) (undo-tree-id5295 . -38) (undo-tree-id5296 . -38) (undo-tree-id5297 . -38) (undo-tree-id5298 . -38) (undo-tree-id5299 . -38) (undo-tree-id5300 . -38) (undo-tree-id5301 . -1) (undo-tree-id5302 . -38) (undo-tree-id5303 . -38) (undo-tree-id5304 . -38) (undo-tree-id5305 . -38) (undo-tree-id5306 . -38) (undo-tree-id5307 . -38) (undo-tree-id5308 . -38) (undo-tree-id5309 . -38) (undo-tree-id5310 . -38) (undo-tree-id5311 . -38) (undo-tree-id5312 . -38) (undo-tree-id5313 . -38) (undo-tree-id5314 . -38) (undo-tree-id5315 . -38) (undo-tree-id5316 . -38) (undo-tree-id5317 . -38) (undo-tree-id5318 . -38) (undo-tree-id5319 . -38) (undo-tree-id5320 . -38) (undo-tree-id5321 . -38) (undo-tree-id5322 . -38) (undo-tree-id5323 . -38) (undo-tree-id5324 . -38) (undo-tree-id5325 . -38) (undo-tree-id5326 . -38) (undo-tree-id5327 . -38) (undo-tree-id5328 . -38) (undo-tree-id5329 . -38) (undo-tree-id5330 . -38) (undo-tree-id5331 . -38) (undo-tree-id5332 . -38) (undo-tree-id5333 . -38) (undo-tree-id5334 . -38) (undo-tree-id5335 . -38) (undo-tree-id5336 . -38) (undo-tree-id5337 . -38) (6210 . 6211) (nil rear-nonsticky t 6152 . 6153)) (26246 51051 913849 465000) 0 nil])
([nil nil ((1312 . 1314) (1310 . 1312) (1309 . 1310)) nil (26246 51557 580912 258000) 0 nil])
([nil nil ((#("VALUE" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . 6186) (undo-tree-id5031 . -4)) ((6186 . 6191)) (26246 51051 470832 954000) 0 nil])
([nil nil ((1374 . 1376) (1372 . 1374) (1371 . 1372)) nil (26246 51557 580907 737000) 0 nil])
([nil nil ((#(":::::: " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face)) . 6186) (undo-tree-id5029 . -6)) ((6186 . 6193)) (26246 51051 106600 828000) 0 nil])
([nil nil ((1447 . 1449) (1445 . 1447) (1444 . 1445)) nil (26246 51557 580895 370000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 6186)) ((6186 . 6187)) (26246 51050 536283 169000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -5919) (undo-tree-id5835 . -6) 5925 (5919 . 5925) (#("      " 0 6 (fontified nil)) . 5918) (undo-tree-id5836 . -6) (5917 . 5925) (t 26246 51557 640439 713000)) nil (26246 51869 18386 564000) 0 nil])
([nil nil ((6186 . 6188) (#("u" 0 1 (fontified t face font-lock-string-face)) . -6186) (undo-tree-id5016 . 1) (undo-tree-id5017 . -1) (undo-tree-id5019 . -1) (undo-tree-id5021 . -1) (undo-tree-id5023 . -1) (undo-tree-id5025 . -1) (undo-tree-id5027 . -1) 6187) ((6186 . 6187) (#("%s" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 6186)) (26246 51050 95193 582000) 0 nil])
([nil nil ((5929 . 5930) (5928 . 5929) (5927 . 5928) (#("l" 0 1 (fontified t)) . -5927) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) 5928 (5925 . 5928) (5919 . 5925) (#("      " 0 6 (fontified nil)) . 5918) (undo-tree-id5834 . -6) (5924 . 5925) (5918 . 5924)) nil (26246 51869 18377 521000) 0 nil])
([nil nil ((#("value" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 6191) (undo-tree-id5014 . -4)) ((6191 . 6196)) (26246 51048 716814 834000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5980 . 5981) (nil fontified nil 5930 . 5981) (5930 . 5981) 5929) nil (26246 51869 18366 945000) 0 nil])
([nil nil ((apply yas--snippet-revive 6203 6210 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (6203 . 6210) (#("c_str()" 0 7 (fontified nil)) . 6203) (6203 . 6210) (#("c_str() const" 0 13 (fontified nil)) . -6203) (6203 . 6216) (#("c" 0 1 (fontified t)) . -6203) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4866 . -1) (undo-tree-id4868 . -1) (undo-tree-id4870 . -1) (undo-tree-id4872 . -1) (undo-tree-id4874 . -1) (undo-tree-id4876 . -1) (undo-tree-id4878 . -1) (undo-tree-id4880 . -1) (undo-tree-id4882 . -1) (undo-tree-id4884 . -1) (undo-tree-id4886 . -1) (undo-tree-id4888 . -1) (undo-tree-id4890 . -1) (undo-tree-id4892 . -1) (undo-tree-id4894 . -1) (undo-tree-id4896 . -1) (undo-tree-id4898 . -1) (undo-tree-id4900 . -1) (undo-tree-id4902 . -1) (undo-tree-id4904 . -1) (undo-tree-id4906 . -1) (undo-tree-id4908 . -1) (undo-tree-id4910 . -1) (undo-tree-id4912 . -1) (undo-tree-id4914 . -1) (undo-tree-id4916 . -1) (undo-tree-id4918 . -1) (undo-tree-id4920 . -1) (undo-tree-id4922 . -1) (undo-tree-id4924 . -1) (undo-tree-id4926 . -1) 6204 (6202 . 6204) (6191 . 6202) (#("ge" 0 2 (fontified nil)) . 6191) (6191 . 6193) (#("get_command" 0 11 (fontified nil)) . -6191) (6191 . 6202) (#("ge" 0 1 (fontified t) 1 2 (fontified t)) . -6191) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4931 . -2) (undo-tree-id4933 . -2) (undo-tree-id4935 . -2) (undo-tree-id4937 . -2) (undo-tree-id4939 . -2) (undo-tree-id4941 . -2) (undo-tree-id4943 . -2) (undo-tree-id4945 . -2) (undo-tree-id4947 . -2) (undo-tree-id4949 . -2) (undo-tree-id4951 . -2) (undo-tree-id4953 . -2) (undo-tree-id4955 . -2) (undo-tree-id4957 . -2) (undo-tree-id4959 . -2) (undo-tree-id4961 . -2) (undo-tree-id4963 . -2) (undo-tree-id4965 . -2) (undo-tree-id4967 . -2) (undo-tree-id4969 . -2) (undo-tree-id4971 . -2) (undo-tree-id4973 . -2) (undo-tree-id4975 . -2) (undo-tree-id4977 . -2) (undo-tree-id4979 . -2) (undo-tree-id4981 . -2) (undo-tree-id4983 . -2) (undo-tree-id4985 . -2) (undo-tree-id4987 . -2) (undo-tree-id4989 . -2) (undo-tree-id4991 . -2) (undo-tree-id4993 . -2) (undo-tree-id4995 . -2) (undo-tree-id4997 . -2) (undo-tree-id4999 . -2) (undo-tree-id5001 . -2) (undo-tree-id5003 . -2) (undo-tree-id5005 . -2) (undo-tree-id5007 . -2) (undo-tree-id5009 . -2) (undo-tree-id5011 . -2) (undo-tree-id5013 . -2) 6193 (6191 . 6193)) ((#("ge" 0 1 (fontified nil) 1 2 (fontified nil)) . 6191) (6191 . 6193) (#("get_command" 0 11 (fontified nil)) . 6191) (6191 . 6202) (#("ge" 0 2 (fontified nil)) . 6191) (6191 . 6193) (#("get_command" 0 11 (fontified nil)) . 6191) (undo-tree-id5055 . -11) (#(".c" 0 1 (fontified nil) 1 2 (fontified nil)) . 6202) (undo-tree-id5056 . -1) (6203 . 6204) (#("c_str() const" 0 13 (fontified nil)) . 6203) (6203 . 6216) (#("c_str()" 0 7 (fontified nil)) . 6203) (6203 . 6210) (#("c_str()" 5 6 (face (rainbow-delimiters-depth-5-face)) 6 7 (face (rainbow-delimiters-depth-5-face))) . 6203) (undo-tree-id5057 . -6)) (26246 51047 832101 230000) 0 nil])
([nil nil ((5919 . 5923) (#("      " 0 6 (fontified t)) . 5919) 5980) nil (26246 51869 18362 809000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1255) (undo-tree-id5037 . -1) (#("*" 0 1 (fontified t)) . -1256) (undo-tree-id5038 . -1) (#(" " 0 1 (fontified t)) . -1257) (undo-tree-id5039 . -1) 1258 (1257 . 1258) (1256 . 1257) (1255 . 1256) (t 26246 42337 314074 422000)) ((#(" " 0 1 (fontified nil)) . 1255) (undo-tree-id5052 . -1) (#("*" 0 1 (fontified nil)) . 1256) (undo-tree-id5053 . -1) (#(" " 0 1 (fontified nil)) . 1257) (undo-tree-id5054 . -1) (1255 . 1258)) (26246 51047 130858 476000) 0 nil])
([nil nil ((6003 . 6010) (5987 . 6003) (5980 . 5987) (5979 . 5980)) nil (26246 51869 18359 775000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1255) (undo-tree-id5034 . -1) (#("*" 0 1 (fontified t)) . -1256) (undo-tree-id5035 . -1) (#(" " 0 1 (fontified t)) . -1257) (undo-tree-id5036 . -1) 1258 (1257 . 1258) (1256 . 1257) (1255 . 1256)) ((#(" " 0 1 (fontified nil)) . 1255) (undo-tree-id5049 . -1) (#("*" 0 1 (fontified nil)) . 1256) (undo-tree-id5050 . -1) (#(" " 0 1 (fontified nil)) . 1257) (undo-tree-id5051 . -1) (1255 . 1258)) (26246 51046 922678 91000) 0 nil])
([nil nil ((6010 . 6011)) nil (26246 51869 18355 712000) 0 nil])
([nil nil ((1258 . 1260) (1256 . 1258) (1255 . 1256) (t 26246 50981 804054 602000)) ((#(" " 0 1 (fontified nil)) . 1255) (#("<<" 0 1 (fontified nil) 1 2 (fontified nil)) . 1256) (#(" 8" 0 1 (fontified t) 1 2 (fontified t)) . 1258)) (26246 51046 721025 702000) 0 nil])
([nil nil ((6011 . 6012) (nil syntax-table nil 6012 . 6013) (nil syntax-table (1) 6010 . 6011) (6010 . 6011) (#("\"" 0 1 (fontified nil)) . -6010) (nil syntax-table nil 6012 . 6013) (nil syntax-table (1) 6010 . 6011) (6010 . 6011)) nil (26246 51869 18352 285000) 0 nil])
([nil nil ((1324 . 1326) (1322 . 1324) (1321 . 1322)) ((#(" " 0 1 (fontified nil)) . 1321) (#("<<" 0 1 (fontified nil) 1 2 (fontified nil)) . 1322) (#(" 8" 0 1 (fontified t) 1 2 (fontified t)) . 1324)) (26246 51046 408781 70000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 6011) (undo-tree-id5828 . 1) (undo-tree-id5829 . 1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1)) nil (26246 51869 18345 560000) 0 nil])
([nil nil ((1392 . 1394) (1390 . 1392) (1389 . 1390)) ((#(" " 0 1 (fontified nil)) . 1389) (#("<<" 0 1 (fontified nil) 1 2 (fontified nil)) . 1390) (#(" 8" 0 1 (fontified t) 1 2 (fontified t)) . 1392)) (26246 51046 82754 954000) 0 nil])
([nil nil ((6003 . 6004) (nil syntax-table nil 6012 . 6013) (nil syntax-table (1) 6010 . 6011) (#("\"" 0 1 (fontified nil)) . -6003) (6003 . 6004) (nil syntax-table nil 6012 . 6013) (nil syntax-table (1) 6010 . 6011)) nil (26246 52076 18054 125000) 0 nil])
([nil nil ((1471 . 1473) (1469 . 1471) (1468 . 1469)) ((#(" " 0 1 (fontified nil)) . 1468) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (#("<<" 0 1 (fontified nil) 1 2 (fontified nil)) . 1469) (undo-tree-id5043 . -2) (undo-tree-id5044 . -2) (undo-tree-id5045 . -2) (#(" 8" 0 1 (fontified t) 1 2 (fontified t)) . 1471) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (t 26246 51023 596663 157000)) (26246 51023 541308 399000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5918)) ((5918 . 5919) (t 26246 52073 311948 729000)) (26246 52077 738845 677000) 0 nil])
nil
([nil nil ((#(" 
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 2 (c-in-sws t c-is-sws t fontified t)) . 2172) (undo-tree-id5841 . -1) (undo-tree-id5842 . -2) (undo-tree-id5843 . -2) (undo-tree-id5844 . -2) (undo-tree-id5845 . -2) (undo-tree-id5846 . -2) (undo-tree-id5847 . -2) (undo-tree-id5848 . -2) (undo-tree-id5849 . -2) (undo-tree-id5850 . -2) (t 26246 52073 311948 729000)) nil (26246 52268 901172 112000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-is-sws t c-in-sws t)) . 2172) (undo-tree-id5840 . -1)) nil (26246 52268 901148 666000) 0 nil])
([nil nil ((#("    
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t c-in-sws t)) . 2172) (undo-tree-id5837 . -4) (undo-tree-id5838 . -4) (undo-tree-id5839 . -5)) nil (26246 52268 901136 674000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -7277) (undo-tree-id5851 . -2) (undo-tree-id5852 . -2) 7279 (7277 . 7279) (#("  " 0 2 (fontified nil)) . 7276) (undo-tree-id5853 . -2) (7276 . 7279) (#("  " 0 2 (fontified nil)) . 7275) (undo-tree-id5854 . -2) (7274 . 7278) (t 26246 52268 986076 733000)) nil (26246 52378 177741 114000) 0 nil])
([nil nil ((7290 . 7292) (7286 . 7290) (7280 . 7286) (#("i" 0 1 (fontified t)) . -7280) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) 7281 (7279 . 7281) (#("s" 0 1 (fontified t)) . -7279) (undo-tree-id5995 . -1) (#("u" 0 1 (fontified t)) . -7280) (undo-tree-id5996 . -1) (#("d" 0 1 (fontified t)) . -7281) (undo-tree-id5997 . -1) 7282 (7279 . 7282) (7277 . 7279) (t 26246 52378 236946 723000)) nil (26246 52438 705164 465000) 0 nil])
([nil nil ((7291 . 7302) (#("v" 0 1 (fontified t)) . -7291) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) 7292 (7291 . 7292)) nil (26246 52438 705148 626000) 0 nil])
([nil nil ((7306 . 7310) (7305 . 7309) (7304 . 7306) (7303 . 7304)) nil (26246 52438 705141 748000) 0 nil])
([nil nil ((7314 . 7315)) nil (26246 52438 705138 228000) 0 nil])
([nil nil ((7314 . 7320) (#("res" 0 3 (fontified nil)) . 7314) (7314 . 7317) (#("result" 0 6 (fontified nil)) . -7314) (7314 . 7320) (#("res" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7314) (undo-tree-id5917 . -3) (undo-tree-id5918 . -3) (undo-tree-id5919 . -3) (undo-tree-id5920 . -3) (undo-tree-id5921 . -3) (undo-tree-id5922 . -3) (undo-tree-id5923 . -3) (undo-tree-id5924 . -3) (undo-tree-id5925 . -3) (undo-tree-id5926 . -3) (undo-tree-id5927 . -3) (undo-tree-id5928 . -3) (undo-tree-id5929 . -3) (undo-tree-id5930 . -3) (undo-tree-id5931 . -3) (undo-tree-id5932 . -3) (undo-tree-id5933 . -3) (undo-tree-id5934 . -3) (undo-tree-id5935 . -3) (undo-tree-id5936 . -3) (undo-tree-id5937 . -3) (undo-tree-id5938 . -3) (undo-tree-id5939 . -3) (undo-tree-id5940 . -3) (undo-tree-id5941 . -3) (undo-tree-id5942 . -3) (undo-tree-id5943 . -3) (undo-tree-id5944 . -3) (undo-tree-id5945 . -3) (undo-tree-id5946 . -3) (undo-tree-id5947 . -3) (undo-tree-id5948 . -3) (undo-tree-id5949 . -3) (undo-tree-id5950 . -3) (undo-tree-id5951 . -3) (undo-tree-id5952 . -3) (undo-tree-id5953 . -3) (undo-tree-id5954 . -3) (undo-tree-id5955 . -3) (undo-tree-id5956 . -3) (undo-tree-id5957 . -3) (undo-tree-id5958 . -3) (undo-tree-id5959 . -3) (undo-tree-id5960 . -3) (undo-tree-id5961 . -3) (undo-tree-id5962 . -3) (undo-tree-id5963 . -3) (undo-tree-id5964 . -3) (undo-tree-id5965 . -3) (undo-tree-id5966 . -3) (undo-tree-id5967 . -3) (undo-tree-id5968 . -3) (undo-tree-id5969 . -3) (undo-tree-id5970 . -3) (undo-tree-id5971 . -3) (undo-tree-id5972 . -3) (undo-tree-id5973 . -3) (undo-tree-id5974 . -3) (undo-tree-id5975 . -3) (undo-tree-id5976 . -3) (undo-tree-id5977 . -3) (undo-tree-id5978 . -3) (undo-tree-id5979 . -3) (undo-tree-id5980 . -3) (undo-tree-id5981 . -3) (undo-tree-id5982 . -3) (undo-tree-id5983 . -3) (undo-tree-id5984 . -3) (undo-tree-id5985 . -3) (undo-tree-id5986 . -3) (undo-tree-id5987 . -3) (undo-tree-id5988 . -3) (undo-tree-id5989 . -3) 7317 (7314 . 7317) (7313 . 7315) (7310 . 7313) (7306 . 7310) (#("   " 0 3 (fontified nil)) . -7306) (undo-tree-id5990 . -3) (#(" " 0 1 (fontified t)) . 7309)) nil (26246 52438 705127 366000) 0 nil])
([nil nil ((7331 . 7335) (#("    " 0 4 (fontified nil)) . 7330) (undo-tree-id5878 . -4) (undo-tree-id5879 . -4) (undo-tree-id5880 . -4) (undo-tree-id5881 . -4) (undo-tree-id5882 . -4) (undo-tree-id5883 . -4) (undo-tree-id5884 . -4) (undo-tree-id5885 . -4) (undo-tree-id5886 . -4) (undo-tree-id5887 . -4) (undo-tree-id5888 . -4) (undo-tree-id5889 . -4) (undo-tree-id5890 . -4) (undo-tree-id5891 . -4) (undo-tree-id5892 . -4) (undo-tree-id5893 . -4) (undo-tree-id5894 . -4) (undo-tree-id5895 . -4) (undo-tree-id5896 . -4) (undo-tree-id5897 . -4) (undo-tree-id5898 . -4) (undo-tree-id5899 . -4) (undo-tree-id5900 . -4) (undo-tree-id5901 . -4) (undo-tree-id5902 . -4) (undo-tree-id5903 . -4) (undo-tree-id5904 . -4) (undo-tree-id5905 . -4) (undo-tree-id5906 . -4) (undo-tree-id5907 . -4) (undo-tree-id5908 . -4) (undo-tree-id5909 . -4) (undo-tree-id5910 . -4) (undo-tree-id5911 . -4) (undo-tree-id5912 . -4) (undo-tree-id5913 . -4) (undo-tree-id5914 . -4) (undo-tree-id5915 . -4) (7329 . 7335) (7328 . 7329) (7321 . 7328) (#(" " 0 1 (fontified t)) . -7321) (undo-tree-id5916 . -1) 7322 (7321 . 7322)) nil (26246 52438 704990 176000) 0 nil])
([nil nil ((7382 . 7414) (#("TRANSITION_UNCONFIGURED_SHUTDOWN" 0 32 (fontified nil)) . -7382) (undo-tree-id5855 . -32) (7382 . 7414) (#("TRA" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7382) (undo-tree-id5856 . -3) (undo-tree-id5857 . -3) (undo-tree-id5858 . -3) 7385 (7382 . 7385) (7380 . 7382) (7370 . 7380) (#("Transition" 0 10 (fontified nil)) . -7370) (undo-tree-id5859 . -10) (7370 . 7380) (#("T" 0 1 (fontified t)) . -7370) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) 7371 (#("R" 0 1 (fontified t)) . -7371) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) 7372 (7370 . 7372) (7368 . 7370) (7365 . 7368) (#("msg" 0 3 (fontified nil)) . -7365) (undo-tree-id5867 . -3) (7365 . 7368) (7363 . 7365) (7349 . 7363) (#("li" 0 2 (fontified nil)) . 7349) (undo-tree-id5868 . -2) (7349 . 7351) (#("lifecycle_msgs" 0 14 (fontified nil)) . -7349) (undo-tree-id5869 . -14) (7349 . 7363) (#("li" 0 1 (fontified t) 1 2 (fontified t)) . -7349) (undo-tree-id5870 . -2) (undo-tree-id5871 . -2) (undo-tree-id5872 . -2) 7351 (7350 . 7351) (#("std::uint8_t transit" 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 12 (fontified nil face font-lock-type-face) 12 13 (fontified nil) 13 20 (fontified nil face font-lock-variable-name-face)) . 7350) (undo-tree-id5873 . -20) (7349 . 7350) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7349 7414 nil nil nil t nil)) nil 32 nil #s(yas--field 1 7349 7414 nil nil nil t nil) nil nil)) (7335 . 7370) (#("to_all_change(${1:std::uint8_t transit})" 0 40 (fontified nil)) . 7335) (7335 . 7375) (#("to" 0 2 (fontified nil)) . 7335) (7335 . 7337) (#("to_all_change(std::uint8_t transit)" 0 35 (fontified nil)) . -7335) (7335 . 7370) (#("to_all" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -7335) (undo-tree-id5874 . -6) (undo-tree-id5875 . -6) (undo-tree-id5876 . -6) 7341 (7335 . 7341) (7331 . 7335) (#("    " 0 4 (fontified nil)) . 7330) (undo-tree-id5877 . -4) (7334 . 7335) (7330 . 7334)) nil (26246 52438 704883 887000) 0 nil])
([nil nil ((7415 . 7416) (apply yas--snippet-revive 7335 7415 #s(yas--snippet nil (#s(yas--field 1 7349 7414 nil nil nil t nil)) nil 32 nil #s(yas--field 1 7349 7414 nil nil nil t nil) nil nil))) nil (26246 52438 704613 733000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 7417) (undo-tree-id6000 . -4) (undo-tree-id6001 . -3) 7420 (t 26246 52438 773622 607000)) nil (26246 52443 369618 899000) 0 nil])
([nil nil ((7332 . 7336) (#("    " 0 4 (fontified nil)) . 7331) (undo-tree-id5998 . -4) (7331 . 7336) (#("    " 0 4 (fontified nil)) . 7330) (undo-tree-id5999 . -4) (7334 . 7335) (7330 . 7334)) nil (26246 52443 369603 821000) 0 nil])
([nil nil ((7363 . 7371) (#("f" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -7363) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) 7364 (7344 . 7364) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7344) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7345) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7346) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7347) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (#("a" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7348) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (#("l" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7349) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (#("s" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7350) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7351) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7352) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -7353) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -7354) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) 7355 (7339 . 7355) (#("l" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -7339) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) 7340 (7338 . 7340) (7336 . 7338) (7332 . 7336) (#("   " 0 3 (fontified nil)) . -7332) (undo-tree-id6030 . -3) (#(" " 0 1 (fontified t)) . 7335) (t 26246 52443 431421 267000)) nil (26246 52457 384202 80000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7330) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (t 26246 52457 472917 276000)) nil (26246 52459 808949 270000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7459) (undo-tree-id6057 . -4) (undo-tree-id6058 . -4) (undo-tree-id6059 . -4) (undo-tree-id6060 . -4) (undo-tree-id6061 . -4) (undo-tree-id6062 . -4) (undo-tree-id6063 . -4) (undo-tree-id6064 . -4) (undo-tree-id6065 . -4) (undo-tree-id6066 . -4) (undo-tree-id6067 . -4) (undo-tree-id6068 . -4) (undo-tree-id6069 . -4) (undo-tree-id6070 . -4) (undo-tree-id6071 . -4) (undo-tree-id6072 . -4) (undo-tree-id6073 . -4) (undo-tree-id6074 . -4) (undo-tree-id6075 . -4) (undo-tree-id6076 . -4) (undo-tree-id6077 . -4) (undo-tree-id6078 . -4) (undo-tree-id6079 . -4) (undo-tree-id6080 . -4) (undo-tree-id6081 . -4) (undo-tree-id6082 . -4) (undo-tree-id6083 . -4) (undo-tree-id6084 . -4) (undo-tree-id6085 . -4) (undo-tree-id6086 . -4) (undo-tree-id6087 . -4) (undo-tree-id6088 . -4) (undo-tree-id6089 . -4) (undo-tree-id6090 . -4) (undo-tree-id6091 . -4) (undo-tree-id6092 . -4) (undo-tree-id6093 . -4) (undo-tree-id6094 . -4) 7463 (7459 . 7463) (#("    " 0 4 (fontified nil)) . 7458) (undo-tree-id6095 . -4) (undo-tree-id6096 . -4) (undo-tree-id6097 . -4) (undo-tree-id6098 . -4) (undo-tree-id6099 . -4) (undo-tree-id6100 . -4) (undo-tree-id6101 . -4) (undo-tree-id6102 . -4) (undo-tree-id6103 . -4) (undo-tree-id6104 . -4) (undo-tree-id6105 . -4) (undo-tree-id6106 . -4) (undo-tree-id6107 . -4) (undo-tree-id6108 . -4) (undo-tree-id6109 . -4) (undo-tree-id6110 . -4) (undo-tree-id6111 . -4) (undo-tree-id6112 . -4) (undo-tree-id6113 . -4) (undo-tree-id6114 . -4) (undo-tree-id6115 . -4) (undo-tree-id6116 . -4) (undo-tree-id6117 . -4) (undo-tree-id6118 . -4) (undo-tree-id6119 . -4) (undo-tree-id6120 . -4) (undo-tree-id6121 . -4) (undo-tree-id6122 . -4) (undo-tree-id6123 . -4) (undo-tree-id6124 . -4) (undo-tree-id6125 . -4) (undo-tree-id6126 . -4) (undo-tree-id6127 . -4) (undo-tree-id6128 . -4) (undo-tree-id6129 . -4) (undo-tree-id6130 . -4) (undo-tree-id6131 . -4) (undo-tree-id6132 . -4) (7458 . 7463) (#("    " 0 4 (fontified nil)) . 7457) (undo-tree-id6133 . -4) (undo-tree-id6134 . -4) (undo-tree-id6135 . -4) (undo-tree-id6136 . -4) (undo-tree-id6137 . -4) (undo-tree-id6138 . -4) (undo-tree-id6139 . -4) (undo-tree-id6140 . -4) (undo-tree-id6141 . -4) (undo-tree-id6142 . -4) (undo-tree-id6143 . -4) (undo-tree-id6144 . -4) (undo-tree-id6145 . -4) (undo-tree-id6146 . -4) (undo-tree-id6147 . -4) (undo-tree-id6148 . -4) (undo-tree-id6149 . -4) (undo-tree-id6150 . -4) (undo-tree-id6151 . -4) (undo-tree-id6152 . -4) (undo-tree-id6153 . -4) (undo-tree-id6154 . -4) (undo-tree-id6155 . -4) (undo-tree-id6156 . -4) (undo-tree-id6157 . -4) (undo-tree-id6158 . -4) (undo-tree-id6159 . -4) (undo-tree-id6160 . -4) (undo-tree-id6161 . -4) (7456 . 7462) (t 26246 52459 893871 941000)) nil (26246 52474 901599 452000) 0 nil])
([nil nil ((7471 . 7472) (apply yas--snippet-revive 7463 7471 #s(yas--snippet nil (#s(yas--field 1 7468 7470 nil nil nil t nil)) nil 33 nil #s(yas--field 1 7468 7470 nil nil nil t nil) nil nil)) (7469 . 7470) (#("int status" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 10 (fontified nil face font-lock-variable-name-face)) . 7469) (undo-tree-id6164 . -10) (7468 . 7469) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7468 7470 nil nil nil t nil)) nil 33 nil #s(yas--field 1 7468 7470 nil nil nil t nil) nil nil)) (7463 . 7479) (#("exit(${1:int status})" 0 21 (fontified nil)) . 7463) (7463 . 7484) (#("exit" 0 4 (fontified nil)) . 7463) (7463 . 7467) (#("exit(int status)" 0 16 (fontified nil)) . -7463) (7463 . 7479) (#("exit" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -7463) (undo-tree-id6165 . -4) (undo-tree-id6166 . -4) (undo-tree-id6167 . -2) (undo-tree-id6168 . -2) (undo-tree-id6169 . -2) (undo-tree-id6170 . -2) (undo-tree-id6171 . -2) (undo-tree-id6172 . -2) (undo-tree-id6173 . -2) (undo-tree-id6174 . -2) (undo-tree-id6175 . -2) (undo-tree-id6176 . -2) (undo-tree-id6177 . -2) (undo-tree-id6178 . -2) (undo-tree-id6179 . -2) (undo-tree-id6180 . -2) (undo-tree-id6181 . -2) (undo-tree-id6182 . -2) (undo-tree-id6183 . -3) (undo-tree-id6184 . -3) (undo-tree-id6185 . -3) (undo-tree-id6186 . -3) (undo-tree-id6187 . -3) (undo-tree-id6188 . -3) (undo-tree-id6189 . -3) (undo-tree-id6190 . -4) (undo-tree-id6191 . -4) (undo-tree-id6192 . -4) (undo-tree-id6193 . -4) (undo-tree-id6194 . -4) (undo-tree-id6195 . -4) (undo-tree-id6196 . -4) (undo-tree-id6197 . -4) (undo-tree-id6198 . -4) (undo-tree-id6199 . -4) (undo-tree-id6200 . -4) (undo-tree-id6201 . -4) (undo-tree-id6202 . -4) (undo-tree-id6203 . -4) (undo-tree-id6204 . -4) (undo-tree-id6205 . -4) (undo-tree-id6206 . -4) (undo-tree-id6207 . -4) (undo-tree-id6208 . -4) (undo-tree-id6209 . -4) (undo-tree-id6210 . -4) (undo-tree-id6211 . -4) (undo-tree-id6212 . -4) (undo-tree-id6213 . -4) (undo-tree-id6214 . -4) (undo-tree-id6215 . -4) (undo-tree-id6216 . -4) (undo-tree-id6217 . -4) (undo-tree-id6218 . -4) (undo-tree-id6219 . -4) (undo-tree-id6220 . -4) (undo-tree-id6221 . -4) (undo-tree-id6222 . -4) (undo-tree-id6223 . -4) (undo-tree-id6224 . -4) (undo-tree-id6225 . -4) (undo-tree-id6226 . -4) (undo-tree-id6227 . -4) (undo-tree-id6228 . -4) (undo-tree-id6229 . -4) (undo-tree-id6230 . -4) (undo-tree-id6231 . -4) (undo-tree-id6232 . -4) (undo-tree-id6233 . -4) (undo-tree-id6234 . -4) (undo-tree-id6235 . -4) (undo-tree-id6236 . -4) (undo-tree-id6237 . -4) (undo-tree-id6238 . -4) (undo-tree-id6239 . -4) (undo-tree-id6240 . -4) (undo-tree-id6241 . -4) (undo-tree-id6242 . -4) (undo-tree-id6243 . -4) (undo-tree-id6244 . -4) (undo-tree-id6245 . -4) (undo-tree-id6246 . -4) (undo-tree-id6247 . -4) (undo-tree-id6248 . -4) (undo-tree-id6249 . -4) (undo-tree-id6250 . -4) (undo-tree-id6251 . -4) (undo-tree-id6252 . -4) 7467 (7463 . 7467) (7459 . 7463) (t 26246 52474 953414 715000)) nil (26246 52496 767228 146000) 0 nil])
([nil nil ((7463 . 7465)) nil (26246 52496 766801 427000) 0 nil])
([nil nil ((7465 . 7466)) nil (26246 52496 766798 9000) 0 nil])
([nil nil ((7468 . 7488) (7465 . 7468) (#("e" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -7465) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) 7466 (7464 . 7466) (7462 . 7464) (7458 . 7462)) nil (26246 52496 766788 723000) 0 nil])
([nil nil ((#("," 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -6445) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -6446) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) 6447 (6446 . 6447) (6445 . 6446) (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -6445) (undo-tree-id6258 . -1) 6446 (6443 . 6446) (#("i" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -6443) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -6444) (undo-tree-id6261 . -1) 6445 (6431 . 6445) (6410 . 6431) (6408 . 6410) (6407 . 6408) (t 26246 52496 854406 129000)) nil (26246 52554 843973 116000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t c-is-sws t c-in-sws t)) . -7410) (undo-tree-id6295 . -4) 7414 (7410 . 7414) (#("    " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 4 (fontified nil c-is-sws t c-in-sws t)) . 7409) (undo-tree-id6296 . -4) (7408 . 7414) (t 26246 52554 933678 541000)) nil (26246 52599 595185 816000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -7482) (7409 . 7483)) nil (26246 52599 595177 889000) 0 nil])
([nil nil ((7410 . 7414) (#("      " 0 5 (c-is-sws t c-in-sws t fontified t) 5 6 (rear-nonsticky t c-is-sws t c-in-sws t fontified t)) . -7410) (undo-tree-id6294 . -6) 7416) nil (26246 52599 595174 899000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t c-in-sws t fontified t)) . 7481) (undo-tree-id6292 . 1) (undo-tree-id6293 . -1)) nil (26246 52599 595169 277000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7567) (undo-tree-id6291 . -1)) nil (26246 52599 595161 630000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7481) (undo-tree-id6262 . -4) (undo-tree-id6263 . -4) (undo-tree-id6264 . -4) (undo-tree-id6265 . -4) (undo-tree-id6266 . -4) (undo-tree-id6267 . -4) (undo-tree-id6268 . -4) (undo-tree-id6269 . -4) (undo-tree-id6270 . -4) (undo-tree-id6271 . -4) (undo-tree-id6272 . -4) (undo-tree-id6273 . -4) (undo-tree-id6274 . -4) (undo-tree-id6275 . -4) (undo-tree-id6276 . -4) (undo-tree-id6277 . -4) (undo-tree-id6278 . -4) (undo-tree-id6279 . -4) (undo-tree-id6280 . -4) (undo-tree-id6281 . -4) (undo-tree-id6282 . -4) (undo-tree-id6283 . -4) (undo-tree-id6284 . -4) (undo-tree-id6285 . -4) (undo-tree-id6286 . -4) (undo-tree-id6287 . -4) (undo-tree-id6288 . -4) (undo-tree-id6289 . -4) (undo-tree-id6290 . -4) 7485 (7480 . 7485)) nil (26246 52599 595148 33000) 0 nil])
([nil nil ((#("to" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6365 . -1) (t 26246 52599 680290 652000)) nil (26246 52644 225653 464000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 7447)) nil (26246 52644 225649 427000) 0 nil])
([nil nil ((#("all" 0 3 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6364 . -2)) nil (26246 52644 225646 941000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 7447)) nil (26246 52644 225643 358000) 0 nil])
([nil nil ((#("change" 0 6 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6363 . -5)) nil (26246 52644 225641 185000) 0 nil])
([nil nil ((#(": " 0 2 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6362 . -1)) nil (26246 52644 225637 764000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 7447)) nil (26246 52644 225634 462000) 0 nil])
([nil nil ((#("li" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6361 . -1)) nil (26246 52644 225632 430000) 0 nil])
([nil nil ((#(", " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 7447) (undo-tree-id6360 . -1)) nil (26246 52644 225629 80000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 7447)) nil (26246 52644 225625 269000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 7447)) nil (26246 52644 225623 484000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 7448)) nil (26246 52644 225621 208000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7448)) nil (26246 52644 225619 253000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 7448)) nil (26246 52644 225617 312000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 7448) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1)) nil (26246 52644 225615 178000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7448) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1)) nil (26246 52644 225609 622000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . 7448) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1)) nil (26246 52644 225598 76000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 7448) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1)) nil (26246 52644 225592 659000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 7448) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1)) nil (26246 52644 225587 154000) 0 nil])
([nil nil ((7499 . 7506) (#("t" 0 1 (fontified t face font-lock-string-face)) . -7499) (undo-tree-id6343 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7500) (undo-tree-id6344 . -1) 7501 (7487 . 7501) (7486 . 7487) (7485 . 7486) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7485) (undo-tree-id6345 . -1) 7486 (7480 . 7486) (#("t" 0 1 (fontified t face font-lock-string-face)) . -7480) (undo-tree-id6346 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7481) (undo-tree-id6347 . -1) 7482 (7462 . 7482) (#("x" 0 1 (fontified t face font-lock-string-face)) . -7462) (undo-tree-id6348 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7463) (undo-tree-id6349 . -1) 7464 (7461 . 7464) (7447 . 7461)) nil (26246 52646 271251 456000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 7505) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1)) nil (26246 52649 481477 958000) 0 nil] [nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -7505) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) 7506) ((7505 . 7506)) (26246 52644 225543 667000) 0 nil])
([nil nil ((#("    // subscription_ = this->create_subscription<std_msgs::msg::Int16>(
    //     \"get_stuff\", 10,
    //     std::bind(&LifeActivator::topic_callback, this, std::placeholders::_1));

" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 72 (c-in-sws t fontified t face font-lock-comment-face) 72 76 (c-in-sws t fontified t) 76 83 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 83 100 (c-in-sws t fontified t face font-lock-comment-face) 100 104 (c-in-sws t fontified t) 104 111 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 111 171 (c-in-sws t fontified t face font-lock-comment-face) 171 183 (c-in-sws t fontified t face font-lock-comment-face) 183 184 (c-in-sws t fontified t face font-lock-comment-face) 184 185 (c-is-sws t c-in-sws t fontified t)) . 2881) (undo-tree-id6523 . -184) (undo-tree-id6524 . -184) (undo-tree-id6525 . -184) (undo-tree-id6526 . -70) (undo-tree-id6527 . -70) (undo-tree-id6528 . -70) (undo-tree-id6529 . -70) (undo-tree-id6530 . -70) (undo-tree-id6531 . -70) (undo-tree-id6532 . -70) (undo-tree-id6533 . -70) (undo-tree-id6534 . -70) (undo-tree-id6535 . -70) (undo-tree-id6536 . -70) (undo-tree-id6537 . -70) (undo-tree-id6538 . -98) (undo-tree-id6539 . -98) (undo-tree-id6540 . -98) (undo-tree-id6541 . -98) (undo-tree-id6542 . -98) (undo-tree-id6543 . -98) (undo-tree-id6544 . -98) (undo-tree-id6545 . -182) (undo-tree-id6546 . -182) (undo-tree-id6547 . -182) (undo-tree-id6548 . -182) (undo-tree-id6549 . -182) (undo-tree-id6550 . -182) (undo-tree-id6551 . -182) (undo-tree-id6552 . -184) (undo-tree-id6553 . -184) (undo-tree-id6554 . -184) (undo-tree-id6555 . -184) (undo-tree-id6556 . -184) (undo-tree-id6557 . -184) (undo-tree-id6558 . -184) (undo-tree-id6559 . -184) (undo-tree-id6560 . -184) (undo-tree-id6561 . -184) (undo-tree-id6562 . -184) (undo-tree-id6563 . -184) (undo-tree-id6564 . -184) (undo-tree-id6565 . -184) (undo-tree-id6566 . -184) (undo-tree-id6567 . -184) (undo-tree-id6568 . -184) (undo-tree-id6569 . -184) (undo-tree-id6570 . -184) (undo-tree-id6571 . -184) (undo-tree-id6572 . -184) (undo-tree-id6573 . -184) (undo-tree-id6574 . -184) (undo-tree-id6575 . -184) (undo-tree-id6576 . -185) (undo-tree-id6577 . -184) (undo-tree-id6578 . -184) (undo-tree-id6579 . -184) (undo-tree-id6580 . -184) (undo-tree-id6581 . -184) (undo-tree-id6582 . -184) (undo-tree-id6583 . -184) (undo-tree-id6584 . -184) (undo-tree-id6585 . -184) (undo-tree-id6586 . -184) (undo-tree-id6587 . -100) (undo-tree-id6588 . -100) (undo-tree-id6589 . -100) (undo-tree-id6590 . -100) (undo-tree-id6591 . -100) (undo-tree-id6592 . -100) (undo-tree-id6593 . -100) (undo-tree-id6594 . -100) (undo-tree-id6595 . -100) (undo-tree-id6596 . -100) (undo-tree-id6597 . -100) (undo-tree-id6598 . -100) (undo-tree-id6599 . -100) (undo-tree-id6600 . -100) (undo-tree-id6601 . -100) (undo-tree-id6602 . -100) (undo-tree-id6603 . -100) (undo-tree-id6604 . -100) (undo-tree-id6605 . -100) (undo-tree-id6606 . -100) (undo-tree-id6607 . -100) (undo-tree-id6608 . -100) (undo-tree-id6609 . -100) (undo-tree-id6610 . -100) (undo-tree-id6611 . -100) (undo-tree-id6612 . -72) (undo-tree-id6613 . -72) (undo-tree-id6614 . -72) (undo-tree-id6615 . -72) (undo-tree-id6616 . -72) (undo-tree-id6617 . -72) (undo-tree-id6618 . -72) (undo-tree-id6619 . -185) (t 26246 52649 574398 355000)) nil (26246 52670 765272 921000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -2881) (undo-tree-id6494 . -4) (undo-tree-id6495 . -4) (undo-tree-id6496 . -4) (undo-tree-id6497 . -4) (undo-tree-id6498 . -4) (undo-tree-id6499 . -4) (undo-tree-id6500 . -4) (undo-tree-id6501 . -4) (undo-tree-id6502 . -4) (undo-tree-id6503 . -4) (undo-tree-id6504 . -4) (undo-tree-id6505 . -4) (undo-tree-id6506 . -4) (undo-tree-id6507 . -4) (undo-tree-id6508 . -4) (undo-tree-id6509 . -4) (undo-tree-id6510 . -4) (undo-tree-id6511 . -4) (undo-tree-id6512 . -4) (undo-tree-id6513 . -4) (undo-tree-id6514 . -4) (undo-tree-id6515 . -4) (undo-tree-id6516 . -4) (undo-tree-id6517 . -4) (undo-tree-id6518 . -4) (undo-tree-id6519 . -4) (undo-tree-id6520 . -4) (undo-tree-id6521 . -4) (undo-tree-id6522 . -4) 2885 (2880 . 2885)) nil (26246 52670 765095 236000) 0 nil])
([nil nil ((#("    // RCLCPP_INFO(this->get_logger(), \"sizes -> get_state_topics: %li, change_state_topics: %li\", get_state_topics.size(), change_state_topics.size());

 " 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 23 (c-in-sws t fontified t face font-lock-comment-face) 23 35 (c-in-sws t fontified t face font-lock-comment-face) 35 36 (c-in-sws t fontified t face font-lock-comment-face) 36 37 (c-in-sws t fontified t face font-lock-comment-face) 37 39 (c-in-sws t fontified t face font-lock-comment-face) 39 48 (c-in-sws t fontified t face font-lock-comment-face) 48 84 (c-in-sws t fontified t face font-lock-comment-face) 84 97 (c-in-sws t fontified t face font-lock-comment-face) 97 120 (c-in-sws t fontified t face font-lock-comment-face) 120 121 (c-in-sws t fontified t face font-lock-comment-face) 121 122 (c-in-sws t fontified t face font-lock-comment-face) 122 127 (c-in-sws t fontified t face font-lock-comment-face) 127 148 (c-in-sws t fontified t face font-lock-comment-face) 148 149 (c-in-sws t fontified t face font-lock-comment-face) 149 150 (c-in-sws t fontified t face font-lock-comment-face) 150 151 (c-in-sws t fontified t face font-lock-comment-face) 151 153 (c-in-sws t fontified t face font-lock-comment-face) 153 154 (fontified t c-in-sws t) 154 155 (fontified t c-is-sws t c-in-sws t)) . 2018) (undo-tree-id6620 . -154) (undo-tree-id6621 . -154) (undo-tree-id6622 . -154) (undo-tree-id6623 . -153) (undo-tree-id6624 . -153) (undo-tree-id6625 . -153) (undo-tree-id6626 . -153) (undo-tree-id6627 . -153) (undo-tree-id6628 . -153) (undo-tree-id6629 . -153) (undo-tree-id6630 . -154) (undo-tree-id6631 . -154) (undo-tree-id6632 . -154) (undo-tree-id6633 . -154) (undo-tree-id6634 . -154) (undo-tree-id6635 . -154) (undo-tree-id6636 . -154) (undo-tree-id6637 . -154) (undo-tree-id6638 . -154) (undo-tree-id6639 . -154) (undo-tree-id6640 . -154) (undo-tree-id6641 . -154) (undo-tree-id6642 . -154) (undo-tree-id6643 . -154) (undo-tree-id6644 . -155) (undo-tree-id6645 . -154) (undo-tree-id6646 . -154) (undo-tree-id6647 . -154) (undo-tree-id6648 . -154) (undo-tree-id6649 . -154) (undo-tree-id6650 . -154) (undo-tree-id6651 . -154) (undo-tree-id6652 . -154) (undo-tree-id6653 . -154) (undo-tree-id6654 . -154) (undo-tree-id6655 . -153) (undo-tree-id6656 . -153) (undo-tree-id6657 . -153) (undo-tree-id6658 . -153) (undo-tree-id6659 . -153) (undo-tree-id6660 . -153) (undo-tree-id6661 . -153) (undo-tree-id6662 . -155) (t 26246 52670 853712 958000)) nil (26246 52677 489295 756000) 0 nil])
([nil nil ((#("    
" 0 5 (fontified t)) . 2013) (undo-tree-id6667 . -5) (undo-tree-id6668 . -5) (undo-tree-id6669 . -5) (undo-tree-id6670 . -5) (undo-tree-id6671 . -4) (undo-tree-id6672 . -3) (undo-tree-id6673 . -5) (undo-tree-id6674 . -5) (undo-tree-id6675 . -5) (undo-tree-id6676 . -5) (undo-tree-id6677 . -5) (undo-tree-id6678 . -5) (undo-tree-id6679 . -5) (undo-tree-id6680 . -5) (undo-tree-id6681 . -5) (undo-tree-id6682 . -5) (undo-tree-id6683 . -5) (undo-tree-id6684 . -5) (undo-tree-id6685 . -5) (undo-tree-id6686 . -5) (undo-tree-id6687 . -5) (undo-tree-id6688 . -5) (undo-tree-id6689 . -5) (undo-tree-id6690 . -5) (undo-tree-id6691 . -5) (undo-tree-id6692 . -5) (undo-tree-id6693 . -5) (undo-tree-id6694 . -5) (undo-tree-id6695 . -5) (undo-tree-id6696 . -5) (undo-tree-id6697 . -5) (undo-tree-id6698 . -5) (undo-tree-id6699 . -5) (undo-tree-id6700 . -5) (undo-tree-id6701 . -5) (undo-tree-id6702 . -5) (undo-tree-id6703 . -5) (undo-tree-id6704 . -5) (undo-tree-id6705 . -5) (undo-tree-id6706 . -5) (undo-tree-id6707 . -5) (undo-tree-id6708 . -5) (undo-tree-id6709 . -5) (undo-tree-id6710 . -5) (undo-tree-id6711 . -5) (undo-tree-id6712 . -5) (undo-tree-id6713 . -5) (undo-tree-id6714 . -5) (undo-tree-id6715 . -5) (undo-tree-id6716 . -5) (undo-tree-id6717 . -5) (undo-tree-id6718 . -5) (undo-tree-id6719 . -5) (undo-tree-id6720 . -5) (undo-tree-id6721 . -5) (undo-tree-id6722 . -5) (undo-tree-id6723 . -5) (undo-tree-id6724 . -5) (undo-tree-id6725 . -5) (undo-tree-id6726 . -5) (undo-tree-id6727 . -5) (undo-tree-id6728 . -5) (undo-tree-id6729 . -5) (undo-tree-id6730 . -5) (undo-tree-id6731 . -5) (undo-tree-id6732 . -5) (undo-tree-id6733 . -5) (undo-tree-id6734 . -5) (undo-tree-id6735 . -5) (undo-tree-id6736 . -5) (undo-tree-id6737 . -5) (undo-tree-id6738 . -5) (undo-tree-id6739 . -5) (undo-tree-id6740 . -5) (undo-tree-id6741 . -5) (undo-tree-id6742 . -5) (undo-tree-id6743 . -5) (undo-tree-id6744 . -5) (undo-tree-id6745 . -5) (undo-tree-id6746 . -5) (undo-tree-id6747 . -5) (undo-tree-id6748 . -5) (undo-tree-id6749 . -5) (undo-tree-id6750 . -5) (undo-tree-id6751 . -5) (undo-tree-id6752 . -5) (undo-tree-id6753 . -5) (undo-tree-id6754 . -5) (undo-tree-id6755 . -5) (undo-tree-id6756 . -5) (t 26246 52677 554813 822000)) nil (26246 52680 67435 955000) 0 nil])
([nil nil ((#("   
" 0 3 (fontified t) 3 4 (fontified t)) . 2013) (undo-tree-id6663 . 4) (undo-tree-id6664 . -3) (undo-tree-id6665 . -3) (undo-tree-id6666 . -4)) nil (26246 52680 67271 895000) 0 nil])
([nil nil ((#("********************************" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face)) . 6837) (undo-tree-id6759 . -31) (undo-tree-id6760 . -32) (t 26246 52680 155247 219000)) nil (26246 52712 43067 366000) 0 nil])
([nil nil ((#("********************************" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face)) . 6864) (undo-tree-id6776 . -31) (undo-tree-id6777 . -31) (undo-tree-id6778 . -31) (undo-tree-id6779 . -31) (undo-tree-id6780 . -31) 6895) nil (26246 52725 866708 87000) 0 nil] [nil nil ((#("********************************\");" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t)) . 6864) (undo-tree-id6761 . -34) (undo-tree-id6762 . -35)) ((6864 . 6899) (nil syntax-table nil 6864 . 6865) (nil syntax-table (1) 6836 . 6837)) (26246 52712 38893 129000) 0 nil] [nil nil ((#("********************************\");" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t)) . 6864) (undo-tree-id6757 . -34) (undo-tree-id6758 . -35)) ((6864 . 6899) (nil syntax-table nil 6864 . 6865) (nil syntax-table (1) 6836 . 6837)) (26246 52709 726264 118000) 0 nil])
([nil nil ((#("if (retstate) {
      RCLCPP_INFO(this->get_logger(), \"WTF IT WORKED LOL IT WORKED\");
    }" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-4-face)) 4 8 (fontified t) 8 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-4-face)) 15 16 (fontified t) 16 22 (fontified t) 22 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-5-face)) 34 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 40 (fontified t) 40 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-6-face)) 51 52 (fontified t face (rainbow-delimiters-depth-6-face)) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face font-lock-string-face) 56 57 (fontified t face font-lock-string-face) 57 58 (fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 63 (fontified t face font-lock-string-face) 63 64 (fontified t face font-lock-string-face) 64 65 (fontified t face font-lock-string-face) 65 66 (fontified t face font-lock-string-face) 66 67 (fontified t face font-lock-string-face) 67 68 (fontified t face font-lock-string-face) 68 69 (fontified t face font-lock-string-face) 69 71 (fontified t face font-lock-string-face) 71 72 (fontified t face font-lock-string-face) 72 73 (fontified t face font-lock-string-face) 73 74 (fontified t face font-lock-string-face) 74 75 (fontified t face font-lock-string-face) 75 76 (fontified t face font-lock-string-face) 76 77 (fontified t face font-lock-string-face) 77 78 (fontified t face font-lock-string-face) 78 79 (fontified t face font-lock-string-face) 79 80 (fontified t face font-lock-string-face) 80 81 (fontified t face font-lock-string-face) 81 82 (fontified t face font-lock-string-face) 82 83 (fontified t face font-lock-string-face) 83 84 (fontified t face (rainbow-delimiters-depth-5-face)) 84 85 (fontified t) 85 86 (fontified t) 86 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-4-face))) . 6782) (undo-tree-id6772 . -90) (undo-tree-id6773 . -90) (undo-tree-id6774 . -90) (undo-tree-id6775 . -90)) nil (26246 52725 866696 471000) 0 nil])
nil
nil
([nil nil ((#("
" 0 1 (fontified t)) . 6777) (undo-tree-id6771 . -1)) nil (26246 52725 866686 91000) 0 nil])
([nil nil ((#("    
" 0 1 (fontified t) 1 4 (fontified t) 4 5 (fontified t)) . 6777) (undo-tree-id6763 . -4) (undo-tree-id6764 . -4) (undo-tree-id6765 . 1) (undo-tree-id6766 . -4) (undo-tree-id6767 . -4) (undo-tree-id6768 . -4) (undo-tree-id6769 . -4) (undo-tree-id6770 . -5)) nil (26246 52725 866674 381000) 0 nil])
([nil nil ((#("******************" 0 1 (fontified t face font-lock-string-face) 1 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face)) . 6211) (undo-tree-id6789 . -17) (undo-tree-id6790 . -18) (undo-tree-id6791 . -18) (undo-tree-id6792 . -18) (t 26246 52725 955315 242000)) nil (26246 52750 972746 607000) 0 nil])
([nil nil ((#("Yay " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 6211) (undo-tree-id6787 . -3) (undo-tree-id6788 . -4)) nil (26246 52750 972737 446000) 0 nil])
([nil nil ((#("The " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 6211) (undo-tree-id6785 . -3) (undo-tree-id6786 . -4)) nil (26246 52750 972731 755000) 0 nil])
([nil nil ((#("Worked" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face)) . 6222) (undo-tree-id6783 . -5) (undo-tree-id6784 . -6)) nil (26246 52750 976575 341000) 0 nil])
([nil nil ((#("**********************" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face)) . 6222) (undo-tree-id6793 . -21) (undo-tree-id6794 . -21) (undo-tree-id6795 . -21) (undo-tree-id6796 . -21) (undo-tree-id6797 . -22) (undo-tree-id6798 . -21) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -21) (undo-tree-id6837 . -22) (undo-tree-id6838 . -22) 6243) nil (26246 52757 922407 287000) 0 nil] [nil nil ((#("**********************\");" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face (rainbow-delimiters-depth-5-face)) 24 25 (fontified t)) . 6222) (undo-tree-id6781 . -24) (undo-tree-id6782 . -25)) ((6222 . 6247) (nil syntax-table nil 6222 . 6223) (nil syntax-table (1) 6210 . 6211)) (26246 52750 972711 128000) 0 nil])
([nil nil ((6222 . 6231)) nil (26246 52757 922297 698000) 0 nil])
nil
([nil nil ((5668 . 5669) (5663 . 5668) (5656 . 5663) (t 26246 52758 13288 588000)) nil (26246 52868 243496 967000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5670) (undo-tree-id6877 . -1) (t 26246 52868 334862 300000)) nil (26246 52871 158610 789000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -5670) (undo-tree-id6839 . -6) (undo-tree-id6840 . -6) (undo-tree-id6841 . -6) (undo-tree-id6842 . -6) (undo-tree-id6843 . -6) (undo-tree-id6844 . -6) (undo-tree-id6845 . -6) (undo-tree-id6846 . -6) (undo-tree-id6847 . -6) (undo-tree-id6848 . -6) (undo-tree-id6849 . -6) (undo-tree-id6850 . -6) (undo-tree-id6851 . -6) (undo-tree-id6852 . -6) (undo-tree-id6853 . -6) (undo-tree-id6854 . -6) (undo-tree-id6855 . -6) (undo-tree-id6856 . -6) (undo-tree-id6857 . -6) (undo-tree-id6858 . -6) (undo-tree-id6859 . -6) (undo-tree-id6860 . -6) (undo-tree-id6861 . -6) (undo-tree-id6862 . -6) (undo-tree-id6863 . -6) (undo-tree-id6864 . -6) (undo-tree-id6865 . -6) (undo-tree-id6866 . -6) (undo-tree-id6867 . -6) (undo-tree-id6868 . -6) (undo-tree-id6869 . -6) (undo-tree-id6870 . -6) (undo-tree-id6871 . -6) (undo-tree-id6872 . -6) (undo-tree-id6873 . -6) (undo-tree-id6874 . -6) (undo-tree-id6875 . -6) (undo-tree-id6876 . -6) 5676 (5669 . 5676)) nil (26246 52871 158597 697000) 0 nil])
([nil nil ((#("  void topic_callback(const std_msgs::msg::Int16 & msg) {

    RCLCPP_INFO(this->get_logger(), \"Got Subscription\");

  }

" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 22 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 41 (fontified t face font-lock-constant-face) 41 42 (fontified t) 42 43 (fontified t) 43 48 (fontified t face font-lock-type-face) 48 51 (fontified t) 51 54 (fontified t face font-lock-variable-name-face) 54 55 (fontified t face (rainbow-delimiters-depth-3-face)) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-3-face)) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-4-face)) 75 79 (fontified t face font-lock-keyword-face) 79 91 (fontified t) 91 92 (fontified t face (rainbow-delimiters-depth-5-face)) 92 93 (fontified t face (rainbow-delimiters-depth-5-face)) 93 95 (fontified t) 95 103 (fontified t face font-lock-string-face) 103 113 (fontified t face font-lock-string-face) 113 114 (fontified t face (rainbow-delimiters-depth-4-face)) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-3-face)) 120 122 (fontified t)) . 1711) (undo-tree-id6878 . -121) (undo-tree-id6879 . -121) (undo-tree-id6880 . -121) (undo-tree-id6881 . -51) (undo-tree-id6882 . -54) (undo-tree-id6883 . -75) (undo-tree-id6884 . -79) (undo-tree-id6885 . -10) (undo-tree-id6886 . -10) (undo-tree-id6887 . -10) (undo-tree-id6888 . -10) (undo-tree-id6889 . -10) (undo-tree-id6890 . -10) (undo-tree-id6891 . -10) (undo-tree-id6892 . -11) (undo-tree-id6893 . -11) (undo-tree-id6894 . -11) (undo-tree-id6895 . -11) (undo-tree-id6896 . -11) (undo-tree-id6897 . -11) (undo-tree-id6898 . -11) (undo-tree-id6899 . -12) (undo-tree-id6900 . -12) (undo-tree-id6901 . -12) (undo-tree-id6902 . -12) (undo-tree-id6903 . -12) (undo-tree-id6904 . -12) (undo-tree-id6905 . -12) (undo-tree-id6906 . -12) (undo-tree-id6907 . -12) (undo-tree-id6908 . -12) (undo-tree-id6909 . -12) (undo-tree-id6910 . -12) (undo-tree-id6911 . -12) (undo-tree-id6912 . -12) (undo-tree-id6913 . -12) (undo-tree-id6914 . -12) (undo-tree-id6915 . -12) (undo-tree-id6916 . -12) (undo-tree-id6917 . -12) (undo-tree-id6918 . -12) (undo-tree-id6919 . -12) (undo-tree-id6920 . -12) (undo-tree-id6921 . -12) (undo-tree-id6922 . -12) (undo-tree-id6923 . -12) (undo-tree-id6924 . -12) (undo-tree-id6925 . -12) (undo-tree-id6926 . -12) (undo-tree-id6927 . -12) (undo-tree-id6928 . -12) (undo-tree-id6929 . -12) (undo-tree-id6930 . -12) (undo-tree-id6931 . -12) (undo-tree-id6932 . -12) (undo-tree-id6933 . -12) (undo-tree-id6934 . -12) (undo-tree-id6935 . -12) (undo-tree-id6936 . -12) (undo-tree-id6937 . -12) (undo-tree-id6938 . -12) (undo-tree-id6939 . -12) (undo-tree-id6940 . -12) (undo-tree-id6941 . -12) (undo-tree-id6942 . -12) (undo-tree-id6943 . -12) (undo-tree-id6944 . -12) (undo-tree-id6945 . -12) (undo-tree-id6946 . -12) (undo-tree-id6947 . -12) (undo-tree-id6948 . -12) (undo-tree-id6949 . -12) (undo-tree-id6950 . -12) (undo-tree-id6951 . -12) (undo-tree-id6952 . -12) (undo-tree-id6953 . -12) (undo-tree-id6954 . -12) (undo-tree-id6955 . -12) (undo-tree-id6956 . -12) (undo-tree-id6957 . -12) (undo-tree-id6958 . -12) (undo-tree-id6959 . -12) (undo-tree-id6960 . -12) (undo-tree-id6961 . -12) (undo-tree-id6962 . -12) (undo-tree-id6963 . -12) (undo-tree-id6964 . -12) (undo-tree-id6965 . -12) (undo-tree-id6966 . -12) (undo-tree-id6967 . -58) (undo-tree-id6968 . -58) (undo-tree-id6969 . -58) (undo-tree-id6970 . -58) (undo-tree-id6971 . -58) (undo-tree-id6972 . -58) (undo-tree-id6973 . -58) (undo-tree-id6974 . -58) (undo-tree-id6975 . -71) (undo-tree-id6976 . -71) (undo-tree-id6977 . -71) (undo-tree-id6978 . -71) (undo-tree-id6979 . -71) (undo-tree-id6980 . -71) (undo-tree-id6981 . -71) (undo-tree-id6982 . -116) (undo-tree-id6983 . -116) (undo-tree-id6984 . -116) (undo-tree-id6985 . -116) (undo-tree-id6986 . -116) (undo-tree-id6987 . -116) (undo-tree-id6988 . -116) (undo-tree-id6989 . -119) (undo-tree-id6990 . -119) (undo-tree-id6991 . -119) (undo-tree-id6992 . -119) (undo-tree-id6993 . -119) (undo-tree-id6994 . -119) (undo-tree-id6995 . -119) (undo-tree-id6996 . -121) (undo-tree-id6997 . -121) (undo-tree-id6998 . -121) (undo-tree-id6999 . -121) (undo-tree-id7000 . -121) (undo-tree-id7001 . -121) (undo-tree-id7002 . -121) (undo-tree-id7003 . -122) (undo-tree-id7004 . -121) (undo-tree-id7005 . -121) (undo-tree-id7006 . -121) (undo-tree-id7007 . -121) (undo-tree-id7008 . -121) (undo-tree-id7009 . -121) (undo-tree-id7010 . -121) (undo-tree-id7011 . -121) (undo-tree-id7012 . -121) (undo-tree-id7013 . -121) (undo-tree-id7014 . -117) (undo-tree-id7015 . -117) (undo-tree-id7016 . -117) (undo-tree-id7017 . -117) (undo-tree-id7018 . -117) (undo-tree-id7019 . -117) (undo-tree-id7020 . -117) (undo-tree-id7021 . -116) (undo-tree-id7022 . -116) (undo-tree-id7023 . -116) (undo-tree-id7024 . -116) (undo-tree-id7025 . -116) (undo-tree-id7026 . -116) (undo-tree-id7027 . -116) (undo-tree-id7028 . -59) (undo-tree-id7029 . -59) (undo-tree-id7030 . -59) (undo-tree-id7031 . -59) (undo-tree-id7032 . -59) (undo-tree-id7033 . -59) (undo-tree-id7034 . -59) (undo-tree-id7035 . -58) (undo-tree-id7036 . -58) (undo-tree-id7037 . -58) (undo-tree-id7038 . -58) (undo-tree-id7039 . -58) (undo-tree-id7040 . -58) (undo-tree-id7041 . -58) (undo-tree-id7042 . -122) (t 26246 52871 226504 176000)) nil (26246 52895 126603 759000) 0 nil])
([nil nil ((apply -3 6987 7062 undo--wrap-and-run-primitive-undo 6987 7062 ((6989 . 6992) 6987)) (t 26246 52895 188198 937000)) nil (26246 52959 50486 327000) 0 nil])
([nil nil ((apply -3 3150 3181 undo--wrap-and-run-primitive-undo 3150 3181 ((3154 . 3157) 3150)) (t 26246 52959 138648 895000)) nil (26246 52997 117375 851000) 0 nil])
([nil nil ((apply -3 3667 3698 undo--wrap-and-run-primitive-undo 3667 3698 ((3671 . 3674) 3667))) nil (26246 52997 117371 115000) 0 nil])
([nil nil ((apply -3 4242 4273 undo--wrap-and-run-primitive-undo 4242 4273 ((4246 . 4249) 4242))) nil (26246 52997 117360 458000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6632) (undo-tree-id7127 . -1) (t 26246 52997 196020 376000)) nil (26246 53028 812573 525000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6631) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1)) nil (26246 53028 812563 636000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6631) (undo-tree-id7043 . -4) (undo-tree-id7044 . -4) (undo-tree-id7045 . -4) (undo-tree-id7046 . -4) (undo-tree-id7047 . -4) (undo-tree-id7048 . -4) (undo-tree-id7049 . -4) (undo-tree-id7050 . -4) (undo-tree-id7051 . -4) (undo-tree-id7052 . -4) (undo-tree-id7053 . -4) (undo-tree-id7054 . -4) (undo-tree-id7055 . -4) (undo-tree-id7056 . -4) (undo-tree-id7057 . -4) (undo-tree-id7058 . -4) (undo-tree-id7059 . -4) (undo-tree-id7060 . -4) (undo-tree-id7061 . -4) (undo-tree-id7062 . -4) (undo-tree-id7063 . -4) (undo-tree-id7064 . -4) (undo-tree-id7065 . -4) (undo-tree-id7066 . -4) (undo-tree-id7067 . -4) (undo-tree-id7068 . -4) (undo-tree-id7069 . -4) (undo-tree-id7070 . -4) (undo-tree-id7071 . -4) (undo-tree-id7072 . -4) (undo-tree-id7073 . -4) (undo-tree-id7074 . -4) (undo-tree-id7075 . -4) (undo-tree-id7076 . -4) (undo-tree-id7077 . -4) (undo-tree-id7078 . -4) (undo-tree-id7079 . -4) (undo-tree-id7080 . -4) 6635 (6630 . 6635)) nil (26246 53028 812468 296000) 0 nil])
([nil nil ((#("  bool to_continue;
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 2 (c-in-sws t c-is-sws t fontified t) 2 3 (c-is-sws t fontified t face font-lock-type-face) 3 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-variable-name-face) 11 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t) 19 20 (fontified t)) . 7113) (undo-tree-id7146 . -19) (undo-tree-id7147 . -18) 7131 (t 26246 53028 902077 344000)) nil (26246 53198 923705 3000) 0 nil])
([nil nil ((#("    to_continue = lifecycle_list.size() > 0 ? true : false;
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t fontified t) 5 13 (fontified t) 13 17 (fontified t) 17 19 (fontified t) 19 35 (fontified t) 35 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-4-face)) 38 39 (fontified t face (rainbow-delimiters-depth-4-face)) 39 41 (fontified t) 41 42 (fontified t) 42 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t face font-lock-constant-face) 47 48 (fontified t face font-lock-constant-face) 48 50 (fontified t face font-lock-constant-face) 50 51 (fontified t) 51 53 (fontified t) 53 54 (fontified t face font-lock-constant-face) 54 57 (fontified t face font-lock-constant-face) 57 58 (fontified t face font-lock-constant-face) 58 60 (fontified t)) . 1458) (undo-tree-id7128 . -59) (undo-tree-id7129 . -4) (undo-tree-id7130 . -15) (undo-tree-id7131 . -60) (undo-tree-id7132 . -60) (undo-tree-id7133 . -60) (undo-tree-id7134 . -60) (undo-tree-id7135 . -60) (undo-tree-id7136 . -60) (undo-tree-id7137 . -60) (undo-tree-id7138 . -60) (undo-tree-id7139 . -60) (undo-tree-id7140 . -60) (undo-tree-id7141 . -60) (undo-tree-id7142 . -60) (undo-tree-id7143 . -60) (undo-tree-id7144 . -60) (undo-tree-id7145 . -60)) nil (26246 53198 923690 83000) 0 nil])
([nil nil ((#("to" 0 2 (fontified t)) . 1620) (undo-tree-id7931 . -1) (undo-tree-id7932 . -2) (undo-tree-id7933 . -2) (undo-tree-id7934 . -2) (undo-tree-id7935 . -2) (undo-tree-id7936 . -2) (undo-tree-id7937 . -2) (undo-tree-id7938 . -2) (undo-tree-id7939 . -2) (t 26246 53199 13084 256000)) nil (26246 53237 943431 370000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1620) (undo-tree-id7930 . -1)) nil (26246 53237 943415 608000) 0 nil])
([nil nil ((#("continue" 0 8 (fontified t face font-lock-keyword-face)) . 1620) (undo-tree-id7927 . -7) (undo-tree-id7928 . -8) (undo-tree-id7929 . -8)) nil (26246 53237 943412 238000) 0 nil])
([nil nil ((#("                  " 0 7 (fontified t) 7 18 (fontified t)) . 1602) (undo-tree-id7712 . -17) (undo-tree-id7713 . -2) (undo-tree-id7714 . -2) (undo-tree-id7715 . -2) (undo-tree-id7716 . -2) (undo-tree-id7717 . -2) (undo-tree-id7718 . -2) (undo-tree-id7719 . -2) (undo-tree-id7720 . -18) (undo-tree-id7721 . -18) (undo-tree-id7722 . -18) (undo-tree-id7723 . -18) (undo-tree-id7724 . -18) (undo-tree-id7725 . -18) (undo-tree-id7726 . -18) (undo-tree-id7727 . -18) (undo-tree-id7728 . -18) (undo-tree-id7729 . -18) (undo-tree-id7730 . -18) (undo-tree-id7731 . -18) (undo-tree-id7732 . -18) (undo-tree-id7733 . -18) (undo-tree-id7734 . -18) (undo-tree-id7735 . -18) (undo-tree-id7736 . -18) (undo-tree-id7737 . -18) (undo-tree-id7738 . -18) (undo-tree-id7739 . -18) (undo-tree-id7740 . -18) (undo-tree-id7741 . -18) (undo-tree-id7742 . -18) (undo-tree-id7743 . -18) (undo-tree-id7744 . -18) (undo-tree-id7745 . -18) (undo-tree-id7746 . -18) (undo-tree-id7747 . -18) (undo-tree-id7748 . -18) (undo-tree-id7749 . -18) (undo-tree-id7750 . -18) (undo-tree-id7751 . -18) (undo-tree-id7752 . -18) (undo-tree-id7753 . -18) (undo-tree-id7754 . -18) (undo-tree-id7755 . -18) (undo-tree-id7756 . -18) (undo-tree-id7757 . -18) (undo-tree-id7758 . -18) (undo-tree-id7759 . -18) (undo-tree-id7760 . -18) (undo-tree-id7761 . -18) (undo-tree-id7762 . -18) (undo-tree-id7763 . -18) (undo-tree-id7764 . -18) (undo-tree-id7765 . -18) (undo-tree-id7766 . -18) (undo-tree-id7767 . -18) (undo-tree-id7768 . -18) (undo-tree-id7769 . -18) (undo-tree-id7770 . -18) (undo-tree-id7771 . -18) (undo-tree-id7772 . -18) (undo-tree-id7773 . -18) (undo-tree-id7774 . -18) (undo-tree-id7775 . -18) (undo-tree-id7776 . -18) (undo-tree-id7777 . -18) (undo-tree-id7778 . -18) (undo-tree-id7779 . -18) (undo-tree-id7780 . -18) (undo-tree-id7781 . -18) (undo-tree-id7782 . -18) (undo-tree-id7783 . -18) (undo-tree-id7784 . -18) (undo-tree-id7785 . -18) (undo-tree-id7786 . -18) (undo-tree-id7787 . -18) (undo-tree-id7788 . -18) (undo-tree-id7789 . -18) (undo-tree-id7790 . -18) (undo-tree-id7791 . -18) (undo-tree-id7792 . -18) (undo-tree-id7793 . -18) (undo-tree-id7794 . -18) (undo-tree-id7795 . -18) (undo-tree-id7796 . -18) (undo-tree-id7797 . -18) (undo-tree-id7798 . -18) (undo-tree-id7799 . -18) (undo-tree-id7800 . -18) (undo-tree-id7801 . -18) (undo-tree-id7802 . -18) (undo-tree-id7803 . -18) (undo-tree-id7804 . -18) (undo-tree-id7805 . -18) (undo-tree-id7806 . -18) (undo-tree-id7807 . -18) (undo-tree-id7808 . -18) (undo-tree-id7809 . -18) (undo-tree-id7810 . -18) (undo-tree-id7811 . -18) (undo-tree-id7812 . -18) (undo-tree-id7813 . -18) (undo-tree-id7814 . -18) (undo-tree-id7815 . -18) (undo-tree-id7816 . -18) (undo-tree-id7817 . -18) (undo-tree-id7818 . -18) (undo-tree-id7819 . -18) (undo-tree-id7820 . -18) (undo-tree-id7821 . -18) (undo-tree-id7822 . -18) (undo-tree-id7823 . -18) (undo-tree-id7824 . -18) (undo-tree-id7825 . -18) (undo-tree-id7826 . -18) (undo-tree-id7827 . -18) (undo-tree-id7828 . -18) (undo-tree-id7829 . -18) (undo-tree-id7830 . -18) (undo-tree-id7831 . -18) (undo-tree-id7832 . -18) (undo-tree-id7833 . -18) (undo-tree-id7834 . -18) (undo-tree-id7835 . -18) (undo-tree-id7836 . -18) (undo-tree-id7837 . -18) (undo-tree-id7838 . -18) (undo-tree-id7839 . -18) (undo-tree-id7840 . -18) (undo-tree-id7841 . -18) (undo-tree-id7842 . -18) (undo-tree-id7843 . -18) (undo-tree-id7844 . -18) (undo-tree-id7845 . -18) (undo-tree-id7846 . -18) (undo-tree-id7847 . -18) (undo-tree-id7848 . -18) (undo-tree-id7849 . -18) (undo-tree-id7850 . -18) (undo-tree-id7851 . -18) (undo-tree-id7852 . -18) (undo-tree-id7853 . -18) (undo-tree-id7854 . -18) (undo-tree-id7855 . -18) (undo-tree-id7856 . -18) (undo-tree-id7857 . -18) (undo-tree-id7858 . -18) (undo-tree-id7859 . -18) (undo-tree-id7860 . -18) (undo-tree-id7861 . -18) (undo-tree-id7862 . -18) (undo-tree-id7863 . -18) (undo-tree-id7864 . -18) (undo-tree-id7865 . -18) (undo-tree-id7866 . -18) (undo-tree-id7867 . -18) (undo-tree-id7868 . -18) (undo-tree-id7869 . -18) (undo-tree-id7870 . -18) (undo-tree-id7871 . -18) (undo-tree-id7872 . -18) (undo-tree-id7873 . -18) (undo-tree-id7874 . -18) (undo-tree-id7875 . -18) (undo-tree-id7876 . -18) (undo-tree-id7877 . -18) (undo-tree-id7878 . -18) (undo-tree-id7879 . -18) (undo-tree-id7880 . -18) (undo-tree-id7881 . -18) (undo-tree-id7882 . -18) (undo-tree-id7883 . -18) (undo-tree-id7884 . -18) (undo-tree-id7885 . -18) (undo-tree-id7886 . -18) (undo-tree-id7887 . -18) (undo-tree-id7888 . -18) (undo-tree-id7889 . -18) (undo-tree-id7890 . -18) (undo-tree-id7891 . -18) (undo-tree-id7892 . -18) (undo-tree-id7893 . -18) (undo-tree-id7894 . -18) (undo-tree-id7895 . -18) (undo-tree-id7896 . -18) (undo-tree-id7897 . -18) (undo-tree-id7898 . -18) (undo-tree-id7899 . -18) (undo-tree-id7900 . -18) (undo-tree-id7901 . -18) (undo-tree-id7902 . -18) (undo-tree-id7903 . -18) (undo-tree-id7904 . -18) (undo-tree-id7905 . -18) (undo-tree-id7906 . -18) (undo-tree-id7907 . -18) (undo-tree-id7908 . -18) (undo-tree-id7909 . -18) (undo-tree-id7910 . -18) (undo-tree-id7911 . -18) (undo-tree-id7912 . -18) (undo-tree-id7913 . -18) (undo-tree-id7914 . -18) (undo-tree-id7915 . -18) (undo-tree-id7916 . -18) (undo-tree-id7917 . -18) (undo-tree-id7918 . -18) (undo-tree-id7919 . -18) (undo-tree-id7920 . -18) (undo-tree-id7921 . -18) (undo-tree-id7922 . -18) (undo-tree-id7923 . -18) (undo-tree-id7924 . -18) (undo-tree-id7925 . -18) (undo-tree-id7926 . -18)) nil (26246 53237 943387 461000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1601) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) 1602) nil (26246 53237 943022 826000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1600) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1)) nil (26246 53237 942527 329000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t face font-lock-string-face)) . 1568) (undo-tree-id7151 . -1) (undo-tree-id7152 . -2)) nil (26246 53237 941744 919000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-string-face)) . 1568) (undo-tree-id7150 . -1)) nil (26246 53237 941737 762000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . 1568) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1)) nil (26246 53237 941727 152000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1454 . 1455) (#("
" 0 1 (fontified nil)) . -1523) (1450 . 1524) 1378 (t 26246 53238 34463 764000)) nil (26246 53477 596993 543000) 0 nil])
([nil nil ((#("UNCONFIGURED" 0 12 (fontified t)) . 1491) (undo-tree-id8277 . -11) (undo-tree-id8278 . -12)) nil (26246 53477 596989 444000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 1491) (undo-tree-id8276 . -1)) nil (26246 53477 596984 71000) 0 nil])
([nil nil ((#("SHUTDOWN" 0 8 (fontified t)) . 1491) (undo-tree-id8274 . -7) (undo-tree-id8275 . -8)) nil (26246 53477 596978 884000) 0 nil])
([nil nil ((1480 . 1498) (#("TRANSITION_C" 0 12 (fontified nil)) . 1480) (1480 . 1492) (#("TRANSITION_CLEANUP" 0 18 (fontified nil)) . -1480) (1480 . 1498) (#("TRANSITION_CL" 0 6 (fontified t) 6 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . -1480) (undo-tree-id7940 . -11) (undo-tree-id7941 . -11) (undo-tree-id7942 . -13) (undo-tree-id7943 . -13) (undo-tree-id7944 . -13) (undo-tree-id7945 . -11) (undo-tree-id7946 . -11) (undo-tree-id7947 . -11) (undo-tree-id7948 . -11) (undo-tree-id7949 . -11) (undo-tree-id7950 . -11) (undo-tree-id7951 . -11) (undo-tree-id7952 . -11) (undo-tree-id7953 . -11) (undo-tree-id7954 . -11) (undo-tree-id7955 . -11) (undo-tree-id7956 . -11) (undo-tree-id7957 . -11) (undo-tree-id7958 . -11) (undo-tree-id7959 . -11) (undo-tree-id7960 . -11) (undo-tree-id7961 . -11) (undo-tree-id7962 . -11) (undo-tree-id7963 . -11) (undo-tree-id7964 . -11) (undo-tree-id7965 . -11) (undo-tree-id7966 . -11) (undo-tree-id7967 . -11) (undo-tree-id7968 . -11) (undo-tree-id7969 . -11) (undo-tree-id7970 . -11) (undo-tree-id7971 . -11) (undo-tree-id7972 . -11) (undo-tree-id7973 . -11) (undo-tree-id7974 . -11) (undo-tree-id7975 . -11) (undo-tree-id7976 . -11) (undo-tree-id7977 . -11) (undo-tree-id7978 . -11) (undo-tree-id7979 . -11) (undo-tree-id7980 . -11) (undo-tree-id7981 . -11) (undo-tree-id7982 . -11) (undo-tree-id7983 . -11) (undo-tree-id7984 . -11) (undo-tree-id7985 . -11) (undo-tree-id7986 . -11) (undo-tree-id7987 . -11) (undo-tree-id7988 . -11) (undo-tree-id7989 . -11) (undo-tree-id7990 . -11) (undo-tree-id7991 . -11) (undo-tree-id7992 . -11) (undo-tree-id7993 . -11) (undo-tree-id7994 . -11) (undo-tree-id7995 . -11) (undo-tree-id7996 . -11) (undo-tree-id7997 . -11) (undo-tree-id7998 . -11) (undo-tree-id7999 . -11) (undo-tree-id8000 . -11) (undo-tree-id8001 . -11) (undo-tree-id8002 . -11) (undo-tree-id8003 . -11) (undo-tree-id8004 . -11) (undo-tree-id8005 . -11) (undo-tree-id8006 . -11) (undo-tree-id8007 . -11) (undo-tree-id8008 . -11) (undo-tree-id8009 . -11) (undo-tree-id8010 . -11) (undo-tree-id8011 . -11) (undo-tree-id8012 . -11) (undo-tree-id8013 . -11) (undo-tree-id8014 . -11) (undo-tree-id8015 . -11) (undo-tree-id8016 . -11) (undo-tree-id8017 . -11) (undo-tree-id8018 . -11) (undo-tree-id8019 . -11) (undo-tree-id8020 . -11) (undo-tree-id8021 . -11) (undo-tree-id8022 . -11) (undo-tree-id8023 . -11) (undo-tree-id8024 . -11) (undo-tree-id8025 . -11) (undo-tree-id8026 . -11) (undo-tree-id8027 . -11) (undo-tree-id8028 . -11) (undo-tree-id8029 . -11) (undo-tree-id8030 . -11) (undo-tree-id8031 . -11) (undo-tree-id8032 . -11) (undo-tree-id8033 . -11) (undo-tree-id8034 . -11) (undo-tree-id8035 . -11) (undo-tree-id8036 . -11) (undo-tree-id8037 . -11) (undo-tree-id8038 . -11) (undo-tree-id8039 . -11) (undo-tree-id8040 . -11) (undo-tree-id8041 . -11) (undo-tree-id8042 . -11) (undo-tree-id8043 . -11) (undo-tree-id8044 . -11) (undo-tree-id8045 . -11) (undo-tree-id8046 . -11) (undo-tree-id8047 . -11) (undo-tree-id8048 . -11) (undo-tree-id8049 . -11) (undo-tree-id8050 . -11) (undo-tree-id8051 . -11) (undo-tree-id8052 . -11) (undo-tree-id8053 . -11) (undo-tree-id8054 . -11) (undo-tree-id8055 . -11) (undo-tree-id8056 . -11) (undo-tree-id8057 . -11) (undo-tree-id8058 . -11) (undo-tree-id8059 . -11) (undo-tree-id8060 . -11) (undo-tree-id8061 . -11) (undo-tree-id8062 . -11) (undo-tree-id8063 . -11) (undo-tree-id8064 . -11) (undo-tree-id8065 . -11) (undo-tree-id8066 . -11) (undo-tree-id8067 . -11) (undo-tree-id8068 . -11) (undo-tree-id8069 . -11) (undo-tree-id8070 . -11) (undo-tree-id8071 . -11) (undo-tree-id8072 . -11) (undo-tree-id8073 . -11) (undo-tree-id8074 . -11) (undo-tree-id8075 . -11) (undo-tree-id8076 . -11) (undo-tree-id8077 . -11) (undo-tree-id8078 . -11) (undo-tree-id8079 . -11) (undo-tree-id8080 . -11) (undo-tree-id8081 . -11) (undo-tree-id8082 . -11) (undo-tree-id8083 . -11) (undo-tree-id8084 . -11) (undo-tree-id8085 . -11) (undo-tree-id8086 . -11) (undo-tree-id8087 . -11) (undo-tree-id8088 . -11) (undo-tree-id8089 . -11) (undo-tree-id8090 . -11) (undo-tree-id8091 . -11) (undo-tree-id8092 . -11) (undo-tree-id8093 . -11) (undo-tree-id8094 . -11) (undo-tree-id8095 . -11) (undo-tree-id8096 . -11) (undo-tree-id8097 . -11) (undo-tree-id8098 . -11) (undo-tree-id8099 . -11) (undo-tree-id8100 . -11) (undo-tree-id8101 . -11) (undo-tree-id8102 . -11) (undo-tree-id8103 . -11) (undo-tree-id8104 . -11) (undo-tree-id8105 . -11) (undo-tree-id8106 . -11) (undo-tree-id8107 . -11) (undo-tree-id8108 . -11) (undo-tree-id8109 . -11) (undo-tree-id8110 . -11) (undo-tree-id8111 . -11) (undo-tree-id8112 . -11) (undo-tree-id8113 . -11) (undo-tree-id8114 . -11) (undo-tree-id8115 . -11) (undo-tree-id8116 . -11) (undo-tree-id8117 . -11) (undo-tree-id8118 . -11) (undo-tree-id8119 . -11) (undo-tree-id8120 . -11) (undo-tree-id8121 . -11) (undo-tree-id8122 . -11) (undo-tree-id8123 . -11) (undo-tree-id8124 . -11) (undo-tree-id8125 . -11) (undo-tree-id8126 . -12) (undo-tree-id8127 . -12) (undo-tree-id8128 . -12) (undo-tree-id8129 . -12) (undo-tree-id8130 . -12) (undo-tree-id8131 . -12) (undo-tree-id8132 . -12) (undo-tree-id8133 . -12) (undo-tree-id8134 . -12) (undo-tree-id8135 . -12) (undo-tree-id8136 . -12) (undo-tree-id8137 . -12) (undo-tree-id8138 . -12) (undo-tree-id8139 . -12) (undo-tree-id8140 . -12) (undo-tree-id8141 . -12) (undo-tree-id8142 . -12) (undo-tree-id8143 . -12) (undo-tree-id8144 . -12) (undo-tree-id8145 . -12) (undo-tree-id8146 . -12) (undo-tree-id8147 . -12) (undo-tree-id8148 . -12) (undo-tree-id8149 . -12) (undo-tree-id8150 . -12) (undo-tree-id8151 . -12) (undo-tree-id8152 . -12) (undo-tree-id8153 . -12) (undo-tree-id8154 . -12) (undo-tree-id8155 . -12) (undo-tree-id8156 . -12) (undo-tree-id8157 . -12) (undo-tree-id8158 . -12) (undo-tree-id8159 . -12) (undo-tree-id8160 . -12) (undo-tree-id8161 . -12) (undo-tree-id8162 . -12) (undo-tree-id8163 . -12) (undo-tree-id8164 . -12) (undo-tree-id8165 . -12) (undo-tree-id8166 . -12) (undo-tree-id8167 . -12) (undo-tree-id8168 . -12) (undo-tree-id8169 . -12) (undo-tree-id8170 . -12) (undo-tree-id8171 . -12) (undo-tree-id8172 . -12) (undo-tree-id8173 . -12) (undo-tree-id8174 . -12) (undo-tree-id8175 . -12) (undo-tree-id8176 . -12) (undo-tree-id8177 . -12) (undo-tree-id8178 . -12) (undo-tree-id8179 . -12) (undo-tree-id8180 . -12) (undo-tree-id8181 . -12) (undo-tree-id8182 . -12) (undo-tree-id8183 . -12) (undo-tree-id8184 . -12) (undo-tree-id8185 . -12) (undo-tree-id8186 . -12) (undo-tree-id8187 . -12) (undo-tree-id8188 . -12) (undo-tree-id8189 . -12) (undo-tree-id8190 . -12) (undo-tree-id8191 . -12) (undo-tree-id8192 . -12) (undo-tree-id8193 . -12) (undo-tree-id8194 . -12) (undo-tree-id8195 . -12) (undo-tree-id8196 . -12) (undo-tree-id8197 . -12) (undo-tree-id8198 . -12) (undo-tree-id8199 . -12) (undo-tree-id8200 . -13) (undo-tree-id8201 . -13) (undo-tree-id8202 . -13) (undo-tree-id8203 . -13) (undo-tree-id8204 . -13) (undo-tree-id8205 . -13) (undo-tree-id8206 . -13) (undo-tree-id8207 . -13) (undo-tree-id8208 . -13) (undo-tree-id8209 . -13) (undo-tree-id8210 . -13) (undo-tree-id8211 . -13) (undo-tree-id8212 . -13) (undo-tree-id8213 . -13) (undo-tree-id8214 . -13) (undo-tree-id8215 . -13) (undo-tree-id8216 . -13) (undo-tree-id8217 . -13) (undo-tree-id8218 . -13) (undo-tree-id8219 . -13) (undo-tree-id8220 . -13) (undo-tree-id8221 . -13) (undo-tree-id8222 . -13) (undo-tree-id8223 . -13) (undo-tree-id8224 . -13) (undo-tree-id8225 . -13) (undo-tree-id8226 . -13) (undo-tree-id8227 . -13) (undo-tree-id8228 . -13) (undo-tree-id8229 . -13) (undo-tree-id8230 . -13) (undo-tree-id8231 . -13) (undo-tree-id8232 . -13) (undo-tree-id8233 . -13) (undo-tree-id8234 . -13) (undo-tree-id8235 . -13) (undo-tree-id8236 . -13) (undo-tree-id8237 . -13) (undo-tree-id8238 . -13) (undo-tree-id8239 . -13) (undo-tree-id8240 . -13) (undo-tree-id8241 . -13) (undo-tree-id8242 . -13) (undo-tree-id8243 . -13) (undo-tree-id8244 . -13) (undo-tree-id8245 . -13) (undo-tree-id8246 . -13) (undo-tree-id8247 . -13) (undo-tree-id8248 . -13) (undo-tree-id8249 . -13) (undo-tree-id8250 . -13) (undo-tree-id8251 . -13) (undo-tree-id8252 . -13) (undo-tree-id8253 . -13) (undo-tree-id8254 . -13) (undo-tree-id8255 . -13) (undo-tree-id8256 . -13) (undo-tree-id8257 . -13) (undo-tree-id8258 . -13) (undo-tree-id8259 . -13) (undo-tree-id8260 . -13) (undo-tree-id8261 . -13) (undo-tree-id8262 . -13) (undo-tree-id8263 . -13) (undo-tree-id8264 . -13) (undo-tree-id8265 . -13) (undo-tree-id8266 . -13) (undo-tree-id8267 . -13) (undo-tree-id8268 . -13) (undo-tree-id8269 . -13) (undo-tree-id8270 . -13) (undo-tree-id8271 . -13) (undo-tree-id8272 . -13) (undo-tree-id8273 . -13) 1493 (1491 . 1493)) nil (26246 53477 596936 226000) 0 nil])
([nil nil ((1451 . 1455) (1451 . 1453) (t 26246 53477 684173 595000)) nil (26246 53537 159029 173000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2074) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (#("u" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2075) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) 2076 (2074 . 2076) (2070 . 2074) (#("    " 0 4 (fontified nil)) . 2069) (undo-tree-id8299 . -4) (2073 . 2074) (2069 . 2073) (t 26246 53537 248308 303000)) nil (26246 53547 153720 316000) 0 nil])
([nil nil ((2189 . 2193) (#("    " 0 4 (fontified nil)) . 2188) (undo-tree-id8306 . -4) (2192 . 2193) (2188 . 2192) (t 26246 53547 258940 67000)) nil (26246 53580 200984 496000) 0 nil])
([nil nil ((2200 . 2202) (#("bool result" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 11 (fontified nil face font-lock-variable-name-face)) . 2200) (2199 . 2200) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2199 2202 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2199 2202 nil nil nil t nil) nil nil)) (2192 . 2211) (#("sucide(${1:bool result})" 0 24 (fontified nil)) . 2192) (2192 . 2216) (#("suc" 0 3 (fontified nil)) . 2192) (2192 . 2195) (#("sucide(bool result)" 0 19 (fontified nil)) . -2192) (2192 . 2211) (#("suc" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -2192) (undo-tree-id8304 . -3) (undo-tree-id8305 . -3) 2195 (2192 . 2195) (2188 . 2192)) nil (26246 53580 200975 402000) 0 nil])
([nil nil ((2203 . 2204) (apply yas--snippet-revive 2192 2203 #s(yas--snippet nil (#s(yas--field 1 2199 2202 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2199 2202 nil nil nil t nil) nil nil))) nil (26246 53580 200964 358000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2783 . 2784) (#("
" 0 1 (fontified nil)) . -2796) (2779 . 2797)) nil (26246 53580 200961 263000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3368 . 3369) (#("
" 0 1 (fontified nil)) . -3381) (3364 . 3382)) nil (26246 53580 200958 194000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3946) (undo-tree-id8303 . -4) 3950 (3945 . 3950)) nil (26246 53580 200954 953000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3948) (undo-tree-id8301 . -4) 3952 (3948 . 3952) (#("    " 0 4 (fontified nil)) . 3947) (undo-tree-id8302 . -4) (3946 . 3952)) nil (26246 53580 200948 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3951 . 3952) (#("
" 0 1 (fontified nil)) . -3964) (3947 . 3965)) nil (26246 53580 200940 390000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4608 . 4609) (#("
" 0 1 (fontified nil)) . -4621) (4604 . 4622)) nil (26246 53580 200935 936000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4622) (undo-tree-id8300 . -4) 4626 (4621 . 4626)) nil (26246 53580 200926 341000) 0 nil])
([nil nil ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7044) (undo-tree-id8307 . -2) (undo-tree-id8308 . -3) (t 26246 53580 271399 258000)) nil (26246 53585 894709 561000) 0 nil])
([nil nil ((#("exit" 0 1 (fontified t c-is-sws t) 1 4 (fontified t)) . 7044) (undo-tree-id8381 . -3) (t 26246 53585 946922 609000)) nil (26246 53756 235475 634000) 0 nil])
([nil nil ((#("    (-1);
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 3 (c-in-sws t c-is-sws t fontified t) 3 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t face (rainbow-delimiters-depth-4-face)) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t) 9 10 (fontified t)) . 7040) (undo-tree-id8368 . -9) (undo-tree-id8369 . -4) (undo-tree-id8370 . -4) (undo-tree-id8371 . -4) (undo-tree-id8372 . -4) (undo-tree-id8373 . -4) (undo-tree-id8374 . -4) (undo-tree-id8375 . -4) (undo-tree-id8376 . -4) (undo-tree-id8377 . -4) (undo-tree-id8378 . -4) (undo-tree-id8379 . -4) (undo-tree-id8380 . -10) 7044) nil (26246 53756 235468 526000) 0 nil])
([nil nil ((#("    // uncomment this to exit 
" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 6 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 6 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 8 (c-in-sws t fontified t face font-lock-comment-face) 8 9 (c-in-sws t fontified t face font-lock-comment-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 14 (c-in-sws t fontified t face font-lock-comment-face) 14 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 23 (c-in-sws t fontified t face font-lock-comment-face) 23 24 (c-in-sws t fontified t face font-lock-comment-face) 24 25 (c-in-sws t fontified t face font-lock-comment-face) 25 26 (c-in-sws t fontified t face font-lock-comment-face) 26 27 (c-in-sws t fontified t face font-lock-comment-face) 27 28 (c-in-sws t fontified t face font-lock-comment-face) 28 29 (c-in-sws t fontified t face font-lock-comment-face) 29 30 (c-in-sws t fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face c-in-sws t)) . 7009) (undo-tree-id8309 . -30) (undo-tree-id8310 . -31) (undo-tree-id8311 . -3) (undo-tree-id8312 . -31) (undo-tree-id8313 . -31) (undo-tree-id8314 . -31) (undo-tree-id8315 . -31) (undo-tree-id8316 . -31) (undo-tree-id8317 . -31) (undo-tree-id8318 . -31) (undo-tree-id8319 . -31) (undo-tree-id8320 . -31) (undo-tree-id8321 . -3) (undo-tree-id8322 . -3) (undo-tree-id8323 . -3) (undo-tree-id8324 . -3) (undo-tree-id8325 . -3) (undo-tree-id8326 . -3) (undo-tree-id8327 . -3) (undo-tree-id8328 . -3) (undo-tree-id8329 . -3) (undo-tree-id8330 . -3) (undo-tree-id8331 . -3) (undo-tree-id8332 . -3) (undo-tree-id8333 . -3) (undo-tree-id8334 . -3) (undo-tree-id8335 . -3) (undo-tree-id8336 . -3) (undo-tree-id8337 . -3) (undo-tree-id8338 . -3) (undo-tree-id8339 . -3) (undo-tree-id8340 . -3) (undo-tree-id8341 . -3) (undo-tree-id8342 . -3) (undo-tree-id8343 . -3) (undo-tree-id8344 . -3) (undo-tree-id8345 . -3) (undo-tree-id8346 . -3) (undo-tree-id8347 . -3) (undo-tree-id8348 . -3) (undo-tree-id8349 . -3) (undo-tree-id8350 . -3) (undo-tree-id8351 . -3) (undo-tree-id8352 . -3) (undo-tree-id8353 . -3) (undo-tree-id8354 . -3) (undo-tree-id8355 . -3) (undo-tree-id8356 . -3) (undo-tree-id8357 . -3) (undo-tree-id8358 . -3) (undo-tree-id8359 . -3) (undo-tree-id8360 . -3) (undo-tree-id8361 . -3) (undo-tree-id8362 . -3) (undo-tree-id8363 . -3) (undo-tree-id8364 . -3) (undo-tree-id8365 . -3) (undo-tree-id8366 . -3) (undo-tree-id8367 . -31) 7012) nil (26246 53756 235430 221000) 0 nil])
([nil nil ((#("//    " 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 1 2 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 2 5 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 5 6 (fontified t rear-nonsticky t c-in-sws t face font-lock-comment-delimiter-face)) . 1455) (undo-tree-id8382 . -5) (undo-tree-id8383 . -6) (t 26246 53756 303555 660000)) nil (26246 53954 670634 287000) 0 nil])
([nil current ((1502 . 1503) (#("4" 0 1 (fontified t)) . 1502) (undo-tree-id8384 . -1) (t 26246 53954 732566 855000)) nil (26246 54082 860767 656000) 0 nil])
nil
