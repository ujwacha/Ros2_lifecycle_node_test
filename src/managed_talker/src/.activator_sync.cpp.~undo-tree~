(undo-tree-save-format-version . 1)
"05bf38f356b300961da4bbfeb8e19fcb426a8b91"
[nil nil nil nil (26232 19042 672531 746000) 0 nil]
([nil nil ((nil rear-nonsticky nil 8577 . 8578) (nil fontified nil 8481 . 8578) (nil fontified nil 8480 . 8481) (nil category c->-as-paren-syntax 8480 . 8481) (nil fontified nil 8451 . 8480) (nil fontified nil 8450 . 8451) (nil category c-<-as-paren-syntax 8450 . 8451) (nil fontified nil 8204 . 8450) (nil fontified nil 8203 . 8204) (nil category c->-as-paren-syntax 8203 . 8204) (nil fontified nil 8202 . 8203) (nil category c->-as-paren-syntax 8202 . 8203) (nil fontified nil 8201 . 8202) (nil category c->-as-paren-syntax 8201 . 8202) (nil fontified nil 8169 . 8201) (nil fontified nil 8168 . 8169) (nil category c-<-as-paren-syntax 8168 . 8169) (nil fontified nil 8154 . 8168) (nil fontified nil 8153 . 8154) (nil category c-<-as-paren-syntax 8153 . 8154) (nil fontified nil 8138 . 8153) (nil fontified nil 8137 . 8138) (nil category c-<-as-paren-syntax 8137 . 8138) (nil fontified nil 8102 . 8137) (nil fontified nil 8101 . 8102) (nil category c->-as-paren-syntax 8101 . 8102) (nil fontified nil 8100 . 8101) (nil category c->-as-paren-syntax 8100 . 8101) (nil fontified nil 8099 . 8100) (nil category c->-as-paren-syntax 8099 . 8100) (nil fontified nil 8070 . 8099) (nil fontified nil 8069 . 8070) (nil category c-<-as-paren-syntax 8069 . 8070) (nil fontified nil 8055 . 8069) (nil fontified nil 8054 . 8055) (nil category c-<-as-paren-syntax 8054 . 8055) (nil fontified nil 8039 . 8054) (nil fontified nil 8038 . 8039) (nil category c-<-as-paren-syntax 8038 . 8039) (nil fontified nil 8002 . 8038) (nil fontified nil 8001 . 8002) (nil category c->-as-paren-syntax 8001 . 8002) (nil fontified nil 7990 . 8001) (nil fontified nil 7989 . 7990) (nil category c-<-as-paren-syntax 7989 . 7990) (nil fontified nil 7957 . 7989) (nil fontified nil 7956 . 7957) (nil category c->-as-paren-syntax 7956 . 7957) (nil fontified nil 7945 . 7956) (nil fontified nil 7944 . 7945) (nil category c-<-as-paren-syntax 7944 . 7945) (nil fontified nil 7914 . 7944) (nil fontified nil 7913 . 7914) (nil category c->-as-paren-syntax 7913 . 7914) (nil fontified nil 7902 . 7913) (nil fontified nil 7901 . 7902) (nil category c-<-as-paren-syntax 7901 . 7902) (nil fontified nil 7860 . 7901) (nil fontified nil 7859 . 7860) (nil category c->-as-paren-syntax 7859 . 7860) (nil fontified nil 7839 . 7859) (nil fontified nil 7838 . 7839) (nil category c-<-as-paren-syntax 7838 . 7839) (nil fontified nil 7368 . 7838) (nil fontified nil 7367 . 7368) (nil category c->-as-paren-syntax 7367 . 7368) (nil fontified nil 7355 . 7367) (nil fontified nil 7354 . 7355) (nil category c-<-as-paren-syntax 7354 . 7355) (nil fontified nil 7211 . 7354) (nil fontified nil 7210 . 7211) (nil category c->-as-paren-syntax 7210 . 7211) (nil fontified nil 7207 . 7210) (nil fontified nil 7206 . 7207) (nil category c-<-as-paren-syntax 7206 . 7207) (nil fontified nil 7043 . 7206) (nil fontified nil 7042 . 7043) (nil fontified nil 6646 . 7042) (nil fontified nil 6645 . 6646) (nil fontified nil 6205 . 6645) (nil fontified nil 6204 . 6205) (nil category c->-as-paren-syntax 6204 . 6205) (nil fontified nil 6163 . 6204) (nil fontified nil 6162 . 6163) (nil category c-<-as-paren-syntax 6162 . 6163) (nil fontified nil 3709 . 6162) (nil fontified nil 3708 . 3709) (nil category c->-as-paren-syntax 3708 . 3709) (nil fontified nil 3688 . 3708) (nil fontified nil 3687 . 3688) (nil category c-<-as-paren-syntax 3687 . 3688) (nil fontified nil 2999 . 3687) (nil fontified nil 2998 . 2999) (nil category c->-as-paren-syntax 2998 . 2999) (nil fontified nil 2966 . 2998) (nil fontified nil 2965 . 2966) (nil category c-<-as-paren-syntax 2965 . 2966) (nil fontified nil 2784 . 2965) (nil fontified nil 2783 . 2784) (nil category c->-as-paren-syntax 2783 . 2784) (nil fontified nil 2754 . 2783) (nil fontified nil 2753 . 2754) (nil category c-<-as-paren-syntax 2753 . 2754) (nil fontified nil 698 . 2753) (nil fontified nil 697 . 698) (nil category c->-as-paren-syntax 697 . 698) (nil fontified nil 678 . 697) (nil fontified nil 677 . 678) (nil fontified nil 661 . 677) (nil fontified nil 660 . 661) (nil category c-<-as-paren-syntax 660 . 661) (nil fontified nil 1 . 660) (1 . 8578) (t 26232 19025 15009 178000)) nil (26232 19042 672515 399000) 0 nil])
([nil nil ((#("
template <typename FutureT, typename WaitTimeT>
std::future_status wait_for_result(FutureT &future, WaitTimeT time_to_wait) {
  auto end = std::chrono::steady_clock::now() + time_to_wait;
  std::chrono::milliseconds wait_period(100);
  std::future_status status = std::future_status::timeout;
  do {
    auto now = std::chrono::steady_clock::now();
    auto time_left = end - now;
    if (time_left <= std::chrono::seconds(0)) {
      break;
    }
    status =
        future.wait_for((time_left < wait_period) ? time_left : wait_period);
  } while (rclcpp::ok() && status != std::future_status::ready);
  return status;
}

" 0 1 (fontified t) 1 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-2-face)) 11 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 27 (fontified t face font-lock-type-face) 27 28 (fontified t c-type c-<>-arg-sep) 28 29 (fontified t) 29 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 47 (fontified t face font-lock-type-face) 47 48 (fontified t category c->-as-paren-syntax face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t) 49 52 (fontified t face font-lock-constant-face) 52 54 (fontified t) 54 66 (fontified t face font-lock-type-face) 66 67 (fontified t c-type c-decl-id-start face font-lock-type-face) 67 68 (fontified t) 68 83 (fontified t face font-lock-function-name-face) 83 84 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-2-face)) 84 91 (fontified t face font-lock-type-face) 91 93 (fontified t) 93 99 (fontified t face font-lock-variable-name-face) 99 100 (fontified t c-type c-decl-arg-start) 100 101 (fontified t) 101 110 (fontified t face font-lock-type-face) 110 111 (fontified t) 111 123 (fontified t face font-lock-variable-name-face) 123 124 (fontified t face (rainbow-delimiters-depth-2-face)) 124 125 (fontified t) 125 126 (fontified t face (rainbow-delimiters-depth-2-face)) 126 129 (fontified t) 129 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 133 134 (fontified t) 134 137 (fontified t face font-lock-variable-name-face) 137 140 (fontified t) 140 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 151 (fontified t face font-lock-constant-face) 151 153 (fontified t) 153 165 (fontified t face font-lock-constant-face) 165 170 (fontified t) 170 171 (fontified t face (rainbow-delimiters-depth-3-face)) 171 172 (fontified t face (rainbow-delimiters-depth-3-face)) 172 191 (fontified t) 191 194 (fontified t face font-lock-constant-face) 194 196 (fontified t) 196 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 215 (fontified t face font-lock-type-face) 215 216 (fontified t c-type c-decl-id-start face font-lock-type-face) 216 217 (fontified t) 217 228 (fontified t face font-lock-variable-name-face) 228 229 (fontified t face (rainbow-delimiters-depth-3-face)) 229 232 (fontified t) 232 233 (fontified t face (rainbow-delimiters-depth-3-face)) 233 237 (fontified t) 237 240 (fontified t face font-lock-constant-face) 240 242 (fontified t) 242 254 (fontified t face font-lock-type-face) 254 255 (fontified t c-type c-decl-id-start face font-lock-type-face) 255 256 (fontified t) 256 262 (fontified t face font-lock-variable-name-face) 262 265 (fontified t) 265 268 (fontified t face font-lock-constant-face) 268 270 (fontified t) 270 283 (fontified t face font-lock-constant-face) 283 296 (fontified t) 296 298 (fontified t face font-lock-keyword-face) 298 299 (fontified t) 299 300 (fontified t face (rainbow-delimiters-depth-3-face)) 300 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 309 310 (fontified t) 310 313 (fontified t face font-lock-variable-name-face) 313 316 (fontified t) 316 319 (fontified t face font-lock-constant-face) 319 321 (fontified t) 321 327 (fontified t face font-lock-constant-face) 327 329 (fontified t) 329 341 (fontified t face font-lock-constant-face) 341 346 (fontified t) 346 347 (fontified t face (rainbow-delimiters-depth-4-face)) 347 348 (fontified t face (rainbow-delimiters-depth-4-face)) 348 352 (fontified t) 352 354 (fontified t) 354 357 (fontified t face font-lock-keyword-face) 357 358 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 358 359 (fontified t) 359 368 (fontified t face font-lock-variable-name-face) 368 382 (fontified t) 382 386 (fontified t) 386 388 (fontified t face font-lock-keyword-face) 388 389 (fontified t) 389 390 (fontified t face (rainbow-delimiters-depth-4-face)) 390 403 (fontified t) 403 406 (fontified t face font-lock-constant-face) 406 408 (fontified t) 408 414 (fontified t face font-lock-constant-face) 414 423 (fontified t) 423 424 (fontified t face (rainbow-delimiters-depth-5-face)) 424 425 (fontified t) 425 426 (fontified t face (rainbow-delimiters-depth-5-face)) 426 427 (fontified t face (rainbow-delimiters-depth-4-face)) 427 428 (fontified t) 428 429 (fontified t face (rainbow-delimiters-depth-4-face)) 429 436 (fontified t) 436 441 (fontified t face font-lock-keyword-face) 441 447 (fontified t) 447 448 (fontified t face (rainbow-delimiters-depth-4-face)) 448 485 (fontified t) 485 486 (fontified t face (rainbow-delimiters-depth-4-face)) 486 487 (fontified t face (rainbow-delimiters-depth-5-face)) 487 510 (fontified t) 510 511 (fontified t face (rainbow-delimiters-depth-5-face)) 511 537 (fontified t) 537 538 (fontified t face (rainbow-delimiters-depth-4-face)) 538 542 (fontified t) 542 543 (fontified t face (rainbow-delimiters-depth-3-face)) 543 544 (fontified t) 544 549 (fontified t face font-lock-keyword-face) 549 550 (fontified t) 550 551 (fontified t face (rainbow-delimiters-depth-3-face)) 551 557 (fontified t face font-lock-constant-face) 557 561 (fontified t) 561 562 (fontified t face (rainbow-delimiters-depth-4-face)) 562 563 (fontified t face (rainbow-delimiters-depth-4-face)) 563 577 (fontified t) 577 580 (fontified t face font-lock-constant-face) 580 582 (fontified t) 582 595 (fontified t face font-lock-constant-face) 595 602 (fontified t) 602 603 (fontified t face (rainbow-delimiters-depth-3-face)) 603 607 (fontified t) 607 613 (fontified t face font-lock-keyword-face) 613 622 (fontified t) 622 623 (fontified t face (rainbow-delimiters-depth-2-face)) 623 625 (fontified t)) . 650) (undo-tree-id0 . -624) (undo-tree-id1 . -624) (undo-tree-id2 . -127) (undo-tree-id3 . -624) (undo-tree-id4 . -624) (undo-tree-id5 . -625) (undo-tree-id6 . -624) (undo-tree-id7 . -625) (undo-tree-id8 . -625) (undo-tree-id9 . -625) (undo-tree-id10 . -625) (undo-tree-id11 . -625) (undo-tree-id12 . -625) (undo-tree-id13 . -625) (undo-tree-id14 . -625) (undo-tree-id15 . -625) (undo-tree-id16 . -625) (undo-tree-id17 . -625) (undo-tree-id18 . -625) (undo-tree-id19 . -625) (undo-tree-id20 . -625) (undo-tree-id21 . -625) (undo-tree-id22 . -624) (undo-tree-id23 . -624) (undo-tree-id24 . -624) (undo-tree-id25 . -624) (undo-tree-id26 . -624) (undo-tree-id27 . -624) (undo-tree-id28 . -624) (undo-tree-id29 . -622) (undo-tree-id30 . -622) (undo-tree-id31 . -622) (undo-tree-id32 . -622) (undo-tree-id33 . -622) (undo-tree-id34 . -622) (undo-tree-id35 . -622) (undo-tree-id36 . -624) (undo-tree-id37 . -624) (undo-tree-id38 . -624) (undo-tree-id39 . -624) (undo-tree-id40 . -624) (undo-tree-id41 . -624) (undo-tree-id42 . -624) (undo-tree-id43 . -624) (undo-tree-id44 . -624) (undo-tree-id45 . -625) 1274 (t 26232 19042 712983 972000)) nil (26232 19056 235779 439000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -650) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) 652 (649 . 652) (t 26232 19056 246415 756000)) nil (26232 19512 780387 19000) 0 nil])
([nil nil ((#("    auto future_result =
        change_clients[index]->async_send_request(request).future.share();

    // Let's wait until we have the answer from the node.
    // If the request times out, we return an unknown state.
    auto future_status = wait_for_result(future_result, time_out);

    if (future_status != std::future_status::ready) {
      RCLCPP_ERROR(get_logger(),
                   \"Server time out while getting current state for node \");
      return false;
    }

    // We have an answer, let's print our success.
    if (future_result.get()->success) {
      RCLCPP_INFO(get_logger(), \"Transition %d successfully triggered.\",
                  static_cast<int>(transition));
      return true;
    } else {
      RCLCPP_WARN(get_logger(), \"Failed to trigger transition %u\",
                  static_cast<unsigned int>(transition));
      return false;
 " 0 4 (c-is-sws t c-in-sws t fontified t) 4 5 (c-is-sws t fontified t face font-lock-keyword-face) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 8 9 (fontified t) 9 22 (fontified t face font-lock-variable-name-face) 22 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-4-face)) 54 57 (fontified t) 57 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-4-face)) 75 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-4-face)) 83 84 (fontified t) 84 85 (fontified t) 85 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-4-face)) 97 98 (fontified t face (rainbow-delimiters-depth-4-face)) 98 99 (fontified t) 99 101 (fontified t) 101 105 (fontified t) 105 106 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 106 108 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 108 111 (c-in-sws t fontified t face font-lock-comment-face) 111 112 (c-in-sws t fontified t face font-lock-comment-face) 112 159 (c-in-sws t fontified t face font-lock-comment-face) 159 163 (c-in-sws t fontified t) 163 166 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 166 175 (c-in-sws t fontified t face font-lock-comment-face) 175 219 (c-in-sws t fontified t face font-lock-comment-face) 219 220 (c-in-sws t fontified t face font-lock-comment-face) 220 221 (c-in-sws t fontified t) 221 224 (c-in-sws t fontified t) 224 225 (c-is-sws t fontified t face font-lock-keyword-face) 225 227 (fontified t face font-lock-keyword-face) 227 228 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 228 229 (fontified t) 229 242 (fontified t face font-lock-variable-name-face) 242 260 (fontified t) 260 261 (fontified t face (rainbow-delimiters-depth-4-face)) 261 284 (fontified t) 284 285 (fontified t face (rainbow-delimiters-depth-4-face)) 285 292 (fontified t) 292 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 296 (fontified t face (rainbow-delimiters-depth-4-face)) 296 313 (fontified t) 313 316 (fontified t face font-lock-constant-face) 316 318 (fontified t) 318 331 (fontified t face font-lock-constant-face) 331 338 (fontified t) 338 339 (fontified t face (rainbow-delimiters-depth-4-face)) 339 340 (fontified t) 340 341 (fontified t face (rainbow-delimiters-depth-4-face)) 341 360 (fontified t) 360 361 (fontified t face (rainbow-delimiters-depth-5-face)) 361 371 (fontified t) 371 372 (fontified t face (rainbow-delimiters-depth-6-face)) 372 373 (fontified t face (rainbow-delimiters-depth-6-face)) 373 394 (fontified t) 394 449 (fontified t face font-lock-string-face) 449 450 (fontified t face (rainbow-delimiters-depth-5-face)) 450 452 (fontified t) 452 458 (fontified t) 458 464 (fontified t face font-lock-keyword-face) 464 465 (fontified t) 465 470 (fontified t face font-lock-constant-face) 470 472 (fontified t) 472 476 (fontified t) 476 477 (fontified t face (rainbow-delimiters-depth-4-face)) 477 478 (fontified t) 478 479 (fontified t) 479 483 (c-in-sws t c-is-sws t fontified t) 483 484 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 484 486 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 486 500 (c-in-sws t fontified t face font-lock-comment-face) 500 508 (c-in-sws t fontified t face font-lock-comment-face) 508 509 (c-in-sws t fontified t face font-lock-comment-face) 509 529 (c-in-sws t fontified t face font-lock-comment-face) 529 530 (c-in-sws t fontified t face font-lock-comment-face) 530 531 (c-is-sws t c-in-sws t fontified t) 531 534 (c-is-sws t c-in-sws t fontified t) 534 535 (c-is-sws t fontified t face font-lock-keyword-face) 535 536 (fontified t face font-lock-keyword-face) 536 537 (fontified t) 537 538 (fontified t face (rainbow-delimiters-depth-4-face)) 538 555 (fontified t) 555 556 (fontified t face (rainbow-delimiters-depth-5-face)) 556 557 (fontified t face (rainbow-delimiters-depth-5-face)) 557 566 (fontified t) 566 567 (fontified t face (rainbow-delimiters-depth-4-face)) 567 568 (fontified t) 568 569 (fontified t face (rainbow-delimiters-depth-4-face)) 569 584 (fontified t) 584 587 (fontified t) 587 588 (fontified t face (rainbow-delimiters-depth-5-face)) 588 598 (fontified t) 598 599 (fontified t face (rainbow-delimiters-depth-6-face)) 599 600 (fontified t face (rainbow-delimiters-depth-6-face)) 600 602 (fontified t) 602 641 (fontified t face font-lock-string-face) 641 643 (fontified t) 643 661 (fontified t) 661 672 (fontified t face font-lock-keyword-face) 672 673 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 673 676 (fontified t face font-lock-type-face) 676 677 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 677 678 (fontified t face (rainbow-delimiters-depth-6-face)) 678 688 (fontified t) 688 689 (fontified t face (rainbow-delimiters-depth-6-face)) 689 690 (fontified t face (rainbow-delimiters-depth-5-face)) 690 691 (fontified t) 691 698 (fontified t) 698 704 (fontified t face font-lock-keyword-face) 704 705 (fontified t) 705 709 (fontified t face font-lock-constant-face) 709 715 (fontified t) 715 716 (fontified t face (rainbow-delimiters-depth-4-face)) 716 717 (fontified t) 717 721 (fontified t face font-lock-keyword-face) 721 722 (fontified t) 722 723 (fontified t face (rainbow-delimiters-depth-4-face)) 723 741 (fontified t) 741 742 (fontified t face (rainbow-delimiters-depth-5-face)) 742 752 (fontified t) 752 753 (fontified t face (rainbow-delimiters-depth-6-face)) 753 754 (fontified t face (rainbow-delimiters-depth-6-face)) 754 756 (fontified t) 756 789 (fontified t face font-lock-string-face) 789 809 (fontified t) 809 820 (fontified t face font-lock-keyword-face) 820 821 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 821 829 (fontified t face font-lock-type-face) 829 830 (fontified t) 830 833 (fontified t face font-lock-type-face) 833 834 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-6-face)) 834 835 (fontified t face (rainbow-delimiters-depth-6-face)) 835 845 (fontified t) 845 846 (fontified t face (rainbow-delimiters-depth-6-face)) 846 847 (fontified t face (rainbow-delimiters-depth-5-face)) 847 855 (fontified t) 855 861 (fontified t face font-lock-keyword-face) 861 862 (fontified t) 862 867 (fontified t face font-lock-constant-face) 867 870 (fontified t)) . 5910) (undo-tree-id614 . -869) (undo-tree-id615 . -869) (undo-tree-id616 . -869) (undo-tree-id617 . -869) (undo-tree-id618 . -869) (undo-tree-id619 . -869) 6779) nil (26232 19556 666422 636000) 0 nil] [nil nil ((#("    auto request =
        std::make_shared<lifecycle_msgs::srv::ChangeState::Request>();
    request->transition.id = transition;

    if (!change_clients[index]->wait_for_service(time_out)) {
      RCLCPP_ERROR(get_logger(), \"Service %s is not available.\",
                   change_clients[index]->get_service_name());
      return false;
    }

    // We send the request with the transition we want to invoke.
    auto future_result =
        change_clients[index]->async_send_request(request).future.share();

    // Let's wait until we have the answer from the node.
    // If the request times out, we return an unknown state.
    auto future_status = wait_for_result(future_result, time_out);

    if (future_status != std::future_status::ready) {
      RCLCPP_ERROR(get_logger(),
                   \"Server time out while getting current state for node \");
      return false;
    }

    // We have an answer, let's print our success.
    if (future_result.get()->success) {
      RCLCPP_INFO(get_logger(), \"Transition %d successfully triggered.\",
                  static_cast<int>(transition));
      return true;
    } else {
      RCLCPP_WARN(get_logger(), \"Failed to trigger transition %u\",
                  static_cast<unsigned int>(transition));
      return false;
    }" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 8 9 (fontified t) 9 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 27 (fontified t) 27 30 (fontified t face font-lock-constant-face) 30 43 (fontified t) 43 44 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 44 58 (fontified t face font-lock-constant-face) 58 60 (fontified t) 60 63 (fontified t face font-lock-constant-face) 63 65 (fontified t) 65 76 (fontified t face font-lock-constant-face) 76 85 (fontified t) 85 86 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-4-face)) 86 87 (fontified t face (rainbow-delimiters-depth-4-face)) 87 88 (fontified t face (rainbow-delimiters-depth-4-face)) 88 90 (fontified t) 90 136 (fontified t) 136 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-4-face)) 140 141 (fontified t face font-lock-negation-char-face) 141 155 (fontified t) 155 156 (fontified t face (rainbow-delimiters-depth-5-face)) 156 161 (fontified t) 161 162 (fontified t face (rainbow-delimiters-depth-5-face)) 162 180 (fontified t) 180 181 (fontified t face (rainbow-delimiters-depth-5-face)) 181 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-5-face)) 190 191 (fontified t face (rainbow-delimiters-depth-4-face)) 191 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-4-face)) 193 212 (fontified t) 212 213 (fontified t face (rainbow-delimiters-depth-5-face)) 213 223 (fontified t) 223 224 (fontified t face (rainbow-delimiters-depth-6-face)) 224 225 (fontified t face (rainbow-delimiters-depth-6-face)) 225 227 (fontified t) 227 257 (fontified t face font-lock-string-face) 257 292 (fontified t) 292 293 (fontified t face (rainbow-delimiters-depth-6-face)) 293 298 (fontified t) 298 299 (fontified t face (rainbow-delimiters-depth-6-face)) 299 317 (fontified t) 317 318 (fontified t face (rainbow-delimiters-depth-6-face)) 318 319 (fontified t face (rainbow-delimiters-depth-6-face)) 319 320 (fontified t face (rainbow-delimiters-depth-5-face)) 320 328 (fontified t) 328 334 (fontified t face font-lock-keyword-face) 334 335 (fontified t) 335 340 (fontified t face font-lock-constant-face) 340 346 (fontified t) 346 347 (fontified t face (rainbow-delimiters-depth-4-face)) 347 349 (fontified t) 349 350 (c-in-sws t c-is-sws t fontified t) 350 353 (c-in-sws t c-is-sws t fontified t) 353 354 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 354 356 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 356 414 (c-in-sws t face font-lock-comment-face fontified t) 414 415 (face font-lock-comment-face fontified t c-in-sws t) 415 419 (c-is-sws t c-in-sws t fontified t) 419 420 (c-is-sws t fontified t face font-lock-keyword-face) 420 422 (fontified t face font-lock-keyword-face) 422 423 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 423 424 (fontified t) 424 437 (fontified t face font-lock-variable-name-face) 437 462 (fontified t) 462 463 (fontified t face (rainbow-delimiters-depth-4-face)) 463 468 (fontified t) 468 469 (fontified t face (rainbow-delimiters-depth-4-face)) 469 489 (fontified t) 489 490 (fontified t face (rainbow-delimiters-depth-4-face)) 490 497 (fontified t) 497 498 (fontified t face (rainbow-delimiters-depth-4-face)) 498 511 (fontified t) 511 512 (fontified t face (rainbow-delimiters-depth-4-face)) 512 513 (fontified t face (rainbow-delimiters-depth-4-face)) 513 516 (fontified t) 516 520 (c-in-sws t c-is-sws t fontified t) 520 521 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 521 523 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 523 526 (c-in-sws t fontified t face font-lock-comment-face) 526 527 (c-in-sws t fontified t face font-lock-comment-face) 527 574 (c-in-sws t fontified t face font-lock-comment-face) 574 578 (c-in-sws t fontified t) 578 581 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 581 590 (c-in-sws t fontified t face font-lock-comment-face) 590 634 (c-in-sws t fontified t face font-lock-comment-face) 634 635 (c-in-sws t fontified t face font-lock-comment-face) 635 636 (c-is-sws t c-in-sws t fontified t) 636 639 (c-is-sws t c-in-sws t fontified t) 639 640 (c-is-sws t fontified t face font-lock-keyword-face) 640 642 (fontified t face font-lock-keyword-face) 642 643 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 643 644 (fontified t) 644 657 (fontified t face font-lock-variable-name-face) 657 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-4-face)) 676 699 (fontified t) 699 700 (fontified t face (rainbow-delimiters-depth-4-face)) 700 707 (fontified t) 707 709 (fontified t face font-lock-keyword-face) 709 710 (fontified t) 710 711 (fontified t face (rainbow-delimiters-depth-4-face)) 711 728 (fontified t) 728 731 (fontified t face font-lock-constant-face) 731 733 (fontified t) 733 746 (fontified t face font-lock-constant-face) 746 753 (fontified t) 753 754 (fontified t face (rainbow-delimiters-depth-4-face)) 754 755 (fontified t) 755 756 (fontified t face (rainbow-delimiters-depth-4-face)) 756 775 (fontified t) 775 776 (fontified t face (rainbow-delimiters-depth-5-face)) 776 786 (fontified t) 786 787 (fontified t face (rainbow-delimiters-depth-6-face)) 787 788 (fontified t face (rainbow-delimiters-depth-6-face)) 788 809 (fontified t) 809 864 (fontified t face font-lock-string-face) 864 865 (fontified t face (rainbow-delimiters-depth-5-face)) 865 867 (fontified t) 867 873 (fontified t) 873 879 (fontified t face font-lock-keyword-face) 879 880 (fontified t) 880 885 (fontified t face font-lock-constant-face) 885 887 (fontified t) 887 891 (fontified t) 891 892 (fontified t face (rainbow-delimiters-depth-4-face)) 892 893 (fontified t) 893 894 (fontified t) 894 898 (fontified t c-in-sws t c-is-sws t) 898 899 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 899 901 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 901 915 (c-in-sws t fontified t face font-lock-comment-face) 915 923 (c-in-sws t face font-lock-comment-face fontified t) 923 924 (c-in-sws t face font-lock-comment-face fontified t) 924 944 (c-in-sws t face font-lock-comment-face fontified t) 944 945 (face font-lock-comment-face fontified t c-in-sws t) 945 946 (fontified t c-is-sws t c-in-sws t) 946 949 (c-in-sws t fontified t c-is-sws t) 949 950 (c-is-sws t fontified t face font-lock-keyword-face) 950 951 (fontified t face font-lock-keyword-face) 951 952 (fontified t) 952 953 (fontified t face (rainbow-delimiters-depth-4-face)) 953 970 (fontified t) 970 971 (fontified t face (rainbow-delimiters-depth-5-face)) 971 972 (fontified t face (rainbow-delimiters-depth-5-face)) 972 981 (fontified t) 981 982 (fontified t face (rainbow-delimiters-depth-4-face)) 982 983 (fontified t) 983 984 (fontified t face (rainbow-delimiters-depth-4-face)) 984 1002 (fontified t) 1002 1003 (fontified t face (rainbow-delimiters-depth-5-face)) 1003 1013 (fontified t) 1013 1014 (fontified t face (rainbow-delimiters-depth-6-face)) 1014 1015 (fontified t face (rainbow-delimiters-depth-6-face)) 1015 1017 (fontified t) 1017 1056 (fontified t face font-lock-string-face) 1056 1076 (fontified t) 1076 1087 (fontified t face font-lock-keyword-face) 1087 1088 (fontified t) 1088 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1093 (fontified t face (rainbow-delimiters-depth-6-face)) 1093 1103 (fontified t) 1103 1104 (fontified t face (rainbow-delimiters-depth-6-face)) 1104 1105 (fontified t face (rainbow-delimiters-depth-5-face)) 1105 1113 (fontified t) 1113 1119 (fontified t face font-lock-keyword-face) 1119 1120 (fontified t) 1120 1124 (fontified t face font-lock-constant-face) 1124 1130 (fontified t) 1130 1131 (fontified t face (rainbow-delimiters-depth-4-face)) 1131 1132 (fontified t) 1132 1136 (fontified t face font-lock-keyword-face) 1136 1137 (fontified t) 1137 1138 (fontified t face (rainbow-delimiters-depth-4-face)) 1138 1156 (fontified t) 1156 1157 (fontified t face (rainbow-delimiters-depth-5-face)) 1157 1167 (fontified t) 1167 1168 (fontified t face (rainbow-delimiters-depth-6-face)) 1168 1169 (fontified t face (rainbow-delimiters-depth-6-face)) 1169 1171 (fontified t) 1171 1204 (fontified t face font-lock-string-face) 1204 1224 (fontified t) 1224 1235 (fontified t face font-lock-keyword-face) 1235 1236 (fontified t) 1236 1244 (fontified t face font-lock-type-face) 1244 1245 (fontified t) 1245 1248 (fontified t face font-lock-type-face) 1248 1249 (fontified t) 1249 1250 (fontified t face (rainbow-delimiters-depth-6-face)) 1250 1260 (fontified t) 1260 1261 (fontified t face (rainbow-delimiters-depth-6-face)) 1261 1262 (fontified t face (rainbow-delimiters-depth-5-face)) 1262 1270 (fontified t) 1270 1276 (fontified t face font-lock-keyword-face) 1276 1277 (fontified t) 1277 1282 (fontified t face font-lock-constant-face) 1282 1288 (fontified t) 1288 1289 (fontified t face (rainbow-delimiters-depth-4-face))) . 5495) (undo-tree-id300 . -1288) (undo-tree-id301 . -1288) (undo-tree-id302 . -1288) (undo-tree-id303 . -1288) (t 26232 19057 966593 112000)) ((5495 . 6784)) (26232 19512 356285 721000) 0 nil])
([nil nil ((#("   }
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 3 (fontified t c-is-sws t c-in-sws t) 3 4 (fontified t c-is-sws t face (rainbow-delimiters-depth-3-face)) 4 5 (fontified t)) . 5910) (undo-tree-id610 . -4) (undo-tree-id611 . 5) (undo-tree-id612 . 1) (undo-tree-id613 . -5)) nil (26232 19556 666411 330000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 5436) (undo-tree-id299 . -2)) ((5436 . 5439)) (26232 19511 809674 263000) 0 nil])
([nil nil ((#("    // We send the request with the transition we want to invoke.
" 0 1 (c-in-sws t c-is-sws t fontified t) 1 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 65 (c-in-sws t fontified t face font-lock-comment-face) 65 66 (fontified t face font-lock-comment-face c-in-sws t)) . 5844) (undo-tree-id560 . -66) (undo-tree-id561 . -65) (undo-tree-id562 . -66) (undo-tree-id563 . -66) (undo-tree-id564 . -66) (undo-tree-id565 . -66) (undo-tree-id566 . -66) (undo-tree-id567 . -66) (undo-tree-id568 . -66) (undo-tree-id569 . -66) (undo-tree-id570 . -66) (undo-tree-id571 . -66) (undo-tree-id572 . -66) (undo-tree-id573 . -66) (undo-tree-id574 . -66) (undo-tree-id575 . -66) (undo-tree-id576 . -66) (undo-tree-id577 . -66) (undo-tree-id578 . -66) (undo-tree-id579 . -66) (undo-tree-id580 . -66) (undo-tree-id581 . -66) (undo-tree-id582 . -66) (undo-tree-id583 . -66) (undo-tree-id584 . -66) (undo-tree-id585 . -66) (undo-tree-id586 . -66) (undo-tree-id587 . -66) (undo-tree-id588 . -66) (undo-tree-id589 . -66) (undo-tree-id590 . -66) (undo-tree-id591 . -66) (undo-tree-id592 . -66) (undo-tree-id593 . -66) (undo-tree-id594 . -66) (undo-tree-id595 . -66) (undo-tree-id596 . -66) (undo-tree-id597 . -66) (undo-tree-id598 . -66) (undo-tree-id599 . -66) (undo-tree-id600 . -66) (undo-tree-id601 . -66) (undo-tree-id602 . -66) (undo-tree-id603 . -66) (undo-tree-id604 . -66) (undo-tree-id605 . -66) (undo-tree-id606 . -66) (undo-tree-id607 . -66) (undo-tree-id608 . -66) (undo-tree-id609 . -66)) nil (26232 19556 666396 887000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5436) (undo-tree-id298 . -1)) ((5436 . 5438)) (26232 19511 76885 12000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5844) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) 5848 (5844 . 5848) (#("    " 0 4 (fontified nil)) . 5843) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (5842 . 5848)) nil (26232 19556 666304 43000) 0 nil])
([nil nil ((#("chrono" 0 6 (fontified t face font-lock-constant-face)) . 5436) (undo-tree-id297 . -5)) ((5436 . 5442)) (26232 19510 895691 871000) 0 nil])
([nil nil ((#("  std::chrono::seconds time_out = std::chrono::seconds(3)" 0 2 (fontified t) 2 5 (fontified t face font-lock-constant-face) 5 7 (fontified t) 7 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t face font-lock-variable-name-face) 28 31 (fontified t face font-lock-variable-name-face) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 37 (fontified t face font-lock-constant-face) 37 39 (fontified t) 39 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 54 (fontified t) 54 55 (fontified t face (rainbow-delimiters-depth-4-face)) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-4-face))) . 5434) (undo-tree-id960 . -56) (undo-tree-id961 . -56) (undo-tree-id962 . -56) (undo-tree-id963 . -55) (undo-tree-id964 . -56) (undo-tree-id965 . -56) 5490 (t 26232 19556 709061 461000)) nil (26232 19569 189970 63000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5436) (undo-tree-id296 . -1)) ((5436 . 5438)) (26232 19510 745617 136000) 0 nil])
([nil nil ((#("                  " 0 18 (fontified t)) . 5416) (undo-tree-id890 . -18) (undo-tree-id891 . -17) (undo-tree-id892 . -18) (undo-tree-id893 . -18) (undo-tree-id894 . -18) (undo-tree-id895 . -18) (undo-tree-id896 . -18) (undo-tree-id897 . -18) (undo-tree-id898 . -18) (undo-tree-id899 . -18) (undo-tree-id900 . -18) (undo-tree-id901 . -18) (undo-tree-id902 . -18) (undo-tree-id903 . -18) (undo-tree-id904 . -18) (undo-tree-id905 . -18) (undo-tree-id906 . -18) (undo-tree-id907 . -18) (undo-tree-id908 . -18) (undo-tree-id909 . -18) (undo-tree-id910 . -18) (undo-tree-id911 . -18) (undo-tree-id912 . -18) (undo-tree-id913 . -18) (undo-tree-id914 . -18) (undo-tree-id915 . -18) (undo-tree-id916 . -18) (undo-tree-id917 . -18) (undo-tree-id918 . -18) (undo-tree-id919 . -18) (undo-tree-id920 . -18) (undo-tree-id921 . -18) (undo-tree-id922 . -18) (undo-tree-id923 . -18) (undo-tree-id924 . -18) (undo-tree-id925 . -18) (undo-tree-id926 . -18) (undo-tree-id927 . -18) (undo-tree-id928 . -18) (undo-tree-id929 . -18) (undo-tree-id930 . -18) (undo-tree-id931 . -18) (undo-tree-id932 . -18) (undo-tree-id933 . -18) (undo-tree-id934 . -18) (undo-tree-id935 . -18) (undo-tree-id936 . -18) (undo-tree-id937 . -18) (undo-tree-id938 . -18) (undo-tree-id939 . -18) (undo-tree-id940 . -18) (undo-tree-id941 . -18) (undo-tree-id942 . -18) (undo-tree-id943 . -18) (undo-tree-id944 . -18) (undo-tree-id945 . -18) (undo-tree-id946 . -18) (undo-tree-id947 . -18) (undo-tree-id948 . -18) (undo-tree-id949 . -18) (undo-tree-id950 . -18) (undo-tree-id951 . -18) (undo-tree-id952 . -18) (undo-tree-id953 . -18) (undo-tree-id954 . -18) (undo-tree-id955 . -18) (undo-tree-id956 . -18) (undo-tree-id957 . -18) (undo-tree-id958 . -18) (undo-tree-id959 . -18)) nil (26232 19569 189952 174000) 0 nil])
([nil nil ((#("seconds " 0 7 (fontified t face font-lock-type-face) 7 8 (fontified t)) . 5436) (undo-tree-id295 . -7)) ((5436 . 5444)) (26232 19510 614007 40000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5415) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) 5416) nil (26232 19569 189832 58000) 0 nil])
([nil nil ((#("time" 0 4 (fontified nil face font-lock-variable-name-face)) . 5436) (undo-tree-id294 . -3)) ((5436 . 5440)) (26232 19510 416460 325000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5414) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1)) nil (26232 19569 189482 380000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5436)) ((5436 . 5437)) (26232 19510 200499 241000) 0 nil])
([nil nil ((5416 . 5418) (#(" " 0 1 (fontified nil)) . 5416) (5415 . 5416) (t 26232 19569 205390 965000)) nil (26232 19572 129578 315000) 0 nil])
([nil nil ((#("out " 0 3 (fontified t) 3 4 (fontified t)) . 5436) (undo-tree-id293 . -3)) ((5436 . 5440)) (26232 19510 53845 699000) 0 nil])
([nil nil ((5769 . 5773) (t 26232 19572 145467 409000)) nil (26232 19681 580127 90000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 5436) (undo-tree-id292 . -1)) ((5436 . 5438)) (26232 19509 937216 530000) 0 nil])
([nil nil ((5801 . 5806) (5800 . 5802) (5786 . 5800) (#("ch" 0 2 (fontified nil)) . 5786) (5786 . 5788) (#("change_clients" 0 14 (fontified nil)) . -5786) (5786 . 5800) (#("ch" 0 1 (fontified t) 1 2 (fontified t)) . -5786) (undo-tree-id971 . -2) (undo-tree-id972 . -2) 5788 (5772 . 5788)) nil (26232 19681 580122 205000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 5436) (undo-tree-id291 . -2)) ((5436 . 5439)) (26232 19509 697042 16000) 0 nil])
([nil nil ((apply yas--snippet-revive 5809 5829 #s(yas--snippet nil nil #s(yas--exit 5828 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5828 nil) 40 nil nil nil nil)) (5809 . 5829) (#("async_send_request($0)" 0 22 (fontified nil)) . 5809) (5809 . 5831) (#("async_send_request(…)" 0 21 (fontified nil)) . -5809) (5809 . 5830) (#("send" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -5809) (undo-tree-id966 . -3) (undo-tree-id967 . -4) (undo-tree-id968 . -4) 5813 (5809 . 5813) (5808 . 5809) (5807 . 5808) (#(" " 0 1 (fontified t)) . -5807) (undo-tree-id969 . -1) (undo-tree-id970 . -1) 5808) nil (26232 19681 580107 702000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5436) (undo-tree-id290 . -1)) ((5436 . 5438)) (26232 19509 530824 887000) 0 nil])
([nil nil ((5769 . 5773) (#("   " 0 3 (fontified nil)) . 5769) (5829 . 5830)) nil (26232 19681 580064 11000) 0 nil])
([nil nil ((#("chrono" 0 6 (fontified t face font-lock-constant-face)) . 5436) (undo-tree-id289 . -5)) ((5436 . 5442)) (26232 19509 342504 302000) 0 nil])
([nil current ((5834 . 5838) (#("    " 0 4 (fontified nil)) . 5833) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (5833 . 5838) (#("    " 0 4 (fontified nil)) . 5832) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (5831 . 5837) (t 26232 19681 624064 131000)) nil (26232 21096 365891 915000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 5436) (undo-tree-id288 . -1)) ((5436 . 5438)) (26232 19509 179104 686000) 0 nil])
nil
([nil nil ((#("seconds" 0 7 (fontified nil)) . 5436) (undo-tree-id287 . -6)) ((5436 . 5443)) (26232 19508 946341 966000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 5436)) ((5436 . 5437)) (26232 19508 678624 979000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 5436) (undo-tree-id286 . -1)) ((5436 . 5437)) (26232 19508 277982 418000) 0 nil])
([nil nil ((#(")) " 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-mismatched-face)) 2 3 (fontified t)) . 5436) (undo-tree-id282 . -2) (undo-tree-id284 . -2)) ((5436 . 5439)) (26232 19507 786867 983000) 0 nil])
([nil nil ((5436 . 5437) (#(")" 0 1 (fontified nil)) . -5436) (5436 . 5437)) ((#(")" 0 1 (fontified nil)) . 5436) (5436 . 5437) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 5436) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1)) (26232 19507 329411 548000) 0 nil])
([nil nil ((#("                    " 0 20 (fontified t)) . 5416) (undo-tree-id180 . -19) (undo-tree-id182 . -20) (undo-tree-id184 . -20) (undo-tree-id186 . -20) (undo-tree-id188 . -20) (undo-tree-id190 . -20) (undo-tree-id192 . -20) (undo-tree-id194 . -20) (undo-tree-id196 . -20) (undo-tree-id198 . -20) (undo-tree-id200 . -20) (undo-tree-id202 . -20) (undo-tree-id204 . -20) (undo-tree-id206 . -20) (undo-tree-id208 . -20) (undo-tree-id210 . -20) (undo-tree-id212 . -20) (undo-tree-id214 . -20) (undo-tree-id216 . -20) (undo-tree-id218 . -20) (undo-tree-id220 . -20) (undo-tree-id222 . -20) (undo-tree-id224 . -20) (undo-tree-id226 . -20) (undo-tree-id228 . -20) (undo-tree-id230 . -20) (undo-tree-id232 . -20) (undo-tree-id234 . -20) (undo-tree-id236 . -20) (undo-tree-id238 . -20) (undo-tree-id240 . -20) (undo-tree-id242 . -20) (undo-tree-id244 . -20) (undo-tree-id246 . -20) (undo-tree-id248 . -20) (undo-tree-id250 . -20) (undo-tree-id252 . -20) (undo-tree-id254 . -20) (undo-tree-id256 . -20) (undo-tree-id258 . -20) (undo-tree-id260 . -20) (undo-tree-id262 . -20) (undo-tree-id264 . -20) (undo-tree-id266 . -20) (undo-tree-id268 . -20) (undo-tree-id270 . -20) (undo-tree-id272 . -20) (undo-tree-id274 . -20) (undo-tree-id276 . -20) (undo-tree-id278 . -20) (undo-tree-id280 . -20)) ((5416 . 5436)) (26232 19506 843341 836000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5415) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id81 . -1) (undo-tree-id83 . -1) (undo-tree-id85 . -1) (undo-tree-id87 . -1) (undo-tree-id89 . -1) (undo-tree-id91 . -1) (undo-tree-id93 . -1) (undo-tree-id95 . -1) (undo-tree-id97 . -1) (undo-tree-id99 . -1) (undo-tree-id101 . -1) (undo-tree-id103 . -1) (undo-tree-id105 . -1) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) (undo-tree-id135 . -1) (undo-tree-id137 . -1) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (undo-tree-id143 . -1) (undo-tree-id145 . -1) (undo-tree-id147 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) 5416) ((5415 . 5416)) (26232 19506 447847 629000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5414) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (undo-tree-id309 . -1) (undo-tree-id311 . -1) (undo-tree-id313 . -1) (undo-tree-id315 . -1) (undo-tree-id317 . -1) (undo-tree-id319 . -1) (undo-tree-id321 . -1) (undo-tree-id323 . -1) (undo-tree-id325 . -1) (undo-tree-id327 . -1) (undo-tree-id329 . -1) (undo-tree-id331 . -1) (undo-tree-id333 . -1) (undo-tree-id335 . -1) (undo-tree-id337 . -1) (undo-tree-id339 . -1) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (undo-tree-id353 . -1) (undo-tree-id355 . -1) (undo-tree-id357 . -1) (undo-tree-id359 . -1) (undo-tree-id361 . -1) (undo-tree-id363 . -1) (undo-tree-id365 . -1) (undo-tree-id367 . -1) (undo-tree-id369 . -1) (undo-tree-id371 . -1) (undo-tree-id373 . -1) (undo-tree-id375 . -1) (undo-tree-id377 . -1) (undo-tree-id379 . -1) (undo-tree-id381 . -1) (undo-tree-id383 . -1) (undo-tree-id385 . -1) (undo-tree-id387 . -1) (undo-tree-id389 . -1) (undo-tree-id391 . -1) (undo-tree-id393 . -1) (undo-tree-id395 . -1) (undo-tree-id397 . -1) (undo-tree-id399 . -1) (undo-tree-id401 . -1) (undo-tree-id403 . -1) (undo-tree-id405 . -1) (t 26232 19086 845422 62000)) ((5414 . 5415)) (26232 19506 14515 645000) 0 nil])
([nil nil ((5415 . 5416)) ((#(" " 0 1 (fontified t)) . 5415) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1)) (26232 19505 526684 971000) 0 nil])
([nil nil ((5416 . 5418) (#(" " 0 1 (fontified nil)) . 5415) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id409 . -1) (undo-tree-id411 . -1) (undo-tree-id413 . -1) (undo-tree-id415 . -1) (undo-tree-id417 . -1) (undo-tree-id419 . -1) (undo-tree-id421 . -1) (undo-tree-id423 . -1) (undo-tree-id425 . -1) (undo-tree-id427 . -1) (undo-tree-id429 . -1) (undo-tree-id431 . -1) (undo-tree-id433 . -1) (undo-tree-id435 . -1) (5416 . 5417) (t 26232 19088 773601 395000)) ((#("
" 0 1 (fontified nil)) . 5416) (5415 . 5416) (#("  " 0 2 (fontified t)) . 5416) (t 26232 19090 705779 955000)) (26232 19505 70032 684000) 0 nil])
([nil nil ((5420 . 5424) (t 26232 19090 705779 955000)) ((#("    " 0 4 (fontified t)) . 5420) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3)) (26232 19505 65613 468000) 0 nil])
nil
