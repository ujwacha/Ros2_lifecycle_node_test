(undo-tree-save-format-version . 1)
"c1b06df12d920395732166fc522bf6b979354c3e"
[nil nil nil nil (26216 41705 429724 619000) 0 nil]
([nil nil ((nil rear-nonsticky nil 540 . 541) (nil fontified nil 1 . 541) (1 . 541) (t . -1)) nil (26216 41705 429720 408000) 0 nil])
([nil nil ((541 . 542)) nil (26216 41705 429696 815000) 0 nil])
([nil nil ((#("component" 0 9 (fontified t face font-lock-string-face)) . 246) (undo-tree-id31 . -8) (undo-tree-id32 . -9) (t 26216 41705 466308 97000)) nil (26216 41816 365 210000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 246) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1)) nil (26216 41816 357 109000) 0 nil])
([nil nil ((#("container" 0 9 (fontified t face font-lock-string-face)) . 246) (undo-tree-id26 . -8) (undo-tree-id27 . -9)) nil (26216 41816 349 328000) 0 nil])
([nil nil ((246 . 252)) nil (26216 41816 343 810000) 0 nil])
([nil nil ((#("palomino" 0 8 (fontified t face font-lock-string-face)) . 335) (undo-tree-id24 . -7) (undo-tree-id25 . -8)) nil (26216 41816 339 962000) 0 nil])
([nil nil ((340 . 346) (#("[" 0 1 (fontified nil face font-lock-string-face)) . -340) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("]" 0 1 (fontified t face font-lock-string-face)) . 341) (#("u" 0 1 (fontified t face font-lock-string-face)) . -341) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 342 (341 . 342) (335 . 342)) nil (26216 41816 322 443000) 0 nil])
([nil nil ((nil rear-nonsticky nil 389 . 390) (nil fontified nil 369 . 390) (369 . 390) (#("palomino::VincentDriver" 0 23 (fontified t face font-lock-string-face)) . 369) (undo-tree-id33 . -23) (undo-tree-id34 . -22) (undo-tree-id35 . -8) (undo-tree-id36 . -22) (undo-tree-id37 . -22) (undo-tree-id38 . -8) (undo-tree-id39 . -8) (undo-tree-id40 . -8) (undo-tree-id41 . -8) (undo-tree-id42 . -8) (undo-tree-id43 . -8) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (undo-tree-id53 . -8) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -8) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) (undo-tree-id61 . -8) (undo-tree-id62 . -8) (undo-tree-id63 . -8) (undo-tree-id64 . -8) (undo-tree-id65 . -8) (undo-tree-id66 . -8) (undo-tree-id67 . -8) (undo-tree-id68 . -8) (undo-tree-id69 . -8) (undo-tree-id70 . -8) (undo-tree-id71 . -8) (undo-tree-id72 . -8) (undo-tree-id73 . -8) (undo-tree-id74 . -8) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -8) (undo-tree-id82 . -8) (undo-tree-id83 . -8) (undo-tree-id84 . -8) (undo-tree-id85 . -8) (undo-tree-id86 . -8) (undo-tree-id87 . -8) (undo-tree-id88 . -23) (undo-tree-id89 . -22) (undo-tree-id90 . -8) (undo-tree-id91 . -8) (undo-tree-id92 . -8) (undo-tree-id93 . -8) (undo-tree-id94 . -8) (undo-tree-id95 . -8) (undo-tree-id96 . -8) (undo-tree-id97 . -8) (undo-tree-id98 . -22) (undo-tree-id99 . -22) (undo-tree-id100 . -22) (undo-tree-id101 . -22) (undo-tree-id102 . -22) (undo-tree-id103 . -23) (undo-tree-id104 . -23) 392 (t 26216 41816 39493 362000)) nil (26216 41829 384035 403000) 0 nil])
([nil nil ((#("vincent" 0 7 (fontified t face font-lock-string-face)) . 411) (undo-tree-id108 . -6) (undo-tree-id109 . -7) (t 26216 41829 419629 894000)) nil (26216 41841 975473 366000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 411) (undo-tree-id107 . -1)) nil (26216 41841 975465 489000) 0 nil])
([nil nil ((#("driver" 0 6 (fontified t face font-lock-string-face)) . 411) (undo-tree-id105 . -5) (undo-tree-id106 . -6)) nil (26216 41841 975458 612000) 0 nil])
([nil nil ((411 . 422)) nil (26216 41841 975427 871000) 0 nil])
([nil nil ((112 . 114) (t 26216 41841 983756 862000)) nil (26217 31653 670945 505000) 0 nil])
([nil nil ((134 . 137) (113 . 134)) nil (26217 31653 670934 279000) 0 nil])
([nil nil ((nil rear-nonsticky nil 165 . 166) (nil fontified nil 138 . 166) (138 . 166) (t 26217 31653 705618 650000)) nil (26217 31728 709844 374000) 0 nil])
([nil nil ((#("ld = LaunchDescription()
" 0 2 (fontified t face font-lock-variable-name-face) 2 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t face (rainbow-delimiters-depth-1-face)) 24 25 (fontified t)) . 113) (undo-tree-id112 . -25) (undo-tree-id113 . -24) (undo-tree-id114 . 2) (undo-tree-id115 . -22) (undo-tree-id116 . -23) (undo-tree-id117 . -22) (undo-tree-id118 . -22) (undo-tree-id119 . -22) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22) (undo-tree-id126 . -22) (undo-tree-id127 . -22) (undo-tree-id128 . -22) (undo-tree-id129 . -22) (undo-tree-id130 . -22) (undo-tree-id131 . -22) (undo-tree-id132 . -22) (undo-tree-id133 . -22) (undo-tree-id134 . -22) (undo-tree-id135 . -22) (undo-tree-id136 . -22) (undo-tree-id137 . -22) (undo-tree-id138 . -22) (undo-tree-id139 . -22) (undo-tree-id140 . -22) (undo-tree-id141 . -22) (undo-tree-id142 . -22) (undo-tree-id143 . -22) (undo-tree-id144 . -22) (undo-tree-id145 . -22) (undo-tree-id146 . -22) (undo-tree-id147 . -22) (undo-tree-id148 . -22) (undo-tree-id149 . -22) (undo-tree-id150 . -22) (undo-tree-id151 . -22) (undo-tree-id152 . -22) (undo-tree-id153 . -22) (undo-tree-id154 . -22) (undo-tree-id155 . -22) (undo-tree-id156 . -22) (undo-tree-id157 . -22) (undo-tree-id158 . -22) (undo-tree-id159 . -22) (undo-tree-id160 . -22) (undo-tree-id161 . -22) (undo-tree-id162 . -22) (undo-tree-id163 . -22) (undo-tree-id164 . -22) (undo-tree-id165 . -22) (undo-tree-id166 . -22) (undo-tree-id167 . -22) (undo-tree-id168 . -22) (undo-tree-id169 . -22) (undo-tree-id170 . -22) (undo-tree-id171 . -22) (undo-tree-id172 . -22) (undo-tree-id173 . -22) (undo-tree-id174 . -22) (undo-tree-id175 . -22) (undo-tree-id176 . -22) (undo-tree-id177 . -22) (undo-tree-id178 . -22) (undo-tree-id179 . -22) (undo-tree-id180 . -22) (undo-tree-id181 . -22) (undo-tree-id182 . -22) (undo-tree-id183 . -22) (undo-tree-id184 . -22) (undo-tree-id185 . -22) (undo-tree-id186 . -22) (undo-tree-id187 . -22) (undo-tree-id188 . -22) (undo-tree-id189 . -22) (undo-tree-id190 . -22) (undo-tree-id191 . -22) (undo-tree-id192 . -22) (undo-tree-id193 . -22) (undo-tree-id194 . -22) (undo-tree-id195 . -22) (undo-tree-id196 . -22) (undo-tree-id197 . -22) (undo-tree-id198 . -22) (undo-tree-id199 . -22) (undo-tree-id200 . -22) (undo-tree-id201 . -22) (undo-tree-id202 . -22) (undo-tree-id203 . -22) (undo-tree-id204 . -22) (undo-tree-id205 . -22) (undo-tree-id206 . -22) (undo-tree-id207 . -22) (undo-tree-id208 . -22) (undo-tree-id209 . -22) (undo-tree-id210 . -22) (undo-tree-id211 . -22) (undo-tree-id212 . -22) (undo-tree-id213 . -22) (undo-tree-id214 . -22) (undo-tree-id215 . -22) (undo-tree-id216 . -22) (undo-tree-id217 . -22) (undo-tree-id218 . -22) (undo-tree-id219 . -22) (undo-tree-id220 . -22) (undo-tree-id221 . -22) (undo-tree-id222 . -22) (undo-tree-id223 . -22) (undo-tree-id224 . -22) (undo-tree-id225 . -22) (undo-tree-id226 . -22) (undo-tree-id227 . -22) (undo-tree-id228 . -22) (undo-tree-id229 . -22) (undo-tree-id230 . -22) (undo-tree-id231 . -22) (undo-tree-id232 . -22) (undo-tree-id233 . -22) (undo-tree-id234 . -22) (undo-tree-id235 . -22) (undo-tree-id236 . -22) (undo-tree-id237 . -22) (undo-tree-id238 . -22) (undo-tree-id239 . -22) (undo-tree-id240 . -22) (undo-tree-id241 . -22) (undo-tree-id242 . -22) (undo-tree-id243 . -22) (undo-tree-id244 . -22) (undo-tree-id245 . -22) (undo-tree-id246 . -22) (undo-tree-id247 . -22) (undo-tree-id248 . -22) (undo-tree-id249 . -22) (undo-tree-id250 . -22) (undo-tree-id251 . -22) (undo-tree-id252 . -22) (undo-tree-id253 . -22) (undo-tree-id254 . -22) (undo-tree-id255 . -22) (undo-tree-id256 . -22) (undo-tree-id257 . -22) (undo-tree-id258 . -22) (undo-tree-id259 . -22) (undo-tree-id260 . -22) (undo-tree-id261 . -22) (undo-tree-id262 . -22) (undo-tree-id263 . -22) (undo-tree-id264 . -22) (undo-tree-id265 . -22) (undo-tree-id266 . -22) (undo-tree-id267 . -22) (undo-tree-id268 . -22) (undo-tree-id269 . -22) (undo-tree-id270 . -22) (undo-tree-id271 . -22) (undo-tree-id272 . -22) (undo-tree-id273 . -22) (undo-tree-id274 . -22) (undo-tree-id275 . -22) (undo-tree-id276 . -22) (undo-tree-id277 . -22) (undo-tree-id278 . -22) (undo-tree-id279 . -22) (undo-tree-id280 . -22) (undo-tree-id281 . -22) (undo-tree-id282 . -22) (undo-tree-id283 . -22) (undo-tree-id284 . -22) (undo-tree-id285 . -22) (undo-tree-id286 . -22) (undo-tree-id287 . -22) (undo-tree-id288 . -22) (undo-tree-id289 . -22) (undo-tree-id290 . -22) (undo-tree-id291 . -22) (undo-tree-id292 . -22) (undo-tree-id293 . -22) (undo-tree-id294 . -22) (undo-tree-id295 . -22) (undo-tree-id296 . -22) (undo-tree-id297 . -22) (undo-tree-id298 . -22) (undo-tree-id299 . -22) (undo-tree-id300 . -22) (undo-tree-id301 . -22) (undo-tree-id302 . -22) (undo-tree-id303 . -22) (undo-tree-id304 . -22) (undo-tree-id305 . -22) (undo-tree-id306 . -22) (undo-tree-id307 . -22) (undo-tree-id308 . -22) (undo-tree-id309 . -22) (undo-tree-id310 . -22) (undo-tree-id311 . -22) (undo-tree-id312 . -22) (undo-tree-id313 . -22) (undo-tree-id314 . -22) (undo-tree-id315 . -22) (undo-tree-id316 . -22) (undo-tree-id317 . -22) (undo-tree-id318 . -22) (undo-tree-id319 . -22) (undo-tree-id320 . -22) (undo-tree-id321 . -22) (undo-tree-id322 . -22) (undo-tree-id323 . -22) (undo-tree-id324 . -22) (undo-tree-id325 . -22) (undo-tree-id326 . -22) (undo-tree-id327 . -22) (undo-tree-id328 . -22) (undo-tree-id329 . -22) (undo-tree-id330 . -22) (undo-tree-id331 . -22) (undo-tree-id332 . -22) (undo-tree-id333 . -22) (undo-tree-id334 . -22) (undo-tree-id335 . -22) (undo-tree-id336 . -22) (undo-tree-id337 . -22) (undo-tree-id338 . -22) (undo-tree-id339 . -22) (undo-tree-id340 . -22) (undo-tree-id341 . -22) (undo-tree-id342 . -22) (undo-tree-id343 . -22) (undo-tree-id344 . -22) (undo-tree-id345 . -22) (undo-tree-id346 . -22) (undo-tree-id347 . -22) (undo-tree-id348 . -22) (undo-tree-id349 . -22) (undo-tree-id350 . -22) (undo-tree-id351 . -22) (undo-tree-id352 . -22) (undo-tree-id353 . -22) (undo-tree-id354 . -22) (undo-tree-id355 . -22) (undo-tree-id356 . -22) (undo-tree-id357 . -22) (undo-tree-id358 . -22) (undo-tree-id359 . -22) (undo-tree-id360 . -22) (undo-tree-id361 . -22) (undo-tree-id362 . -22) (undo-tree-id363 . -22) (undo-tree-id364 . -22) (undo-tree-id365 . -22) (undo-tree-id366 . -22) (undo-tree-id367 . -22) (undo-tree-id368 . -22) (undo-tree-id369 . -22) (undo-tree-id370 . -22) (undo-tree-id371 . -22) (undo-tree-id372 . -22) (undo-tree-id373 . -22) (undo-tree-id374 . -22) (undo-tree-id375 . -22) (undo-tree-id376 . -22) (undo-tree-id377 . -22) (undo-tree-id378 . -22) (undo-tree-id379 . -22) (undo-tree-id380 . -22) (undo-tree-id381 . -22) (undo-tree-id382 . -22) (undo-tree-id383 . -22) (undo-tree-id384 . -22) (undo-tree-id385 . -22) (undo-tree-id386 . -22) (undo-tree-id387 . -22) (undo-tree-id388 . -22) (undo-tree-id389 . -22) (undo-tree-id390 . -22) (undo-tree-id391 . -22) (undo-tree-id392 . -22) (undo-tree-id393 . -22) (undo-tree-id394 . -22) (undo-tree-id395 . -22) (undo-tree-id396 . -22) (undo-tree-id397 . -22) (undo-tree-id398 . -22) (undo-tree-id399 . -22) (undo-tree-id400 . -22) (undo-tree-id401 . -22) (undo-tree-id402 . -22) (undo-tree-id403 . -22) (undo-tree-id404 . -22) (undo-tree-id405 . -22) (undo-tree-id406 . -22) (undo-tree-id407 . -22) (undo-tree-id408 . -22) (undo-tree-id409 . -22) (undo-tree-id410 . -22) (undo-tree-id411 . -22) (undo-tree-id412 . -22) (undo-tree-id413 . -22) (undo-tree-id414 . -22) (undo-tree-id415 . -22) (undo-tree-id416 . -22) (undo-tree-id417 . -22) (undo-tree-id418 . -22) (undo-tree-id419 . -22) (undo-tree-id420 . -22) (undo-tree-id421 . -22) (undo-tree-id422 . -22) (undo-tree-id423 . -22) (undo-tree-id424 . -22) (undo-tree-id425 . -22) (undo-tree-id426 . -25) (undo-tree-id427 . -25) (undo-tree-id428 . -25) (undo-tree-id429 . -25) (undo-tree-id430 . -25) (undo-tree-id431 . -25) (undo-tree-id432 . -25) (undo-tree-id433 . -25) (undo-tree-id434 . -23) (undo-tree-id435 . -23) (undo-tree-id436 . -23) (undo-tree-id437 . -23) (undo-tree-id438 . -23) (undo-tree-id439 . -23) (undo-tree-id440 . -23) (undo-tree-id441 . -23) (undo-tree-id442 . -23) (undo-tree-id443 . -23) (undo-tree-id444 . -23) (undo-tree-id445 . -23) (undo-tree-id446 . -23) (undo-tree-id447 . -23) (undo-tree-id448 . -23) (undo-tree-id449 . -23) (undo-tree-id450 . -23) (undo-tree-id451 . -25) 136) nil (26217 31728 709810 565000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -113) (undo-tree-id110 . 4) (undo-tree-id111 . -4) 136) nil (26217 31728 708742 847000) 0 nil])
([nil nil ((137 . 138)) nil (26217 31728 708712 637000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -107) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (t 26217 31728 720510 85000)) nil (26217 31758 163966 870000) 0 nil])
([nil nil ((111 . 113)) nil (26217 31758 163948 241000) 0 nil])
([nil nil ((nil rear-nonsticky nil 146 . 147) (nil fontified nil 113 . 147) (113 . 147)) nil (26217 31758 163945 705000) 0 nil])
([nil nil ((148 . 152) 171) nil (26217 31758 163942 382000) 0 nil])
([nil nil ((177 . 181)) nil (26217 31758 163939 546000) 0 nil])
([nil nil ((182 . 186) 185) nil (26217 31758 163937 111000) 0 nil])
([nil nil ((225 . 233) (#("    " 0 4 (fontified t)) . 225) 232) nil (26217 31758 163933 564000) 0 nil])
([nil nil ((256 . 264) (#("    " 0 4 (fontified t)) . 256) 267) nil (26217 31758 163929 976000) 0 nil])
([nil nil ((278 . 286) (#("    " 0 4 (fontified t)) . 278) 293) nil (26217 31758 163925 558000) 0 nil])
([nil nil ((315 . 323) (#("    " 0 4 (fontified t)) . 315) 334) nil (26217 31758 163921 898000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -383) 401) nil (26217 31758 163918 29000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -407) 417) nil (26217 31758 163915 241000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -438) (undo-tree-id483 . -1) (undo-tree-id484 . -4) 444) nil (26217 31758 163911 825000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -478) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) 480) nil (26217 31758 163900 305000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -506)) nil (26217 31758 163882 26000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -519)) nil (26217 31758 163879 149000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -576) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) 580) nil (26217 31758 163875 466000) 0 nil])
([nil nil ((585 . 589) 586) nil (26217 31758 163856 177000) 0 nil])
([nil nil ((592 . 596)) nil (26217 31758 163852 928000) 0 nil])
([nil nil ((597 . 606) (593 . 597) (#("    " 0 4 (fontified nil)) . 592) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (591 . 597)) nil (26217 31758 163846 955000) 0 nil])
([nil nil ((611 . 612)) nil (26217 31758 163797 800000) 0 nil])
([nil nil ((604 . 606) (#("l" 0 1 (fontified t)) . -604) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("e" 0 1 (fontified t)) . -605) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("a" 0 1 (fontified t)) . -606) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#("r" 0 1 (fontified t)) . -607) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 608 (605 . 608) (#("d" 0 1 (fontified t)) . 605) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (t 26217 31758 164212 208000)) nil (26217 31812 839060 802000) 0 nil])
([nil nil ((1 . 2) (t 26217 31812 855825 491000)) nil (26217 33357 139555 55000) 0 nil])
([nil nil ((4 . 14) (#("r" 0 1 (fontified t)) . -4) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (#("o" 0 1 (fontified t)) . -5) (undo-tree-id721 . -1) (undo-tree-id722 . -1) 6 (1 . 6)) nil (26217 33357 139543 662000) 0 nil])
([nil nil ((212 . 219) (208 . 212) (187 . 208) (167 . 187) (166 . 168) (#("\"" 0 1 (fontified nil)) . -166) (166 . 167) (161 . 166) (t 26217 33357 147498 93000)) nil (26217 33405 365726 967000) 0 nil])
([nil nil ((apply -12 224 429 undo--wrap-and-run-primitive-undo 224 429 (("   " . 224) (405 . 407) (366 . 368) (342 . 344) (309 . 311) (264 . 266) (228 . 230) (224 . 227) 417))) nil (26217 33405 365721 6000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -430) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) 434 (430 . 434) (#("    " 0 4 (fontified nil)) . 429) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (428 . 434)) nil (26217 33405 365708 604000) 0 nil])
([nil nil ((429 . 433) (t 26217 33405 375983 614000)) nil (26217 33419 864328 939000) 0 nil])
([nil nil ((680 . 681)) nil (26217 33422 693693 978000) 0 nil] [nil nil ((#("    ))
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-unmatched-face)) 5 6 (rear-nonsticky t fontified t face (rainbow-delimiters-unmatched-face)) 6 7 (fontified t)) . 676) (undo-tree-id749 . -6) (undo-tree-id750 . -5) (undo-tree-id751 . -5) (undo-tree-id752 . -5) 681) ((676 . 683) (t 26217 33417 256103 256000)) (26217 33417 247085 373000) 0 nil])
([nil nil ((471 . 479) (#("        " 0 8 (fontified nil)) . 470) (undo-tree-id762 . -8) (470 . 479) (469 . 475) (468 . 470) (445 . 468) (#("C" 0 1 (fontified nil)) . -445) (445 . 446) (#("ComposableNodeContainer" 0 23 (fontified nil)) . -445) (445 . 468) (#("Comp" 0 4 (fontified t)) . -445) (undo-tree-id763 . -3) (undo-tree-id764 . -4) 449 (433 . 449) (#("c" 0 1 (fontified t)) . -429) (undo-tree-id765 . -1) (#("o" 0 1 (fontified t)) . -430) (undo-tree-id766 . -1) (#("n" 0 1 (fontified t)) . -431) (undo-tree-id767 . -1) (undo-tree-id768 . -1) 432 (429 . 432) (t 26217 33422 732158 404000)) nil (26217 33474 438820 371000) 0 nil])
nil
([nil nil ((484 . 490) (#("t" 0 1 (fontified t face font-lock-string-face)) . -484) (undo-tree-id760 . -1) 485 (484 . 485) (483 . 485) (#("'" 0 1 (fontified nil)) . -483) (482 . 484) (#(" " 0 1 (fontified t)) . -482) (undo-tree-id761 . -1) 483 (478 . 483) (470 . 478)) nil (26217 33474 438798 497000) 0 nil])
([nil nil ((510 . 512) (#("'" 0 1 (fontified nil)) . -510) (509 . 511) (#("-" 0 1 (fontified t)) . -509) (undo-tree-id757 . -1) 510 (509 . 510) (#("-" 0 1 (fontified t)) . -509) (undo-tree-id758 . -1) (#("=" 0 1 (fontified t)) . -510) (undo-tree-id759 . -1) 511 (500 . 511) (491 . 500)) nil (26217 33474 438788 73000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -513) (undo-tree-id756 . -8) 521 (512 . 521)) nil (26217 33474 438776 363000) 0 nil])
([nil nil ((491 . 492)) nil (26217 33474 438772 18000) 0 nil])
([nil nil ((491 . 492) (#("." 0 1 (fontified t)) . -491) (undo-tree-id755 . -1) 492) nil (26217 33474 438769 120000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -514) (undo-tree-id754 . -8) 522 (513 . 522)) nil (26217 33474 439757 781000) 0 nil])
([nil nil ((513 . 514)) nil (26217 33496 676028 551000) 0 nil] [nil nil ((493 . 501) (#(" " 0 1 (fontified nil)) . 493) (undo-tree-id753 . -1) (494 . 495)) ((#("," 0 1 (fontified nil)) . 494) (493 . 494) (#("        " 0 8 (fontified t)) . 493) (undo-tree-id769 . -7) (undo-tree-id770 . -7)) (26217 33474 438750 223000) 0 nil])
([nil nil ((542 . 544) (#("'" 0 1 (fontified nil)) . -542) (537 . 543) (530 . 537) (523 . 530) (514 . 523)) nil (26217 33496 676025 167000) 0 nil])
nil
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 542)) nil (26217 33496 676018 951000) 0 nil])
([nil nil ((531 . 532) (#("'" 0 1 (fontified nil)) . -531) (531 . 532)) nil (26217 33496 676006 14000) 0 nil])
([nil nil ((565 . 571) (564 . 566) (#("'" 0 1 (fontified nil)) . -564) (563 . 565) (553 . 563) (544 . 553) (t 26217 33496 715034 531000)) nil (26217 34054 482032 48000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 573)) nil (26217 34054 482027 121000) 0 nil])
([nil nil ((#("    composable_node_descriptions=[
    ComposableNode(
        package='test_pubsub',
        plugin='no_message::NodeMsgNo',
        name='test_pubsub',
        # ..
        extra_arguments=[{'use_intra_process_comms': True}],
    ),
    ]
 " 0 4 (fontified t) 4 32 (fontified t face font-lock-variable-name-face) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t) 55 71 (fontified t) 71 83 (fontified t face font-lock-string-face) 83 84 (fontified t face font-lock-string-face) 84 86 (fontified t) 86 101 (fontified t) 101 102 (fontified t face font-lock-string-face) 102 122 (fontified t face font-lock-string-face) 122 123 (rear-nonsticky t fontified t face font-lock-string-face) 123 124 (fontified t face font-lock-string-face) 124 126 (fontified t) 126 139 (fontified t) 139 152 (fontified t face font-lock-string-face) 152 154 (fontified t) 154 157 (fontified t) 157 162 (fontified t) 162 164 (fontified t face font-lock-comment-delimiter-face) 164 167 (fontified t face font-lock-comment-face) 167 191 (fontified t) 191 192 (fontified t face (rainbow-delimiters-depth-3-face)) 192 193 (fontified t face (rainbow-delimiters-depth-4-face)) 193 207 (fontified t face font-lock-string-face) 207 218 (fontified t face font-lock-string-face) 218 220 (fontified t) 220 224 (fontified t face font-lock-constant-face) 224 225 (fontified t face (rainbow-delimiters-depth-4-face)) 225 226 (fontified t face (rainbow-delimiters-depth-3-face)) 226 228 (fontified t) 228 232 (fontified t) 232 233 (fontified t face (rainbow-delimiters-depth-2-face)) 233 235 (fontified t) 235 239 (fontified t) 239 240 (fontified t face (rainbow-delimiters-depth-1-face)) 240 241 (fontified t) 241 242 (fontified t)) . 590) (undo-tree-id808 . -241) (undo-tree-id809 . -241) (undo-tree-id810 . -94) (undo-tree-id811 . -72) (undo-tree-id812 . -72) (undo-tree-id813 . -94) (undo-tree-id814 . -241) (undo-tree-id815 . -102) (undo-tree-id816 . -102) (undo-tree-id817 . -102) (undo-tree-id818 . -152) (undo-tree-id819 . -152) (undo-tree-id820 . -152) (undo-tree-id821 . -241) (undo-tree-id822 . -241) 831) nil (26217 34054 482023 311000) 0 nil])
([nil nil ((nil rear-nonsticky nil 814 . 815) (nil fontified nil 573 . 815) (573 . 815)) nil (26217 34054 481998 862000) 0 nil])
([nil nil ((573 . 581) (#("    " 0 4 (fontified t)) . 573)) nil (26217 34054 481995 869000) 0 nil])
([nil nil ((612 . 624) (#("    " 0 4 (fontified t)) . 612) 620) nil (26217 34054 481993 638000) 0 nil])
([nil nil ((640 . 656) (#("        " 0 8 (fontified t)) . 640) 656) nil (26217 34054 481990 982000) 0 nil])
([nil nil ((679 . 695) (#("        " 0 8 (fontified t)) . 679) 703) nil (26217 34054 481988 312000) 0 nil])
([nil nil ((727 . 743) (#("        " 0 8 (fontified t)) . 727) 753) nil (26217 34054 481985 365000) 0 nil])
([nil nil ((763 . 779) (#("        " 0 8 (fontified t)) . 763) 774) nil (26217 34054 481982 480000) 0 nil])
([nil nil ((784 . 800) (#("        " 0 8 (fontified t)) . 784) 803) nil (26217 34054 481979 97000) 0 nil])
([nil nil ((853 . 865) (#("    " 0 4 (fontified t)) . 853) 858) nil (26217 34054 481976 150000) 0 nil])
([nil nil ((868 . 876) (#("    " 0 4 (fontified t)) . 868) (undo-tree-id807 . -4) 872) nil (26217 34054 481973 239000) 0 nil])
([nil nil ((895 . 899) (894 . 896) (#("'" 0 1 (fontified nil)) . -894) (890 . 895) (889 . 890) (887 . 889) (#("p" 0 1 (fontified nil)) . -887) (undo-tree-id804 . -1) (#("u" 0 1 (fontified t)) . -888) (undo-tree-id805 . -1) (#("t" 0 1 (fontified t)) . -889) (undo-tree-id806 . -1) 890 (888 . 890) (887 . 888) (878 . 887) (877 . 878)) nil (26217 34054 481966 736000) 0 nil])
([nil nil ((#(" 
" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t)) . 901) (undo-tree-id803 . -1)) nil (26217 34054 481954 98000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 901) (undo-tree-id801 . -8) (undo-tree-id802 . -8)) nil (26217 34054 481949 940000) 0 nil])
([nil nil ((900 . 901)) nil (26217 34054 481943 558000) 0 nil])
([nil nil ((#("    return ld
" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 13 (fontified t) 13 14 (fontified t)) . 917) (undo-tree-id796 . -13) (undo-tree-id797 . -12) (undo-tree-id798 . -12) (undo-tree-id799 . -12) (undo-tree-id800 . -12) 929) nil (26217 34054 481940 883000) 0 nil])
([nil nil ((#("   #))
" 0 3 (fontified t) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 5 (fontified t face font-lock-comment-face) 5 6 (rear-nonsticky t fontified t face font-lock-comment-face) 6 7 (fontified t face font-lock-comment-face)) . 909) (undo-tree-id791 . -6) (undo-tree-id792 . -5) (undo-tree-id793 . -5) (undo-tree-id794 . 7) (undo-tree-id795 . -3) 912) nil (26217 34054 481929 301000) 0 nil])
([nil nil ((951 . 955) (947 . 951) (946 . 947) (945 . 947) (927 . 946) (#("c" 0 1 (fontified t)) . -927) (undo-tree-id771 . -1) (#("o" 0 1 (fontified t)) . -928) (undo-tree-id772 . -1) (#("n" 0 1 (fontified t)) . -929) (undo-tree-id773 . -1) (#("t" 0 1 (fontified t)) . -930) (undo-tree-id774 . -1) (#("a" 0 1 (fontified t)) . -931) (undo-tree-id775 . -1) (#("i" 0 1 (fontified t)) . -932) (undo-tree-id776 . -1) (#("n" 0 1 (fontified t)) . -933) (undo-tree-id777 . -1) (#("e" 0 1 (fontified t)) . -934) (undo-tree-id778 . -1) (#("r" 0 1 (fontified t)) . -935) (undo-tree-id779 . -1) (#("_" 0 1 (fontified nil)) . -936) (undo-tree-id780 . -1) (#("l" 0 1 (fontified nil)) . -937) (undo-tree-id781 . -1) (#("a" 0 1 (fontified nil)) . -938) (undo-tree-id782 . -1) (#("u" 0 1 (fontified nil)) . -939) (undo-tree-id783 . -1) (#("n" 0 1 (fontified t)) . -940) (undo-tree-id784 . -1) (#("c" 0 1 (fontified t)) . -941) (undo-tree-id785 . -1) (#("h" 0 1 (fontified nil)) . -942) (undo-tree-id786 . -1) (#("e" 0 1 (fontified t)) . -943) (undo-tree-id787 . -1) (#("r" 0 1 (fontified t)) . -944) (undo-tree-id788 . -1) 945 (927 . 945) (#("container_launcher" 0 18 (fontified nil)) . -927) (927 . 945) (926 . 927) (920 . 926) (#("lau" 0 3 (fontified nil)) . -920) (920 . 923) (#("launch" 0 6 (fontified t)) . -920) (undo-tree-id789 . -6) 926 (913 . 926) (909 . 913) (#("    " 0 4 (fontified nil)) . 908) (undo-tree-id790 . -4) (912 . 913) (908 . 912)) nil (26217 34054 481900 123000) 0 nil])
([nil nil ((#("    # ld = LaunchDescription()
" 0 3 (fontified t) 3 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 8 (fontified t face font-lock-comment-face) 8 28 (fontified t face font-lock-comment-face) 28 29 (fontified t face font-lock-comment-face) 29 30 (rear-nonsticky t fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id956 . -30) (undo-tree-id957 . 8) (undo-tree-id958 . -22) (undo-tree-id959 . -3) (undo-tree-id960 . -22) 243 (t 26217 34054 519276 379000)) nil (26217 34174 478372 278000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 221) (undo-tree-id952 . -4) (undo-tree-id953 . 5) (undo-tree-id954 . -3) (undo-tree-id955 . -5) 224) nil (26217 34174 478357 461000) 0 nil])
([nil nil ((#("    # ld.add_action(ComposableNodeContainer(
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 43 (fontified t face font-lock-comment-face) 43 44 (fontified t face font-lock-comment-face) 44 45 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id928 . -44) (undo-tree-id929 . 45) (undo-tree-id930 . -3) (undo-tree-id931 . -44) (undo-tree-id932 . -3) (undo-tree-id933 . -3) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . -3) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -3) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -45) 224) nil (26217 34174 478346 404000) 0 nil])
([nil nil ((#("    #     name='a_buncha_nodes',
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 10 (fontified t face font-lock-comment-delimiter-face) 10 15 (fontified t face font-lock-comment-face) 15 31 (fontified t face font-lock-comment-face) 31 32 (fontified t face font-lock-comment-face) 32 33 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id902 . -32) (undo-tree-id903 . 33) (undo-tree-id904 . -3) (undo-tree-id905 . -32) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -33) 224) nil (26217 34174 478302 170000) 0 nil])
([nil nil ((#("    #     namespace='',
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 10 (fontified t face font-lock-comment-delimiter-face) 10 20 (fontified t face font-lock-comment-face) 20 22 (fontified t face font-lock-comment-face) 22 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id876 . -23) (undo-tree-id877 . 24) (undo-tree-id878 . -3) (undo-tree-id879 . -23) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -24) 224) nil (26217 34174 478146 582000) 0 nil])
([nil nil ((#("    #     package='rclcpp_components',
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 10 (fontified t face font-lock-comment-delimiter-face) 10 18 (fontified t face font-lock-comment-face) 18 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id850 . -38) (undo-tree-id851 . 39) (undo-tree-id852 . -3) (undo-tree-id853 . -38) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -39) 224) nil (26217 34174 478098 552000) 0 nil])
([nil nil ((#("    #     executable='tester',
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 10 (fontified t face font-lock-comment-delimiter-face) 10 21 (fontified t face font-lock-comment-face) 21 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face)) . 221) (undo-tree-id823 . -30) (undo-tree-id824 . -22) (undo-tree-id825 . 31) (undo-tree-id826 . -3) (undo-tree-id827 . -30) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -31) 224) nil (26217 34174 478038 606000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -221) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) 225 (220 . 225) (t 26217 34174 520797 829000)) nil (26217 34176 836046 670000) 0 nil])
([nil nil ((#("# ..
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 5 (fontified t face font-lock-comment-face)) . 121) (undo-tree-id974 . -4) (undo-tree-id975 . -3) 124 (t 26217 34176 848439 89000)) nil (26217 34183 329666 405000) 0 nil])
([nil nil ((#("tester" 0 6 (fontified t face font-lock-string-face)) . 272) (undo-tree-id986 . -3) (undo-tree-id987 . -5) (t 26217 34183 339471 971000)) nil (26218 61132 554656 75000) 0 nil])
([nil nil ((278 . 288) (#("-" 0 1 (fontified t face font-lock-string-face)) . -278) (undo-tree-id985 . -1) 279 (272 . 279)) nil (26218 61132 554649 635000) 0 nil])
([nil nil ((#("test" 0 4 (fontified t face font-lock-string-face)) . 330) (undo-tree-id984 . -3)) nil (26218 61132 554644 841000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 330)) nil (26218 61132 554641 291000) 0 nil])
([nil nil ((#("pubsub" 0 6 (fontified t face font-lock-string-face)) . 330) (undo-tree-id983 . -5)) nil (26218 61132 554639 60000) 0 nil])
([nil nil ((338 . 347) (330 . 338)) nil (26218 61132 554635 161000) 0 nil])
([nil nil ((#("tester" 0 6 (fontified t face font-lock-string-face)) . 369) (undo-tree-id982 . -5)) nil (26218 61132 554632 559000) 0 nil])
([nil nil ((373 . 388) (#("o" 0 1 (fontified t face font-lock-string-face)) . -373) (undo-tree-id981 . -1) 374 (369 . 374)) nil (26218 61132 554628 88000) 0 nil])
([nil nil ((#("no" 0 2 (fontified t face font-lock-string-face)) . 520) (undo-tree-id979 . -1) (undo-tree-id980 . -2)) nil (26218 61132 554621 708000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 520) (undo-tree-id978 . -1)) nil (26218 61132 554615 34000) 0 nil])
([nil nil ((#("message" 0 7 (fontified t face font-lock-string-face)) . 520) (undo-tree-id976 . -6) (undo-tree-id977 . -7)) nil (26218 61132 554607 869000) 0 nil])
([nil nil ((520 . 531)) nil (26218 61132 554526 832000) 0 nil])
([nil current ((582 . 588) (578 . 582) (t 26218 61132 594412 102000)) nil (26218 61138 788059 411000) 0 nil])
nil
